{"version":3,"sources":["C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/angular-plus-materialize/dist/custom-event-polyfill.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/angular-plus-materialize/dist/index.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/angular-plus-materialize/dist/materialize-directive.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/angular-plus-materialize/dist/materialize-module.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/css-loader/lib/css-base.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/BehaviorSubject.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/InnerSubscriber.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Notification.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Observable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Observer.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/OuterSubscriber.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Subject.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/SubjectSubscription.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Subscriber.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Subscription.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/ArrayLikeObservable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/ArrayObservable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/ConnectableObservable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/EmptyObservable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/ForkJoinObservable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/FromObservable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/IteratorObservable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/PromiseObservable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/ScalarObservable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/forkJoin.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/from.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/fromPromise.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/merge.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/of.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/catch.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/concatAll.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/concatMap.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/every.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/filter.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/first.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/last.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/map.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/mergeAll.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/mergeMap.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/reduce.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/share.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/catchError.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/concatAll.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/concatMap.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/defaultIfEmpty.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/every.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/filter.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/first.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/last.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/map.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/mergeAll.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/mergeMap.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/multicast.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/observeOn.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/reduce.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/refCount.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/scan.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/share.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/takeLast.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/symbol/iterator.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/symbol/observable.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/symbol/rxSubscriber.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/ArgumentOutOfRangeError.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/EmptyError.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/ObjectUnsubscribedError.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/UnsubscriptionError.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/errorObject.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/identity.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isArray.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isArrayLike.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isFunction.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isObject.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isPromise.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isScheduler.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/noop.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/pipe.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/root.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/subscribeToResult.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/toSubscriber.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/tryCatch.js","(webpack)/buildin/global.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/common/esm2015/common.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/common/esm2015/http.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/compiler/esm2015/compiler.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/core/esm2015/core.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/forms/esm2015/forms.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/platform-browser-dynamic/esm2015/platform-browser-dynamic.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/platform-browser/esm2015/platform-browser.js","C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/router/esm2015/router.js"],"names":[],"mappings":";;;;;;AAAA;AACA,8CAA8C,cAAc;AAC5D;AACA,4BAA4B,oBAAoB;AAChD,4BAA4B,WAAW,qCAAqC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iD;;;;;;;;ACbA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;ACrBA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,2CAA2C,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qDAAqD,oFAAoF,EAAE;AAC3I;AACA;AACA;AACA;AACA;AACA,uDAAuD,oFAAoF,EAAE;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qDAAqD,oFAAoF,EAAE;AAC3I;AACA;AACA;AACA;AACA,6DAA6D,6FAA6F,EAAE;AAC5J,gEAAgE,gGAAgG,EAAE;AAClK,gEAAgE,gGAAgG,EAAE;AAClK;AACA;AACA,oGAAoG,sDAAsD;AAC1J;AACA;AACA;AACA;AACA;AACA,sCAAsC,mCAAmC;AACzE,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA,aAAa,IAAI;AACjB;AACA;AACA,mDAAmD;AACnD,KAAK,2BAA2B;AAChC,EAAE;AACF;AACA,cAAc,sBAAsB;AACpC,2BAA2B,qBAAqB;AAChD,4BAA4B,qBAAqB;AACjD,qBAAqB,qBAAqB;AAC1C,kCAAkC,qBAAqB;AACvD;AACA;AACA,iD;;;;;;;;ACnQA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA,8C;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD,IAAI;AACJ;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA,YAAY,oBAAoB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD,cAAc;;AAElE;AACA;;;;;;;;;;;AC3EkB;AACgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,2C;;;;;;;;;ACnCqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,2C;;;;;;;;;AC1BqB;AACrB;AACA,mDAAmD,iBAAiB;AACpE;AACA,SAAS,kBAAkB,GAAG,oBAAoB,GAAG,gBAAgB;AACrE;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA,eAAe,yBAAyB;AACxC,eAAe,yBAAyB;AACxC,eAAe,iBAAiB;AAChC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kCAAkC;AACjD;AACA,eAAe,yBAAyB;AACxC,eAAe,iBAAiB;AAChC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA,wC;;;;;;;;;;;;AC3He;AACQ;AACmB;AAClB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,aAAa;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,eAAe;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA,uFAAuF,gBAAgB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,kBAAkB;AAClB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,mBAAmB;AAClC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA,sC;;;;;;;;ACvSA;AACA;AACA,iBAAiB,EAAE;AACnB,gBAAgB,WAAW,EAAE;AAC7B,gBAAgB;AAChB;AAAA;AAAA;AACA,oC;;;;;;;;;ACNqB;AACrB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,2C;;;;;;;;;;;;;;ACjBqB;AACA;AACE;AACW;AACJ;AACe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,mC;;;;;;;;;ACxJuB;AACvB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,+C;;;;;;;;;;;;AC9BqB;AACE;AACU;AACY;AAC7C;AACA,mBAAmB,eAAe;AAClC,IAAI,mBAAmB,mBAAmB,eAAe;AACzD,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kCAAkC;AACjD;AACA,eAAe,wBAAwB;AACvC;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAA4B,aAAa;AACzC;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,eAAe,wBAAwB;AACvC;AACA,eAAe,iBAAiB;AAChC;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B,yCAAyC,YAAY;AACrD;AACA,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;;;AC5PkB;AACC;AACE;AACF;AACG;AACQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,kDAAkD;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,wC;;;;;;;;;;;AC7LqB;AACM;AACD;AAC1B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uCAAuC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,+C;;;;;;;;;;;;AC5DqB;AACM;AACD;AACJ;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,aAAa;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,eAAe,KAAK;AACpB,eAAe,UAAU,gBAAgB,iBAAiB;AAC1D;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kCAAkC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,2C;;;;;;;;;;;;;AC5G4B;AACP;AACA;AACE;AACmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,gBAAgB,2BAA2B;AAC3C,eAAe,8BAA8B;AAC7C,kBAAkB,8BAA8B;AAChD,iBAAiB,qCAAqC;AACtD,kBAAkB,sDAAsD;AACxE,iBAAiB,qCAAqC;AACtD,cAAc,kCAAkC;AAChD,eAAe;AACf;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iD;;;;;;;;;AC3JqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,eAAe,UAAU,gBAAgB,iBAAiB;AAC1D;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA,oEAAoE,aAAa;AACjF;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,2C;;;;;;;;;;;;;ACvEqB;AACK;AACR;AACU;AACF;AAC1B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA,eAAe,yBAAyB;AACxC;AACA,eAAe,SAAS;AACxB;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qCAAqC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;;;;;;;;;;;;;;;;;;;AC1LkB;AACI;AACF;AACQ;AACC;AACH;AACI;AACQ;AACjB;AACS;AACY;AAC1C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,eAAe,mBAAmB;AAClC;AACA;AACA,eAAe,UAAU;AACzB;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,0C;;;;;;;;;;;AChHe;AACM;AACiB;AACtC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wCAAwC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;;;;;;;;;;ACnJe;AACM;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA,eAAe,eAAe;AAC9B,eAAe,UAAU;AACzB;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+FAA2C,WAAW,EAAE;AACxD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gEAAgE,gCAAgC;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,oBAAoB;AAChG;AACA,iBAAiB;AACjB;AACA,6EAA6E,kBAAkB;AAC/F;AACA,iBAAiB;AACjB;AACA;AACA,+FAA2C,WAAW,EAAE;AACxD,iBAAiB;AACjB;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B;AACA;AACA;AACA;AACA,6C;;;;;;;;;AC9GqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,4C;;;;;;;;;AChD6B;AAC7B;AAAA;AAAA;AACA,oC;;;;;;;;;ACFyB;AACzB;AAAA;AAAA;AACA,gC;;;;;;;;;ACF4B;AAC5B;AAAA;AAAA;AACA,uC;;;;;;;;;;;;;ACFqB;AACK;AACJ;AACH;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,mBAAmB;AAC9B,WAAW,OAAO;AAClB;AACA,WAAW,UAAU;AACrB;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;ACnF0B;AAC1B;AAAA;AAAA;AACA,8B;;;;;;;;;;ACFoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;AC/DmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;ACrD4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,oDAAoD;AAC/D;AACA;AACA,WAAW,oFAAoF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;AChE+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,WAAW,SAAS;AACpB,WAAW,IAAI;AACf,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;AClBsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,2CAA2C;AACtD;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;AC5C+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,WAAW;AACvB;AACA;AACA,WAAW,kEAAkE;AAC7E;AACA,WAAW,qCAAqC;AAChD;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;ACrD8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA,WAAW,SAAS;AACpB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;ACtBgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,qCAAqC;AAChD;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;;;;;;;;;;ACrCkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,OAAO;AAClB;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;AChD0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,oDAAoD;AAC/D;AACA;AACA,WAAW,oFAAoF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;AC/DsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW,uBAAuB,WAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,6CAA6C;AACxD;AACA,WAAW,EAAE;AACb,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;ACzD+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;ACrB0B;AACE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;ACzGmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;ACpDmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,oDAAoD;AAC/D;AACA;AACA,WAAW,oFAAoF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;AChEqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,IAAI;AACf;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C;;;;;;;;;;ACjEqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,WAAW,SAAS;AACpB,WAAW,IAAI;AACf,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;AC/DqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,2CAA2C;AACtD;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;ACnFqB;AACA;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,WAAW;AACvB;AACA;AACA,WAAW,kEAAkE;AAC7E;AACA,WAAW,qCAAqC;AAChD;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;AC7IqB;AACA;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA,WAAW,SAAS;AACpB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;AC5GqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA,WAAW,qCAAqC;AAChD;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;;;;;;;;;;;AC7EmB;AACA;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,OAAO;AAClB;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;ACjD4B;AACF;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,oDAAoD;AAC/D;AACA;AACA,WAAW,oFAAoF;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,oC;;;;;;;;;;AC7J0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,qC;;;;;;;;;;;ACtDqB;AACE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,IAAI;AACJ;AACA,SAAS;AACT;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,qC;;;;;;;;;;;;;ACjGe;AACI;AACM;AACV;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW,uBAAuB,WAAW;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,6CAA6C;AACxD;AACA,WAAW,EAAE;AACb,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kC;;;;;;;;;;AClEqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;AC1EqB;AACrB;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,WAAW,6CAA6C;AACxD;AACA,WAAW,IAAI;AACf,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;ACzGoB;AACD;AACD;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;ACtBqB;AACa;AACR;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA,YAAY,wBAAwB;AACpC;AACA;AACA,WAAW,OAAO;AAClB;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;AClGe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,oC;;;;;;;;;;ACnCe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,sC;;;;;;;;;ACvBe;AACf;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,wC;;;;;;;;ACRA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,mD;;;;;;;;AClBA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,sC;;;;;;;;AClBA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,mD;;;;;;;;ACjBA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,IAAI,0BAA0B,MAAM,IAAI,eAAe,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA,+C;;;;;;;;AChBA;AACA,qBAA4B,MAAM;AAAA;AAAA;AAClC,uC;;;;;;;;;ACFA;AACA;AACA;AACA,oC;;;;;;;;ACHA;AAAA;AAAA;AACA,mC;;;;;;;;ACDA;AAAA;AAAA;AACA,uC;;;;;;;;;ACDA;AACA;AACA;AACA,sC;;;;;;;;;ACHA;AACA;AACA;AACA,oC;;;;;;;;;ACHA;AACA;AACA;AACA,qC;;;;;;;;;ACHA;AACA;AACA;AACA,uC;;;;;;;;ACHA;AAAA;AACA,iBAAwB;AACxB,gC;;;;;;;;;;;ACFe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;8CCjBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR,gC;;;;;;;;;;;;;;;;;;ACjBe;AACO;AACF;AACD;AACE;AACiB;AACZ;AACgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gCAAgC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kFAAmC,WAAW,EAAE;AAChD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8HAAmE,OAAO;AAC1E,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA;AACA;AACA,6C;;;;;;;;;;;;AC5EqB;AACwB;AACZ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;ACjBsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;AChBA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAAA;AACA;AACA;AACA;AACA;AACmX;;AAEnX;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gBAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA,IAAI,wBAAwB,yBAAyB,gBAAgB;AACrE,WAAW,cAAc,sEAAsE;AAC/F,UAAU;AACV,IAAI,gBAAgB,IAAI,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4BAA4B,MAAM,4BAA4B;AAClE;AACA,uCAAuC,gBAAgB;AACvD;AACA,gCAAgC,cAAc,KAAK,gBAAgB;AACnE;AACA;AACA,kBAAkB,4BAA4B;AAC9C,mCAAmC,4BAA4B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4BAA4B;AAChC;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,cAAc;AACzB;AACA;AACA,kBAAkB,4CAA4C;AAC9D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,kCAAkC;AACjD;AACA;AACA,gBAAgB;AAChB;AACA,YAAY,+BAA+B;AAC3C;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,wCAAwC,mDAAmD;AAC3F;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,0BAA0B;AAC/B;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB;AACxD,IAAI,gBAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,uBAAuB;AAC1C;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,kCAAkC;AACjD;AACA,gBAAgB;AAChB;AACA,YAAY,+BAA+B;AAC3C;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,0BAA0B;AAC/B,KAAK,gCAAgC,gEAAiB,GAAG,sFAAuC,IAAI;AACpG;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB;AACxD,IAAI,gBAAgB;AACpB;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,uBAAuB;AAC1C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B,wCAAwC,SAAS,EAAE,KAAK;AACxD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,kCAAkC;AACjD;AACA,gBAAgB;AAChB;AACA,YAAY,+BAA+B;AAC3C;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,0BAA0B;AAC/B,KAAK,gCAAgC,gEAAiB,GAAG,sFAAuC,IAAI;AACpG;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzcAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE,GAAG,EAAE;AACjB;AACA,UAAU,EAAE,SAAS,EAAE;AACvB;AACA,iBAAiB;AACjB;AACA;AACA,uBAAuB,EAAE,4CAA4C,EAAE;AACvE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,8CAA8C;AAClD;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,0BAA0B,EAAE;AACnD,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,0BAA0B,EAAE;AACnD,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,4BAA4B,EAAE;AACrD,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,0BAA0B,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,0FAA0F,EAAE;AAC5F,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,oBAAoB,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE;AAC7C,MAAM,GAAG,EAAE;AACX,kEAAkE,EAAE,GAAG,EAAE;AACzE;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA,wBAAwB,EAAE,OAAO,EAAE,kCAAkC,EAAE,GAAG,EAAE;AAC5E;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,oCAAoC,EAAE;AAC7D;AACA;AACA;AACA;AACA,QAAQ,oBAAoB;AAC5B;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,QAAQ,gBAAgB;AACxB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qEAAqE,uBAAuB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAA8C;AAC1D;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gCAAgC,oCAAoC;AACpE;AACA;AACA;AACA;AACA,YAAY,8CAA8C;AAC1D;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,qBAAqB,EAAE,gCAAgC,EAAE;AACzD;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,cAAc,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE,cAAc,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,MAAM;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC,iIAAmC,IAAI;AAC5E,KAAK,gCAAgC,gEAAiB,GAAG,6FAA8C,IAAI;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA,qBAAqB,EAAE,mBAAmB,EAAE;AAC5C,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvcAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,0BAA0B,EAAE,gCAAgC;AAC5D,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,8CAA8C;AAC/E;AACA;AACA;AACA,iCAAiC,8BAA8B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE,2DAA2D,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,2DAA2D,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,+EAAwB;AACzH;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK,yEAA0B,wBAAwB,IAAI;AAC3D;AACA;AACA;AACA,KAAK,wEAAyB;AAC9B,KAAK,wEAAyB;AAC9B,KAAK,mEAAoB;AACzB,KAAK,kEAAmB;AACxB;AACA;AACA,eAAe,+EAAgC;AAC/C,iBAAiB,6DAAc;AAC/B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,kCAAkC,IAAI;AACrE;AACA;AACA;AACA,KAAK,yEAA0B;AAC/B;AACA;AACA,2BAA2B,6DAAc;AACzC,mCAAmC,6DAAc;AACjD,kCAAkC,6DAAc;AAChD,0CAA0C,6DAAc;AACxD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,yBAAyB;AAC1C;AACA,gBAAgB;AAChB;AACA,gBAAgB,sCAAsC;AACtD;AACA,gBAAgB;AAChB;AACA,gBAAgB,6BAA6B;AAC7C;AACA,gBAAgB;AAChB;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,YAAY;AACvE,QAAQ,GAAG,GAAG,cAAc,IAAI,MAAM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,2BAA2B,EAAE,4BAA4B,EAAE;AAC3D,yEAAyE,mBAAmB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,wBAAwB,wBAAwB;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC,+EAA+E,MAAM,aAAa,+BAA+B;AACjI;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,iCAAiC,EAAE,gGAAgG,EAAE;AACrI,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,sBAAsB,EAAE;AAC3D;AACA,iCAAiC,EAAE,iDAAiD,EAAE;AACtF;AACA;AACA,SAAS;AACT,4BAA4B,EAAE,UAAU,yBAAyB;AACjE;AACA;AACA,4BAA4B,EAAE,sBAAsB,EAAE,sCAAsC,UAAU;AACtG,6BAA6B,EAAE,yBAAyB,EAAE;AAC1D;AACA;AACA;AACA;AACA,6BAA6B,EAAE,yBAAyB,EAAE;AAC1D;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,+BAA+B,IAAI;AAClE;AACA;AACA;AACA,KAAK,yEAA0B;AAC/B,KAAK,oEAAqB;AAC1B,KAAK,wEAAyB;AAC9B;AACA;AACA,iBAAiB,6DAAc;AAC/B,sBAAsB,6DAAc;AACpC,uBAAuB,6DAAc;AACrC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4BAA4B,IAAI,6BAA6B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mBAAmB,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,qBAAqB,IAAI;AACxD;AACA;AACA;AACA,KAAK,yEAA0B;AAC/B,KAAK,oEAAqB;AAC1B;AACA;AACA,cAAc,6DAAc;AAC5B,kBAAkB,6DAAc;AAChC,kBAAkB,6DAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gCAAgC,EAAE,UAAU,+BAA+B;AAC3E,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,yBAAyB,IAAI;AAC5D;AACA;AACA;AACA;AACA,kBAAkB,6DAAc;AAChC;AACA;AACA;AACA;AACA,2EAA2E,gBAAgB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gBAAgB;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,sEAAsE;AACvF;AACA;AACA,KAAK,yEAA0B,6BAA6B,IAAI;AAChE;AACA;AACA;AACA,KAAK,yEAA0B;AAC/B,KAAK,oEAAqB;AAC1B,KAAK,+BAA+B,4DAAa,IAAI;AACrD;AACA;AACA,sBAAsB,6DAAc;AACpC;AACA;AACA;AACA,4DAA4D,gBAAgB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gBAAgB;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,gCAAgC,IAAI;AACnE;AACA;AACA;AACA,KAAK,yEAA0B;AAC/B,KAAK,oEAAqB;AAC1B,KAAK,+BAA+B,4DAAa,IAAI;AACrD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,qCAAqC;AACrE;AACA,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,yBAAyB,IAAI;AAC5D;AACA;AACA;AACA,KAAK,wBAAwB;AAC7B;AACA;AACA,kBAAkB,6DAAc;AAChC;AACA;AACA;AACA;AACA,2EAA2E,gBAAgB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gBAAgB;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA,KAAK,yEAA0B,6BAA6B,IAAI;AAChE;AACA;AACA;AACA,KAAK,gCAAgC,0FAA2C,IAAI;AACpF,KAAK,oEAAqB;AAC1B,KAAK,yEAA0B;AAC/B,KAAK,+BAA+B,4DAAa,IAAI;AACrD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2CAA2C,MAAM,EAAE,KAAK;AACxD,2EAA2E,EAAE;AAC7E;AACA;AACA;AACA,KAAK,yEAA0B,wBAAwB,IAAI;AAC3D;AACA;AACA;AACA,KAAK,wEAAyB;AAC9B,KAAK,mEAAoB;AACzB,KAAK,kEAAmB;AACxB;AACA;AACA,iBAAiB,6DAAc;AAC/B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,2DAA2D;AACtF,yBAAyB,EAAE,0DAA0D;AACrF;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE;AAC9B,wBAAwB,EAAE,qDAAqD,EAAE;AACjF;AACA;AACA;AACA;AACA,KAAK,yEAA0B,iCAAiC,IAAI;AACpE;AACA;AACA;AACA,KAAK,yEAA0B;AAC/B;AACA;AACA,iCAAiC,6DAAc;AAC/C,0BAA0B,6DAAc;AACxC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI;AAClN,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,6BAA6B,IAAI,IAAI;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,uDAAuD,KAAK;AAC5D;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,+BAA+B,yCAAyC;AACxE,+BAA+B,qCAAqC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gEAAgE,EAAE;AAClE;AACA,wDAAwD,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,2DAA2D,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,MAAM;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,0CAA0C,MAAM,cAAc,wEAAiB;AAC/E;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,iBAAiB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8CAA8C;AAC5D;AACA;AACA,cAAc,8CAA8C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,EAAE,IAAI,IAAI,IAAI,IAAI;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,2BAA2B,IAAI;AACzD;AACA;AACA;AACA,KAAK,gCAAgC,iIAAmC,IAAI;AAC5E;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,+CAA+C;AAC/C,eAAe,yGAAyG;AACxH,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,oCAAoC,0CAA0C;AAC9E;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,oCAAoC,0CAA0C;AAC9E;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qBAAqB,EAAE,eAAe;AACtC;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,4DAA4D,mBAAmB;AAC/E;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,EAAE,IAAI,IAAI,IAAI,IAAI;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,2BAA2B,IAAI;AACzD;AACA;AACA;AACA,KAAK,gCAAgC,iIAAmC,IAAI;AAC5E;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,WAAW;AAClC,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA,cAAc,qBAAqB;AACnC;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,sBAAsB,EAAE;AACxB,2CAA2C,EAAE;AAC7C;AACA,wBAAwB,EAAE,UAAU,qBAAqB;AACzD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,yBAAyB,EAAE,+EAA+E,EAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE,6BAA6B,EAAE,uBAAuB,EAAE;AAC7E,mBAAmB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gCAAgC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,wEAAwE,QAAQ,gCAAgC,QAAQ;AACxH;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,4BAA4B,EAAE,gBAAgB,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,aAAa;AACrD;AACA;AACA;AACA;AACA,gCAAgC,EAAE,UAAU,aAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,yCAAyC;AACnD;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,qBAAqB,EAAE;AACvB;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,iBAAiB,IAAI;AAC/C;AACA;AACA;AACA,KAAK,gCAAgC,iIAAmC,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,kBAAkB,IAAI;AAChD;AACA;AACA;AACA,KAAK,gCAAgC,iIAAmC,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,mBAAmB,IAAI;AACjD;AACA;AACA;AACA,KAAK,gCAAgC,iIAAmC,IAAI;AAC5E;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gCAAgC,yCAAyC,SAAS,EAAE,EAAE;AACtF;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,4BAA4B;AACvD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,4BAA4B;AACzD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mDAAmD,SAAS,EAAE;AAC9D;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B;AAC3B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,6BAA6B,IAAI;AAC3D;AACA;AACA;AACA,KAAK,0EAA2B;AAChC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,oBAAoB,IAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,oBAAoB,IAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,oBAAoB,IAAI;AAClD;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,iBAAiB;AAC5F;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,KAAK,oEAAqB,iCAAiC,IAAI;AAC/D;AACA;AACA;AACA,KAAK,wBAAwB;AAC7B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,iCAAiC,IAAI;AAC/D;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,uCAAuC;AAC7D;AACA;AACA,KAAK,oEAAqB,4BAA4B,IAAI;AAC1D;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAiB,EAAE,kBAAkB,EAAE,kBAAkB;AACvE;AACA;AACA;AACA,2EAA2E,iBAAiB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,iBAAiB,IAAI;AAC/C;AACA;AACA;AACA,KAAK,gCAAgC,iIAAmC,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC,2EAA2E,iBAAiB;AAC5F;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,kBAAkB,IAAI;AAChD;AACA;AACA;AACA,KAAK,gCAAgC,iIAAmC,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC,2EAA2E,iBAAiB;AAC5F;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,4BAA4B,EAAE;AAC3D;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,oEAAqB,mBAAmB,IAAI;AACjD;AACA;AACA;AACA,KAAK,gCAAgC,iIAAmC,IAAI;AAC5E;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,sDAAsD;AACzE;AACA;AACA,KAAK,oEAAqB,6BAA6B,IAAI;AAC3D;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,YAAY,GAAG,eAAe;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,0DAA0D;AAC/E;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,6BAA6B,8CAA8C;AAC3E,aAAa,IAAI;AACjB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEQ;AACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACz5LA;AAAA;AACA;AACA;AACA;AACA;AAC8E;AACjE;AACO;AACH;AACH;AACwB;AACjB;;AAErB;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA,yCAAyC,EAAE;AAC3C,yCAAyC,EAAE;AAC3C,yCAAyC,EAAE;AAC3C;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C,qDAAqD,EAAE;AACvD,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,+BAA+B,EAAE,uBAAuB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,iCAAiC,EAAE,0BAA0B,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,0CAA0C,EAAE,kDAAkD,EAAE;AAChG;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,4BAA4B;AAC9C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,4BAA4B;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,8BAA8B;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,qCAAqC,EAAE,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,wBAAwB,EAAE,+BAA+B,YAAY,EAAE;AAC1G;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE,qBAAqB,EAAE;AAClD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,oBAAoB,wBAAwB,EAAE;AACxE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,oBAAoB,wBAAwB,EAAE;AACrE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,0BAA0B,oBAAoB,wBAAwB,EAAE;AACxE;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,8BAA8B,EAAE,iBAAiB,EAAE;AACnD,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,sCAAsC,EAAE,MAAM,wBAAwB;AACjG;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,EAAE,qCAAqC,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,0CAA0C,YAAY,EAAE;AACnM;AACA;AACA;AACA;AACA,yCAAyC,EAAE,2CAA2C,EAAE;AACxF,6CAA6C,EAAE,sBAAsB,YAAY,EAAE;AACnF;AACA;AACA;AACA;AACA,2CAA2C,EAAE,sBAAsB,EAAE;AACrE,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,2DAA2D,EAAE;AAC7D;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,qBAAqB;AACrB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,4EAA4E,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA,wEAAwE,EAAE;AAC1E;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,4BAA4B;AAC1F;AACA;AACA;AACA,6CAA6C,4BAA4B,IAAI,YAAY,GAAG,gBAAgB;AAC5G;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oCAAoC;AACpC,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE,MAAM,6BAA6B;AAC5F;AACA;AACA;AACA,oDAAoD,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,iBAAiB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,4BAA4B;AAC5B,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,yBAAyB;AACzB,mDAAmD,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,0BAA0B;AAC1B,oDAAoD,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,qBAAqB;AAC1B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,6BAA6B,gBAAgB,EAAE;AACnE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE,gEAAgE,SAAS;AACxG;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,8BAA8B;AACnC,KAAK,gCAAgC,kIAAkC,IAAI;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,4BAA4B;AACjC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,gBAAgB;AAChB;AACA,aAAa,mBAAmB,EAAE,6BAA6B;AAC/D;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA,8CAA8C,EAAE;AAChD;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA,iCAAiC,EAAE;AACnC;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,yDAAyD,mCAAmC;AAC5F;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,qBAAqB,mCAAmC;AACxD;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,EAAE,MAAM,oBAAoB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,oBAAoB;AACzB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC,kIAAkC,IAAI;AAC3E,KAAK,gCAAgC,mIAAqC,IAAI;AAC9E,KAAK,gCAAgC,yFAA0C,IAAI;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC;AACrC,KAAK,gCAAgC,yFAA0C,IAAI;AACnF;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAA0D;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,mCAAmC;AACnC;AACA;AACA;AACA,sCAAsC,0DAA0D;AAChG,sCAAsC,0DAA0D;AAChG;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,qBAAqB,4EAA4E;AACjG,qBAAqB,qEAAqE;AAC1F,qBAAqB,oDAAoD;AACzE,qBAAqB,sDAAsD;AAC3E;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB,oDAAoD;AACzE;AACA,qBAAqB,+CAA+C;AACpE;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,qBAAqB,kEAAkE;AACvF,qBAAqB,sEAAsE;AAC3F;AACA,aAAa,IAAI;AACjB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEQ;AACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/qEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,gEAAgE,QAAQ;AACxE,+EAA+E,cAAc;AAC7F;AACA;AACA;AACA,sBAAsB;AACtB,8EAA8E,gBAAgB;AAC9F;AACA;AACA;AACA,kBAAkB;AAClB,yFAAyF,qBAAqB,iEAAiE;AAC/K,mFAAmF,qBAAqB,+DAA+D;AACvK,mFAAmF,qBAAqB,+DAA+D;AACvK,6FAA6F,8DAA8D;AAC3J;AACA;AACA;AACA,sBAAsB;AACtB,kEAAkE;AAClE;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qBAAqB,mDAAmD;AACxI;AACA;AACA;AACA,iBAAiB;AACjB,sEAAsE,aAAa;AACnF;AACA;AACA;AACA,kBAAkB;AAClB,4EAA4E,sBAAsB;AAClG;AACA;AACA;AACA,mBAAmB;AACnB,8EAA8E,sBAAsB;AACpG;AACA;AACA;AACA,wBAAwB;AACxB,qFAAqF,mBAAmB;AACxG;AACA;AACA;AACA,yBAAyB;AACzB,sFAAsF,kBAAkB;AACxG;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,sBAAsB;AACtB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,0BAA0B;AAC1B,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,yBAAyB,EAAE;AAC3B,8BAA8B,uBAAuB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;AAIlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yCAAyC,mDAAmD,EAAE;AAC9F;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,cAAc;AAClD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,0BAA0B,sDAAsD,EAAE;AAClF;AACA,2FAA2F,EAAE;AAC7F;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,gBAAgB,EAAE;AAClB;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mCAAmC;AACnC;AACA,iDAAiD;AACjD;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,cAAc,oBAAoB;AAC5D,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB,OAAO,GAAG,KAAK;AACrC;AACA;AACA,uBAAuB,KAAK,GAAG,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,mBAAmB;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC;AACzC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC;AAChC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC;AACjC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mBAAmB,kBAAkB,0BAA0B;AACjG,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,4BAA4B,EAAE;AAC9B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,iBAAiB,wLAAwL,KAAK;AAC9M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uFAAuF,qBAAqB;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE,wCAAwC,kBAAkB;AACrF,yBAAyB,EAAE,cAAc,gBAAgB,IAAI,KAAK,EAAE,aAAa;AACjF,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,kCAAkC,sBAAsB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,gBAAgB,sBAAsB,EAAE,GAAG,sBAAsB;AACpF;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,yBAAyB,gBAAgB,sBAAsB,EAAE;AACjE;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,uBAAuB,gBAAgB,sBAAsB,EAAE;AAC/D;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,cAAc,gBAAgB,sBAAsB,EAAE;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,iBAAiB,+BAA+B,KAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,iBAAiB,sKAAsK;AACvL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,sNAAsN;AACzO,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,aAAa;AACb;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB;AACA,iBAAiB,+PAA+P;AAChR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,iBAAiB,+LAA+L;AAChN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,wBAAwB,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6BAA6B,qCAAqC;AAClE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,wBAAwB,2DAA2D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,2BAA2B,EAAE;AAC7B,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,qBAAqB,iCAAiC,GAAG,6BAA6B;AACtF;AACA;AACA,qBAAqB,6BAA6B,GAAG,8BAA8B;AACnF;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,2BAA2B,EAAE;AACpD,qBAAqB,EAAE;AACvB,+BAA+B,GAAG,EAAE,SAAS;AAC7C;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,2BAA2B,6BAA6B,GAAG,8BAA8B;AACzF;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,wCAAwC;AACzD;AACA,gBAAgB;AAChB;AACA,gBAAgB,qBAAqB;AACrC;AACA,gBAAgB;AAChB;AACA,gBAAgB,wCAAwC;AACxD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,+CAA+C;AAClE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,6BAA6B,QAAQ;AACnE,2BAA2B,EAAE;AAC7B;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gBAAgB,sBAAsB;AACtC;AACA,gBAAgB;AAChB;AACA,WAAW,mBAAmB,EAAE,wBAAwB;AACxD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,4BAA4B,EAAE;AAC9B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mBAAmB;AACnB;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC;AAChC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qDAAqD,kBAAkB,EAAE;AACzE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sCAAsC;AACtC;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,WAAW;AAChD;AACA,wBAAwB,EAAE,UAAU,kBAAkB;AACtD;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qCAAqC,WAAW;AAChD;AACA;AACA,yBAAyB,EAAE,uBAAuB,EAAE;AACpD,yBAAyB,EAAE,qBAAqB,EAAE;AAClD;AACA;AACA;AACA,qCAAqC,MAAM,MAAM,IAAI;AACrD;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,MAAM;;AAEtE;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0EAA0E,WAAW,GAAG;AACxF;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,OAAO,GAAG,UAAU;AAC5C;AACA;AACA;AACA;AACA,cAAcaAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE,4BAA4B,EAAE;AACnD,mBAAmB,EAAE,0BAA0B,EAAE;AACjD,mBAAmB,EAAE,yBAAyB,EAAE;AAChD,mBAAmB,EAAE;AACrB,mBAAmB,EAAE,2BAA2B,EAAE;AAClD;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,mCAAmC;AACrD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,0BAA0B,EAAE;AACvD,oDAAoD,EAAE;AACtD,8DAA8D,6CAA6C,EAAE,8BAA8B,EAAE;AAC7I;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,sCAAsC,qCAAqC;AAC3E;AACA;AACA,0EAA0E,qCAAqC;AAC/G;AACA;AACA;AACA;AACA,6EAA6E,qCAAqC;AAClH;AACA;AACA;AACA,qEAAqE,qCAAqC;AAC1G;AACA;AACA;AACA,8EAA8E,qCAAqC;AACnH;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,qFAAqF,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,mEAAmE,EAAE;AAChG,yBAAyB,EAAE,6EAA6E,sCAAsC,GAAG,QAAQ,uCAAuC,EAAE,GAAG,wCAAwC;AAC7O;AACA,6BAA6B,EAAE;AAC/B,yDAAyD,YAAY;AACrE;AACA,yBAAyB,EAAE,sFAAsF,+DAA+D;AAChL,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE,8EAA8E,kFAAkF;AAC3L,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,iEAAiE,qEAAqE;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE,4BAA4B,EAAE;AAC7D,6BAA6B,EAAE;AAC/B;AACA,kDAAkD,sCAAsC;AACxF,SAAS;AACT,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE,4BAA4B,EAAE;AAC7D;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6BAA6B,EAAE,0EAA0E,6CAA6C;AACtJ;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,2BAA2B,EAAE;AACxD,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE;AAC/B;AACA;AACA,SAAS;AACT,8CAA8C,mEAAmE;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,2BAA2B;AAC7D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,aAAa;AAC7C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,aAAa;AAC/C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,aAAa;AAC1C;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,gEAAgE,gBAAgB;AAChF;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,mCAAmC,SAAS,IAAI,0BAA0B;AAC1E;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,oCAAoC,SAAS,IAAI,2BAA2B;AAC5E;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6BAA6B;AAC1D;AACA;AACA,6BAA6B,SAAS;AACtC;AACA,aAAa;AACb,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC,yBAAyB,uBAAuB,SAAS,SAAS,GAAG,eAAe;AACpF,aAAa;AACb,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,sCAAsC,EAAE,8BAA8B;AACnG;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,4BAA4B,EAAE,4BAA4B,QAAQ;AAClE,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,kDAAkD;AAC7E,yBAAyB,EAAE,wDAAwD;AACnF;AACA,6BAA6B,EAAE,sBAAsB,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,uBAAuB,QAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,sCAAsC;AACtD;AACA,gBAAgB;AAChB;AACA,gBAAgB,sCAAsC;AACtD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,0CAA0C;AAC9D;AACA,gBAAgB;AAChB;AACA,iBAAiB,uCAAuC;AACxD;AACA,gBAAgB;AAChB;AACA,oBAAoB,iEAAiE;AACrF;AACA,gBAAgB;AAChB;AACA,mBAAmB,gEAAgE;AACnF;AACA,gBAAgB;AAChB;AACA,qBAAqB,kEAAkE;AACvF;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,kEAAkE;AACvF;AACA,gBAAgB;AAChB;AACA,sBAAsB,mEAAmE;AACzF;AACA,gBAAgB;AAChB;AACA,qBAAqB,kEAAkE;AACvF;AACA,gBAAgB;AAChB;AACA,eAAe,qCAAqC;AACpD;AACA,gBAAgB;AAChB;AACA,gBAAgB,2DAA2D;AAC3E;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,mCAAmC,EAAE;AAChE,uBAAuB,EAAE,iCAAiC,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,0BAA0B;AAC7E;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB;AACvB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA,wEAAwE,IAAI;AAC5E;AACA,wCAAwC,EAAE,UAAU,OAAO;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB;AACvB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uDAAuD,QAAQ,aAAa,SAAS,kBAAkB,WAAW;AAClH;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ,GAAG,YAAY,IAAI,MAAM,OAAO,YAAY;AAC5F;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oCAAoC,aAAa;AACjD;AACA,gBAAgB;AAChB;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oCAAoC,0CAA0C;AAC9E;AACA,gBAAgB;AAChB;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oCAAoC,0CAA0C;AAC9E;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oCAAoC,yCAAyC;AAC7E;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oCAAoC,yCAAyC;AAC7E;AACA,gBAAgB;AAChB;AACA,gBAAgB,WAAW,YAAY,MAAM,cAAc,EAAE;AAC7D;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,+BAA+B;AAC/B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC;AACpC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC;AACrC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC;AACzC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sCAAsC;AACtC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC;AACnC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC;AACrC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC;AACnC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC;AACzC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC;AACnC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sCAAsC;AACtC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC;AACrC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sCAAsC;AACtC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uCAAuC;AACvC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC;AACzC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,gDAAgD;AAC9E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC,aAAa;AACtD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,2CAA2C;AAC9E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC,aAAa;AACtD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC,YAAY;AACrD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,iBAAiB;AACzD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,qBAAqB;AAClD;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,2BAA2B,EAAE;AACtD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,oCAAoC,EAAE;AACtC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,iCAAiC,2BAA2B,EAAE;AAC9D;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,gCAAgC,2BAA2B,EAAE;AAC7D;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,8BAA8B,EAAE;AAChC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,oCAAoC,EAAE;AACtC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,6BAA6B,uBAAuB,EAAE;AACtD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,iCAAiC,uBAAuB,EAAE;AAC1D;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,gCAAgC,qBAAqB,EAAE;AACvD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,EAAE;AAC3B;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,oCAAoC,qBAAqB,EAAE;AAC3D,KAAK;AACL;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,wEAAwE,iBAAiB;AACzF;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,8BAA8B;AACtE,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,kBAAkB;AAC1D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mHAAmH,kEAAkE;AACrL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,sBAAsB;AAC9D,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,oDAAoD,0BAA0B,EAAE,wBAAwB,sDAAsD,kEAAkE;AAChO;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,kBAAkB;AAC1D;AACA;AACA,mBAAmB,0BAA0B,EAAE,SAAS,EAAE,wBAAwB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,qBAAqB;AACrC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,8CAA8C;AAC/D;AACA,gBAAgB;AAChB;AACA,eAAe,cAAc;AAC7B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,sBAAsB,iCAAiC;AACvD;AACA,gBAAgB;AAChB;AACA,qBAAqB,gCAAgC;AACrD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uCAAuC,0BAA0B;AACjE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,uBAAuB,gCAAgC;AACvD;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE;AAC7B;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,qDAAqD,WAAW;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,wDAAwD,WAAW;AACnE;AACA;AACA;AACA,2CAA2C,UAAU;AACrD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,2BAA2B,cAAc;AACzC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,SAAS;AACT,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE,wBAAwB,EAAE;AACnD,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,sBAAsB,EAAE;AACrD,2BAA2B,EAAE,4BAA4B,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,+BAA+B;AAC/B;AACA,sDAAsD;AACtD;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,+BAA+B;AAC/B,iCAAiC,EAAE,8CAA8C;AACjF,sGAAsG,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,2DAA2D,6BAA6B;AACxF;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,4DAA4D,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC;AACzC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sCAAsC;AACtC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC;AACzC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC;AACrC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sCAAsC;AACtC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC;AACzC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC;AACnC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uCAAuC;AACvC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC;AACrC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC,gCAAgC;AACrE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,2BAA2B;AAC9D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,+BAA+B;AAC/B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sCAAsC;AACtC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC;AACpC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,2BAA2B;AACxD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC;AACnC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,2CAA2C;AAC/D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,wCAAwC,cAAc,GAAG,UAAU,GAAG,SAAS;AAC/E;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,wBAAwB,SAAS,KAAK,WAAW,GAAG,4BAA4B,MAAM,UAAU;AAChG;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,uCAAuC,kBAAkB;AACpF,kBAAkB,yBAAyB,IAAI,gBAAgB,EAAE,QAAQ;AACzE;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,+CAA+C,KAAK,GAAG,qBAAqB,MAAM,UAAU;AACnH,cAAc,KAAK,GAAG,qBAAqB;AAC3C,qBAAqB,EAAE;AACvB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,oCAAoC,KAAK;AACzC;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,8BAA8B,UAAU,yBAAyB,gBAAgB;AACjF;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6CAA6C,EAAE;AAC/C,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,iDAAiD,2BAA2B,GAAG,IAAI;AACnF;AACA,yBAAyB,EAAE;AAC3B,6CAA6C,EAAE;AAC/C,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,UAAU,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA,8BAA8B,EAAE;AAChC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE,wBAAwB,EAAE;AACnD;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mCAAmC,EAAE;AACrC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,sBAAsB;AAC1D,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,wEAAwE,EAAE;AAC1E;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,4GAA4G;AAC5G;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,4GAA4G;AAC5G;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,wCAAwC;AACxC,yBAAyB,EAAE;AAC3B;AACA,0DAA0D,EAAE;AAC5D;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G;AAC/G;AACA;AACA;AACA;AACA,2GAA2G;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,6IAA6I,uBAAuB;AACpK;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,eAAe,oBAAoB;AACnC;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,wHAAwH,qBAAqB;AAC7I;AACA;AACA,6BAA6B,EAAE,wCAAwC,SAAS;AAChF;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,+CAA+C,iBAAiB;AAC9F,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE,2BAA2B,EAAE;AACtD;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,sCAAsC,QAAQ;AAC5E;AACA,wBAAwB;AACxB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,2EAA2E,gBAAgB;AAC3F;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,mBAAmB;AACjD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,8DAA8D;AACjF;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,oDAAoD,EAAE,EAAE,EAAE,0BAA0B;AAC/G,iBAAiB,EAAE,eAAe,IAAI,SAAS,IAAI,qBAAqB;AACxE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C,6BAA6B,aAAa,IAAI,uDAAuD,aAAa,aAAa;AAC/H;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uCAAuC,QAAQ,IAAI,SAAS,sBAAsB,QAAQ;AAC1F;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,QAAQ,IAAI,qBAAqB;AACjE;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE,oDAAoD,EAAE,EAAE,EAAE,0BAA0B;AAC7G;AACA,iBAAiB,EAAE,SAAS,IAAI,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,wBAAwB,EAAE,UAAU,oBAAoB;AACxD;AACA,4BAA4B,EAAE,UAAU,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,4BAA4B,EAAE,UAAU,OAAO;AAC/C;AACA;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,gBAAgB;AACpD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,uBAAuB,QAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,sBAAsB,EAAE,cAAc,kBAAkB;AAClF,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,UAAU,WAAW;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B,wCAAwC;AACrE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B,gDAAgD;AAC7E;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,8BAA8B,gDAAgD;AAC9E;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,6CAA6C,0BAA0B,EAAE;AACzE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,mCAAmC;AACnC;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,sCAAsC;AACtC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,iBAAiB,wKAAwK,KAAK;AAC9L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD,mCAAmC,eAAe;AAClD,mCAAmC,eAAe;AAClD,oCAAoC,eAAe;AACnD,mCAAmC,eAAe;AAClD,kCAAkC,eAAe;AACjD,oCAAoC,eAAe;AACnD,oCAAoC,eAAe;AACnD,iCAAiC,eAAe;AAChD,iCAAiC,eAAe;AAChD,qCAAqC,eAAe;AACpD,oCAAoC,eAAe;AACnD,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,oCAAoC,uCAAuC;AAC3E,oCAAoC,6DAA6D;AACjG,oCAAoC,oDAAoD;AACxF;AACA;AACA;AACA;AACA,KAAK;AACL,iCAAiC,uDAAuD;AACxF,iCAAiC,uDAAuD;AACxF,kCAAkC,8CAA8C;AAChF,kCAAkC,iCAAiC;AACnE,mCAAmC,kCAAkC;AACrE,iCAAiC,iDAAiD;AAClF,iCAAiC,iCAAiC;AAClE,iCAAiC,uDAAuD;AACxF,iCAAiC,oEAAoE;AACrG,iCAAiC,oEAAoE;AACrG,kCAAkC,8DAA8D;AAChG,iCAAiC,oEAAoE;AACrG,uCAAuC,uDAAuD;AAC9F,qCAAqC,iEAAiE;AACtG,kCAAkC,sBAAsB;AACxD,sCAAsC,sBAAsB;AAC5D,oCAAoC,uCAAuC;AAC3E,qCAAqC,uCAAuC;AAC5E,oCAAoC,iDAAiD;AACrF,uCAAuC,sEAAsE;AAC7G;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,4DAA4D,SAAS;AAChG,yBAAyB,EAAE,iEAAiE,SAAS;AACrG;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,4DAA4D,SAAS;AAChG,yBAAyB,EAAE,6CAA6C,SAAS;AACjF;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,uBAAuB,UAAU,GAAG,QAAQ;AACvE;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,gBAAgB,IAAI;AAC/C,yBAAyB,EAAE,2DAA2D,KAAK,GAAG,YAAY;AAC1G,yBAAyB,EAAE,gCAAgC,IAAI;AAC/D;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,0BAA0B,IAAI,KAAK,SAAS;AACtE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,kBAAkB,KAAK,GAAG,GAAG;AAC7B;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,uCAAuC;AAClE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,6DAA6D,EAAE;AAC/D,uBAAuB,EAAE;AACzB;AACA;AACA,2DAA2D,QAAQ;AACnE;AACA,yGAAyG,EAAE;AAC3G;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uEAAuE,EAAE;AACzE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,aAAa;AACjD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,sGAAsG;AACtG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,kEAAkE,SAAS;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,eAAe,qCAAqC;AACpD,4BAA4B,EAAE,UAAU,2CAA2C;AACnF,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,4BAA4B,kBAAkB;AAC9C;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,2DAA2D,EAAE;AACxF,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,EAAE,4BAA4B,EAAE;AAC1F;AACA,yCAAyC,EAAE,gDAAgD,2BAA2B;AACtH;AACA,6GAA6G,yBAAyB,EAAE,QAAQ;AAChJ;AACA;AACA;AACA;AACA,2DAA2D,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE,yBAAyB,EAAE;AACtE;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,uBAAuB,EAAE,sCAAsC,EAAE;AACjE;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,iCAAiC,EAAE,yBAAyB,EAAE;AAC9D;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,6EAA6E,EAAE;AAC/E;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6EAA6E,mCAAmC;AAChH;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE,wBAAwB,EAAE;AACrE;AACA;AACA;AACA,uFAAuF,UAAU,SAAS,yCAAyC;AACnJ;AACA;AACA;AACA,oFAAoF,UAAU,SAAS,yCAAyC;AAChJ;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,gCAAgC,EAAE,kCAAkC,iBAAiB,EAAE,mBAAmB;AAC1G,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mDAAmD,EAAE;AACrD;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,gBAAgB;AAChB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uCAAuC,cAAc;AACrD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,8BAA8B,aAAa;AAC3C;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,mCAAmC,oCAAoC;AACvE;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,4BAA4B,WAAW,GAAG,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,uBAAuB,SAAS,EAAE,SAAS;AAC3C;AACA,yBAAyB,EAAE;AAC3B,mBAAmB,SAAS,EAAE,SAAS,GAAG,qBAAqB,IAAI,SAAS;AAC5E;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,mBAAmB;AACxC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,sCAAsC;AAC7D;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,mDAAmD,KAAK,IAAI,YAAY;AACnG;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,gBAAgB,MAAM,YAAY;AAC9D;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,uCAAuC;AAC3D;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,mCAAmC;AACvD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,iCAAiC,yCAAyC;AAC1E;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,yBAAyB,YAAY,4BAA4B,GAAG;AACpE;AACA;AACA,iBAAiB;AACjB,kBAAkB;AAClB,kBAAkB;AAClB,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,2BAA2B,EAAE;AAC7B;AACA,+BAA+B,EAAE,mDAAmD,sBAAsB;AAC1G,iFAAiF,+BAA+B,qEAAqE,+BAA+B,iBAAiB,iBAAiB;AACtP;AACA,aAAa;AACb,6BAA6B,EAAE,oCAAoC,mCAAmC;AACtG,sEAAsE;AACtE;AACA,oEAAoE,qCAAqC;AACzG;AACA;AACA,oEAAoE,iCAAiC;AACrG;AACA;AACA;AACA,SAAS;AACT,yBAAyB,EAAE,6BAA6B;AACxD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,SAAS;AACT,yBAAyB,EAAE,8BAA8B,mCAAmC;AAC5F;AACA,6BAA6B,oCAAoC;AACjE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,eAAe,8BAA8B;AAC7C;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA,SAAS;AACT;AACA,oDAAoD,kBAAkB;AACtE;AACA,gBAAgB,oBAAoB,EAAE;AACtC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,8BAA8B,iCAAiC;AAC/D;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,0BAA0B,EAAE,0BAA0B,IAAI,SAAS;AAC9F;AACA,qCAAqC,EAAE,EAAE,8CAA8C;AACvF,SAAS;AACT,gCAAgC;AAChC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,+CAA+C,4CAA4C,OAAO,KAAK;AACvG;AACA,yBAAyB,EAAE,4CAA4C,4CAA4C,OAAO,IAAI;AAC9H,yBAAyB,EAAE,4CAA4C,6CAA6C,OAAO,IAAI;AAC/H;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,2CAA2C,+BAA+B,EAAE,WAAW,GAAG;AAC1F;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,kBAAkB,EAAE,oBAAoB,IAAI,cAAc,IAAI,sDAAsD,IAAI,cAAc;AACjK,2CAA2C,uCAAuC;AAClF;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD,iCAAiC,EAAE;AACnC;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA,qCAAqC,EAAE;AACvC;AACA,mFAAmF,GAAG;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,GAAG;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,gCAAgC,EAAE;AACrE,iCAAiC,EAAE,8BAA8B,EAAE;AACnE,iCAAiC,EAAE,yBAAyB,EAAE;AAC9D,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC;AACpC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gDAAgD;AAChD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mDAAmD,EAAE;AACrD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,0CAA0C,EAAE,yBAAyB;AACnG;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,sEAAsE,EAAE;AACxE;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC;AACpC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mDAAmD,EAAE;AACrD;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,IAAI;AAC5B;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE,iCAAiC,iBAAiB;AACjF,6BAA6B,EAAE;AAC/B;AACA;AACA,oEAAoE,0BAA0B;AAC9F;AACA;AACA,oEAAoE,sBAAsB;AAC1F;AACA;AACA;AACA,gEAAgE,uBAAuB;AACvF,kCAAkC,gBAAgB,GAAG,iBAAiB,EAAE,gEAAgE;AACxI;AACA,aAAa;AACb;AACA;AACA,6BAA6B,EAAE;AAC/B,sEAAsE;AACtE;AACA;AACA,SAAS;AACT,yBAAyB,EAAE,4BAA4B,0CAA0C;AACjG,yBAAyB,EAAE,iCAAiC,kFAAkF;AAC9I;AACA,6BAA6B,oCAAoC;AACjE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,eAAe,8BAA8B;AAC7C;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA,SAAS;AACT;AACA,qDAAqD,kBAAkB;AACvE;AACA,gBAAgB,oBAAoB,EAAE;AACtC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,+BAA+B;AACpD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,8BAA8B,iCAAiC;AAC/D;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,0BAA0B,EAAE,0BAA0B,IAAI,SAAS;AAC9F;AACA,qCAAqC,EAAE,EAAE,8CAA8C;AACvF,SAAS;AACT,gCAAgC;AAChC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,aAAa;AACb;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,0BAA0B,OAAO;AACjC,SAAS;AACT,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE,WAAW;AACtC,aAAa;AACb;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,kEAAkE,IAAI;AACjG,yBAAyB,EAAE;AAC3B,6CAA6C,oCAAoC,EAAE,oBAAoB,IAAI,cAAc,IAAI,OAAO,GAAG;AACvI;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,gDAAgD,YAAY;AAC5D;AACA;AACA,qCAAqC,EAAE;AACvC;AACA,mFAAmF,GAAG;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,GAAG;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,gCAAgC,EAAE;AACrE,iCAAiC,EAAE,8BAA8B,EAAE;AACnE,iCAAiC,EAAE,yBAAyB,EAAE;AAC9D,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,qCAAqC,EAAE;AACvC;AACA,0EAA0E,QAAQ;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC;AACpC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gDAAgD;AAChD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,gDAAgD;AAC9E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA,2CAA2C,mBAAmB;AAC9D;AACA;AACA,2CAA2C,mBAAmB;AAC9D;AACA;AACA,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC;AACpC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,yDAAyD;AACzD,kCAAkC,gBAAgB,GAAG,iBAAiB,EAAE,gEAAgE;AACxI;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,6BAA6B,oCAAoC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,0BAA0B;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,8BAA8B,iCAAiC;AAC/D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,0BAA0B,EAAE,0BAA0B,IAAI,SAAS;AAC9F;AACA,qCAAqC,EAAE,EAAE,8CAA8C;AACvF,SAAS;AACT,gCAAgC;AAChC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,sCAAsC,kBAAkB,OAAO;AAC1F,yBAAyB,EAAE,8CAA8C,qBAAqB;AAC9F;AACA;AACA;AACA;AACA,yBAAyB,EAAE,sCAAsC,mBAAmB,OAAO;AAC3F,yBAAyB,EAAE,8CAA8C,qBAAqB;AAC9F;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,oCAAoC,iBAAiB,EAAE,WAAW;AAC7F,6CAA6C,gBAAgB;AAC7D;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,oCAAoC;AAC/D,yBAAyB,EAAE,oBAAoB,IAAI,cAAc,IAAI,sDAAsD,IAAI,cAAc;AAC7I;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB;AACrB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B;AAC5B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B;AAC3B;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,gCAAgC;AAC7D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,eAAe,8BAA8B;AAC7C;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,uBAAuB,oBAAoB;AAC3C;AACA,0DAA0D,kBAAkB;AAC5E;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kDAAkD,kBAAkB;AACpE;AACA,gBAAgB,oBAAoB,EAAE;AACtC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,0BAA0B;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,iDAAiD,0BAA0B;AAC3E;AACA,SAAS;AACT,mBAAmB,2DAA2D,EAAE;AAChF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,kBAAkB;AAClE;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA,qCAAqC,EAAE;AACvC;AACA,mFAAmF,GAAG;AACtF;AACA;AACA,yCAAyC,EAAE,gCAAgC,EAAE;AAC7E,yCAAyC,EAAE,8BAA8B,EAAE;AAC3E,yCAAyC,EAAE,yBAAyB,EAAE;AACtE,yCAAyC,EAAE,yCAAyC,EAAE,mCAAmC,EAAE;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC;AACpC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gDAAgD;AAChD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mDAAmD,EAAE;AACrD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,0CAA0C,EAAE,yBAAyB;AACnG;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,sEAAsE,EAAE;AACxE;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC;AACpC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mDAAmD,EAAE;AACrD;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA,sCAAsC;AACtC;AACA;AACA;AACA,+FAA+F,EAAE;AACjG;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,2BAA2B;AAC1C,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,sCAAsC,EAAE;AACnE;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,sDAAsD;AACvE;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,8BAA8B,mBAAmB;AACjD;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,+CAA+C,EAAE,EAAE,EAAE,0BAA0B;AAC1G;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,iBAAiB,EAAE,IAAI,IAAI,SAAS,IAAI,iBAAiB;AACzD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,aAAa,OAAO;AAC/C,yBAAyB,EAAE,iDAAiD,KAAK,IAAI,eAAe;AACpG;AACA,uBAAuB,IAAI,GAAG,MAAM;AACpC;AACA,yBAAyB,EAAE;AAC3B,mBAAmB,IAAI,GAAG,MAAM,GAAG,SAAS,IAAI,IAAI;AACpD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,iCAAiC,0CAA0C;AAC3E;AACA;AACA;AACA;AACA;AACA,yDAAyD,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,yCAAyC,aAAa;AACzF,oFAAoF,GAAG,GAAG,IAAI;AAC9F;AACA;AACA;AACA,iCAAiC,EAAE,yCAAyC,aAAa;AACzF,uEAAuE,GAAG,GAAG,IAAI;AACjF;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,yBAAyB,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,4GAA4G;AAC5G;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,cAAc,iBAAiB,YAAY,yCAAyC;AACpF;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,cAAc,sBAAsB;AACpC;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,cAAc,iBAAiB,YAAY,iBAAiB;AAC5D;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,oBAAoB,GAAG;AACvB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2BAA2B;AAC3B,gCAAgC;AAChC;AACA;AACA;AACA;AACA,yBAAyB;AACzB,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,4BAA4B;AAC5B,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B,yBAAyB;AACzB,wBAAwB;AACxB,uBAAuB;AACvB,0BAA0B;AAC1B,yBAAyB;AACzB,uBAAuB;AACvB,4BAA4B;AAC5B,2BAA2B;AAC3B,wBAAwB;AACxB,4BAA4B;AAC5B,6BAA6B;AAC7B,2BAA2B;AAC3B,uBAAuB;AACvB,yBAAyB;AACzB,4BAA4B;AAC5B,2BAA2B;AAC3B,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,YAAY,cAAc,uBAAuB;AACjD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,0BAA0B,uBAAuB;AACjD;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,wDAAwD,0BAA0B;AAC7G,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,uBAAuB;AAC/D,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE,gDAAgD,kBAAkB;AACjG,yBAAyB,SAAS,EAAE,UAAU;AAC9C;AACA,0DAA0D,QAAQ,EAAE,UAAU,EAAE,MAAM;AACtF,gBAAgB,QAAQ,EAAE,UAAU,EAAE,MAAM,KAAK,QAAQ;AACzD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,0CAA0C;AAClE;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,wDAAwD,MAAM;AAC9D;AACA;AACA,gCAAgC,EAAE,UAAU,uBAAuB;AACnE,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,2BAA2B,KAAK,EAAE,yBAAyB;AAC3D;AACA;AACA,gEAAgE,YAAY;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE,6BAA6B,EAAE;AACxD;AACA;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,UAAU,uBAAuB;AACnE,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,UAAU,kBAAkB;AAC9D,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA,qCAAqC,EAAE;AACvC,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE,yBAAyB,EAAE;AACtD,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,UAAU,uBAAuB;AACnE,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,UAAU,kBAAkB;AAC9D,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,iCAAiC,EAAE,mCAAmC,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,kCAAkC,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE,iCAAiC,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,wBAAwB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,wBAAwB;AAC5C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE,4BAA4B,EAAE;AACzD;AACA,wDAAwD,KAAK,YAAY,oBAAoB;AAC7F;AACA;AACA,SAAS;AACT;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,cAAc,gBAAgB,qBAAqB,EAAE;AAChF;AACA;AACA;AACA;AACA,6BAA6B,EAAE,2BAA2B,EAAE,2BAA2B,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE,OAAO;AACvC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,6BAA6B,EAAE;AAC/B,wEAAwE,EAAE;AAC1E;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,4CAA4C,EAAE;AACzE,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,mBAAmB,sDAAsD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE,MAAM,4EAA4E,EAAE;AAC3H;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB,cAAc,EAAE;AACtD,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,0BAA0B,EAAE;AAC3D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,uBAAuB,EAAE,+CAA+C,EAAE;AAC1E;AACA;AACA,6BAA6B,EAAE,0BAA0B,EAAE;AAC3D;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB,EAAE,yCAAyC,EAAE;AACpE,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA,6BAA6B,EAAE,0BAA0B,EAAE;AAC3D,iDAAiD,EAAE;AACnD;AACA,iIAAiI,6BAA6B;AAC9J;AACA;AACA;AACA,8CAA8C,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,6BAA6B;AACxF;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,gHAAgH,6BAA6B;AAC7I;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,yBAAyB,EAAE;AACtD;AACA,wLAAwL,6BAA6B;AACrN;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,4BAA4B,EAAE;AACzD;AACA,qGAAqG,uBAAuB;AAC5H;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE,+BAA+B,EAAE;AAC1D;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,+BAA+B,EAAE,oCAAoC,EAAE;AACvE;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA,mJAAmJ,kCAAkC;AACrL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,4CAA4C,IAAI,4BAA4B,2CAA2C,0BAA0B;AAC1M;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA,oEAAoE,sCAAsC,IAAI,4BAA4B,4BAA4B,0BAA0B;AAChM;AACA;AACA;AACA;AACA;AACA,uEAAuE,4BAA4B,4BAA4B,0BAA0B;AACzJ;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uEAAuE,4BAA4B,4BAA4B,0BAA0B;AACzJ;AACA;AACA;AACA;AACA;AACA,qDAAqD,sCAAsC,IAAI,wBAAwB,2CAA2C,0BAA0B;AAC5L;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,uEAAuE,4BAA4B,4BAA4B,0BAA0B;AACzJ;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,sCAAsC,IAAI,4BAA4B,4BAA4B,0BAA0B;AAC5L;AACA;AACA,aAAa;AACb;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,8CAA8C,GAAG,oCAAoC,QAAQ,0BAA0B;AACrL;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wHAAwH,0BAA0B;AAClJ;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA,uEAAuE,oBAAoB,8CAA8C,0BAA0B;AACnK;AACA;AACA;AACA,aAAa;AACb;AACA,2EAA2E,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,0FAA0F,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,8CAA8C,0BAA0B;AACxE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,kDAAkD,oBAAoB,6CAA6C,yBAAyB,OAAO,0BAA0B;AAC7K,0CAA0C,oBAAoB,mCAAmC,yBAAyB,OAAO,0BAA0B;AAC3J,gFAAgF,oBAAoB,gCAAgC,yBAAyB,OAAO,0BAA0B;AAC9L;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,8KAA8K,wBAAwB;AACtM;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,6BAA6B,EAAE;AAC1D;AACA,gGAAgG,wBAAwB;AACxH;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE,gCAAgC,EAAE;AAC7D,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE,kDAAkD,0BAA0B,KAAK,WAAW;AAC3H;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,4BAA4B;AAC5B;AACA;AACA,4BAA4B,cAAc,mBAAmB;AAC7D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE,8BAA8B,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA,+DAA+D,qBAAqB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE,gCAAgC,EAAE;AACzE;AACA,0CAA0C,4BAA4B;AACtE;AACA;AACA,2CAA2C,4BAA4B;AACvE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,6DAA6D,mCAAmC,4DAA4D,cAAc;AAC1K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,kEAAkE,gCAAgC,uBAAuB,kBAAkB;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,oBAAoB,sDAAsD,EAAE;AAC5E;AACA,yBAAyB,EAAE,4BAA4B,EAAE;AACzD;AACA,oBAAoB,sDAAsD,EAAE;AAC5E;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE,6BAA6B,EAAE;AACxD,uBAAuB,EAAE,qCAAqC,EAAE;AAChE,uBAAuB,EAAE,wCAAwC,EAAE;AACnE,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,kCAAkC;AACnE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,aAAa,QAAQ,0BAA0B;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,EAAE;AACzE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,iBAAiB;AACzD,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gCAAgC,mBAAmB;AACnD;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,kBAAkB,UAAU,MAAM,cAAc;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,oDAAoD,oBAAoB;AAC/F,gBAAgB,EAAE;AAClB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,mBAAmB,EAAE,gDAAgD;AAChG;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,4CAA4C;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,wBAAwB,EAAE,UAAU,SAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,cAAc,4CAA4C;AAC1D;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,iDAAiD,aAAa;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,iCAAiC;AAC1D;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,mBAAmB,EAAE,gDAAgD;AAChG;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,mBAAmB,EAAE,gDAAgD;AAChG;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,oCAAoC;AAC5D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,aAAa;AAC/C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,aAAa;AAC/C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,yCAAyC;AAC7E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,+GAA+G,EAAE;AACjH;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,yCAAyC;AAC7E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4JAA4J,EAAE;AAC9J;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,wBAAwB,EAAE;AACrD,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,YAAY;AACzC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sCAAsC,sCAAsC;AAC5E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,sCAAsC;AACzE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,sCAAsC;AACvE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oDAAoD,YAAY,EAAE;AAClE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC,aAAa;AAClD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gCAAgC,sBAAsB;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,mCAAmC,qBAAqB;AACxD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,kDAAkD,6BAA6B,EAAE;AACjF;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,+BAA+B,4CAA4C;AAC3E,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,oGAAoG,iBAAiB;AACrH;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE,wCAAwC,EAAE;AACvE,2BAA2B,EAAE,iCAAiC,EAAE;AAChE;AACA,iCAAiC,EAAE,+BAA+B,EAAE,0DAA0D,8BAA8B;AAC5J;AACA;AACA;AACA;AACA,wDAAwD,EAAE;AAC1D;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,iDAAiD,EAAE;AACnD;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,qDAAqD,gDAAgD;AACrG;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE,uCAAuC,EAAE;AACxE,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,EAAE;AAC9F,iFAAiF,EAAE;AACnF;AACA;AACA;AACA,wDAAwD,6BAA6B;AACrF;AACA;AACA;AACA;AACA,8EAA8E,sBAAsB,EAAE,oBAAoB;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,wBAAwB,SAAS,2BAA2B;AAC3F;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,EAAE;AAC/B,uDAAuD,YAAY;AACnE;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,yFAAyF,iBAAiB;AAC1G;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE,wCAAwC,EAAE;AACvE,2BAA2B,EAAE,iCAAiC,EAAE;AAChE;AACA,iCAAiC,EAAE,yCAAyC,8BAA8B;AAC1G;AACA;AACA;AACA;AACA,wDAAwD,EAAE;AAC1D;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,qDAAqD,gDAAgD;AACrG;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,uEAAuE,sBAAsB,EAAE,oBAAoB;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA,uCAAuC,8BAA8B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE,mBAAmB,SAAS,6BAA6B;AACpF;AACA,KAAK;AACL;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,iHAAiH,kCAAkC;AACnJ;AACA;AACA,6BAA6B,EAAE;AAC/B,4BAA4B,EAAE;AAC9B,4BAA4B,EAAE;AAC9B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB;AACA,mFAAmF,sCAAsC;AACzH;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB;AACA;AACA,sFAAsF,yCAAyC;AAC/H;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,6BAA6B;AAC9D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,WAAW,+CAA+C;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6BAA6B,EAAE,4CAA4C,8BAA8B;AACzG;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE,oBAAoB,cAAc,GAAG,SAAS;AAC7E;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA,iDAAiD,EAAE;AACnD;AACA,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kCAAkC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,qBAAqB,EAAE,6FAA6F,EAAE;AACtH,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,aAAa,4DAA4D;AACzE,aAAa,mDAAmD;AAChE,aAAa,6EAA6E;AAC1F;AACA;AACA;AACA;AACA,WAAW,+CAA+C;AAC1D;AACA;AACA;AACA,KAAK;AACL,YAAY;AACZ;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,mBAAmB,2CAA2C;AAC9D;AACA;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,oDAAoD,EAAE;AACjF,yBAAyB,EAAE,4BAA4B,kCAAkC;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,4BAA4B,gBAAgB,uBAAuB,EAAE;AAChG,yBAAyB,EAAE;AAC3B;AACA,4EAA4E,EAAE;AAC9E;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,wEAAwE;AAC9F;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,mEAAmE,gBAAgB;AACnF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,UAAU;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2CAA2C;AAC1E;AACA;AACA;AACA,gBAAgB;AAChB;AACA,uBAAuB,gCAAgC;AACvD;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD,iDAAiD,EAAE;AACnD;AACA,uDAAuD,EAAE;AACzD,iDAAiD,EAAE;AACnD;AACA,uDAAuD,EAAE;AACzD,gDAAgD,EAAE;AAClD;AACA;AACA,aAAa;AACb;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,wBAAwB,EAAE,UAAU,kBAAkB;AACtD,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,yBAAyB,qCAAqC;AAC9D;AACA,gBAAgB;AAChB;AACA,wBAAwB,4CAA4C;AACpE;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,6CAA6C;AAChE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,2BAA2B;AACjD;AACA,gBAAgB;AAChB;AACA,gBAAgB,mBAAmB,EAAE,4BAA4B;AACjE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,sBAAsB,EAAE;AAC3D,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,wCAAwC;AACzE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,2BAA2B,EAAE;AAC7B,gCAAgC,EAAE,kBAAkB,sCAAsC;AAC1F,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,iCAAiC,yBAAyB,KAAK,GAAG,EAAE;AACpE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,KAAK;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE,yBAAyB,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA,gEAAgE,YAAY;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,8BAA8B,MAAM;AACpC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,aAAa;AACjE;AACA;AACA;AACA,2BAA2B,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB;AACzB;AACA,8BAA8B,uEAAuE;AACrG;AACA,SAAS;AACT,yBAAyB;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,wBAAwB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA,KAAK;AACL,qBAAqB,EAAE;AACvB,gCAAgC,KAAK;AACrC;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,WAAW;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,IAAI;AAC1E;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE,iDAAiD,cAAc,MAAM,YAAY;AAChH,wCAAwC,EAAE,eAAe,SAAS,mBAAmB,EAAE;AACvF,SAAS;AACT;AACA;AACA;AACA,4BAA4B,OAAO,SAAS,mBAAmB,EAAE;AACjE,SAAS;AACT,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB,EAAE,6BAA6B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6BAA6B,YAAY,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,4BAA4B,UAAU,uBAAuB,GAAG;AAChE;AACA,yBAAyB,EAAE,6BAA6B,EAAE;AAC1D;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,UAAU;AACtE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,6BAA6B,8BAA8B;AAC3D;AACA;AACA,+BAA+B,OAAO;AACtC;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,mFAAmF,EAAE;AACrF;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,YAAY;AAC3B,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,0DAA0D,gBAAgB;AAC1E;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzaAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,4CAA4C;AAC7E;AACA,gBAAgB;AAChB;AACA,sCAAsC,uBAAuB;AAC7D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE,wCAAwC,KAAK;AAC5E,+BAA+B,cAAc;AAC7C,yBAAyB,KAAK;AAC9B;AACA,oBAAoB;AACpB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE,yCAAyC,KAAK;AAC7E,+BAA+B,cAAc;AAC7C,oBAAoB;AACpB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,4BAA4B,kCAAkC;AAC9D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE,0BAA0B,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,sEAAsE,iBAAiB,GAAG,IAAI;AAC9F;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2EAA2E,iBAAiB,EAAE,EAAE;AAChG;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,oCAAoC,EAAE,UAAU,kBAAkB;AAClE,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,yCAAyC,aAAa;AACrF;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA,6BAA6B,EAAE;AAC/B,iCAAiC,WAAW,GAAG,UAAU;AACzD;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,wBAAwB,WAAW;AAClE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6BAA6B,EAAE,wBAAwB,WAAW;AAClE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,sBAAsB;AACrC;AACA,4DAA4D,+BAA+B,KAAK,IAAI,KAAK;AACzG,6CAA6C,gCAAgC,OAAO,GAAG;AACvF,8DAA8D,gCAAgC,OAAO,GAAG;AACxG;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,0BAA0B,EAAE,EAAE,cAAc,QAAQ,KAAK,UAAU;AACnE,sBAAsB;AACtB,qBAAqB;AACrB,sBAAsB;AACtB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,0CAA0C;AAC1C;AACA;AACA,8BAA8B;AAC9B;AACA,yBAAyB,EAAE;AAC3B,kBAAkB,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,aAAa,EAAE,OAAO;AACtF,KAAK;AACL;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,kBAAkB,+BAA+B;AAC3E,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD,mCAAmC,mBAAmB;AACtD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,0BAA0B,EAAE;AACvD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA,6CAA6C,EAAE;AAC/C;AACA,SAAS;AACT;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,sBAAsB,+BAA+B;AACrD;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C,yCAAyC,SAAS,EAAE,GAAG;AACvD;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,gBAAgB;AACpD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC,kBAAkB;AAC1D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gDAAgD,sBAAsB;AACtE;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,SAAS;AACT,SAAS;AACT,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC,kBAAkB;AAC1D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,aAAa;AAC3C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,gBAAgB;AACpD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,8GAA8G,wBAAwB;AACtI;AACA,yBAAyB,EAAE;AAC3B;AACA,8EAA8E,QAAQ;AACtF,KAAK;AACL,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,8EAA8E,QAAQ;AACtF,KAAK;AACL,qBAAqB,EAAE;AACvB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,6CAA6C;AACjE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,6EAA6E,SAAS,6DAA6D,WAAW,KAAK,kBAAkB;AACrL;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,qEAAqE,SAAS,6DAA6D,WAAW,KAAK,kBAAkB;AAC7K;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE,qBAAqB,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,qBAAqB;AAC7D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0DAA0D,iEAAiE,EAAE;AAC7H;AACA;AACA,0BAA0B,EAAE;AAC5B,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oDAAoD,EAAE;AACtD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,oDAAoD,EAAE;AACtD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE,6BAA6B,EAAE;AACxD,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE,kCAAkC,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,oFAAoF,MAAM,UAAU,UAAU;AAC9G;AACA;AACA;AACA;AACA,sEAAsE,UAAU;AAChF;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mEAAmE,EAAE;AACrE,yBAAyB,EAAE;AAC3B,8CAA8C,EAAE,yBAAyB,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,mDAAmD,SAAS;AAC5D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,0BAA0B,EAAE;AACvD,yBAAyB,EAAE,wBAAwB,EAAE;AACrD;AACA,4DAA4D,oBAAoB;AAChF;AACA;AACA,6BAA6B,EAAE;AAC/B,yDAAyD,YAAY;AACrE;AACA,gBAAgB,sBAAsB,EAAE,8CAA8C,EAAE;AACxF;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE,gEAAgE,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE,qCAAqC,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,mEAAmE,EAAE;AACpG,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,8CAA8C,EAAE;AACpG;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,+CAA+C,EAAE;AACjD,4CAA4C,EAAE;AAC9C,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,iCAAiC,EAAE,kDAAkD,KAAK;AAC1F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,4CAA4C,EAAE;AAC7E;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC,aAAa;AACrD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gDAAgD,aAAa;AAC7D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,gCAAgC,EAAE;AAC7D,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,0EAA0E,EAAE;AACvG,wEAAwE,EAAE;AAC1E,gEAAgE,EAAE;AAClE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,aAAa;AACjD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,0EAA0E,EAAE,gCAAgC,EAAE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B,eAAe,2CAA2C;AAC1D,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,2JAA2J,EAAE;AACxL,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,sFAAsF,EAAE,6HAA6H,EAAE;AAClP,yBAAyB,EAAE,6LAA6L,EAAE;AAC1N;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE,gCAAgC,EAAE;AAC7D,uBAAuB,EAAE;AACzB;AACA;AACA,0FAA0F,EAAE;AAC5F;AACA,oGAAoG,EAAE,0CAA0C,EAAE;AAClJ;AACA;AACA;AACA,yGAAyG,EAAE;AAC3G,+RAA+R,EAAE,0CAA0C,EAAE;AAC7U;AACA;AACA;AACA,mEAAmE,EAAE;AACrE,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,mBAAmB,qCAAqC;AACxD,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE,kJAAkJ,EAAE;AACnL,6BAA6B,EAAE;AAC/B,yHAAyH,EAAE;AAC3H,6BAA6B,EAAE,8FAA8F,EAAE,mIAAmI,EAAE;AACpQ;AACA,0TAA0T,EAAE;AAC5T;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0CAA0C,KAAK,YAAY,WAAW;AACtE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,uBAAuB,EAAE;AACzB;AACA,kCAAkC,EAAE;AACpC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE,2BAA2B,EAAE;AACtD,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE,kGAAkG,+BAA+B;AAChK;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE,gCAAgC,EAAE;AAC/D;AACA;AACA;AACA,6BAA6B,EAAE,4BAA4B,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,EAAE;AAC/B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uFAAuF,iBAAiB;AACxG;AACA;AACA;AACA,+BAA+B,EAAE,0BAA0B,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,2CAA2C,6BAA6B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,2BAA2B,EAAE,mBAAmB,OAAO;AACvD;AACA,0BAA0B,OAAO;AACjC;AACA;AACA,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA,mDAAmD,EAAE;AACrD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,qEAAqE,6BAA6B;AAClG;AACA;AACA,kDAAkD,UAAU;AAC5D,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,mDAAmD,eAAe;AAClE;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE,iCAAiC,eAAe,wCAAwC,YAAY;AACrI;AACA;AACA,oCAAoC,eAAe;AACnD;AACA;AACA;AACA;AACA,oCAAoC,YAAY,wCAAwC,eAAe;AACvG,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,aAAa;AACjD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,gCAAgC,EAAE;AAC7D,kEAAkE,EAAE;AACpE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC,kBAAkB;AAC1D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gDAAgD,sBAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE,wCAAwC,EAAE;AACnE,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE,oCAAoC,EAAE;AACrE,gCAAgC,EAAE,UAAU,+BAA+B;AAC3E,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,mFAAmF,uCAAuC,EAAE;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,wBAAwB,EAAE,UAAU,uBAAuB;AAC3D,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,+EAA+E,EAAE;AACjF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA,8FAA8F,KAAK;AACnG;AACA,KAAK;AACL,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE,mCAAmC,EAAE;AAC1D;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,4BAA4B,EAAE,UAAU,4BAA4B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,kBAAkB,UAAU,GAAG,gBAAgB;AAC/C;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,2BAA2B,QAAQ;AAC7D;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yDAAyD,IAAI;AAC7D;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,2DAA2D,IAAI;AAC/D;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,cAAc;AACvE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,iGAAiG,SAAS;AAC1G;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,8CAA8C,EAAE;AAChD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,4BAA4B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,2CAA2C;AAChE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE;AAC7B,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,gDAAgD;AAC1E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,qBAAqB,4BAA4B,cAAc,aAAa;AAC5E;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE,2BAA2B,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,8BAA8B,aAAa,EAAE;AAC7C;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6BAA6B,aAAa,EAAE;AAC5C;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,mCAAmC,aAAa,EAAE;AAClD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,oCAAoC,aAAa,EAAE;AACnD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,wCAAwC,aAAa,EAAE;AACvD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,qCAAqC,aAAa,EAAE;AACpD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,iCAAiC,6BAA6B,EAAE;AAChE;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,kCAAkC,aAAa,EAAE;AACjD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,oCAAoC,aAAa,EAAE;AACnD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,kCAAkC,aAAa,EAAE;AACjD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,wCAAwC,aAAa,EAAE;AACvD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,kCAAkC,kCAAkC,EAAE;AACtE;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,4BAA4B,aAAa,EAAE;AAC3C;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,iCAAiC,aAAa,EAAE;AAChD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,qCAAqC,aAAa,EAAE;AACpD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,oCAAoC,kCAAkC,EAAE;AACxE;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,qCAAqC,aAAa,EAAE;AACpD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6BAA6B,aAAa,EAAE;AAC5C;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,sCAAsC,yCAAyC,EAAE;AACjF;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,8BAA8B,wDAAwD,EAAE;AACxF;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6BAA6B,cAAc,EAAE;AAC7C;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,oCAAoC,aAAa,EAAE;AACnD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,wCAAwC,cAAc,EAAE;AACxD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,qCAAqC,yCAAyC,EAAE;AAChF;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,iCAAiC,cAAc,EAAE;AACjD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,kCAAkC,cAAc,EAAE;AAClD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,oCAAoC,aAAa,EAAE;AACnD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,kCAAkC,aAAa,EAAE;AACjD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,wCAAwC,cAAc,EAAE;AACxD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,kCAAkC,aAAa,EAAE;AACjD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,4BAA4B,aAAa,EAAE;AAC3C;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,iCAAiC,oCAAoC,EAAE;AACvE;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,qCAAqC,oCAAoC,EAAE;AAC3E;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,oCAAoC,cAAc,EAAE;AACpD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,qCAAqC,cAAc,EAAE;AACrD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6BAA6B,cAAc,EAAE;AAC7C;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,sCAAsC,aAAa,EAAE;AACrD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,wCAAwC,cAAc;AACtD,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yCAAyC,eAAe;AACxD;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,+BAA+B,UAAU,GAAG;AAC5C;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,0BAA0B,UAAU;AACpC;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE;AAC/B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,qBAAqB;AAC1G;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA,mBAAmB,6BAA6B;AAChD,6BAA6B,EAAE,mBAAmB,eAAe;AACjE,6BAA6B,EAAE;AAC/B,mBAAmB,qBAAqB;AACxC;AACA;AACA,SAAS;AACT,+BAA+B,6BAA6B;AAC5D,6BAA6B,EAAE,mBAAmB,eAAe;AACjE,6BAA6B,EAAE;AAC/B,mBAAmB,QAAQ;AAC3B;AACA,SAAS;AACT,yBAAyB,EAAE,wBAAwB,YAAY,GAAG,uBAAuB;AACzF,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,+BAA+B,EAAE;AAC5D,yBAAyB,EAAE,uBAAuB,EAAE;AACpD,+DAA+D,mEAAmE;AAClI;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA,+BAA+B,kFAAkF;AACjH,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4CAA4C,6BAA6B,EAAE;AAC3E;AACA,2BAA2B,EAAE,+BAA+B,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+BAA+B,sFAAsF;AACrH,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,4DAA4D,4EAA4E;AACxI;AACA;AACA;AACA;AACA,2EAA2E,2EAA2E;AACtJ;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,uBAAuB,aAAa;AAClE,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,kEAAkE,KAAK,kBAAkB,eAAe;AACxG;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,iBAAiB;AACjB;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,qBAAqB;AACrB,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0CAA0C;AAC1C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC;AACjC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE,wCAAwC,EAAE;AACnE;AACA,6BAA6B,EAAE,0BAA0B,EAAE;AAC3D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE;AAC/B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,2DAA2D;AAC1E,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,yBAAyB,EAAE,iFAAiF,EAAE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B,uFAAuF,EAAE;AACzF;AACA;AACA;AACA,uCAAuC,EAAE;AACzC,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,mCAAmC,EAAE;AACrC,yBAAyB,EAAE,+BAA+B,EAAE;AAC5D,yBAAyB,EAAE,uBAAuB,EAAE;AACpD,yBAAyB,EAAE,gHAAgH,sFAAsF;AACjO;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,mCAAmC,EAAE;AACrC,eAAe,sCAAsC;AACrD,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,mCAAmC,EAAE;AACrC;AACA,yBAAyB,EAAE;AAC3B,eAAe,iFAAiF;AAChG,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA,oCAAoC,EAAE;AACtC;AACA,mCAAmC,EAAE;AACrC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE,kCAAkC,EAAE;AAC7D,uBAAuB,EAAE,0BAA0B,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,mBAAmB,eAAe;AAClC;AACA,SAAS;AACT;AACA;AACA,uBAAuB,eAAe;AACtC;AACA,aAAa;AACb,SAAS;AACT,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,2BAA2B,EAAE,wBAAwB,EAAE;AACvD,2BAA2B,EAAE,0BAA0B,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB,2DAA2D,2HAA2H,EAAE,yCAAyC,EAAE;AAC1P;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,EAAE;AACzB;AACA,2BAA2B,EAAE,2BAA2B,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B,EAAE,2BAA2B,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6BAA6B,4DAA4D,EAAE,cAAc;AACzG,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,mCAAmC,EAAE;AACrC;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,aAAa,iDAAiD;AAC9D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE;AAC/B;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,mBAAmB,2CAA2C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT,eAAe,0DAA0D;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,uBAAuB,aAAa;AAClE;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,yBAAyB,EAAE,yDAAyD,MAAM,oBAAoB;AAC9G,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,sBAAsB,EAAE;AACnD;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,mBAAmB,mEAAmE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,SAAS;AACT,gBAAgB;AAChB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE,8BAA8B,6BAA6B;AAC1F,iCAAiC,EAAE,mBAAmB,qBAAqB;AAC3E,iCAAiC,EAAE;AACnC,uBAAuB,qBAAqB;AAC5C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,2BAA2B,4BAA4B;AACvD,6BAA6B,EAAE,mBAAmB,0BAA0B;AAC5E,6BAA6B,EAAE;AAC/B,mBAAmB,sBAAsB;AACzC,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,mBAAmB,uCAAuC;AAC1D,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B,4FAA4F,EAAE;AAC9F;AACA;AACA;AACA,uCAAuC,EAAE;AACzC,uCAAuC,EAAE;AACzC,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0CAA0C;AAC1C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC;AACjC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,yCAAyC,yCAAyC,EAAE;AACpF;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,kBAAkB,WAAW,GAAG,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE,8BAA8B,EAAE;AACzD;AACA;AACA;AACA,iCAAiC,EAAE,2BAA2B,EAAE;AAChE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,2BAA2B,EAAE;AAChE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kCAAkC;AAC5D,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,sBAAsB,cAAc,GAAG,eAAe;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,uBAAuB,OAAO,GAAG,KAAK;AACtC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,uBAAuB;AAC1C;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE,8CAA8C,IAAI;AAC/E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,2BAA2B,EAAE;AACxD,yBAAyB,EAAE,0CAA0C,EAAE;AACvE,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oDAAoD,EAAE;AACtD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE,+BAA+B,EAAE;AAC9E;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,4EAA4E,gBAAgB;AAC5F;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,gBAAgB,mBAAmB;AACnC;AACA,6BAA6B,EAAE;AAC/B,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,KAAK;AACL,YAAY;AACZ;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA,yBAAyB,EAAE,mCAAmC,EAAE;AAChE;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,gCAAgC,EAAE,UAAU,6BAA6B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA,6CAA6C,EAAE;AAC/C,6CAA6C,EAAE;AAC/C;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA,yCAAyC,EAAE;AAC3C;AACA,6CAA6C,EAAE;AAC/C;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA,2FAA2F,OAAO,QAAQ,SAAS;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,uBAAuB;AACtD;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,qCAAqC,EAAE;AACvC;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA,8CAA8C,EAAE;AAChD;AACA;AACA;AACA,8DAA8D,OAAO,eAAe,sBAAsB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ,8BAA8B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB,sFAAsF;AAC3G;AACA;AACA,iCAAiC,EAAE;AACnC,oDAAoD,0BAA0B,cAAc,OAAO;AACnG,4DAA4D,OAAO,kBAAkB,0BAA0B,aAAa,yBAAyB;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,mEAAmE,OAAO,EAAE;AAC5E,oCAAoC;AACpC,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,uDAAuD,OAAO,qBAAqB,eAAe;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qEAAqE,mEAAmE;AACxI;AACA,oBAAoB,oBAAoB;AACxC,qCAAqC,qEAAqE;AAC1G,KAAK;AACL,WAAW,iBAAiB;AAC5B;AACA,yBAAyB,EAAE;AAC3B,wBAAwB,oBAAoB,MAAM,mDAAmD,EAAE;AACvG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA,kCAAkC;AAClC;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,gDAAgD,EAAE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,iCAAiC,EAAE;AACtE;AACA,qCAAqC,EAAE;AACvC;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,+BAA+B,EAAE,0BAA0B,EAAE;AAC7D;AACA,qCAAqC,EAAE;AACvC;AACA,8CAA8C,EAAE;AAChD;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA,0CAA0C,YAAY,GAAG,MAAM;AAC/D,2CAA2C,6BAA6B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,6BAA6B,EAAE;AAC/B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,wBAAwB,sCAAsC;AAC9D;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,wBAAwB,2CAA2C;AACnE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,oBAAoB,mBAAmB;AACvC;AACA;AACA,yBAAyB,EAAE;AAC3B,oBAAoB,+BAA+B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,4BAA4B,EAAE;AACjE,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,sIAAsI,EAAE;AACxI;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,4BAA4B,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,+HAA+H,EAAE;AACjI;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,4CAA4C,uBAAuB;AACnE;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,MAAM;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA,kCAAkC,2CAA2C;AAC7E;AACA;AACA,kCAAkC,uFAAuF;AACzH;AACA,SAAS;AACT,yBAAyB,EAAE,2BAA2B,EAAE;AACxD,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,qCAAqC;AACvD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE,0BAA0B,EAAE;AAC3D;AACA;AACA,aAAa,YAAY,EAAE;AAC3B;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,mEAAmE,SAAS,eAAe,cAAc;AACzG;AACA,iCAAiC,EAAE,4BAA4B,EAAE;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,6GAA6G,YAAY;AACzH;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,iHAAiH,YAAY;AAC7H;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,2DAA2D,cAAc,GAAG,UAAU;AACtF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA,6DAA6D,6BAA6B,QAAQ,YAAY;AAC9G,6DAA6D,6BAA6B,GAAG,YAAY;AACzG,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE;AAC9B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,6CAA6C;AAC5D;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE,wDAAwD;AACnF;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,aAAa;AACb;AACA,iCAAiC,EAAE,sBAAsB,EAAE,iBAAiB,EAAE;AAC9E,iCAAiC,EAAE,mEAAmE,EAAE;AACxG,0CAA0C,EAAE;AAC5C,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,mCAAmC;AAClD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,sEAAsE,EAAE;AACvG;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,6FAA6F,8BAA8B;AAC3H;AACA;AACA,6BAA6B,EAAE,oFAAoF,YAAY,EAAE;AACjI;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA,oCAAoC,EAAE;AACtC,qCAAqC,EAAE;AACvC,aAAa;AACb;AACA,oCAAoC,EAAE;AACtC,qCAAqC,EAAE;AACvC,aAAa;AACb;AACA,oCAAoC,EAAE;AACtC,qCAAqC,EAAE;AACvC,aAAa;AACb;AACA,oCAAoC,EAAE;AACtC,qCAAqC,EAAE;AACvC,aAAa;AACb;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE;AAC9B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE;AAC9B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA,6EAA6E,EAAE;AAC/E;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,6CAA6C;AAC5D,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA,yBAAyB,EAAE,qCAAqC,EAAE,iBAAiB,EAAE;AACrF,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,6DAA6D,EAAE,iBAAiB,EAAE,gIAAgI,EAAE;AAC/O;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,sEAAsE,uBAAuB;AAC7F;AACA,6BAA6B,EAAE;AAC/B,mBAAmB,0BAA0B;AAC7C,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,0FAA0F,EAAE;AAC5F;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,sEAAsE,EAAE;AACnG,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,kCAAkC,EAAE;AACpC,iCAAiC,EAAE;AACnC,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,GAAG;AACtB,mBAAmB,GAAG;AACtB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,2CAA2C,EAAE;AAC5E,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,cAAc,cAAc,EAAE,oBAAoB,UAAU,OAAO;AACnE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE,sGAAsG,OAAO,MAAM,WAAW,QAAQ,OAAO;AACxK;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,kCAAkC,gDAAgD;AAClF;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wCAAwC;AACxC;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,WAAW,wBAAwB,GAAG,wBAAwB,GAAG,0BAA0B;AAC3F;AACA,qBAAqB,EAAE,2CAA2C,SAAS;AAC3E,qBAAqB,EAAE,gDAAgD,SAAS;AAChF,qBAAqB,EAAE,iBAAiB,OAAO,EAAE,cAAc,EAAE,QAAQ;AACzE,cAAc,kBAAkB,EAAE,QAAQ,EAAE,mEAAmE;AAC/G;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,uBAAuB,EAAE;AAChD,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,yBAAyB,EAAE;AAC3B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,iEAAiE,EAAE,mCAAmC,EAAE;AACnI,yBAAyB,EAAE;AAC3B;AACA,2FAA2F,EAAE;AAC7F;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,qCAAqC,EAAE,yCAAyC,EAAE,kEAAkE,EAAE;AACtJ,qCAAqC,EAAE;AACvC;AACA,oFAAoF,UAAU,MAAM,cAAc,kBAAkB,+BAA+B,EAAE,mCAAmC,4FAA4F,wEAAwE;AAC5W;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA,+BAA+B,EAAE;AACjC,iBAAiB;AACjB;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE,uBAAuB,EAAE;AAC5D;AACA,iCAAiC,EAAE;AACnC,+BAA+B,EAAE;AACjC,kDAAkD,EAAE;AACpD,iBAAiB,YAAY,EAAE;AAC/B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,8DAA8D,qBAAqB;AACnF;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA,qCAAqC,EAAE,uBAAuB,EAAE;AAChE,qCAAqC,EAAE,mCAAmC,EAAE;AAC5E,qCAAqC,EAAE,qCAAqC,EAAE;AAC9E;AACA;AACA,yCAAyC,EAAE;AAC3C,yCAAyC,EAAE;AAC3C;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA,yBAAyB,YAAY,EAAE;AACvC;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,4CAA4C,qBAAqB,cAAc,EAAE;AACjF;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA,+BAA+B,EAAE;AACjC,iBAAiB;AACjB;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE,2BAA2B,EAAE,uDAAuD,YAAY,EAAE;AACrI,uDAAuD,EAAE;AACzD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oEAAoE,qBAAqB;AACzF;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,4CAA4C,qBAAqB,cAAc,EAAE;AACjF;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,mDAAmD;AACnD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA,yCAAyC,EAAE,wDAAwD,EAAE;AACrG,yCAAyC,EAAE,kBAAkB,mBAAmB,IAAI,WAAW;AAC/F,yCAAyC,EAAE,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,oBAAoB;AACpE;AACA,yBAAyB;AACzB;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA,6CAA6C,EAAE;AAC/C,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C,gDAAgD,EAAE,UAAU,uBAAuB;AACnF;AACA;AACA,6CAA6C,EAAE;AAC/C,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC,0CAA0C,EAAE,wBAAwB,EAAE;AACtE;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA,+CAA+C,EAAE;AACjD;AACA;AACA,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD;AACA;AACA;AACA,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA,iDAAiD,EAAE;AACnD,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD;AACA,qDAAqD,EAAE;AACvD;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,EAAE;AACnD,iDAAiD,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,EAAE;AACvD,mDAAmD,EAAE;AACrD;AACA,yDAAyD,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA,yDAAyD,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,gDAAgD,uCAAuC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,aAAa;AACb;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,WAAW,oEAAoE;AAC/E;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,uBAAuB,EAAE;AAChD,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,iGAAiG,kBAAkB;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA,8EAA8E,aAAa;AAC3F;AACA;AACA;AACA;AACA,2GAA2G,aAAa;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,8CAA8C,kBAAkB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,wBAAwB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA;AACA;AACA;AACA,oDAAoD,mBAAmB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,oDAAoD,sDAAsD;AAC1G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,qCAAqC,kBAAkB;AAC9E,qBAAqB,EAAE,iBAAiB,SAAS,EAAE,QAAQ;AAC3D,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,kBAAkB,kBAAkB;AACpC,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,0DAA0D,aAAa;AACvE;AACA,mBAAmB;AACnB;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,gDAAgD;AACzE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,8BAA8B,EAAE;AAChC,4DAA4D,gBAAgB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAkC;AACrD;AACA;AACA;AACA;AACA,4CAA4C,uDAAuD,EAAE;AACrG;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,+DAA+D,IAAI,QAAQ,SAAS;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,EAAE,0CAA0C,+CAA+C;AAChH,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,YAAY;AACZ;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,cAAc;AACnC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,iBAAiB;AAClD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,iBAAiB;AACpD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,WAAW;AAC/B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B,kBAAkB;AAC9C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,aAAa;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,8CAA8C;AACvE;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,qBAAqB,EAAE;AACvB,yCAAyC,+CAA+C,EAAE;AAC1F;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,qBAAqB;AACzD;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,KAAK;AACL;AACA,yBAAyB,EAAE;AAC3B;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,KAAK;AACL,qBAAqB,EAAE;AACvB;AACA,qBAAqB,EAAE;AACvB,yBAAyB,EAAE;AAC3B,8CAA8C,8BAA8B,EAAE;AAC9E;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,wCAAwC;AAC3D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,iDAAiD,UAAU;AAC3D;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE,yBAAyB,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,YAAY;AAC5E;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gBAAgB;AACjE;AACA;AACA;AACA;AACA;AACA,8DAA8D,aAAa;AAC3E;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,qCAAqC,aAAa;AAClD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,kBAAkB;AAClD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,aAAa;AACjE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,UAAU,uBAAuB;AAC/D,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mDAAmD,UAAU,eAAe,YAAY,IAAI,kBAAkB;AAC9G;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2BAA2B,UAAU,aAAa,YAAY;AAC9D;AACA,8BAA8B;AAC9B;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,+BAA+B,UAAU;AACzC;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,uBAAuB,EAAE,iBAAiB,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,4BAA4B,UAAU,uBAAuB,GAAG;AAChE;AACA,yBAAyB,EAAE,6BAA6B,EAAE;AAC1D;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE,gBAAgB,eAAe,kBAAkB,UAAU;AAChF,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA,yBAAyB,EAAE,6DAA6D;AACxF,yBAAyB,EAAE,gEAAgE;AAC3F,uBAAuB,+DAA+D;AACtF;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,6BAA6B,EAAE,2BAA2B,mBAAmB;AAC7E,2CAA2C,KAAK,GAAG,GAAG;AACtD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,0BAA0B,EAAE;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,sBAAsB;AAC9D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,iCAAiC,EAAE,yBAAyB,EAAE;AAC9D,kDAAkD,gEAAgE;AAClH;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,oDAAoD;AAC5E;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,8BAA8B,EAAE;AAC3D;AACA;AACA;AACA;AACA,6BAA6B,EAAE,4BAA4B,EAAE;AAC7D;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE,iCAAiC,EAAE;AAC5D;AACA,6BAA6B,EAAE,4BAA4B,EAAE;AAC7D;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,0BAA0B,EAAE;AACvD,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE,iCAAiC,EAAE;AAClE;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA,8DAA8D,EAAE;AAChE;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,6BAA6B,EAAE,iCAAiC,EAAE;AAClE;AACA,iCAAiC,EAAE;AACnC;AACA;AACA,yCAAyC,EAAE,4BAA4B,EAAE;AACzE;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,qCAAqC,EAAE,4BAA4B,EAAE;AACrE;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yCAAyC,oBAAoB;AAC7D;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA,6BAA6B,EAAE,qFAAqF,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,wFAAwF,YAAY,EAAE;AACjI;AACA,6BAA6B,EAAE;AAC/B,0DAA0D,EAAE;AAC5D,SAAS;AACT;AACA,yBAAyB,EAAE;AAC3B,eAAe,6CAA6C;AAC5D,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE,qCAAqC,EAAE;AAClE,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,+DAA+D,EAAE,iBAAiB,EAAE,gIAAgI,EAAE;AACtN;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE,qCAAqC,EAAE;AACtE,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB,EAAE;AACtB,4BAA4B,EAAE;AAC9B,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,8CAA8C,0BAA0B;AACxE;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,4CAA4C,kEAAkE;AACrI,YAAY;AACZ;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAmB;AAChC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,sBAAsB,OAAO,GAAG,KAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY,EAAE;AACd;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAkE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,YAAY,uBAAuB;AAC7D,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE,+BAA+B,2BAA2B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,cAAc,WAAW;AACzB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,iBAAiB;AACjB;AACA,qCAAqC,EAAE,sBAAsB,EAAE,iBAAiB,EAAE;AAClF,qCAAqC,EAAE,mEAAmE,EAAE;AAC5G,8CAA8C,EAAE;AAChD,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,iCAAiC,kEAAkE;AAC9H,yBAAyB,EAAE,0CAA0C,uCAAuC;AAC5G,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE,wDAAwD;AACnF,yBAAyB,EAAE;AAC3B,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ;AACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzo4BA;AAAA;AACA;AACA;AACA;AACA;AACqB;AACL;AACA;AACE;;AAElB;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,0BAA0B,WAAW,EAAE;AACvD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,yCAAyC,EAAE;AACtE,yBAAyB,EAAE,+BAA+B,EAAE;AAC5D;AACA;AACA,6BAA6B,EAAE;AAC/B,4BAA4B,EAAE;AAC9B,yDAAyD,YAAY;AACrE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB,sBAAsB,EAAE;AACxB;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,yCAAyC,EAAE;AACtE,oBAAoB,EAAE;AACtB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,4BAA4B,EAAE;AAC9B,wDAAwD,YAAY;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,wCAAwC,EAAE;AACrE;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,6BAA6B,EAAE;AAC/B,4BAA4B,EAAE;AAC9B,mEAAmE,UAAU,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kCAAkC;AAC1C,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,MAAM,mCAAmC;AACzC,MAAM;AACN;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,gBAAgB;AACvF;AACA;AACA;AACA,QAAQ,uBAAuB,GAAG,oBAAoB,GAAG,oBAAoB,GAAG,iBAAiB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uBAAuB;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,qBAAqB,iEAAiE;AACvK;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,qBAAqB,+DAA+D;AAC/J;AACA;AACA;AACA,QAAQ,oBAAoB;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,qBAAqB,+DAA+D;AAC/J;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,8DAA8D;;AAEnJ;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB,mDAAmD;AAC5H;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,aAAa;AACvE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,sBAAsB;AAC1F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,sBAAsB;AAC5F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,mBAAmB;AAChG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,kBAAkB;;AAEhG;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA,kEAAkE,8BAA8B;AAChG,UAAU,oCAAoC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,QAAQ;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,gCAAgC,EAAE,UAAU,iBAAiB;AAC7D,iCAAiC,EAAE;AACnC;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kBAAkB;AAC/D;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,gBAAgB,EAAE;AAClB,gBAAgB,EAAE,4CAA4C,0BAA0B;AACxF,uBAAuB,EAAE,gBAAgB,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,SAAS;AACT;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,kEAAkE,iBAAiB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mEAAmE;AACjG;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,qCAAqC,EAAE,OAAO;AAC9C;AACA,0CAA0C,gCAAgC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yCAAyC,EAAE,MAAM,sEAAsE;AACvH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,wBAAwB,EAAE,qBAAqB,EAAE;AAC5E;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,UAAU,qBAAqB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,2BAA2B,EAAE;AAC7B,6BAA6B,EAAE;AAC/B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yCAAyC,kCAAkC;AAC3E;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA,oCAAoC,EAAE,UAAU,uBAAuB;AACvE,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,qBAAqB,EAAE,+BAA+B,EAAE;AACxD;AACA;AACA,4BAA4B,EAAE,UAAU,yBAAyB;AACjE,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA,oCAAoC,EAAE,sBAAsB,EAAE,wBAAwB,wBAAwB;AAC9G,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,0CAA0C,EAAE;AACvE,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,EAAE,uBAAuB,EAAE;AAClD,4BAA4B,EAAE;AAC9B;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,oBAAoB,EAAE,kBAAkB;AACxC;AACA,kCAAkC,QAAQ,KAAK,+BAA+B;AAC9E;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,WAAW,EAAE;AACb,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;AACA,gBAAgB,EAAE;AAClB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gDAAgD;AAClE,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,aAAa,QAAQ,cAAc,uEAAuE;AACjI,qBAAqB,EAAE;AACvB,gBAAgB,EAAE;AAClB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,uBAAuB,EAAE;AAChD;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA,UAAU;AACV,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,gBAAgB;AAC5E,IAAI,gBAAgB,kBAAkB,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,kCAAkC,MAAM,GAAG,6BAA6B;AACxE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,wEAAwE;AAC9E,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,uDAAuD,6BAA6B;AACpF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,kBAAkB,0BAA0B,kCAAkC,MAAM,GAAG,6BAA6B;AACpH,KAAK;AACL;AACA;AACA,qCAAqC,gBAAgB,2BAA2B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,6FAA6F,SAAS;AACtG;AACA;AACA;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,kBAAkB;AAC/E;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,sBAAsB,EAAE,uBAAuB,QAAQ;AACjF,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,sDAAsD;AAC5D,MAAM;AACN;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,2EAA2E,UAAU,GAAG,UAAU;AAClG;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B;AACjF;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA,0CAA0C,0BAA0B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA,+BAA+B,wCAAwC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,wBAAwB,2BAA2B;AACnD;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA,eAAe,GAAG;AAClB;AACA,0BAA0B,+CAA+C;AACzE;AACA,gBAAgB;AAChB;AACA,2BAA2B,aAAa;AACxC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gBAAgB,oCAAoC;AACpD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,mBAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE,sCAAsC,EAAE;AAClE,+BAA+B,EAAE;AACjC;AACA;AACA,yBAAyB,EAAE,oCAAoC,EAAE;AACjE;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,yBAAyB,EAAE,sEAAsE,EAAE;AACnG,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,EAAE,6CAA6C,EAAE;AACzE,2BAA2B,EAAE,8BAA8B,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE,4CAA4C,EAAE;AACxE,mEAAmE,EAAE;AACrE;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,wBAAwB,EAAE;AAC1B,2BAA2B,EAAE,+BAA+B,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,wBAAwB,EAAE;AAC1B,6BAA6B,EAAE,iCAAiC,EAAE;AAClE,6BAA6B,EAAE,8BAA8B,EAAE,OAAO;AACtE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,aAAa;AACb;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,mBAAmB,EAAE,8CAA8C,IAAI;AACzF;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE,uDAAuD;AACnF;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,6BAA6B,KAAK,sBAAsB,KAAK;AACxF,mBAAmB,KAAK,gBAAgB;AACxC,0BAA0B,EAAE;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,aAAa,gBAAgB,EAAE;AACtD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uCAAuC,6BAA6B;AACpE;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,oCAAoC;AAClE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,kDAAkD;AACrE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,iDAAiD;AACnE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,iDAAiD;AACnE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,iDAAiD;AACnE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,oDAAoD;AACzE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,sDAAsD;AAC7E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iBAAiB;AACzB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gBAAgB,cAAc,gBAAgB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wCAAwC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA,mFAAmF;AACnF,YAAY;AACZ;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB,OAAO,wBAAwB;AAChE;AACA,IAAI,gBAAgB,uBAAuB,wBAAwB,GAAG,gBAAgB;AACtF;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,UAAU,sBAAsB;AAC1D,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE,UAAU,uCAAuC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,sBAAsB,0BAA0B;AAChD;AACA,0DAA0D,EAAE;AAC5D,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,qBAAqB;AACzD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kCAAkC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,YAAY,sEAAsE;AAClF,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,gBAAgB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0CAA0C;AACtD,QAAQ,sEAAsE;AAC9E,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,4BAA4B,EAAE,UAAU,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,8BAA8B,yBAAyB;AACvD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,gCAAgC,EAAE,UAAU,uCAAuC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,UAAU,wBAAwB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,sBAAsB,EAAE;AACvD,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,iDAAiD,UAAU;AAC3D;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,gCAAgC;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,uBAAuB;AACtE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA,gCAAgC,EAAE,UAAU,0BAA0B;AACtE,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA,mDAAmD,YAAY,EAAE,cAAc,gBAAgB,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,mBAAmB;AACxB;AACA;AACA;AACA,KAAK,4BAA4B,yCAAyC,GAAG,iBAAiB,IAAI;AAClG;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6DAA6D;AACjE;AACA;AACA,kFAAkF;AAClF;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,cAAc,cAAc,EAAE,cAAc,EAAE,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,mBAAmB;AACxB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wBAAwB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,qBAAqB;AACzD;AACA,gBAAgB,0BAA0B;AAC1C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB,2BAA2B;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB;AAClB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB;AACzB;AACA;AACA,KAAK,mBAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,wBAAwB;AAChF;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,oDAAoD,qBAAqB;AAChG,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,sBAAsB;AAC9D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,8BAA8B;AAClD;AACA,gBAAgB;AAChB;AACA,yBAAyB,mCAAmC;AAC5D;AACA,gBAAgB;AAChB;AACA,8BAA8B,wCAAwC;AACtE;AACA,gBAAgB;AAChB;AACA,kBAAkB,4BAA4B;AAC9C;AACA,gBAAgB;AAChB;AACA,mBAAmB,6BAA6B;AAChD;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,uBAAuB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,sBAAsB,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,iBAAiB,mBAAmB;AACpC;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,aAAa,eAAe,6BAA6B;AACzD;AACA,qDAAqD,8CAA8C,EAAE;AACrG,8BAA8B,4BAA4B;AAC1D;AACA;AACA,qDAAqD,8CAA8C,EAAE;AACrG,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA,uDAAuD,0CAA0C,EAAE;AACnG,4BAA4B,wBAAwB;AACpD;AACA;AACA,+CAA+C,8BAA8B,EAAE,aAAa,YAAY;AACxG;AACA;AACA;AACA,4CAA4C,8BAA8B,EAAE,UAAU,YAAY;AAClG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,0BAA0B;AACxE,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC,oDAAoD,OAAO;AAC3D;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8BAA8B,EAAE;AACnE,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,iBAAiB,+BAA+B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,sBAAsB,EAAE;AACnD;AACA;AACA,wBAAwB,EAAE;AAC1B,uDAAuD,EAAE;AACzD;AACA,gDAAgD,EAAE;AAClD,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,8BAA8B,mDAAmD;AACjF;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE,iBAAiB,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,uBAAuB,EAAE;AACpD,yBAAyB,EAAE;AAC3B;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE,iBAAiB,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA,8BAA8B,0BAA0B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE,iBAAiB,EAAE;AAC/C;AACA;AACA;AACA,YAAY;AACZ;AACA,iBAAiB;AACjB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,+BAA+B,EAAE,MAAM,wBAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,aAAa,aAAa;AAC1B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,aAAa;AACjC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,aAAa;AACxC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,aAAa;AAC9B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,8BAA8B,2BAA2B;AACzD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,mBAAmB;AACxB;AACA;AACA;AACA,KAAK,gBAAgB;AACrB;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,kCAAkC;AACpE;AACA;AACA,gBAAgB;AAChB;AACA,iCAAiC,4BAA4B;AAC7D;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,6CAA6C;AACvE;AACA;AACA,gBAAgB;AAChB;AACA,2BAA2B,gDAAgD;AAC3E;AACA;AACA,gBAAgB;AAChB;AACA,0BAA0B,8CAA8C;AACxE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,mBAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B;AAC3B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sBAAsB;AAClC;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,6CAA6C,KAAK;AACzE;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,+EAA+E,kCAAkC;AACjH;AACA;AACA,wFAAwF,kCAAkC;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,uBAAuB,iCAAiC,sBAAsB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,6BAA6B,EAAE,uCAAuC,oCAAoC;AAC1G,6BAA6B,EAAE,2BAA2B,EAAE;AAC5D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,wEAAwE,YAAY,EAAE;AACtF,0DAA0D,EAAE,kCAAkC,mBAAmB,qCAAqC,EAAE,EAAE;AAC1J,6EAA6E,EAAE;AAC/E,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,+BAA+B;AAC1D,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,wBAAwB,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0CAA0C;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,uCAAuC;AAChE;AACA,8BAA8B,gBAAgB;AAC9C;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA,KAAK,mBAAmB;AACxB;AACA;AACA;AACA,KAAK,kBAAkB;AACvB;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mBAAmB,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,cAAc,uBAAuB,aAAa,EAAE,EAAE,EAAE,EAAE;AACzG,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,yBAAyB,EAAE;AAC3B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,wDAAwD,sBAAsB,EAAE;AAChF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,iCAAiC,gCAAgC,EAAE;AACnE,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,uBAAuB,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,uBAAuB,EAAE;AACpD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,mBAAmB;AACxB;AACA;AACA;AACA,KAAK,gBAAgB;AACrB,KAAK,iBAAiB;AACtB,KAAK,kBAAkB;AACvB,KAAK,sBAAsB;AAC3B,KAAK,kCAAkC;AACvC,KAAK,+BAA+B;AACpC;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sDAAsD;AACpF,IAAI,wDAAwD;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gCAAgC,oCAAoC;AACpE;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,2DAA2D,GAAG,KAAK,yBAAyB,MAAM,wBAAwB;AAC1H;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,6CAA6C,GAAG;AAChD;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB,GAAG,uBAAuB,OAAO;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,6BAA6B;AAC/C;AACA,gBAAgB;AAChB;AACA,iBAAiB,yBAAyB;AAC1C;AACA,gBAAgB;AAChB;AACA,gBAAgB,uCAAuC;AACvD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,aAAa,8BAA8B;AAC3C;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,8BAA8B;AAC7C;AACA,gBAAgB;AAChB;AACA,6BAA6B,oBAAoB,EAAE,4CAA4C;AAC/F;AACA,gBAAgB;AAChB;AACA,gBAAgB,iCAAiC;AACjD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA,gBAAgB;AAChB;AACA,uBAAuB,aAAa,EAAE,+BAA+B;AACrE;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,aAAa,EAAE,yBAAyB;AACxD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,2BAA2B,EAAE;AAC7B,KAAK;AACL;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,mBAAmB;AACxB;AACA;AACA;AACA,KAAK,kBAAkB;AACvB,KAAK,mDAAmD,iBAAiB,IAAI;AAC7E;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,wCAAwC,WAAW,QAAQ,WAAW;AACtE;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,aAAa;AACvE;AACA,2DAA2D;AAC3D,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iBAAiB,MAAM,wBAAwB;AACnD,IAAI,qCAAqC,MAAM,2BAA2B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,iBAAiB;AAC1F,mEAAmE,iBAAiB;AACpF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,uCAAuC,MAAM;AAC7C;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA,UAAU,mBAAmB;AAC7B;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,UAAU,mBAAmB;AAC7B;AACA,WAAW,MAAM;AACjB;AACA;AACA,uEAAuE,mBAAmB;AAC1F;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,oCAAoC;AACxD;AACA,gBAAgB;AAChB;AACA,6BAA6B,qCAAqC;AAClE;AACA,gBAAgB;AAChB;AACA,mBAAmB,mCAAmC;AACtD;AACA,gBAAgB;AAChB;AACA,sBAAsB,sCAAsC;AAC5D;AACA,gBAAgB;AAChB;AACA,0BAA0B,0CAA0C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,YAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,gCAAgC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,aAAa,8BAA8B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,gBAAgB;AACxD;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,qCAAqC,EAAE,sGAAsG,EAAE;AAC/I;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC,qCAAqC,EAAE,mCAAmC,EAAE;AAC5E;AACA,4CAA4C,EAAE,UAAU,4BAA4B;AACpF,6CAA6C,EAAE;AAC/C,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,2CAA2C,iBAAiB;AAC5D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,qDAAqD,sBAAsB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA,wBAAwB,EAAE;AAC1B,gCAAgC,EAAE,cAAc,qBAAqB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,wBAAwB,EAAE;AAC1B;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,8DAA8D,iBAAiB;AAC/E;AACA;AACA,8CAA8C,iBAAiB;AAC/D;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,oEAAoE,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6BAA6B;AAC3D;AACA,oCAAoC,6BAA6B;AACjE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,iCAAiC,iBAAiB;AAClD,yEAAyE,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sDAAsD,gBAAgB;AACtE;AACA;AACA;AACA,WAAW;AACX,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,4BAA4B,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,4BAA4B;AAC/C;AACA,gBAAgB;AAChB;AACA,aAAa,kBAAkB;AAC/B;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,8CAA8C;AACjE;AACA;AACA,gBAAgB;AAChB;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,eAAe;AACpE;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE,0BAA0B,iBAAiB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE,wBAAwB,EAAE;AACzD;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,eAAe;AACrF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,eAAe;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,4BAA4B,4BAA4B;AACxD;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6BAA6B;AACvD,kBAAkB,uBAAuB;AACzC,QAAQ,uBAAuB;AAC/B;AACA;AACA;AACA,uDAAuD,sBAAsB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,uEAAuE,SAAS,aAAa,kCAAkC;AAC/H;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sDAAsD,mBAAmB;AACzE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,0BAA0B,6BAA6B;AACvD,kBAAkB,uBAAuB;AACzC,QAAQ,uBAAuB;AAC/B;AACA;AACA;AACA,uDAAuD,sBAAsB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,mEAAmE,GAAG;AACtE;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,4CAA4C;AACjD,KAAK,yCAAyC;AAC9C,KAAK,yCAAyC;AAC9C,KAAK,6BAA6B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAmD;AAC/D;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,yBAAyB;AACpC,WAAW,YAAY;AACvB;AACA;AACA,kBAAkB,uCAAuC;AACzD,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uCAAuC;AACnD;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,yBAAyB;AACpC,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA,kBAAkB,+CAA+C;AACjE,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,oBAAoB;AAClF;AACA;AACA,YAAY,uCAAuC;AACnD;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC,WAAW,yBAAyB;AACpC,WAAW,YAAY;AACvB;AACA;AACA,kBAAkB,+CAA+C;AACjE,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,qBAAqB,gEAAgE;AACrF,qBAAqB,gEAAgE;AACrF;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,wBAAwB;AAC7B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,+BAA+B,EAAE;AACjC,mCAAmC,EAAE;AACrC,oCAAoC,EAAE;AACtC,kCAAkC,EAAE;AACpC,iCAAiC,EAAE;AACnC,sCAAsC,EAAE;AACxC,+BAA+B,EAAE;AACjC,mCAAmC,EAAE;AACrC,mCAAmC,EAAE;AACrC,4BAA4B,EAAE;AAC9B,2BAA2B,EAAE;AAC7B,mCAAmC,EAAE;AACrC,4BAA4B,EAAE;AAC9B,iCAAiC,EAAE;AACnC,+BAA+B,EAAE;AACjC,mCAAmC,EAAE;AACrC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE,wHAAwH,SAAS,qBAAqB,UAAU;AACrL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,gBAAgB,EAAE;AAClB,gBAAgB,EAAE;AAClB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,6EAA6E,OAAO;AACpF;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,0BAA0B,mBAAmB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,oDAAoD,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,uBAAuB,OAAO,GAAG,KAAK;AACtC;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,wBAAwB,EAAE,iEAAiE,EAAE,iBAAiB,EAAE;AAChH;AACA;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE,uBAAuB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA,0EAA0E,EAAE;AAC5E;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,mBAAmB,eAAe;AAC5D,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,qBAAqB,EAAE,0BAA0B,EAAE;AACnD,qBAAqB,EAAE,wCAAwC,EAAE;AACjE,qBAAqB,EAAE,4BAA4B,EAAE;AACrD,qBAAqB,EAAE,0BAA0B,EAAE,yCAAyC,EAAE;AAC9F,wBAAwB,EAAE,mBAAmB,eAAe;AAC5D,yBAAyB,EAAE,yBAAyB,EAAE;AACtD;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA,yBAAyB,EAAE;AAC3B;AACA,gCAAgC,EAAE,UAAU,2BAA2B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,mDAAmD,EAAE;AACrD;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE,+BAA+B,EAAE;AAChE,gCAAgC,EAAE,UAAU,0BAA0B;AACtE;AACA;AACA;AACA,+DAA+D,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE,uBAAuB,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,qBAAqB;AACzD;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,WAAW,8CAA8C;AACzD,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,8CAA8C;AACzD,mBAAmB,EAAE,oBAAoB,EAAE;AAC3C,mBAAmB,EAAE,sBAAsB,EAAE;AAC7C;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,qBAAqB;AACzD;AACA;AACA,uBAAuB,EAAE,iCAAiC,EAAE;AAC5D,uBAAuB,EAAE,wBAAwB,EAAE;AACnD;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,oBAAoB;AACxD;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA,qBAAqB,EAAE,uBAAuB,EAAE;AAChD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,uBAAuB,EAAE;AAChD,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,wBAAwB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,UAAU,wBAAwB;AAC5D,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,yBAAyB,EAAE,4BAA4B,EAAE,6FAA6F,YAAY,EAAE;AACpK;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,sBAAsB,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE,iFAAiF,EAAE;AACxG;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,sBAAsB;AAC1D,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,0BAA0B;AAC9D,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,gCAAgC,EAAE,UAAU,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,gCAAgC,EAAE,UAAU,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,0BAA0B;AAC9D,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE,+BAA+B,EAAE;AACtD;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA,qBAAqB,EAAE,0BAA0B,EAAE,iDAAiD,EAAE;AACtG;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE,oCAAoC,EAAE;AACnF;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,+BAA+B,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,+BAA+B,EAAE;AACxD,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,gEAAgE,EAAE;AACzF;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,wBAAwB,EAAE;AACrD,4BAA4B,EAAE;AAC9B,6BAA6B,EAAE;AAC/B,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE;AAC9B,6BAA6B,EAAE;AAC/B,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,oCAAoC,EAAE,iBAAiB,EAAE;AACpF,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,+CAA+C;AACnE;AACA,gBAAgB;AAChB;AACA,yBAAyB,mBAAmB,EAAE,kCAAkC;AAChF;AACA,gBAAgB;AAChB;AACA,eAAe,yBAAyB;AACxC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,mCAAmC;AAC5D;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,iDAAiD;AACpE;AACA,gBAAgB;AAChB;AACA,oBAAoB,+CAA+C;AACnE;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,gBAAgB,QAAQ;AACtD,6BAA6B,EAAE,sBAAsB,EAAE;AACvD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,mCAAmC;AACrD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,mEAAmE,EAAE,OAAO;AACvG;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,0BAA0B,EAAE;AACvD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,oCAAoC;AACzD;AACA,gBAAgB;AAChB;AACA,mBAAmB,2BAA2B;AAC9C;AACA,gBAAgB;AAChB;AACA,qBAAqB,uDAAuD;AAC5E;AACA,gBAAgB;AAChB;AACA,oBAAoB,qCAAqC;AACzD;AACA,gBAAgB;AAChB;AACA,cAAc,uCAAuC;AACrD;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,sBAAsB,yCAAyC;AAC/D;AACA,gBAAgB;AAChB;AACA,gBAAgB,sCAAsC;AACtD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gGAAgG,EAAE,iBAAiB,EAAE;AACrH;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,iFAAiF,wDAAwD;AACzI;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE;AAC3B,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,MAAM;AAC1E;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,oBAAoB;AACrD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,UAAU,kBAAkB;AAC1D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,0BAA0B;AAClE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,UAAU,0BAA0B;AAClE,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,UAAU,yBAAyB;AACjE,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oEAAoE,EAAE;AACtE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6DAA6D,EAAE;AAC/D;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qEAAqE;AACrE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,6CAA6C;AAC/E;AACA,gBAAgB;AAChB;AACA,eAAe,6DAA6D;AAC5E;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yCAAyC,+DAA+D;AACxG;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,mCAAmC;AACvD;AACA,gBAAgB;AAChB;AACA,oCAAoC,2CAA2C;AAC/E;AACA,gBAAgB;AAChB;AACA,oBAAoB,aAAa;AACjC;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6CAA6C,qCAAqC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,uCAAuC;AAChE;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,4BAA4B,EAAE;AAC9B,6BAA6B,sFAAsF;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,WAAW,8CAA8C;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,kCAAkC,EAAE,oCAAoC,EAAE,iEAAiE,EAAE,uCAAuC,EAAE;AACtL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,qBAAqB,EAAE,4CAA4C,EAAE,qDAAqD,EAAE,uCAAuC,EAAE;AACrK;AACA,4BAA4B,EAAE,UAAU,wBAAwB;AAChE,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE,uCAAuC,EAAE,wEAAwE,EAAE,iDAAiD,YAAY,EAAE;AACjN;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE,yBAAyB,EAAE;AAChD,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE,yBAAyB,EAAE;AAChD,wBAAwB,EAAE,UAAU,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA,gDAAgD,EAAE,qDAAqD,EAAE,sCAAsC,EAAE;AACjJ;AACA,gDAAgD,EAAE,qDAAqD,EAAE,sCAAsC,EAAE;AACjJ;AACA,+CAA+C,EAAE,qDAAqD,EAAE;AACxG;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,gCAAgC,EAAE,UAAU,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,gCAAgC,EAAE,UAAU,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,sDAAsD,EAAE;AACxD;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE,6BAA6B,EAAE,yCAAyC,EAAE,gDAAgD,EAAE;AACnK;AACA,uCAAuC,EAAE;AACzC;AACA,4CAA4C;AAC5C,2EAA2E,EAAE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,0BAA0B,EAAE;AAC5B;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE,8CAA8C,EAAE;AAC3E;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,0BAA0B,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,kBAAkB;AACtD,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,4BAA4B,yCAAyC;AAC/F,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE;AAC1B,yBAAyB,EAAE;AAC3B,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAyD;AACzE;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,uBAAuB,EAAE,wBAAwB,EAAE;AACnD;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,UAAU;AAClD,6BAA6B,EAAE;AAC/B;AACA;AACA,4BAA4B,EAAE,0DAA0D,EAAE;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,2BAA2B;AACnE,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE,2BAA2B,EAAE;AAClD;AACA,yBAAyB,EAAE,4BAA4B,EAAE,iBAAiB,EAAE;AAC5E,yHAAyH,EAAE;AAC3H,4DAA4D,EAAE;AAC9D;AACA;AACA,mFAAmF,EAAE;AACrF;AACA;AACA;AACA,qBAAqB,EAAE,0BAA0B,EAAE;AACnD,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,qBAAqB;AACzD,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,mBAAmB,eAAe;AAC5D,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,8DAA8D,EAAE;AAChE,wBAAwB,EAAE,iBAAiB,EAAE;AAC7C;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,+BAA+B,EAAE;AACpE,oCAAoC,EAAE,UAAU,0BAA0B;AAC1E,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,oCAAoC,EAAE,UAAU,2BAA2B;AAC3E,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,qBAAqB,EAAE,gCAAgC,EAAE;AACzD;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,YAAY;AAChD,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,0BAA0B;AAC9D,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA,qCAAqC,EAAE;AACvC;AACA,qCAAqC,EAAE;AACvC;AACA,qCAAqC,EAAE;AACvC;AACA,qCAAqC,EAAE;AACvC;AACA,qCAAqC,EAAE;AACvC;AACA,qCAAqC,EAAE;AACvC;AACA,qCAAqC,EAAE;AACvC;AACA,qCAAqC,EAAE;AACvC;AACA,qCAAqC,EAAE;AACvC;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE,UAAU,mBAAmB;AACnE,qCAAqC,EAAE;AACvC;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,uBAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB,mDAAmD,EAAE;AACrD,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE,uBAAuB,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,mBAAmB;AAC3D;AACA;AACA,2BAA2B,EAAE;AAC7B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,kBAAkB;AACtD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,YAAY,EAAE;AACtE,6BAA6B,EAAE,2EAA2E,EAAE,iBAAiB,EAAE,iDAAiD,YAAY,EAAE;AAC9L,6BAA6B,EAAE,0DAA0D,EAAE,iBAAiB,EAAE;AAC9G;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA,2BAA2B,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,sEAAsE,EAAE;AAC3I;AACA;AACA;AACA,6DAA6D,YAAY,EAAE;AAC3E,iCAAiC,EAAE,wEAAwE,EAAE,iBAAiB,EAAE;AAChI,iBAAiB,YAAY,EAAE;AAC/B,6BAA6B,EAAE,iBAAiB,EAAE,mEAAmE,EAAE;AACvH;AACA;AACA,2BAA2B,EAAE,iBAAiB,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE,oEAAoE,EAAE,iBAAiB,EAAE;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,kEAAkE,EAAE;AACpE;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,eAAe;AAC9H;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,kIAAkI,eAAe;AACjJ;AACA;AACA;AACA;AACA;AACA,8GAA8G,eAAe;AAC7H;AACA;AACA,oGAAoG,eAAe;AACnH;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,mGAAmG,eAAe;AAClH;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,8BAA8B,EAAE;AACvD,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,EAAE;AAC9E;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,yBAAyB,EAAE;AAC3B,8CAA8C,EAAE,gCAAgC,EAAE,iBAAiB,EAAE;AACrG;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,sBAAsB;AAC1D,yBAAyB,EAAE;AAC3B;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,iCAAiC,EAAE,oBAAoB,EAAE;AACzD,+BAA+B,EAAE,+BAA+B,EAAE;AAClE;AACA,qCAAqC,EAAE,+CAA+C,EAAE,iBAAiB,EAAE;AAC3G;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC,0CAA0C,EAAE,MAAM,WAAW;AAC7D;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,sCAAsC,EAAE,MAAM,WAAW;AACzD;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC,0CAA0C,EAAE,MAAM,WAAW;AAC7D;AACA;AACA,qCAAqC,EAAE,8CAA8C,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,wBAAwB,EAAE,UAAU,sBAAsB;AAC1D,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA,oCAAoC,EAAE,UAAU,2BAA2B;AAC3E,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,UAAU,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,yHAAyH,YAAY,EAAE,0BAA0B,sBAAsB,YAAY,EAAE,0BAA0B;AAC/N;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,UAAU,6BAA6B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,SAAS;AAC7C,yBAAyB,EAAE;AAC3B;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,wBAAwB,EAAE,UAAU,sBAAsB;AAC1D,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,wBAAwB,EAAE,UAAU,sBAAsB;AAC1D,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE,+BAA+B,EAAE;AAChE,gCAAgC,EAAE,UAAU,0BAA0B;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,eAAe;AACnD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,4DAA4D,EAAE,iBAAiB,EAAE,iBAAiB,EAAE;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,+CAA+C,EAAE,iBAAiB,EAAE;AAC3F;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,wBAAwB,EAAE,UAAU,mDAAmD;AACvF;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,sBAAsB;AAC9D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,iDAAiD,EAAE;AACnD,kEAAkE,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,oBAAoB,6BAA6B;AAC/E,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,0BAA0B,EAAE;AAC/D,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,uCAAuC;AAClD;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA,oBAAoB;AACpB;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,UAAU,0BAA0B;AAClE,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,0BAA0B,EAAE;AACnD;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,gCAAgC,EAAE,UAAU,6BAA6B;AACzE,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA,uEAAuE,EAAE;AACzE;AACA;AACA;AACA,6BAA6B,EAAE,uBAAuB,EAAE;AACxD,6BAA6B,EAAE;AAC/B,4BAA4B,EAAE;AAC9B;AACA,uDAAuD,uCAAuC;AAC9F;AACA;AACA;AACA,oCAAoC,EAAE;AACtC,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,kBAAkB,2BAA2B;AACvE,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,kBAAkB,2BAA2B;AACvE,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,mCAAmC,EAAE;AACrC,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,gDAAgD;AACpE;AACA,gBAAgB;AAChB;AACA,qBAAqB,oCAAoC;AACzD;AACA,gBAAgB;AAChB;AACA,mBAAmB,kCAAkC;AACrD;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,gCAAgC,EAAE,iCAAiC,mDAAmD;AACtH,iCAAiC,EAAE;AACnC;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,gCAAgC,EAAE,iCAAiC,mDAAmD;AACtH,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,YAAY,EAAE;AACxB;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,gBAAgB;AACpD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,qDAAqD,EAAE;AACvD;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,2BAA2B;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,yBAAyB;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,4BAA4B,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,uCAAuC;AAC7D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,wCAAwC;AAC/D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,4CAA4C;AACvE;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,sCAAsC;AACjE;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,gDAAgD;AAC3E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,8CAA8C;AACzE;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,sCAAsC;AACjE;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,oDAAoD;AAC/E;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,oDAAoD;AAC/E;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,4CAA4C;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,sCAAsC;AACjE;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,+DAA+D;AACnE;AACA;AACA,gEAAgE,mBAAmB;AACnF,IAAI,6BAA6B;AACjC;AACA;AACA;AACA,IAAI,+CAA+C;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mBAAmB;AAC3F,IAAI,6BAA6B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,mBAAmB;AACvF;AACA,gGAAgG;AAChG,6BAA6B;AAC7B;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,YAAY,sDAAsD;AAClE;AACA;AACA;AACA,+EAA+E;AAC/E,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,sBAAsB,sCAAsC,GAAG,mBAAmB,MAAM;AACxF,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,mBAAmB,KAAK;AAC7F,uBAAuB;AACvB;AACA,IAAI,sEAAsE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA,YAAY,qBAAqB;AACjC,YAAY,oBAAoB;AAChC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,+EAA+E;AAC/E,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,qDAAqD,yBAAyB,OAAO;AACrF,cAAc;AACd;AACA;AACA;AACA;AACA,8FAA8F;AAC9F,eAAe,KAAK,uBAAuB;AAC3C,mDAAmD,2BAA2B,OAAO;AACrF,8CAA8C;AAC9C;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,+EAA+E;AAC/E,2DAA2D;AAC3D;AACA;AACA;AACA,2DAA2D,6BAA6B;AACxF;AACA,wDAAwD,mBAAmB,OAAO;AAClF,cAAc;AACd;AACA;AACA;AACA,IAAI,mBAAmB;AACvB;AACA;AACA;AACA;AACA,IAAI,mBAAmB,KAAK,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB,oBAAoB,aAAa;AACjC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,+EAA+E;AAC/E,2DAA2D;AAC3D;AACA;AACA;AACA,IAAI,8BAA8B,aAAa,mCAAmC;AAClF,aAAa,uBAAuB,MAAM,2BAA2B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,mCAAmC;AAC7C;AACA;AACA,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA,UAAU,YAAY;AACtB,wBAAwB,cAAc;AACtC;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,+EAA+E;AAC/E,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,6BAA6B;AACzF,mFAAmF;AACnF,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA,0BAA0B,YAAY;AACtC,iCAAiC,cAAc;AAC/C;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,+EAA+E;AAC/E,2DAA2D;AAC3D;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oCAAoC;AAChD,YAAY,uCAAuC;AACnD,YAAY,yCAAyC;AACrD,YAAY,sCAAsC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yBAAyB;AACrC,YAAY,0BAA0B;AACtC,YAAY,4BAA4B;AACxC,YAAY,2BAA2B;AACvC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,+EAA+E;AAC/E,2DAA2D;AAC3D;AACA;AACA,8BAA8B,4CAA4C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,iCAAiC;AAChF,wEAAwE;AACxE,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB,yBAAyB,aAAa;AACtC;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,cAAc;AACxC,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kDAAkD;AAC7D,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa,SAAS,GAAG;AACrC,gBAAgB,QAAQ;AACxB,cAAc,aAAa,OAAO,EAAE;AACpC,OAAO,UAAU,oCAAoC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yDAAyD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,qBAAqB;AAC9E;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;;AAEA;AACA;AACA,8FAA8F;AAC9F,yBAAyB;AACzB;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,WAAW;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,iBAAiB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C,mCAAmC,aAAa;AAChD;AACA;AACA,2CAA2C,aAAa;AACxD,iDAAiD,aAAa;AAC9D;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;;AAEA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oDAAoD;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA,kCAAkC,aAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEQ;AACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrvcA;AAAA;AACA;AACA;AACA;AACA;AACiO;AAC9M;AACG;AACR;AACI;;AAElB;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,iDAAiD;AAClE;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,iDAAiD;AAClE;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,mDAAmD;AACtE;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,mDAAmD;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,oDAAoD;AACxE;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,mDAAmD;AACtE;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,kDAAkD;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,oDAAoD;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,iDAAiD;AAClE;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,mDAAmD;AACtE;AACA,gBAAgB;AAChB;AACA,kBAAkB,kDAAkD;AACpE;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,qDAAqD;AAC1E;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB;AACzD,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,yBAAyB,aAAa;AACtC;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,aAAa;AAC7B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2EAA2E;AAC7F,IAAI;AACJ;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,mBAAmB;AAC5E;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B;AACA;AACA;AACA;AACA,4BAA4B,MAAM,OAAO,KAAK,4BAA4B,EAAE,gCAAgC,EAAE,+BAA+B,KAAK,yCAAyC,KAAK;AAChM;AACA;AACA;AACA,+CAA+C,mBAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,mDAAmD,SAAS,sCAAsC,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,mDAAmD,SAAS,sCAAsC,EAAE;AACpG;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mDAAmD,mBAAmB;AACtE;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,6BAA6B,EAAE;AAC/B;AACA,iBAAiB,eAAe,sDAAsD,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,iBAAiB,eAAe,sDAAsD,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,6BAA6B,EAAE;AAC/B;AACA,iBAAiB,aAAa,oDAAoD;AAClF;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,aAAa;AAC1C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE,mCAAmC,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE,mCAAmC,EAAE;AAChE;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,gDAAgD,aAAa,EAAE,kCAAkC,EAAE;AACnG,KAAK,IAAI;AACT;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,4BAA4B;AAClD;AACA,QAAQ,4BAA4B;AACpC;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,oBAAoB;AAC9C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,qBAAqB;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,yEAAyE;AAChG;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,kEAAmB;AACxB,KAAK,mEAAoB;AACzB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,eAAe,GAAG,4BAA4B,OAAO,uBAAuB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,oBAAoB;AAC9C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,qBAAqB;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,yBAAyB,wBAAwB;AACjD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,kEAAmB;AACxB,KAAK,mEAAoB;AACzB,KAAK,gCAAgC,gEAAiB,GAAG,gGAAiD,IAAI;AAC9G;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,oBAAoB,EAAE;AACtB,kCAAkC,EAAE;AACpC;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,oBAAoB,EAAE;AACtB,kCAAkC,EAAE;AACpC;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,eAAe,GAAG,4BAA4B,OAAO,uBAAuB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oCAAoC,4CAA4C;AAChF;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,qBAAqB;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,kEAAmB;AACxB,KAAK,mEAAoB;AACzB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,mBAAmB,EAAE,sBAAsB;AAChE;AACA,gBAAgB;AAChB;AACA,0BAA0B,mBAAmB,EAAE,sBAAsB;AACrE;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4BAA4B,EAAE,mCAAmC,QAAQ;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe,GAAG,4BAA4B,OAAO;AACjE,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA,6BAA6B,mBAAmB,SAAS,2BAA2B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,gCAAgC;AAChC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,6BAA6B;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,wBAAwB;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,qBAAqB;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,oDAAoD;AAC3E;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,kEAAmB;AACxB,KAAK,mEAAoB;AACzB,KAAK,8BAA8B;AACnC,KAAK,iEAAkB;AACvB;AACA;AACA,cAAc,6DAAc;AAC5B,yBAAyB,6DAAc;AACvC,eAAe,6DAAc;AAC7B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,eAAe,GAAG,4BAA4B,OAAO,uBAAuB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oCAAoC,4CAA4C;AAChF;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,qBAAqB;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,kEAAmB;AACxB,KAAK,mEAAoB;AACzB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA;AACA,cAAc,GAAG,IAAI,MAAM;AAC3B;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe,GAAG,4BAA4B,OAAO;AACjE,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA,6BAA6B,mBAAmB,SAAS,2BAA2B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,4EAA4E,mBAAmB;AAC/F;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,qBAAqB;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,uBAAuB,uCAAuC;AAC9D;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,uEAAuE;AAC9F;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,kEAAmB;AACxB,KAAK,mEAAoB;AACzB;AACA;AACA,qBAAqB,6DAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,qBAAqB,IAAI;AACxD;AACA;AACA;AACA,KAAK,mEAAoB;AACzB,KAAK,kEAAmB;AACxB,KAAK,iDAAiD,gEAAiB,GAAG,4DAAa,IAAI;AAC3F;AACA;AACA,iBAAiB,iFAAkC;AACnD,eAAe,+EAAgC;AAC/C;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA,cAAc,GAAG,IAAI,MAAM;AAC3B;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,gCAAgC;AAChC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,4EAA4E,mBAAmB;AAC/F;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,6BAA6B,EAAE;AAC/B,qDAAqD,kDAAkD;AACvG;AACA;AACA,qDAAqD,yBAAyB;AAC9E;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC,oCAAoC,EAAE,UAAU,oBAAoB;AACpE,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA,iCAAiC,EAAE,yBAAyB,EAAE;AAC9D,oCAAoC,EAAE,UAAU,oBAAoB;AACpE,qCAAqC,EAAE;AACvC;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,qBAAqB;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,8BAA8B,EAAE;AAChC,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,oDAAoD,EAAE;AACtD;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,iEAAiE;AACxF;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,kEAAmB;AACxB,KAAK,mEAAoB;AACzB;AACA;AACA,qBAAqB,6DAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,qBAAqB,IAAI;AACxD;AACA;AACA;AACA,KAAK,mEAAoB;AACzB,KAAK,kEAAmB;AACxB,KAAK,yDAAyD,gEAAiB,GAAG,4DAAa,IAAI;AACnG;AACA;AACA,iBAAiB,iFAAkC;AACnD,eAAe,+EAAgC;AAC/C;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE;AACzD,iEAAiE,EAAE,qDAAqD,YAAY,EAAE;AACtI;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,0DAA0D,YAAY,EAAE,iBAAiB,EAAE,yDAAyD,EAAE;AACtJ;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,uBAAuB,EAAE,kBAAkB,EAAE;AAC7C,KAAK;AACL;AACA,wBAAwB,EAAE;AAC1B,uBAAuB,EAAE,kBAAkB,EAAE;AAC7C,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE,uEAAuE,YAAY,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,6CAA6C,+BAA+B;AAC5E;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,+BAA+B,YAAY,EAAE,+BAA+B;AAC5E;AACA,wBAAwB,EAAE;AAC1B,+BAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,GAAG,WAAW;AAC7C;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,yBAAyB,EAAE,yBAAyB,EAAE;AACtD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oBAAoB,MAAM,qBAAqB;AAChG;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gCAAgC,YAAY,EAAE;AAC9C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB;AAChB;AACA,mBAAmB,mBAAmB,EAAE,8CAA8C;AACtF;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,6CAA6C;AAC7D;AACA,gBAAgB,YAAY;AAC5B,gBAAgB;AAChB;AACA,yBAAyB,yDAAyD;AAClF;AACA,gBAAgB;AAChB;AACA,qBAAqB,4CAA4C;AACjE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,qBAAqB,eAAe;AACpC;AACA,gBAAgB;AAChB;AACA,4BAA4B,8DAA8D;AAC1F;AACA,gBAAgB;AAChB;AACA,0BAA0B,4DAA4D;AACtF;AACA,gBAAgB;AAChB;AACA,2BAA2B,6DAA6D;AACxF;AACA,gBAAgB;AAChB;AACA,wBAAwB,0DAA0D;AAClF;AACA,gBAAgB;AAChB;AACA,wBAAwB,0DAA0D;AAClF;AACA,gBAAgB;AAChB;AACA,0BAA0B,4DAA4D;AACtF;AACA,gBAAgB;AAChB;AACA,0BAA0B,4DAA4D;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,qBAAqB,WAAW;AAChC;AACA;AACA,KAAK,yEAA0B,mFAAmF,IAAI;AACtH;AACA;AACA;AACA,KAAK,gCAAgC,4DAAa,IAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,qBAAqB,WAAW;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,uCAAuC,4DAAa,IAAI;AAC7D;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,2BAA2B,EAAE,kDAAkD,EAAE;AACxG;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,oCAAoC,EAAE,kDAAkD,EAAE;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mBAAmB,GAAG,iBAAiB;AACnF,IAAI,iBAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA,gBAAgB;AAChB;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,2BAA2B;AAC3B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B,oBAAoB,EAAE;AACtB;AACA,yCAAyC,0BAA0B,iBAAiB,EAAE,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,yBAAyB;AACzB,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,4BAA4B;AAC5B,oBAAoB,EAAE;AACtB;AACA,yCAAyC,yBAAyB,iBAAiB,EAAE,EAAE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,2BAA2B;AAC3B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,qBAAqB;AACrB,oBAAoB,EAAE;AACtB,oBAAoB,EAAE;AACtB,yCAAyC,kBAAkB,iBAAiB,EAAE,EAAE;AAChF;AACA;AACA,wBAAwB,EAAE;AAC1B,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oBAAoB;AACpB,oBAAoB,EAAE;AACtB,yCAAyC,iBAAiB,iBAAiB,EAAE,EAAE;AAC/E,qCAAqC,4CAA4C;AACjF;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,gCAAgC,kBAAkB;AAClD;AACA,qCAAqC,4CAA4C;AACjF;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,6BAA6B,EAAE;AAC/B;AACA,kEAAkE,YAAY;AAC9E;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,+BAA+B;AAC/B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,4CAA4C;AAC5C,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,+BAA+B,yCAAyC;AACxE;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,oBAAoB,EAAE;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,6BAA6B;AAC7B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,4BAA4B;AAC5B,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC,+BAA+B;AACpE;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8CAA8C,EAAE;AAChD,wCAAwC,EAAE,kBAAkB,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iBAAiB,MAAM,iBAAiB;AAC5C;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D,2BAA2B;AAC3B,4BAA4B;AAC5B;AACA;AACA,eAAe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mBAAmB;AACrD;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mCAAmC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,gCAAgC;AAChC,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,qCAAqC;AACvF,oCAAoC,uCAAuC;AAC3E;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA,uCAAuC;AACvC,wCAAwC;AACxC;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB;AACpB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA,gBAAgB;AAChB;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,yBAAyB;AACnD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB;AACvB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,+CAA+C;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,+CAA+C,mCAAmC;AAClF,6BAA6B,mCAAmC;AAChE;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA,sDAAsD,mBAAmB;AACzE;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB,MAAM,iBAAiB;AACzD;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,2BAA2B,OAAO,qBAAqB;AACvD,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,SAAS,mBAAmB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,GAAG,oEAAoE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,GAAG,iBAAiB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mCAAmC;AACxE;AACA;AACA;AACA;AACA;AACA,eAAe,uCAAuC;AACtD,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mEAAmE,EAAE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mEAAmE,EAAE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,+BAA+B;AACjD,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,OAAO;AACvC;AACA,uBAAuB,6BAA6B;AACpD,gCAAgC,OAAO;AACvC;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,gCAAgC;AAChC;AACA;AACA;AACA,uDAAuD,+CAA+C;AACtG,SAAS;AACT;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,OAAO;AACvC;AACA,yBAAyB,eAAe;AACxC,gCAAgC,OAAO;AACvC;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA;AACA,6DAA6D,+CAA+C;AAC5G;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iCAAiC;AACzD;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,8BAA8B;AAC/C;AACA,QAAQ;AACR;AACA,oCAAoC,MAAM;AAC1C,kDAAkD;AAClD;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,oBAAoB,cAAc;AAClC;AACA,wCAAwC,+CAA+C;AACvF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,sCAAsC;AACtC,qFAAqF,EAAE;AACvF;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,SAAS;AACT;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,KAAK;AACxE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,aAAa,EAAE,wCAAwC;AAC3E;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,+CAA+C,8BAA8B,EAAE;AAC/E;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oFAAoF,KAAK;AACzF;AACA,SAAS;AACT;AACA;AACA;AACA,oEAAoE,mBAAmB;AACvF,IAAI,iBAAiB,KAAK,iBAAiB;AAC3C;AACA,sDAAsD,mBAAmB;AACzE;AACA;AACA;AACA;AACA,eAAe,mBAAmB,MAAM,iBAAiB;AACzD;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,2DAA2D;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,iBAAiB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mCAAmC;AACxE;AACA;AACA,gBAAgB,uBAAuB;AACvC,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,eAAe,6BAA6B;AAC5C;AACA,qBAAqB,uBAAuB;AAC5C,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oEAAoE,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oEAAoE,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,6BAA6B;AAC/C;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,+BAA+B;AAC/B;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,gCAAgC;AAChC;AACA;AACA;AACA,+CAA+C,+CAA+C;AAC9F,SAAS;AACT;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,+BAA+B;AAC/B;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA;AACA,qDAAqD,+CAA+C;AACpG;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,8BAA8B;AACxC;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,kCAAkC;AAClC;AACA,yCAAyC,+CAA+C;AACxF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gFAAgF,EAAE;AAClF,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,SAAS;AACT;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,MAAM;AACvE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mDAAmD,oBAAoB,EAAE;AACzE;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kFAAkF,EAAE;AACpF;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iBAAiB;AACrB;AACA;AACA;AACA,iEAAiE,eAAe;AAChF,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA,uBAAuB,2BAA2B;AAClD;AACA,gBAAgB;AAChB;AACA,yBAAyB,aAAa;AACtC;AACA,gBAAgB;AAChB;AACA,mBAAmB,kBAAkB;AACrC;AACA,gBAAgB;AAChB;AACA,gBAAgB,WAAW;AAC3B;AACA,gBAAgB;AAChB;AACA,oBAAoB,2BAA2B;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,wBAAwB,EAAE,gCAAgC,EAAE;AAC5D;AACA,gDAAgD,mBAAmB;AACnE;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,mBAAmB,EAAE,8BAA8B;AACxE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE,4BAA4B;AAC3D;AACA;AACA,0CAA0C,mBAAmB;AAC7D,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,mBAAmB,EAAE,8BAA8B;AAC1E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE,sBAAsB,EAAE,8BAA8B,EAAE;AACvF;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,8BAA8B;AACnD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,kBAAkB;AACjC;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,yDAAyD;AAChF;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,sFAAuC,IAAI;AAChH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,4FAA6C,IAAI;AACtH;AACA;AACA,iBAAiB,uFAAwC;AACzD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK,EAAE;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8BAA8B,+BAA+B;AAC7D,KAAK,EAAE;AACP;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK,EAAE;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,iBAAiB;AACjF;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA,QAAQ;;AAER;;AAEA;;AAEA,QAAQ,uCAAuC;AAC/C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;;AAEA,QAAQ;;AAER;;AAEA,QAAQ,+BAA+B;AACvC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA,0EAA0E,iBAAiB;AAC3F;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;;AAEA,QAAQ;;AAER;;AAEA,QAAQ,+BAA+B;AACvC;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,wFAAwF,IAAI;AAC3H;AACA;AACA;AACA,KAAK,uCAAuC,4DAAa,GAAG,gEAAiB,IAAI;AACjF,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,sFAAuC,IAAI;AAChH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,4FAA6C,IAAI;AACtH;AACA;AACA,cAAc,sFAAuC;AACrD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,eAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA,QAAQ,mBAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA,4DAA4D,mBAAmB;AAC/E;AACA;AACA;AACA;AACA,kDAAkD,gCAAgC;AAClF;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,qBAAqB;AACrB,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,8DAA8D;AACjF;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,yBAAyB,yDAAyD;AAClF;AACA,gBAAgB;AAChB;AACA,qBAAqB,+CAA+C;AACpE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6CAA6C,mBAAmB;AAChE;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,sCAAsC,+BAA+B,+BAA+B,EAAE,EAAE;AACxG;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,uCAAuC,gEAAiB,GAAG,4DAAa,IAAI;AACjF,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,sFAAuC,IAAI;AAChH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,4FAA6C,IAAI;AACtH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,0FAA2C,IAAI;AACpH;AACA;AACA,cAAc,6DAAc;AAC5B,oBAAoB,kFAAmC;AACvD,eAAe,iFAAkC;AACjD,iBAAiB,wFAAyC;AAC1D,gBAAgB,wFAAyC;AACzD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;;AAEA,QAAQ,kCAAkC;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;;AAEA,UAAU;;AAEV;;AAEA,UAAU,+BAA+B;AACzC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;;AAEA;;AAEA,SAAS,kCAAkC;AAC3C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;;AAEA,QAAQ,gCAAgC;AACxC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;;AAEA,UAAU,gCAAgC;AAC1C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,+BAA+B;AAC/D;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA,0EAA0E;AAC1E;AACA;AACA,IAAI,mBAAmB;AACvB;AACA;AACA;AACA,4DAA4D,mBAAmB;AAC/E,oBAAoB,mBAAmB;AACvC,IAAI,4BAA4B;AAChC;AACA,2EAA2E,uBAAuB;AAClG,kCAAkC,mBAAmB;AACrD,IAAI,iBAAiB,qCAAqC,0BAA0B;AACpF;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,IAAI,uBAAuB;AAC3B;AACA,+EAA+E,mBAAmB;AAClG,mDAAmD,yCAAyC;AAC5F,IAAI,6CAA6C;AACjD;AACA;AACA,qBAAqB,iDAAiD;AACtE,IAAI,mDAAmD;AACvD;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,sCAAsC;AACtE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oDAAoD,EAAE;AACtD,2BAA2B,EAAE,iBAAiB,EAAE;AAChD;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,WAAW;AAC3B;AACA,gBAAgB;AAChB;AACA,qBAAqB,+CAA+C;AACpE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,kBAAkB;AACrC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,mFAAmF,IAAI;AACtH;AACA;AACA;AACA,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,sFAAuC,IAAI;AAChH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,4FAA6C,IAAI;AACtH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,0FAA2C,IAAI;AACpH;AACA;AACA,cAAc,qFAAsC;AACpD,eAAe,iFAAkC;AACjD,gBAAgB,wFAAyC;AACzD,oBAAoB,kFAAmC;AACvD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD,IAAI,iBAAiB,8BAA8B,mBAAmB,GAAG,iBAAiB;AAC1F,QAAQ,iBAAiB,qBAAqB,uBAAuB,GAAG,qBAAqB;AAC7F,QAAQ,qBAAqB;AAC7B;AACA;AACA,IAAI,iBAAiB,sDAAsD,iBAAiB;AAC5F,IAAI,yCAAyC,KAAK;AAClD;AACA;AACA;AACA,WAAW,iBAAiB,IAAI,iDAAiD;AACjF,kBAAkB,mDAAmD;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,yBAAyB,aAAa;AACtC;AACA,gBAAgB;AAChB;AACA,mBAAmB,kBAAkB;AACrC;AACA,gBAAgB;AAChB;AACA,gBAAgB,WAAW;AAC3B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,mBAAmB,EAAE,8BAA8B;AACxE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,iCAAiC;AACzD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B;AAC1B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,mBAAmB,EAAE,8BAA8B;AAC1E;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B;AAC1B;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,mBAAmB,EAAE,8BAA8B;AAC1E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,sBAAsB,EAAE;AACnD;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,kBAAkB;AACjC;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA,SAAS;AACT,uCAAuC,mBAAmB;AAC1D;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6DAA6D,EAAE;AAC/D;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,6DAA6D,EAAE,wCAAwC,EAAE;AACzG,yBAAyB,EAAE;AAC3B,uEAAuE,EAAE,6CAA6C,EAAE;AACxH;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,yDAAyD;AAChF;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,sFAAuC,IAAI;AAChH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,4FAA6C,IAAI;AACtH;AACA;AACA,cAAc,mFAAoC;AAClD,kBAAkB,8DAAe;AACjC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA,kDAAkD,0BAA0B;AAC5E;AACA;AACA,6CAA6C,iBAAiB;AAC9D,oBAAoB,iBAAiB;AACrC,IAAI,iBAAiB,2BAA2B,0BAA0B;AAC1E;AACA;AACA;AACA;AACA;AACA,wDAAwD,iBAAiB;AACzE,IAAI,+BAA+B;AACnC;AACA;AACA;AACA;AACA;AACA,IAAI,iBAAiB,8CAA8C,uBAAuB;AAC1F;AACA;AACA,QAAQ,iBAAiB;AACzB,IAAI,yCAAyC,KAAK,6CAA6C;AAC/F;AACA;AACA,qBAAqB,iDAAiD;AACtE,IAAI,mDAAmD;AACvD;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,kEAAkE,IAAI;AACrG;AACA;AACA;AACA,KAAK,uCAAuC,gEAAiB,GAAG,4DAAa,GAAG,gEAAiB,IAAI;AACrG,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,sFAAuC,IAAI;AAChH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,4FAA6C,IAAI;AACtH;AACA;AACA,cAAc,uFAAwC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA,wDAAwD,0BAA0B;AAClF;AACA;AACA,6CAA6C,iBAAiB;AAC9D,oBAAoB,iBAAiB;AACrC,IAAI,iBAAiB,2BAA2B,0BAA0B;AAC1E;AACA;AACA;AACA;AACA;AACA,wDAAwD,iBAAiB;AACzE,IAAI,+BAA+B,uBAAuB,iBAAiB;AAC3E;AACA;AACA;AACA,IAAI,iBAAiB,8CAA8C,uBAAuB;AAC1F;AACA;AACA,QAAQ,iBAAiB;AACzB,IAAI,iBAAiB,IAAI,yCAAyC;AAClE,IAAI,6CAA6C;AACjD;AACA;AACA,qBAAqB,iBAAiB,IAAI,iDAAiD;AAC3F,+BAA+B,mDAAmD;AAClF;AACA;AACA,0DAA0D,iBAAiB;AAC3E,QAAQ,2BAA2B;AACnC,wDAAwD;AACxD;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gCAAgC,YAAY,EAAE;AAC9C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,mBAAmB,EAAE,8CAA8C;AACtF;AACA,gBAAgB;AAChB;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,6CAA6C;AAC7D;AACA,gBAAgB;AAChB;AACA,qBAAqB,4CAA4C;AACjE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,kEAAkE,IAAI;AACrG;AACA;AACA;AACA,KAAK,uCAAuC,gEAAiB,GAAG,4DAAa,GAAG,gEAAiB,IAAI;AACrG,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,sFAAuC,IAAI;AAChH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,4FAA6C,IAAI;AACtH;AACA;AACA,cAAc,uFAAwC;AACtD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAmB,iBAAiB,iBAAiB;AAC9E;AACA;AACA,0EAA0E;AAC1E;AACA;AACA,IAAI,mBAAmB;AACvB;AACA;AACA;AACA,wDAAwD,0BAA0B;AAClF;AACA;AACA,sCAAsC,mBAAmB;AACzD,8BAA8B,mBAAmB;AACjD,YAAY,iBAAiB,KAAK,iBAAiB;AACnD;AACA,+CAA+C,mBAAmB;AAClE,gCAAgC,+BAA+B;AAC/D,+BAA+B;AAC/B;AACA,8EAA8E,mBAAmB;AACjG,+CAA+C,uBAAuB;AACtE;AACA;AACA,KAAK,mBAAmB;AACxB,KAAK,yCAAyC,KAAK,6CAA6C;AAChG;AACA;AACA,qBAAqB,iDAAiD;AACtE,IAAI,mDAAmD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,qBAAqB;AACrB,eAAe;AACf;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,sCAAsC;AACtE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,0CAA0C,EAAE,sBAAsB;AAClF;AACA,gBAAgB;AAChB;AACA,yBAAyB,yDAAyD;AAClF;AACA,gBAAgB;AAChB;AACA,qBAAqB,+CAA+C;AACpE;AACA,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB,EAAE;AACtB,gDAAgD,EAAE;AAClD,uBAAuB,EAAE,iBAAiB,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,iEAAiE,IAAI;AACpG;AACA;AACA;AACA,KAAK,uCAAuC,gEAAiB,GAAG,4DAAa,GAAG,gEAAiB,IAAI;AACrG,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,sFAAuC,IAAI;AAChH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,4FAA6C,IAAI;AACtH,KAAK,4BAA4B,gEAAiB,GAAG,4DAAa,GAAG,0FAA2C,IAAI;AACpH;AACA;AACA,cAAc,yFAA0C;AACxD,eAAe,iFAAkC;AACjD,gBAAgB,wFAAyC;AACzD,oBAAoB,kFAAmC;AACvD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2EAA2E;AAC7F,IAAI;AACJ;AACA,4BAA4B,mBAAmB;AAC/C,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gEAAgE,MAAM;AACtE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB;AACvB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA,kBAAkB,6DAAc;AAChC;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB;AACvB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB,KAAK,qBAAqB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA,KAAK;AACL;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA,eAAe,6DAAc;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,0BAA0B,KAAK,qBAAqB;AAC5E;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0BAA0B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,qBAAqB;AACxD;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB;AACvB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA,mBAAmB,6DAAc;AACjC;AACA;AACA,wBAAwB,0BAA0B,KAAK,qBAAqB;AAC5E;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0BAA0B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,qBAAqB;AACxD;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB;AACvB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA,mBAAmB,6DAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,2BAA2B;AAC5C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,qBAAqB;AACxD;AACA,gBAAgB;AAChB;AACA,wBAAwB,oDAAoD;AAC5E;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB;AACvB,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA,iBAAiB,6DAAc;AAC/B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA,gBAAgB,iBAAiB;AACjC,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,mBAAmB;AAC1C,aAAa,IAAI;AACjB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,gBAAgB;AAC5F,gBAAgB,kBAAkB,0CAA0C;AAC5E;AACA;AACA,yDAAyD;AACzD;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEQ;AACR;;;;;;;;;;;;;;;;;;;;;ACp3LA;AAAA;AACA;AACA;AACA;AACA;AAC+b;AACuX;AACvxB;AACgB;;AAE/C;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,kDAAkD,SAAS,EAAE,cAAc;AAC3E;AACA;AACA,oIAAiE,wEAAiB;AAClF;AACA;AACA,oBAAoB,wEAAiB;AACrC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mGAAmG,IAAI;AACvG;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,iMAAuF,iBAAiB;AACxG;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,wCAAwC,EAAE;AAC1C,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C,2CAA2C,EAAE;AAC7C,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,4CAA4C;AAC7E;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,0CAA0C;AAClE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,6BAA6B;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,oCAAoC;AAC7D;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC,KAAK,qHAA0D;AAC/D,KAAK,oHAAyD;AAC9D,KAAK,mGAAwC;AAC7C,KAAK,kLAA4D;AACjE,KAAK,6EAA8B;AACnC,KAAK,sFAA2B;AAChC,KAAK,uJAAiC;AACtC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,6BAA6B,EAAE,mDAAmD,EAAE;AACpF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,KAAK,uYAAgG;AACrG,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,+FAAgD;AAChD;AACA,KAAK,oKAA8C;AACnD,KAAK,wKAAkD;AACvD,KAAK,4KAAsD;AAC3D,KAAK,gLAA0D;AAC/D,KAAK;AACL;AACA;AACA;AACA,sEAAuB;AACvB,KAAK,yGAA8C;AACnD,KAAK,8LAAwE;AAC7E,KAAK,2JAAiD;AACtD,KAAK,6KAAuD;AAC5D,KAAK,wKAAkD;AACvD,KAAK,4KAAsD;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,aAAa;AACb,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qEAAqE,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,wBAAwB,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,uFAAwC,eAAe;AAC5D,KAAK,iLAAmF;AACxF;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,IAAI;AAC7C;AACA;AACA,mCAAmC,0BAA0B,IAAI,GAAG;AACpE;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc,6HAAkE,GAAG;AACtG;AACA,KAAK;AACL,KAAK,uJAAuD;AAC5D;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,+HAAoE;AACtG;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEQ;AACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChnBA;AAAA;AACA;AACA;AACA;AACA;AAC4F;AAC4V;;AAExb;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,EAAE;AACxB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,yBAAyB,4BAA4B;AACrD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,6BAA6B;AAC3D;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC,oCAAoC,EAAE,UAAU,wBAAwB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,oBAAoB,EAAE,gCAAgC;AACnF;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,yBAAyB,aAAa;AACtC;AACA,gBAAgB;AAChB;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA,gBAAgB;AAChB;AACA,0BAA0B,2DAA2D;AACrF;AACA,gBAAgB;AAChB;AACA,wBAAwB,uDAAuD;AAC/E;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,0CAA0C;AACnE;AACA,gBAAgB;AAChB;AACA,0BAA0B,4CAA4C;AACtE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,wBAAwB;AACxD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,aAAa,EAAE,wBAAwB;AACzE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,oBAAoB,EAAE,gBAAgB;AACjE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,aAAa,EAAE,+BAA+B;AAChF;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,yBAAyB,uBAAuB;AAChD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B,wCAAwC;AACpE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,mCAAmC;AACpE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,sCAAsC;AAC1E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,2CAA2C;AACtE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B,uBAAuB;AACnD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,qBAAqB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,2EAA2E,EAAE;AAC7E;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,qBAAqB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,sBAAsB;AAC1C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,uBAAuB;AAC5C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gBAAgB,kBAAkB;AAClC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,sBAAsB;AAC1C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,uBAAuB;AAC5C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,sBAAsB;AAC7C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,sBAAsB;AAC1C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,sBAAsB;AACjD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,sBAAsB;AACjD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0CAA0C,qCAAqC;AAC/E;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC,gCAAgC;AACrE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,4CAA4C;AAChF;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,sBAAsB;AACnD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,uBAAuB;AACxC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,wBAAwB;AAChD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,iBAAiB;AACnC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,kBAAkB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,mBAAmB;AACvC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,oBAAoB;AAC/C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,sDAAsD;AAC/E;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE,oBAAoB,EAAE;AACjD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE,uBAAuB,EAAE;AACpD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,oBAAoB,EAAE,6BAA6B;AAC7E;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,oBAAoB,EAAE,qBAAqB;AAClE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB,EAAE,eAAe;AACtD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,6BAA6B;AAC9C;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,yDAAyD;AACjF;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,kCAAkC;AACpE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC,qCAAqC;AAC1E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,iCAAiC;AACnE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,wBAAwB;AAC9C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,oBAAoB;AAC5D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wCAAwC,mCAAmC;AAC3E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yCAAyC,oCAAoC;AAC7E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,2DAA2D;AACtF;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,0BAA0B,iBAAiB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,oBAAoB;AACpB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,kBAAkB;AACrC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,4BAA4B;AACzD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,yCAAyC;AAC/D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,4CAA4C;AACrE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,4CAA4C;AACrE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,yCAAyC;AACjE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,gEAAgE;AACzF;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,iCAAiC;AACtD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,mBAAmB,EAAE,gCAAgC;AACtE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,uBAAuB;AACzC;AACA,gBAAgB;AAChB;AACA,mBAAmB,wBAAwB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA,wBAAwB,oBAAoB;AAC5C;AACA,gBAAgB;AAChB;AACA,oBAAoB,mCAAmC;AACvD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,+BAA+B,kCAAkC;AACjE;AACA,gBAAgB;AAChB;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,uBAAuB,aAAa;AACpC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,0GAAiD;AACtE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gBAAgB;AACpB;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,0BAA0B,mBAAmB,EAAE,wCAAwC;AACvF;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,+BAA+B;AACnD;AACA,gBAAgB;AAChB;AACA,kBAAkB,6BAA6B;AAC/C;AACA,gBAAgB;AAChB;AACA,gBAAgB,2BAA2B;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,kCAAkC;AAC7D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,yBAAyB;AACxC;AACA,gBAAgB;AAChB;AACA,YAAY,sBAAsB;AAClC;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC,mFAAoC,IAAI;AAC7E;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,0DAA0D,aAAa;AACvE;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE,yDAAyD,aAAa;AACjG;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,sBAAsB,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,6BAA6B,kCAAkC,EAAE,mCAAmC;AACpG;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE,sBAAsB,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,yBAAyB,EAAE;AACtD;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,kBAAkB,KAAK,IAAI,UAAU;AACrC;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC,mFAAoC,IAAI;AAC7E;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,0GAAmD;AACtE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,wCAAwC;AAChE;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC,mFAAoC,IAAI;AAC7E;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,oFAAqC,EAAE;AAClE;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oBAAoB;AAClC;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,mBAAmB;AAClC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,oBAAoB;AAC5D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,mEAAmE,UAAU;AAC7E;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,4BAA4B,8FAA+C,IAAI;AACpF,KAAK,+DAAgB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,wDAAwD,OAAO,aAAa,UAAU;AACtF;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B;AAC9B;AACA,gBAAgB;AAChB;AACA,oBAAoB,oCAAoC;AACxD;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,kCAAkC;AAC5D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,mEAAmE;AACtF;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC,mFAAoC,IAAI;AAC7E;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD,mCAAmC,mBAAmB;AACtD;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,UAAU,mBAAmB;AACvD,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,aAAa;AACb;AACA,gBAAgB;AAChB;AACA,WAAW;AACX;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,sBAAsB;AAC3B,KAAK,6BAA6B;AAClC;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe;AACf;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,sCAAsC;AAChE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,uCAAuC;AAC9D;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,8BAA8B;AACjE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,wBAAwB;AAC9C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,yBAAyB;AAChD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,sBAAsB,UAAU,GAAG,KAAK;AACxC,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,sCAAsC,UAAU,GAAG,KAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,wBAAwB;AAChD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,2BAA2B;AACtD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,wBAAwB;AACnD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,+CAA+C,SAAS,GAAG,KAAK;AAChE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,gDAAgD;AAC1E;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,mBAAmB;AAC3D,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B,sDAAsD;AAClF;AACA,gBAAgB;AAChB;AACA,eAAe,mDAAmD;AAClE;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,EAAE;AACzE;AACA;AACA;AACA,4CAA4C,uCAAuC,EAAE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,4BAA4B,EAAE,UAAU,wBAAwB;AAChE;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA,yBAAyB,EAAE,2BAA2B,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,aAAa;AACtC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE,0BAA0B,EAAE;AACrD;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,2BAA2B,EAAE,4BAA4B,EAAE;AAC3D,6BAA6B,EAAE;AAC/B;AACA,wCAAwC,EAAE;AAC1C;AACA,6BAA6B,EAAE;AAC/B;AACA,gCAAgC,gCAAgC;AAChE;AACA;AACA,+BAA+B,EAAE;AACjC,oCAAoC,EAAE,UAAU,sBAAsB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gCAAgC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,sBAAsB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC,mFAAoC,IAAI;AAC7E,KAAK,+DAAgB;AACrB;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,6BAA6B,eAAe;AAC5C,8BAA8B,eAAe;AAC7C,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,qEAAqE,UAAU;AAC/E;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6CAA6C,mBAAmB,EAAE;AAClE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,8BAA8B,oDAAoD;AAClF;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC,mFAAoC,IAAI;AAC7E,KAAK,0CAA0C,8FAA+C,IAAI;AAClG;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,sBAAsB,YAAY;AAClC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,0DAA0D;AACnF;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,6BAA6B,EAAE;AAC1D,yBAAyB,EAAE;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE,mDAAmD,EAAE;AAChF,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC,mFAAoC,IAAI;AAC7E;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,gBAAgB;AAChB;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uIAAuI;AACvI;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,IAAI;AACjE;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,0BAA0B,EAAE;AAC5B,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE,yBAAyB,EAAE;AACpD;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD;AACA,+BAA+B,EAAE,qDAAqD,EAAE;AACxF;AACA;AACA;AACA;AACA,oEAAoE,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,sCAAsC;AACxD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qFAAqF,uBAAuB;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qCAAqC;AACrC;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,+EAA+E;AAC/E,KAAK;AACL,4DAA4D,uCAAuC,EAAE,EAAE;AACvG,4BAA4B;AAC5B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,0BAA0B,EAAE;AAC5B;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,OAAO;AAChD,UAAU,mBAAmB,GAAG,UAAU,GAAG,UAAU,GAAG,SAAS;AACnE,OAAO,QAAQ;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,kBAAkB;AACtD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,+DAA+D,MAAM;AACrE;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,IAAI;AAClE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,+CAA+C,aAAa,UAAU,oBAAoB;AAC1F;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oCAAoC,gCAAgC;AACpE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qCAAqC,iCAAiC;AACtE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sCAAsC,kCAAkC;AACxE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mCAAmC,+BAA+B;AAClE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gCAAgC,mFAAoC,IAAI;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yDAAyD,2CAA2C;AACpG;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,uJAAuD;AAC5D,KAAK,sHAAuE;AAC5E,KAAK,oIAAmF;AACxF,KAAK,uDAAuD;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,+FAAgD;AACrD,KAAK,wEAAwE;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,iBAAiB,yFAA0C;AAC3D,iBAAiB,6FAA8C;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,qBAAqB,2GAA4D;AACjF,qBAAqB,yEAAyE;AAC9F,qBAAqB,yEAAyE;AAC9F,qBAAqB,8EAA8E;AACnG,qBAAqB,gEAAgE;AACrF;AACA,qBAAqB,6GAA8D;AACnF,qBAAqB,8DAA8D;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,oCAAoC,gEAAiB,GAAG,gEAAiB,IAAI;AAClF;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,EAAE,OAAO;;AAE3E;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,sBAAsB,+FAAgD;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA,yBAAyB,EAAE;AAC3B,+BAA+B,SAAS;AACxC,2BAA2B,qBAAqB;AAChD;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,iBAAiB;AACjB,iBAAiB;AACjB,kBAAkB;AAClB,iBAAiB;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ;AACA,6BAA6B,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,4BAA4B,mBAAmB,EAAE,sCAAsC;AACvF;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,uCAAuC;AACxD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,6BAA6B,mIAAoF;AACjH,aAAa,IAAI;AACjB;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,gBAAgB;AAChB;AACA,kBAAkB,+BAA+B;AACjD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEQ;AACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACv8HA;AAAA;AACA;AACA;AACA;AACA;AACwI;AAC6W;AAC3d;AACR;AACL;AACO;AACN;AACK;AACE;AACN;AACE;AACG;AACJ;AACK;AACC;AACN;AACD;AACI;AACF;AACC;AACD;;AAEjB;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,+BAA+B,QAAQ,UAAU,SAAS,IAAI;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oCAAoC,QAAQ,UAAU,SAAS,yBAAyB,uBAAuB;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,gCAAgC,QAAQ,UAAU,SAAS,IAAI;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,sCAAsC,QAAQ,UAAU,SAAS,YAAY,WAAW;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uCAAuC,QAAQ,UAAU,SAAS,yBAAyB,uBAAuB,YAAY,WAAW;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uCAAuC,QAAQ,UAAU,SAAS,yBAAyB,uBAAuB,YAAY,WAAW;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,qCAAqC,QAAQ,UAAU,SAAS,yBAAyB,uBAAuB,YAAY,WAAW,oBAAoB,oBAAoB;AAC/K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mCAAmC,QAAQ,UAAU,SAAS,yBAAyB,uBAAuB,YAAY,WAAW;AACrI;AACA;AACA;AACA;AACA,IAAI,oBAAoB;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,iCAAiC,QAAQ,UAAU,SAAS,yBAAyB,uBAAuB,YAAY,WAAW;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,sCAAsC,gBAAgB,GAAG;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,oCAAoC,gBAAgB,GAAG;AACvE;AACA;AACA;AACA,IAAI,0BAA0B;AAC9B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;AACA,IAAI,4BAA4B;AAChC;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,4CAA4C,KAAK;AACjD;AACA;AACA;AACA;AACA,IAAI,qBAAqB;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yCAAyC,KAAK;AAC9C;AACA;AACA;AACA;AACA,IAAI,uBAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uCAAuC,KAAK;AAC5C;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB;AACA,yBAAyB,4BAA4B;AACrD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,eAAe,yCAAyC;AACxD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,iCAAiC;AACjD;AACA;AACA,cAAc,cAAc,gBAAgB,gBAAgB;AAC5D;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,uBAAuB,EAAE;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,wBAAwB,EAAE,cAAc,sBAAsB;AAC9D,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,cAAc;AACtB;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,wBAAwB,EAAE,UAAU,mBAAmB;AACvD,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,wCAAwC,SAAS;AACjD;;AAEA;AACA;AACA,SAAS,wDAAwD;AACjE,SAAS,oDAAoD;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA,yBAAyB,EAAE;AAC3B,0DAA0D,SAAS,SAAS,kBAAkB,iBAAiB,EAAE,iCAAiC,IAAI;AACtJ;AACA;AACA,2DAA2D,SAAS;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW,GAAG,kBAAkB;AAClD;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,wBAAwB,EAAE,UAAU,cAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,EAAE,UAAU,eAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;;AAEA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,wFAAoB;AACpB;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAyB,EAAE;AAC3B;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,iDAAiD,KAAK;AACtD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,kCAAkC,aAAa;AAC/C;AACA,0CAA0C;AAC1C,2CAA2C;AAC3C,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,2CAA2C;AAC3D;AACA;AACA;AACA;AACA,QAAQ,eAAe;AACvB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,kCAAkC;AACrD;AACA;AACA,gBAAgB;AAChB;AACA,4BAA4B,0CAA0C;AACtE;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA,oDAAoD;AACpD;AACA;AACA,iBAAiB;AACjB,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4BAA4B;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,qBAAqB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,mBAAmB,eAAe;AAClC,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,kBAAkB,kCAAkC;AAC/E,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,uDAAuD,sBAAsB,EAAE,wBAAwB;AAClI,kBAAkB,QAAQ,EAAE,MAAM,EAAE,SAAS;AAC7C;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,iCAAiC,EAAE,GAAG,2BAA2B;AACjE;AACA,SAAS;AACT,wCAAwC,QAAQ,GAAG,oBAAoB;AACvE;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,uBAAuB,EAAE,GAAG,2BAA2B;AACvD,SAAS;AACT,kBAAkB,wBAAwB,IAAI,oBAAoB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,cAAc,kBAAkB,EAAE,iCAAiC;AACnE;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,4CAA4C,EAAE,YAAY,GAAG,oBAAoB;AACjF;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,yBAAyB,EAAE;AAC3B,wDAAwD,aAAa,GAAG,UAAU;AAClF,eAAe,aAAa,GAAG,cAAc;AAC7C,KAAK;AACL,kCAAkC,oBAAoB;AACtD;AACA,6BAA6B;AAC7B;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,iDAAiD;AACjD,+EAA+E,eAAe;AAC9F;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA,2DAA2D;AAC3D,qDAAqD,SAAS;AAC9D;AACA,2BAA2B,EAAE,4BAA4B,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,uCAAuC;AAChE;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,yCAAyC,IAAI;AAC7C;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,+BAA+B,0CAA0C;AACzE;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,gLAAuH,WAAW;AAClI;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,8LAAqI,WAAW;AAChJ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,+LAAoI,EAAE;AACjK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,qLAA0H,EAAE;AACvJ;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mEAAmE,eAAe;AAClF;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,qCAAqC,kCAAkC;AACvE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,4HAAwD;AACxD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE,wDAAwD,EAAE,4BAA4B;AACjH,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,6BAA6B,EAAE,+CAA+C;AAC9E;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,gEAAgE;AAC/E;AACA;AACA,yBAAyB,EAAE,sEAAsE,EAAE,qCAAqC,EAAE;AAC1I,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,iBAAiB;AACjB;AACA,0HAAsD;AACtD;AACA,eAAe,uCAAuC;AACtD;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,mBAAmB,+BAA+B;AAClD;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,sIAAkE;AAClE;AACA,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,mDAAmD,WAAW,kBAAkB,0BAA0B;AAC1G;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,qBAAqB,EAAE;AACvB,yBAAyB,EAAE;AAC3B;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,oBAAoB,gFAAgF;AACpG;AACA,gBAAgB,+EAA+E;AAC/F;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC,8BAA8B,EAAE;AAChC,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,gBAAgB;AAChB;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,0BAA0B,EAAE;AAC5B;AACA,0DAA0D;AAC1D;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,0BAA0B,EAAE;AAC5B;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,uBAAuB,mBAAmB;AAC1C;AACA,gBAAgB;AAChB;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,kDAAkD;AACvE;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,oBAAoB,WAAW,GAAG;AAClD;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sBAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,iCAAiC;AACjD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,uHAAyD;AAChF,qBAAqB,EAAE,sGAAwC;AAC/D,qBAAqB,EAAE,oGAAsC;AAC7D,qBAAqB,EAAE,2GAA6C;AACpE,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB,qBAAqB,EAAE,4JAA4J;AACnL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,uBAAuB,yCAAyC;AAChE;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,uCAAuC;AACzD;AACA;AACA,gBAAgB;AAChB;AACA,sBAAsB,2CAA2C;AACjE;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,yCAAyC;AAC7D;AACA;AACA,gBAAgB;AAChB;AACA,wBAAwB,6CAA6C;AACrE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oEAAoE,qBAAqB;AACzF;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,6BAA6B;AACxD,yBAAyB,EAAE,2BAA2B;AACtD,yBAAyB,EAAE,8BAA8B;AACzD,gBAAgB;AAChB,KAAK,aAAa,EAAE,MAAM,WAAW,UAAU,aAAa,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,uCAAuC;AACzD;AACA;AACA,gBAAgB;AAChB;AACA,sBAAsB,2CAA2C;AACjE;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,yCAAyC;AAC7D;AACA;AACA,gBAAgB;AAChB;AACA,wBAAwB,6CAA6C;AACrE;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,6BAA6B,IAAI,WAAW,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE,sCAAsC,GAAG,4CAA4C,EAAE;AAC9G,cAAc,WAAW,EAAE,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,qEAAqE,EAAE;AACvE;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,yBAAyB,EAAE,uBAAuB,EAAE;AACpD;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE,UAAU,0BAA0B;AAC9D;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,4DAA4D;AAC5D;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,kEAAkE,EAAE,QAAQ,MAAM;AAClF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,qBAAqB,EAAE;AACvB;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA,iBAAiB;AACjB,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE,2EAA2E;AACtG;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,qBAAqB,EAAE,eAAe;AACtC;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,mBAAmB,EAAE;AACrB;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,+EAA+E;AAC/E;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,wCAAwC;AACzD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA,sBAAsB,8CAA8C;AACpE;AACA,gBAAgB;AAChB;AACA,oBAAoB,4CAA4C;AAChE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,yFAAyF,EAAE;AAC3F;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE,4FAA4F,EAAE;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE,wBAAwB,EAAE,iBAAiB,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,iCAAiC,EAAE;AACnC,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,yBAAyB,EAAE;AAC3B,6BAA6B,EAAE;AAC/B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,0CAA0C;AAC1C;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,4FAAwB;AACxB;AACA;AACA,6BAA6B,EAAE;AAC/B,2IAAgF,SAAS,gBAAgB,EAAE;AAC3G;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,wBAAwB,EAAE,wBAAwB,GAAG;AACrD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE,0DAA0D,uDAAuD,EAAE,iCAAiC,yEAAyE;AAC5P,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA,6BAA6B,EAAE,8CAA8C,EAAE;AAC/E,wHAAwH,EAAE,kEAAkE,EAAE;AAC9L;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,2IAA2I,EAAE,kEAAkE,EAAE;AACjN;AACA,yBAAyB,EAAE;AAC3B,eAAe,+BAA+B;AAC9C;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mDAAmD;AACnE;AACA,qBAAqB,EAAE;AACvB,qBAAqB,EAAE;AACvB;AACA;AACA,qBAAqB,EAAE;AACvB,uBAAuB,EAAE,kCAAkC,uBAAuB,EAAE;AACpF,qBAAqB,EAAE,2DAA2D;AAClF;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,+EAA+E,EAAE,SAAS,EAAE;AAC5F;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,EAAE;AACvB;AACA;AACA,YAAY;AACZ;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB,0BAA0B,EAAE;AAC5B;AACA,6BAA6B,EAAE,kCAAkC;AACjE;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA,6BAA6B,EAAE,kCAAkC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,cAAc;AACvC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC;AAChC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,cAAc;AACvC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,aAAa;AAClC;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE,uDAAuD,EAAE;AACpF;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,aAAa;AACxC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kBAAkB,YAAY;AAC9B;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iCAAiC,mBAAmB;AACpD;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA,QAAQ,cAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wHAA0D,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,0DAA0D,mBAAmB;AAC7E;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mDAAmD,EAAE;AACrD,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC,kCAAkC,8CAA8C,mBAAmB,EAAE,EAAE;AACvG,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,eAAe,+CAA+C;AAC9D;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,aAAa,EAAE,2BAA2B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,WAAW,uCAAuC;AAClD,WAAW;AACX;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mDAAmD,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA,2CAA2C,UAAU,mCAAmC;AACxF;AACA;AACA,2CAA2C,UAAU,iCAAiC;AACtF;AACA;AACA;AACA;AACA,0CAA0C,kBAAkB;AAC5D;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA,wDAAwD,kBAAkB;AAC1E;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,iDAAiD;AACjD,eAAe,gGAAgG;AAC/G,oHAA6D,EAAE,4BAA4B,EAAE;AAC7F;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,EAAE,sBAAsB,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,2BAA2B;AAC5E;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,iCAAiC,4BAA4B;AAC7D,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA,kDAAkD,4CAA4C;AAC9F;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,iCAAiC,4BAA4B;AAC7D;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,0CAA0C;AACjE;AACA,+BAA+B;AAC/B,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,mBAAmB,sCAAsC;AACzD;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA,kCAAkC,EAAE;AACpC;AACA,SAAS;AACT,8BAA8B,EAAE;AAChC;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,yBAAyB,EAAE;AAC3B;AACA;AACA,SAAS;AACT,yBAAyB,EAAE;AAC3B,+BAA+B,uDAAuD;AACtF;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,sCAAsC;AACtE,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,wFAAwF,GAAG,6CAA6C,kBAAkB;AAC1J;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,iCAAiC,EAAE;AACnC,iCAAiC,EAAE;AACnC;AACA;AACA,oCAAoC,EAAE;AACtC;AACA,gCAAgC;AAChC,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,0GAAsC,6CAA6C;AACnF;AACA,6BAA6B,EAAE;AAC/B;AACA,aAAa;AACb;AACA,2BAA2B,EAAE;AAC7B,6BAA6B,EAAE,0HAA+D,uBAAuB;AACrH,iCAAiC,EAAE;AACnC;AACA;AACA,wBAAwB;AACxB,aAAa;AACb,6BAA6B,EAAE,qIAAqE,uBAAuB;AAC3H;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,iBAAiB;AACjB,aAAa;AACb,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb,6BAA6B,EAAE;AAC/B;AACA,aAAa;AACb;AACA;AACA,6BAA6B,EAAE,6GAAkD,uCAAuC;AACxH;AACA,qCAAqC,EAAE;AACvC,4BAA4B;AAC5B;AACA;AACA,4BAA4B;AAC5B;AACA,aAAa;AACb;AACA;AACA,2BAA2B,EAAE;AAC7B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,iEAAiE,gCAAgC;AACjG;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA,qCAAqC,EAAE,yBAAyB,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,wBAAwB,GAAG;AACrD,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,wBAAwB,EAAE,UAAU,qBAAqB;AACzD,yBAAyB,EAAE;AAC3B;AACA,2DAA2D,IAAI,oBAAoB,EAAE;AACrF;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,yCAAyC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,cAAc;AACpE,+DAA+D;AAC/D;AACA;AACA,wCAAwC,cAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,wCAAwC;AACxC;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAA0C;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6FAAsC,EAAE,4BAA4B,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,yEAA0B,kCAAkC,IAAI;AACrE;AACA;AACA;AACA,KAAK,gBAAgB;AACrB,KAAK,wBAAwB;AAC7B,KAAK,gCAAgC,sFAAuC,IAAI;AAChF,KAAK,kEAAmB;AACxB,KAAK,mEAAoB;AACzB;AACA;AACA,qBAAqB,6DAAc;AACnC,kBAAkB,6DAAc;AAChC,6BAA6B,6DAAc;AAC3C,0BAA0B,6DAAc;AACxC,4BAA4B,6DAAc;AAC1C,oBAAoB,6DAAc;AAClC,oBAAoB,6DAAc;AAClC,6BAA6B,6DAAc;AAC3C,iBAAiB,sFAAuC;AACxD;AACA;AACA;AACA;AACA,QAAQ,kBAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,6FAAsC,EAAE,4BAA4B,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,+BAA+B;AACzD;AACA,gBAAgB;AAChB;AACA,mBAAmB,iCAAiC;AACpD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,yEAA0B,4BAA4B,IAAI;AAC/D;AACA;AACA;AACA,KAAK,gBAAgB;AACrB,KAAK,wBAAwB;AAC7B,KAAK,2EAA0B;AAC/B;AACA;AACA,gBAAgB,2FAA4C,GAAG,6DAAc;AAC7E,qBAAqB,6DAAc;AACnC,kBAAkB,6DAAc;AAChC,6BAA6B,6DAAc;AAC3C,0BAA0B,6DAAc;AACxC,4BAA4B,6DAAc;AAC1C,oBAAoB,6DAAc;AAClC,cAAc,mEAAoB;AAClC,oBAAoB,6DAAc;AAClC,6BAA6B,6DAAc;AAC3C,iBAAiB,gKAAiH;AAClI;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF;AACxF,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,YAAY;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,eAAe;AACzC;AACA,gBAAgB;AAChB;AACA,mBAAmB,iCAAiC;AACpD;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA,KAAK,gBAAgB;AACrB,KAAK,mEAAoB;AACzB,KAAK,kEAAmB;AACxB,KAAK,0EAA2B;AAChC;AACA;AACA,eAAe,2FAA4C,oBAAoB,IAAI;AACnF,wBAAwB,mGAAoD,oBAAoB,IAAI;AACpG,iCAAiC,6DAAc;AAC/C,0BAA0B,6DAAc;AACxC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,kCAAkC,0BAA0B;AAC5D;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,2BAA2B,6CAA6C;AACxE;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,uDAAuD;AAC1E;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,uBAAuB,yBAAyB;AAChD;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE,2BAA2B,EAAE,gBAAgB,EAAE;AAC1E;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yEAA0B,gDAAgD,IAAI;AACnF;AACA;AACA;AACA,KAAK,gCAAgC;AACrC,KAAK,yEAA0B;AAC/B,KAAK,iFAAkC;AACvC,KAAK,gCAAgC,kFAAmC,IAAI;AAC5E,KAAK,0EAA2B;AAChC;AACA;AACA,wBAAwB,mFAAoC;AAC5D,0BAA0B,qFAAsC;AAChE;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sCAAsC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,wBAAwB,qFAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,iKAAgG,EAAE;AAClG;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA,gBAAgB;AAChB;AACA,mBAAmB,iCAAiC;AACpD;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,8BAA8B,EAAE;AAChC;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,gBAAgB;AACrB,KAAK,8EAA+B;AACpC,KAAK,iEAAkB;AACvB,KAAK,iEAAkB;AACvB,KAAK,4BAA4B;AACjC;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yDAAyD;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK,iEAAiE;AACtE,KAAK,iKAAmE;AACxE;AACA;AACA;AACA,KAAK,2CAA2C,uBAAuB,EAAE;AACzE;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA,qEAAqE,yBAAyB;AAC9F;AACA,QAAQ,oBAAoB;AAC5B,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB,8DAA8D,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB,oHAAqE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,KAAK,wEAAyB,8DAA8D,IAAI;AAChG;AACA;AACA;AACA,KAAK,gCAAgC,gEAAiB,GAAG,6FAA8C,IAAI;AAC3G,KAAK,6BAA6B,gEAAiB,IAAI;AACvD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,SAAS,sHAAuE;AAChF,SAAS,iDAAiD;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA,0GAA0G;AAC1G,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,0CAA0C,aAAa,EAAE,2BAA2B;AACpF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,2BAA2B,EAAE,yBAAyB,EAAE;AACxD,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA,uEAAuE,uBAAuB;AAC9F;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kEAAmB;AACxB;AACA;AACA;AACA,KAAK,iEAAkB;AACvB;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,SAAS,2FAA2F;AACpG,SAAS,+HAAgF;AACzF;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;;AAEQ;AACR","file":"vendor.bundle.js","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction CustomEvent(type, detail, params) {\r\n    if (detail === void 0) { detail = undefined; }\r\n    if (params === void 0) { params = { bubbles: false, cancelable: false }; }\r\n    var event = document.createEvent('CustomEvent');\r\n    event.initCustomEvent(type, params.bubbles, params.cancelable, detail);\r\n    return event;\r\n}\r\nexports.CustomEvent = CustomEvent;\r\nif (\"Event\" in window) {\r\n    CustomEvent.prototype = window.Event.prototype;\r\n}\r\n//# sourceMappingURL=custom-event-polyfill.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/angular-plus-materialize/dist/custom-event-polyfill.js\n// module id = ../../../../angular-plus-materialize/dist/custom-event-polyfill.js\n// module chunks = vendor","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar materialize_directive_1 = require(\"./materialize-directive\");\r\nexports.MaterializeDirective = materialize_directive_1.MaterializeDirective;\r\nvar materialize_module_1 = require(\"./materialize-module\");\r\nexports.MaterializeModule = materialize_module_1.MaterializeModule;\r\nif (!(\"Materialize\" in window)) {\r\n    throw new Error(\"Couldn't find Materialize object on window. It is created by the materialize-css library. Please import materialize-css before importing angular2-materialize.\");\r\n}\r\nif (!(\"Waves\" in window)) {\r\n    throw new Error(\"Couldn't find Waves object on window. It is supposed to be created by the materialize-css library. Please import materialize-css before importing angular2-materialize.\");\r\n}\r\nWaves.displayEffect();\r\nfunction toast() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    Materialize.toast.apply(Materialize, args);\r\n}\r\nexports.toast = toast;\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/angular-plus-materialize/dist/index.js\n// module id = ../../../../angular-plus-materialize/dist/index.js\n// module chunks = vendor","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar custom_event_polyfill_1 = require(\"./custom-event-polyfill\");\r\nvar MaterializeDirective = (function () {\r\n    function MaterializeDirective(_el) {\r\n        this._el = _el;\r\n        this._params = null;\r\n        this._functionName = null;\r\n        this.previousValue = null;\r\n        this.previousDisabled = false;\r\n        this._waitFunction = {};\r\n        this.changeListenerShouldBeAdded = true;\r\n        this.init = new core_1.EventEmitter();\r\n        this.initialized = false;\r\n    }\r\n    Object.defineProperty(MaterializeDirective.prototype, \"materializeParams\", {\r\n        set: function (params) {\r\n            this._params = params;\r\n            this.performElementUpdates();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MaterializeDirective.prototype, \"materializeActions\", {\r\n        set: function (actions) {\r\n            var _this = this;\r\n            actions.subscribe(function (action) {\r\n                if (typeof action === \"string\") {\r\n                    _this.performLocalElementUpdates(action);\r\n                }\r\n                else {\r\n                    _this.performLocalElementUpdates(action.action, action.params);\r\n                }\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MaterializeDirective.prototype, \"materialize\", {\r\n        set: function (functionName) {\r\n            this._functionName = functionName;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MaterializeDirective.prototype, \"materializeSelectOptions\", {\r\n        // this is here to trigger change detection for select elements\r\n        set: function (options) { },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MaterializeDirective.prototype.ngAfterViewInit = function () {\r\n        this.performElementUpdates();\r\n    };\r\n    MaterializeDirective.prototype.ngOnChanges = function (_unused) {\r\n        var _this = this;\r\n        if (this.isSelect()) {\r\n            setTimeout(function () { return _this.performLocalElementUpdates(); }, 10);\r\n        }\r\n    };\r\n    MaterializeDirective.prototype.ngOnDestroy = function () {\r\n        this.performElementRemotion();\r\n    };\r\n    MaterializeDirective.prototype.ngDoCheck = function () {\r\n        var nativeElement = this._el.nativeElement;\r\n        var jQueryElement = $(nativeElement);\r\n        if (this.isSelect()) {\r\n            var shouldUpdate = false;\r\n            if (nativeElement.disabled != this.previousDisabled) {\r\n                this.previousDisabled = nativeElement.disabled;\r\n                shouldUpdate = true;\r\n            }\r\n            if (!jQueryElement.attr(\"multiple\") && nativeElement.value != this.previousValue) {\r\n                // handle select changes of the model\r\n                this.previousValue = nativeElement.value;\r\n                shouldUpdate = true;\r\n            }\r\n            if (shouldUpdate) {\r\n                this.performLocalElementUpdates();\r\n            }\r\n        }\r\n        else if (this.isTextarea()) {\r\n            if (nativeElement.value != this.previousValue) {\r\n                this.previousValue = nativeElement.value;\r\n                this.performElementUpdates();\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    MaterializeDirective.prototype.performElementRemotion = function () {\r\n        if (this.isTooltip()) {\r\n            var nativeElement = this._el.nativeElement;\r\n            var jQueryElement = $(nativeElement);\r\n            var tooltipId = jQueryElement.attr('data-tooltip-id');\r\n            if (tooltipId) {\r\n                $('#' + tooltipId).remove();\r\n            }\r\n        }\r\n    };\r\n    MaterializeDirective.prototype.performElementUpdates = function () {\r\n        var _this = this;\r\n        // it should have been created by now, but confirm anyway\r\n        if (Materialize && Materialize.updateTextFields) {\r\n            Materialize.updateTextFields();\r\n        }\r\n        // handle select changes from the HTML\r\n        if (this.isSelect() && this.changeListenerShouldBeAdded) {\r\n            var nativeElement_1 = this._el.nativeElement;\r\n            var jQueryElement = $(nativeElement_1);\r\n            jQueryElement.on(\"change\", function (e) {\r\n                if (!e.originalEvent || !e.originalEvent.internalToMaterialize) {\r\n                    var event_1 = document.createEvent(\"CustomEvent\");\r\n                    //if (jQueryElement.attr(\"multiple\")) {\r\n                    //event.initCustomEvent(\"input\",false,false,undefined);\r\n                    //}\r\n                    //else {\r\n                    event_1.initCustomEvent(\"change\", false, false, undefined);\r\n                    //}\r\n                    event_1.internalToMaterialize = true;\r\n                    nativeElement_1.dispatchEvent(event_1);\r\n                }\r\n            });\r\n            this.changeListenerShouldBeAdded = false;\r\n        }\r\n        if (this.isAutocomplete()) {\r\n            var nativeElement_2 = this._el.nativeElement;\r\n            var jQueryElement = $(nativeElement_2);\r\n            jQueryElement.on(\"change\", function (e) { return nativeElement_2.dispatchEvent(custom_event_polyfill_1.CustomEvent(\"input\")); });\r\n        }\r\n        if (this.isDatePicker()) {\r\n            var nativeElement_3 = this._el.nativeElement;\r\n            var jQueryElement_1 = $(nativeElement_3);\r\n            var enablebtns = this.enableDPButtons;\r\n            jQueryElement_1.on(\"change\", function (e) { return nativeElement_3.dispatchEvent(custom_event_polyfill_1.CustomEvent(\"input\")); });\r\n            var datePicker = jQueryElement_1[this._functionName].apply(jQueryElement_1, this._params);\r\n            var picker_1 = datePicker.pickadate('picker');\r\n            jQueryElement_1.mousedown(function () {\r\n                if (!jQueryElement_1.val()) {\r\n                    return;\r\n                }\r\n                return picker_1.set.apply(picker_1, ['select', jQueryElement_1.val()].concat(_this._params));\r\n            });\r\n        }\r\n        if (this.isTimePicker()) {\r\n            var nativeElement_4 = this._el.nativeElement;\r\n            var jQueryElement = $(nativeElement_4);\r\n            jQueryElement.on(\"change\", function (e) { return nativeElement_4.dispatchEvent(custom_event_polyfill_1.CustomEvent(\"input\")); });\r\n        }\r\n        if (this.isChips()) {\r\n            var nativeElement_5 = this._el.nativeElement;\r\n            var jQueryElement = $(nativeElement_5);\r\n            jQueryElement.on(\"chip.add\", function (e, chip) { return nativeElement_5.dispatchEvent(custom_event_polyfill_1.CustomEvent(\"chip.add\", chip)); });\r\n            jQueryElement.on(\"chip.delete\", function (e, chip) { return nativeElement_5.dispatchEvent(custom_event_polyfill_1.CustomEvent(\"chip.delete\", chip)); });\r\n            jQueryElement.on(\"chip.select\", function (e, chip) { return nativeElement_5.dispatchEvent(custom_event_polyfill_1.CustomEvent(\"chip.select\", chip)); });\r\n        }\r\n        if (this.isTextarea()) {\r\n            this._el.nativeElement.dispatchEvent(custom_event_polyfill_1.CustomEvent(\"autoresize\", { bubbles: true, cancelable: false, detail: undefined }));\r\n        }\r\n        this.performLocalElementUpdates();\r\n    };\r\n    MaterializeDirective.prototype.performLocalElementUpdates = function (functionName, params) {\r\n        var _this = this;\r\n        if (functionName === void 0) { functionName = this._functionName; }\r\n        if (params === void 0) { params = this._params; }\r\n        if (this._waitFunction[functionName]) {\r\n            return;\r\n        }\r\n        this._waitFunction[functionName] = true;\r\n        $(document).ready(function () {\r\n            _this._waitFunction[functionName] = false;\r\n            if (functionName) {\r\n                var jQueryElement = $(_this._el.nativeElement);\r\n                if (jQueryElement[functionName]) {\r\n                    if (params) {\r\n                        if (params instanceof Array) {\r\n                            jQueryElement[functionName].apply(jQueryElement, params);\r\n                        }\r\n                        else {\r\n                            throw new Error(\"Params has to be an array.\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        jQueryElement[functionName]();\r\n                    }\r\n                }\r\n                else {\r\n                    // fallback to running this function on the global Materialize object\r\n                    if (Materialize[functionName]) {\r\n                        if (params) {\r\n                            if (params instanceof Array) {\r\n                                Materialize[functionName].apply(Materialize, params);\r\n                            }\r\n                            else {\r\n                                throw new Error(\"Params has to be an array.\");\r\n                            }\r\n                        }\r\n                        else {\r\n                            Materialize[functionName]();\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new Error(\"Couldn't find materialize function ''\" + functionName + \"' on element or the global Materialize object.\");\r\n                    }\r\n                }\r\n                if (!_this.initialized) {\r\n                    _this.initialized = true;\r\n                    _this.init.emit();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    MaterializeDirective.prototype.isTooltip = function () {\r\n        return (this._functionName && this._functionName === \"tooltip\");\r\n    };\r\n    MaterializeDirective.prototype.isSelect = function () {\r\n        return (this._functionName && this._functionName === \"material_select\");\r\n    };\r\n    MaterializeDirective.prototype.isDatePicker = function () {\r\n        return (this._functionName && this._functionName === \"pickadate\");\r\n    };\r\n    MaterializeDirective.prototype.isTimePicker = function () {\r\n        return (this._functionName && this._functionName === \"pickatime\");\r\n    };\r\n    MaterializeDirective.prototype.isChips = function () {\r\n        return (this._functionName && this._functionName === \"material_chip\");\r\n    };\r\n    MaterializeDirective.prototype.isAutocomplete = function () {\r\n        return (this._functionName && this._functionName === \"autocomplete\");\r\n    };\r\n    MaterializeDirective.prototype.isTextarea = function () {\r\n        return this._el.nativeElement.nodeName == \"TEXTAREA\";\r\n    };\r\n    MaterializeDirective.prototype.enableDPButtons = function () {\r\n        $('.picker__clear').removeAttr(\"disabled\");\r\n        $('.picker__today').removeAttr(\"disabled\");\r\n        $('.picker__close').removeAttr(\"disabled\");\r\n        $('.picker__select--year').removeAttr(\"disabled\");\r\n        $('.picker__select--month').removeAttr(\"disabled\");\r\n    };\r\n    return MaterializeDirective;\r\n}());\r\nMaterializeDirective.decorators = [\r\n    { type: core_1.Directive, args: [{\r\n                selector: '[materialize]'\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMaterializeDirective.ctorParameters = function () { return [\r\n    { type: core_1.ElementRef, },\r\n]; };\r\nMaterializeDirective.propDecorators = {\r\n    'init': [{ type: core_1.Output },],\r\n    'materializeParams': [{ type: core_1.Input },],\r\n    'materializeActions': [{ type: core_1.Input },],\r\n    'materialize': [{ type: core_1.Input },],\r\n    'materializeSelectOptions': [{ type: core_1.Input },],\r\n};\r\nexports.MaterializeDirective = MaterializeDirective;\r\n//# sourceMappingURL=materialize-directive.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/angular-plus-materialize/dist/materialize-directive.js\n// module id = ../../../../angular-plus-materialize/dist/materialize-directive.js\n// module chunks = vendor","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar core_1 = require(\"@angular/core\");\r\nvar common_1 = require(\"@angular/common\");\r\nvar materialize_directive_1 = require(\"./materialize-directive\");\r\nvar MaterializeModule = (function () {\r\n    function MaterializeModule() {\r\n    }\r\n    return MaterializeModule;\r\n}());\r\nMaterializeModule.decorators = [\r\n    { type: core_1.NgModule, args: [{\r\n                declarations: [\r\n                    materialize_directive_1.MaterializeDirective\r\n                ],\r\n                imports: [\r\n                    common_1.CommonModule\r\n                ],\r\n                exports: [\r\n                    materialize_directive_1.MaterializeDirective\r\n                ]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMaterializeModule.ctorParameters = function () { return []; };\r\nexports.MaterializeModule = MaterializeModule;\r\n//# sourceMappingURL=materialize-module.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/angular-plus-materialize/dist/materialize-module.js\n// module id = ../../../../angular-plus-materialize/dist/materialize-module.js\n// module chunks = vendor","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function(useSourceMap) {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\treturn this.map(function (item) {\r\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\r\n\t\t\tif(item[2]) {\r\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\r\n\t\t\t} else {\r\n\t\t\t\treturn content;\r\n\t\t\t}\r\n\t\t}).join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\r\nfunction cssWithMappingToString(item, useSourceMap) {\r\n\tvar content = item[1] || '';\r\n\tvar cssMapping = item[3];\r\n\tif (!cssMapping) {\r\n\t\treturn content;\r\n\t}\r\n\r\n\tif (useSourceMap && typeof btoa === 'function') {\r\n\t\tvar sourceMapping = toComment(cssMapping);\r\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\r\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\r\n\t\t});\r\n\r\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\r\n\t}\r\n\r\n\treturn [content].join('\\n');\r\n}\r\n\r\n// Adapted from convert-source-map (MIT)\r\nfunction toComment(sourceMap) {\r\n\t// eslint-disable-next-line no-undef\r\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\r\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\r\n\r\n\treturn '/*# ' + data + ' */';\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/css-loader/lib/css-base.js\n// module id = ../../../../css-loader/lib/css-base.js\n// module chunks = styles vendor","import { Subject } from './Subject';\r\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\r\n/**\r\n * @class BehaviorSubject<T>\r\n */\r\nexport class BehaviorSubject extends Subject {\r\n    constructor(_value) {\r\n        super();\r\n        this._value = _value;\r\n    }\r\n    get value() {\r\n        return this.getValue();\r\n    }\r\n    _subscribe(subscriber) {\r\n        const subscription = super._subscribe(subscriber);\r\n        if (subscription && !subscription.closed) {\r\n            subscriber.next(this._value);\r\n        }\r\n        return subscription;\r\n    }\r\n    getValue() {\r\n        if (this.hasError) {\r\n            throw this.thrownError;\r\n        }\r\n        else if (this.closed) {\r\n            throw new ObjectUnsubscribedError();\r\n        }\r\n        else {\r\n            return this._value;\r\n        }\r\n    }\r\n    next(value) {\r\n        super.next(this._value = value);\r\n    }\r\n}\r\n//# sourceMappingURL=BehaviorSubject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/BehaviorSubject.js\n// module id = ../../../../rxjs/_esm2015/BehaviorSubject.js\n// module chunks = vendor","import { Subscriber } from './Subscriber';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class InnerSubscriber extends Subscriber {\r\n    constructor(parent, outerValue, outerIndex) {\r\n        super();\r\n        this.parent = parent;\r\n        this.outerValue = outerValue;\r\n        this.outerIndex = outerIndex;\r\n        this.index = 0;\r\n    }\r\n    _next(value) {\r\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\r\n    }\r\n    _error(error) {\r\n        this.parent.notifyError(error, this);\r\n        this.unsubscribe();\r\n    }\r\n    _complete() {\r\n        this.parent.notifyComplete(this);\r\n        this.unsubscribe();\r\n    }\r\n}\r\n//# sourceMappingURL=InnerSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/InnerSubscriber.js\n// module id = ../../../../rxjs/_esm2015/InnerSubscriber.js\n// module chunks = vendor","import { Observable } from './Observable';\r\n/**\r\n * Represents a push-based event or value that an {@link Observable} can emit.\r\n * This class is particularly useful for operators that manage notifications,\r\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\n * others. Besides wrapping the actual delivered value, it also annotates it\r\n * with metadata of, for instance, what type of push message it is (`next`,\r\n * `error`, or `complete`).\r\n *\r\n * @see {@link materialize}\r\n * @see {@link dematerialize}\r\n * @see {@link observeOn}\r\n *\r\n * @class Notification<T>\r\n */\r\nexport class Notification {\r\n    constructor(kind, value, error) {\r\n        this.kind = kind;\r\n        this.value = value;\r\n        this.error = error;\r\n        this.hasValue = kind === 'N';\r\n    }\r\n    /**\r\n     * Delivers to the given `observer` the value wrapped by this Notification.\r\n     * @param {Observer} observer\r\n     * @return\r\n     */\r\n    observe(observer) {\r\n        switch (this.kind) {\r\n            case 'N':\r\n                return observer.next && observer.next(this.value);\r\n            case 'E':\r\n                return observer.error && observer.error(this.error);\r\n            case 'C':\r\n                return observer.complete && observer.complete();\r\n        }\r\n    }\r\n    /**\r\n     * Given some {@link Observer} callbacks, deliver the value represented by the\r\n     * current Notification to the correctly corresponding callback.\r\n     * @param {function(value: T): void} next An Observer `next` callback.\r\n     * @param {function(err: any): void} [error] An Observer `error` callback.\r\n     * @param {function(): void} [complete] An Observer `complete` callback.\r\n     * @return {any}\r\n     */\r\n    do(next, error, complete) {\r\n        const kind = this.kind;\r\n        switch (kind) {\r\n            case 'N':\r\n                return next && next(this.value);\r\n            case 'E':\r\n                return error && error(this.error);\r\n            case 'C':\r\n                return complete && complete();\r\n        }\r\n    }\r\n    /**\r\n     * Takes an Observer or its individual callback functions, and calls `observe`\r\n     * or `do` methods accordingly.\r\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\r\n     * the `next` callback.\r\n     * @param {function(err: any): void} [error] An Observer `error` callback.\r\n     * @param {function(): void} [complete] An Observer `complete` callback.\r\n     * @return {any}\r\n     */\r\n    accept(nextOrObserver, error, complete) {\r\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\r\n            return this.observe(nextOrObserver);\r\n        }\r\n        else {\r\n            return this.do(nextOrObserver, error, complete);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a simple Observable that just delivers the notification represented\r\n     * by this Notification instance.\r\n     * @return {any}\r\n     */\r\n    toObservable() {\r\n        const kind = this.kind;\r\n        switch (kind) {\r\n            case 'N':\r\n                return Observable.of(this.value);\r\n            case 'E':\r\n                return Observable.throw(this.error);\r\n            case 'C':\r\n                return Observable.empty();\r\n        }\r\n        throw new Error('unexpected notification kind value');\r\n    }\r\n    /**\r\n     * A shortcut to create a Notification instance of the type `next` from a\r\n     * given value.\r\n     * @param {T} value The `next` value.\r\n     * @return {Notification<T>} The \"next\" Notification representing the\r\n     * argument.\r\n     */\r\n    static createNext(value) {\r\n        if (typeof value !== 'undefined') {\r\n            return new Notification('N', value);\r\n        }\r\n        return Notification.undefinedValueNotification;\r\n    }\r\n    /**\r\n     * A shortcut to create a Notification instance of the type `error` from a\r\n     * given error.\r\n     * @param {any} [err] The `error` error.\r\n     * @return {Notification<T>} The \"error\" Notification representing the\r\n     * argument.\r\n     */\r\n    static createError(err) {\r\n        return new Notification('E', undefined, err);\r\n    }\r\n    /**\r\n     * A shortcut to create a Notification instance of the type `complete`.\r\n     * @return {Notification<any>} The valueless \"complete\" Notification.\r\n     */\r\n    static createComplete() {\r\n        return Notification.completeNotification;\r\n    }\r\n}\r\nNotification.completeNotification = new Notification('C');\r\nNotification.undefinedValueNotification = new Notification('N', undefined);\r\n//# sourceMappingURL=Notification.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Notification.js\n// module id = ../../../../rxjs/_esm2015/Notification.js\n// module chunks = vendor","import { root } from './util/root';\r\nimport { toSubscriber } from './util/toSubscriber';\r\nimport { observable as Symbol_observable } from './symbol/observable';\r\nimport { pipeFromArray } from './util/pipe';\r\n/**\r\n * A representation of any set of values over any amount of time. This is the most basic building block\r\n * of RxJS.\r\n *\r\n * @class Observable<T>\r\n */\r\nexport class Observable {\r\n    /**\r\n     * @constructor\r\n     * @param {Function} subscribe the function that is called when the Observable is\r\n     * initially subscribed to. This function is given a Subscriber, to which new values\r\n     * can be `next`ed, or an `error` method can be called to raise an error, or\r\n     * `complete` can be called to notify of a successful completion.\r\n     */\r\n    constructor(subscribe) {\r\n        this._isScalar = false;\r\n        if (subscribe) {\r\n            this._subscribe = subscribe;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new Observable, with this Observable as the source, and the passed\r\n     * operator defined as the new observable's operator.\r\n     * @method lift\r\n     * @param {Operator} operator the operator defining the operation to take on the observable\r\n     * @return {Observable} a new observable with the Operator applied\r\n     */\r\n    lift(operator) {\r\n        const observable = new Observable();\r\n        observable.source = this;\r\n        observable.operator = operator;\r\n        return observable;\r\n    }\r\n    /**\r\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\r\n     *\r\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\r\n     *\r\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\r\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\r\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\r\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\r\n     * thought.\r\n     *\r\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\r\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\r\n     * following ways.\r\n     *\r\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\r\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\r\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\r\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\r\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\r\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\r\n     * be left uncaught.\r\n     *\r\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\r\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\r\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\r\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\r\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\r\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\r\n     *\r\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\r\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\r\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\r\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\r\n     *\r\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\r\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\r\n     * by default emits all its values synchronously. Always check documentation for how given Observable\r\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\r\n     *\r\n     * @example <caption>Subscribe with an Observer</caption>\r\n     * const sumObserver = {\r\n     *   sum: 0,\r\n     *   next(value) {\r\n     *     console.log('Adding: ' + value);\r\n     *     this.sum = this.sum + value;\r\n     *   },\r\n     *   error() { // We actually could just remove this method,\r\n     *   },        // since we do not really care about errors right now.\r\n     *   complete() {\r\n     *     console.log('Sum equals: ' + this.sum);\r\n     *   }\r\n     * };\r\n     *\r\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\r\n     * .subscribe(sumObserver);\r\n     *\r\n     * // Logs:\r\n     * // \"Adding: 1\"\r\n     * // \"Adding: 2\"\r\n     * // \"Adding: 3\"\r\n     * // \"Sum equals: 6\"\r\n     *\r\n     *\r\n     * @example <caption>Subscribe with functions</caption>\r\n     * let sum = 0;\r\n     *\r\n     * Rx.Observable.of(1, 2, 3)\r\n     * .subscribe(\r\n     *   function(value) {\r\n     *     console.log('Adding: ' + value);\r\n     *     sum = sum + value;\r\n     *   },\r\n     *   undefined,\r\n     *   function() {\r\n     *     console.log('Sum equals: ' + sum);\r\n     *   }\r\n     * );\r\n     *\r\n     * // Logs:\r\n     * // \"Adding: 1\"\r\n     * // \"Adding: 2\"\r\n     * // \"Adding: 3\"\r\n     * // \"Sum equals: 6\"\r\n     *\r\n     *\r\n     * @example <caption>Cancel a subscription</caption>\r\n     * const subscription = Rx.Observable.interval(1000).subscribe(\r\n     *   num => console.log(num),\r\n     *   undefined,\r\n     *   () => console.log('completed!') // Will not be called, even\r\n     * );                                // when cancelling subscription\r\n     *\r\n     *\r\n     * setTimeout(() => {\r\n     *   subscription.unsubscribe();\r\n     *   console.log('unsubscribed!');\r\n     * }, 2500);\r\n     *\r\n     * // Logs:\r\n     * // 0 after 1s\r\n     * // 1 after 2s\r\n     * // \"unsubscribed!\" after 2.5s\r\n     *\r\n     *\r\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\r\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\r\n     *  Observable.\r\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\r\n     *  the error will be thrown as unhandled.\r\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\r\n     * @return {ISubscription} a subscription reference to the registered handlers\r\n     * @method subscribe\r\n     */\r\n    subscribe(observerOrNext, error, complete) {\r\n        const { operator } = this;\r\n        const sink = toSubscriber(observerOrNext, error, complete);\r\n        if (operator) {\r\n            operator.call(sink, this.source);\r\n        }\r\n        else {\r\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\r\n        }\r\n        if (sink.syncErrorThrowable) {\r\n            sink.syncErrorThrowable = false;\r\n            if (sink.syncErrorThrown) {\r\n                throw sink.syncErrorValue;\r\n            }\r\n        }\r\n        return sink;\r\n    }\r\n    _trySubscribe(sink) {\r\n        try {\r\n            return this._subscribe(sink);\r\n        }\r\n        catch (err) {\r\n            sink.syncErrorThrown = true;\r\n            sink.syncErrorValue = err;\r\n            sink.error(err);\r\n        }\r\n    }\r\n    /**\r\n     * @method forEach\r\n     * @param {Function} next a handler for each value emitted by the observable\r\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\r\n     * @return {Promise} a promise that either resolves on observable completion or\r\n     *  rejects with the handled error\r\n     */\r\n    forEach(next, PromiseCtor) {\r\n        if (!PromiseCtor) {\r\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\r\n                PromiseCtor = root.Rx.config.Promise;\r\n            }\r\n            else if (root.Promise) {\r\n                PromiseCtor = root.Promise;\r\n            }\r\n        }\r\n        if (!PromiseCtor) {\r\n            throw new Error('no Promise impl found');\r\n        }\r\n        return new PromiseCtor((resolve, reject) => {\r\n            // Must be declared in a separate statement to avoid a RefernceError when\r\n            // accessing subscription below in the closure due to Temporal Dead Zone.\r\n            let subscription;\r\n            subscription = this.subscribe((value) => {\r\n                if (subscription) {\r\n                    // if there is a subscription, then we can surmise\r\n                    // the next handling is asynchronous. Any errors thrown\r\n                    // need to be rejected explicitly and unsubscribe must be\r\n                    // called manually\r\n                    try {\r\n                        next(value);\r\n                    }\r\n                    catch (err) {\r\n                        reject(err);\r\n                        subscription.unsubscribe();\r\n                    }\r\n                }\r\n                else {\r\n                    // if there is NO subscription, then we're getting a nexted\r\n                    // value synchronously during subscription. We can just call it.\r\n                    // If it errors, Observable's `subscribe` will ensure the\r\n                    // unsubscription logic is called, then synchronously rethrow the error.\r\n                    // After that, Promise will trap the error and send it\r\n                    // down the rejection path.\r\n                    next(value);\r\n                }\r\n            }, reject, resolve);\r\n        });\r\n    }\r\n    _subscribe(subscriber) {\r\n        return this.source.subscribe(subscriber);\r\n    }\r\n    /**\r\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\r\n     * @method Symbol.observable\r\n     * @return {Observable} this instance of the observable\r\n     */\r\n    [Symbol_observable]() {\r\n        return this;\r\n    }\r\n    /* tslint:enable:max-line-length */\r\n    /**\r\n     * Used to stitch together functional operators into a chain.\r\n     * @method pipe\r\n     * @return {Observable} the Observable result of all of the operators having\r\n     * been called in the order they were passed in.\r\n     *\r\n     * @example\r\n     *\r\n     * import { map, filter, scan } from 'rxjs/operators';\r\n     *\r\n     * Rx.Observable.interval(1000)\r\n     *   .pipe(\r\n     *     filter(x => x % 2 === 0),\r\n     *     map(x => x + x),\r\n     *     scan((acc, x) => acc + x)\r\n     *   )\r\n     *   .subscribe(x => console.log(x))\r\n     */\r\n    pipe(...operations) {\r\n        if (operations.length === 0) {\r\n            return this;\r\n        }\r\n        return pipeFromArray(operations)(this);\r\n    }\r\n    /* tslint:enable:max-line-length */\r\n    toPromise(PromiseCtor) {\r\n        if (!PromiseCtor) {\r\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\r\n                PromiseCtor = root.Rx.config.Promise;\r\n            }\r\n            else if (root.Promise) {\r\n                PromiseCtor = root.Promise;\r\n            }\r\n        }\r\n        if (!PromiseCtor) {\r\n            throw new Error('no Promise impl found');\r\n        }\r\n        return new PromiseCtor((resolve, reject) => {\r\n            let value;\r\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\r\n        });\r\n    }\r\n}\r\n// HACK: Since TypeScript inherits static properties too, we have to\r\n// fight against TypeScript here so Subject can have a different static create signature\r\n/**\r\n * Creates a new cold Observable by calling the Observable constructor\r\n * @static true\r\n * @owner Observable\r\n * @method create\r\n * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\r\n * @return {Observable} a new cold observable\r\n */\r\nObservable.create = (subscribe) => {\r\n    return new Observable(subscribe);\r\n};\r\n//# sourceMappingURL=Observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Observable.js\n// module id = ../../../../rxjs/_esm2015/Observable.js\n// module chunks = vendor","export const empty = {\r\n    closed: true,\r\n    next(value) { },\r\n    error(err) { throw err; },\r\n    complete() { }\r\n};\r\n//# sourceMappingURL=Observer.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Observer.js\n// module id = ../../../../rxjs/_esm2015/Observer.js\n// module chunks = vendor","import { Subscriber } from './Subscriber';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class OuterSubscriber extends Subscriber {\r\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this.destination.next(innerValue);\r\n    }\r\n    notifyError(error, innerSub) {\r\n        this.destination.error(error);\r\n    }\r\n    notifyComplete(innerSub) {\r\n        this.destination.complete();\r\n    }\r\n}\r\n//# sourceMappingURL=OuterSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/OuterSubscriber.js\n// module id = ../../../../rxjs/_esm2015/OuterSubscriber.js\n// module chunks = vendor","import { Observable } from './Observable';\r\nimport { Subscriber } from './Subscriber';\r\nimport { Subscription } from './Subscription';\r\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\r\nimport { SubjectSubscription } from './SubjectSubscription';\r\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\r\n/**\r\n * @class SubjectSubscriber<T>\r\n */\r\nexport class SubjectSubscriber extends Subscriber {\r\n    constructor(destination) {\r\n        super(destination);\r\n        this.destination = destination;\r\n    }\r\n}\r\n/**\r\n * @class Subject<T>\r\n */\r\nexport class Subject extends Observable {\r\n    constructor() {\r\n        super();\r\n        this.observers = [];\r\n        this.closed = false;\r\n        this.isStopped = false;\r\n        this.hasError = false;\r\n        this.thrownError = null;\r\n    }\r\n    [rxSubscriberSymbol]() {\r\n        return new SubjectSubscriber(this);\r\n    }\r\n    lift(operator) {\r\n        const subject = new AnonymousSubject(this, this);\r\n        subject.operator = operator;\r\n        return subject;\r\n    }\r\n    next(value) {\r\n        if (this.closed) {\r\n            throw new ObjectUnsubscribedError();\r\n        }\r\n        if (!this.isStopped) {\r\n            const { observers } = this;\r\n            const len = observers.length;\r\n            const copy = observers.slice();\r\n            for (let i = 0; i < len; i++) {\r\n                copy[i].next(value);\r\n            }\r\n        }\r\n    }\r\n    error(err) {\r\n        if (this.closed) {\r\n            throw new ObjectUnsubscribedError();\r\n        }\r\n        this.hasError = true;\r\n        this.thrownError = err;\r\n        this.isStopped = true;\r\n        const { observers } = this;\r\n        const len = observers.length;\r\n        const copy = observers.slice();\r\n        for (let i = 0; i < len; i++) {\r\n            copy[i].error(err);\r\n        }\r\n        this.observers.length = 0;\r\n    }\r\n    complete() {\r\n        if (this.closed) {\r\n            throw new ObjectUnsubscribedError();\r\n        }\r\n        this.isStopped = true;\r\n        const { observers } = this;\r\n        const len = observers.length;\r\n        const copy = observers.slice();\r\n        for (let i = 0; i < len; i++) {\r\n            copy[i].complete();\r\n        }\r\n        this.observers.length = 0;\r\n    }\r\n    unsubscribe() {\r\n        this.isStopped = true;\r\n        this.closed = true;\r\n        this.observers = null;\r\n    }\r\n    _trySubscribe(subscriber) {\r\n        if (this.closed) {\r\n            throw new ObjectUnsubscribedError();\r\n        }\r\n        else {\r\n            return super._trySubscribe(subscriber);\r\n        }\r\n    }\r\n    _subscribe(subscriber) {\r\n        if (this.closed) {\r\n            throw new ObjectUnsubscribedError();\r\n        }\r\n        else if (this.hasError) {\r\n            subscriber.error(this.thrownError);\r\n            return Subscription.EMPTY;\r\n        }\r\n        else if (this.isStopped) {\r\n            subscriber.complete();\r\n            return Subscription.EMPTY;\r\n        }\r\n        else {\r\n            this.observers.push(subscriber);\r\n            return new SubjectSubscription(this, subscriber);\r\n        }\r\n    }\r\n    asObservable() {\r\n        const observable = new Observable();\r\n        observable.source = this;\r\n        return observable;\r\n    }\r\n}\r\nSubject.create = (destination, source) => {\r\n    return new AnonymousSubject(destination, source);\r\n};\r\n/**\r\n * @class AnonymousSubject<T>\r\n */\r\nexport class AnonymousSubject extends Subject {\r\n    constructor(destination, source) {\r\n        super();\r\n        this.destination = destination;\r\n        this.source = source;\r\n    }\r\n    next(value) {\r\n        const { destination } = this;\r\n        if (destination && destination.next) {\r\n            destination.next(value);\r\n        }\r\n    }\r\n    error(err) {\r\n        const { destination } = this;\r\n        if (destination && destination.error) {\r\n            this.destination.error(err);\r\n        }\r\n    }\r\n    complete() {\r\n        const { destination } = this;\r\n        if (destination && destination.complete) {\r\n            this.destination.complete();\r\n        }\r\n    }\r\n    _subscribe(subscriber) {\r\n        const { source } = this;\r\n        if (source) {\r\n            return this.source.subscribe(subscriber);\r\n        }\r\n        else {\r\n            return Subscription.EMPTY;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Subject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Subject.js\n// module id = ../../../../rxjs/_esm2015/Subject.js\n// module chunks = vendor","import { Subscription } from './Subscription';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class SubjectSubscription extends Subscription {\r\n    constructor(subject, subscriber) {\r\n        super();\r\n        this.subject = subject;\r\n        this.subscriber = subscriber;\r\n        this.closed = false;\r\n    }\r\n    unsubscribe() {\r\n        if (this.closed) {\r\n            return;\r\n        }\r\n        this.closed = true;\r\n        const subject = this.subject;\r\n        const observers = subject.observers;\r\n        this.subject = null;\r\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\r\n            return;\r\n        }\r\n        const subscriberIndex = observers.indexOf(this.subscriber);\r\n        if (subscriberIndex !== -1) {\r\n            observers.splice(subscriberIndex, 1);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=SubjectSubscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/SubjectSubscription.js\n// module id = ../../../../rxjs/_esm2015/SubjectSubscription.js\n// module chunks = vendor","import { isFunction } from './util/isFunction';\r\nimport { Subscription } from './Subscription';\r\nimport { empty as emptyObserver } from './Observer';\r\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\r\n/**\r\n * Implements the {@link Observer} interface and extends the\r\n * {@link Subscription} class. While the {@link Observer} is the public API for\r\n * consuming the values of an {@link Observable}, all Observers get converted to\r\n * a Subscriber, in order to provide Subscription-like capabilities such as\r\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\r\n * implementing operators, but it is rarely used as a public API.\r\n *\r\n * @class Subscriber<T>\r\n */\r\nexport class Subscriber extends Subscription {\r\n    /**\r\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\r\n     * defined Observer or a `next` callback function.\r\n     * @param {function(e: ?any): void} [error] The `error` callback of an\r\n     * Observer.\r\n     * @param {function(): void} [complete] The `complete` callback of an\r\n     * Observer.\r\n     */\r\n    constructor(destinationOrNext, error, complete) {\r\n        super();\r\n        this.syncErrorValue = null;\r\n        this.syncErrorThrown = false;\r\n        this.syncErrorThrowable = false;\r\n        this.isStopped = false;\r\n        switch (arguments.length) {\r\n            case 0:\r\n                this.destination = emptyObserver;\r\n                break;\r\n            case 1:\r\n                if (!destinationOrNext) {\r\n                    this.destination = emptyObserver;\r\n                    break;\r\n                }\r\n                if (typeof destinationOrNext === 'object') {\r\n                    if (destinationOrNext instanceof Subscriber) {\r\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\r\n                        this.destination = destinationOrNext;\r\n                        this.destination.add(this);\r\n                    }\r\n                    else {\r\n                        this.syncErrorThrowable = true;\r\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\r\n                    }\r\n                    break;\r\n                }\r\n            default:\r\n                this.syncErrorThrowable = true;\r\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\r\n                break;\r\n        }\r\n    }\r\n    [rxSubscriberSymbol]() { return this; }\r\n    /**\r\n     * A static factory for a Subscriber, given a (potentially partial) definition\r\n     * of an Observer.\r\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\r\n     * @param {function(e: ?any): void} [error] The `error` callback of an\r\n     * Observer.\r\n     * @param {function(): void} [complete] The `complete` callback of an\r\n     * Observer.\r\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\r\n     * Observer represented by the given arguments.\r\n     */\r\n    static create(next, error, complete) {\r\n        const subscriber = new Subscriber(next, error, complete);\r\n        subscriber.syncErrorThrowable = false;\r\n        return subscriber;\r\n    }\r\n    /**\r\n     * The {@link Observer} callback to receive notifications of type `next` from\r\n     * the Observable, with a value. The Observable may call this method 0 or more\r\n     * times.\r\n     * @param {T} [value] The `next` value.\r\n     * @return {void}\r\n     */\r\n    next(value) {\r\n        if (!this.isStopped) {\r\n            this._next(value);\r\n        }\r\n    }\r\n    /**\r\n     * The {@link Observer} callback to receive notifications of type `error` from\r\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\r\n     * the Observable has experienced an error condition.\r\n     * @param {any} [err] The `error` exception.\r\n     * @return {void}\r\n     */\r\n    error(err) {\r\n        if (!this.isStopped) {\r\n            this.isStopped = true;\r\n            this._error(err);\r\n        }\r\n    }\r\n    /**\r\n     * The {@link Observer} callback to receive a valueless notification of type\r\n     * `complete` from the Observable. Notifies the Observer that the Observable\r\n     * has finished sending push-based notifications.\r\n     * @return {void}\r\n     */\r\n    complete() {\r\n        if (!this.isStopped) {\r\n            this.isStopped = true;\r\n            this._complete();\r\n        }\r\n    }\r\n    unsubscribe() {\r\n        if (this.closed) {\r\n            return;\r\n        }\r\n        this.isStopped = true;\r\n        super.unsubscribe();\r\n    }\r\n    _next(value) {\r\n        this.destination.next(value);\r\n    }\r\n    _error(err) {\r\n        this.destination.error(err);\r\n        this.unsubscribe();\r\n    }\r\n    _complete() {\r\n        this.destination.complete();\r\n        this.unsubscribe();\r\n    }\r\n    _unsubscribeAndRecycle() {\r\n        const { _parent, _parents } = this;\r\n        this._parent = null;\r\n        this._parents = null;\r\n        this.unsubscribe();\r\n        this.closed = false;\r\n        this.isStopped = false;\r\n        this._parent = _parent;\r\n        this._parents = _parents;\r\n        return this;\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass SafeSubscriber extends Subscriber {\r\n    constructor(_parentSubscriber, observerOrNext, error, complete) {\r\n        super();\r\n        this._parentSubscriber = _parentSubscriber;\r\n        let next;\r\n        let context = this;\r\n        if (isFunction(observerOrNext)) {\r\n            next = observerOrNext;\r\n        }\r\n        else if (observerOrNext) {\r\n            next = observerOrNext.next;\r\n            error = observerOrNext.error;\r\n            complete = observerOrNext.complete;\r\n            if (observerOrNext !== emptyObserver) {\r\n                context = Object.create(observerOrNext);\r\n                if (isFunction(context.unsubscribe)) {\r\n                    this.add(context.unsubscribe.bind(context));\r\n                }\r\n                context.unsubscribe = this.unsubscribe.bind(this);\r\n            }\r\n        }\r\n        this._context = context;\r\n        this._next = next;\r\n        this._error = error;\r\n        this._complete = complete;\r\n    }\r\n    next(value) {\r\n        if (!this.isStopped && this._next) {\r\n            const { _parentSubscriber } = this;\r\n            if (!_parentSubscriber.syncErrorThrowable) {\r\n                this.__tryOrUnsub(this._next, value);\r\n            }\r\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\r\n                this.unsubscribe();\r\n            }\r\n        }\r\n    }\r\n    error(err) {\r\n        if (!this.isStopped) {\r\n            const { _parentSubscriber } = this;\r\n            if (this._error) {\r\n                if (!_parentSubscriber.syncErrorThrowable) {\r\n                    this.__tryOrUnsub(this._error, err);\r\n                    this.unsubscribe();\r\n                }\r\n                else {\r\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\r\n                    this.unsubscribe();\r\n                }\r\n            }\r\n            else if (!_parentSubscriber.syncErrorThrowable) {\r\n                this.unsubscribe();\r\n                throw err;\r\n            }\r\n            else {\r\n                _parentSubscriber.syncErrorValue = err;\r\n                _parentSubscriber.syncErrorThrown = true;\r\n                this.unsubscribe();\r\n            }\r\n        }\r\n    }\r\n    complete() {\r\n        if (!this.isStopped) {\r\n            const { _parentSubscriber } = this;\r\n            if (this._complete) {\r\n                const wrappedComplete = () => this._complete.call(this._context);\r\n                if (!_parentSubscriber.syncErrorThrowable) {\r\n                    this.__tryOrUnsub(wrappedComplete);\r\n                    this.unsubscribe();\r\n                }\r\n                else {\r\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\r\n                    this.unsubscribe();\r\n                }\r\n            }\r\n            else {\r\n                this.unsubscribe();\r\n            }\r\n        }\r\n    }\r\n    __tryOrUnsub(fn, value) {\r\n        try {\r\n            fn.call(this._context, value);\r\n        }\r\n        catch (err) {\r\n            this.unsubscribe();\r\n            throw err;\r\n        }\r\n    }\r\n    __tryOrSetError(parent, fn, value) {\r\n        try {\r\n            fn.call(this._context, value);\r\n        }\r\n        catch (err) {\r\n            parent.syncErrorValue = err;\r\n            parent.syncErrorThrown = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    _unsubscribe() {\r\n        const { _parentSubscriber } = this;\r\n        this._context = null;\r\n        this._parentSubscriber = null;\r\n        _parentSubscriber.unsubscribe();\r\n    }\r\n}\r\n//# sourceMappingURL=Subscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Subscriber.js\n// module id = ../../../../rxjs/_esm2015/Subscriber.js\n// module chunks = vendor","import { isArray } from './util/isArray';\r\nimport { isObject } from './util/isObject';\r\nimport { isFunction } from './util/isFunction';\r\nimport { tryCatch } from './util/tryCatch';\r\nimport { errorObject } from './util/errorObject';\r\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\r\n/**\r\n * Represents a disposable resource, such as the execution of an Observable. A\r\n * Subscription has one important method, `unsubscribe`, that takes no argument\r\n * and just disposes the resource held by the subscription.\r\n *\r\n * Additionally, subscriptions may be grouped together through the `add()`\r\n * method, which will attach a child Subscription to the current Subscription.\r\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\r\n * will be unsubscribed as well.\r\n *\r\n * @class Subscription\r\n */\r\nexport class Subscription {\r\n    /**\r\n     * @param {function(): void} [unsubscribe] A function describing how to\r\n     * perform the disposal of resources when the `unsubscribe` method is called.\r\n     */\r\n    constructor(unsubscribe) {\r\n        /**\r\n         * A flag to indicate whether this Subscription has already been unsubscribed.\r\n         * @type {boolean}\r\n         */\r\n        this.closed = false;\r\n        this._parent = null;\r\n        this._parents = null;\r\n        this._subscriptions = null;\r\n        if (unsubscribe) {\r\n            this._unsubscribe = unsubscribe;\r\n        }\r\n    }\r\n    /**\r\n     * Disposes the resources held by the subscription. May, for instance, cancel\r\n     * an ongoing Observable execution or cancel any other type of work that\r\n     * started when the Subscription was created.\r\n     * @return {void}\r\n     */\r\n    unsubscribe() {\r\n        let hasErrors = false;\r\n        let errors;\r\n        if (this.closed) {\r\n            return;\r\n        }\r\n        let { _parent, _parents, _unsubscribe, _subscriptions } = this;\r\n        this.closed = true;\r\n        this._parent = null;\r\n        this._parents = null;\r\n        // null out _subscriptions first so any child subscriptions that attempt\r\n        // to remove themselves from this subscription will noop\r\n        this._subscriptions = null;\r\n        let index = -1;\r\n        let len = _parents ? _parents.length : 0;\r\n        // if this._parent is null, then so is this._parents, and we\r\n        // don't have to remove ourselves from any parent subscriptions.\r\n        while (_parent) {\r\n            _parent.remove(this);\r\n            // if this._parents is null or index >= len,\r\n            // then _parent is set to null, and the loop exits\r\n            _parent = ++index < len && _parents[index] || null;\r\n        }\r\n        if (isFunction(_unsubscribe)) {\r\n            let trial = tryCatch(_unsubscribe).call(this);\r\n            if (trial === errorObject) {\r\n                hasErrors = true;\r\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\r\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\r\n            }\r\n        }\r\n        if (isArray(_subscriptions)) {\r\n            index = -1;\r\n            len = _subscriptions.length;\r\n            while (++index < len) {\r\n                const sub = _subscriptions[index];\r\n                if (isObject(sub)) {\r\n                    let trial = tryCatch(sub.unsubscribe).call(sub);\r\n                    if (trial === errorObject) {\r\n                        hasErrors = true;\r\n                        errors = errors || [];\r\n                        let err = errorObject.e;\r\n                        if (err instanceof UnsubscriptionError) {\r\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\r\n                        }\r\n                        else {\r\n                            errors.push(err);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hasErrors) {\r\n            throw new UnsubscriptionError(errors);\r\n        }\r\n    }\r\n    /**\r\n     * Adds a tear down to be called during the unsubscribe() of this\r\n     * Subscription.\r\n     *\r\n     * If the tear down being added is a subscription that is already\r\n     * unsubscribed, is the same reference `add` is being called on, or is\r\n     * `Subscription.EMPTY`, it will not be added.\r\n     *\r\n     * If this subscription is already in an `closed` state, the passed\r\n     * tear down logic will be executed immediately.\r\n     *\r\n     * @param {TeardownLogic} teardown The additional logic to execute on\r\n     * teardown.\r\n     * @return {Subscription} Returns the Subscription used or created to be\r\n     * added to the inner subscriptions list. This Subscription can be used with\r\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\r\n     * list.\r\n     */\r\n    add(teardown) {\r\n        if (!teardown || (teardown === Subscription.EMPTY)) {\r\n            return Subscription.EMPTY;\r\n        }\r\n        if (teardown === this) {\r\n            return this;\r\n        }\r\n        let subscription = teardown;\r\n        switch (typeof teardown) {\r\n            case 'function':\r\n                subscription = new Subscription(teardown);\r\n            case 'object':\r\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\r\n                    return subscription;\r\n                }\r\n                else if (this.closed) {\r\n                    subscription.unsubscribe();\r\n                    return subscription;\r\n                }\r\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\r\n                    const tmp = subscription;\r\n                    subscription = new Subscription();\r\n                    subscription._subscriptions = [tmp];\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\r\n        }\r\n        const subscriptions = this._subscriptions || (this._subscriptions = []);\r\n        subscriptions.push(subscription);\r\n        subscription._addParent(this);\r\n        return subscription;\r\n    }\r\n    /**\r\n     * Removes a Subscription from the internal list of subscriptions that will\r\n     * unsubscribe during the unsubscribe process of this Subscription.\r\n     * @param {Subscription} subscription The subscription to remove.\r\n     * @return {void}\r\n     */\r\n    remove(subscription) {\r\n        const subscriptions = this._subscriptions;\r\n        if (subscriptions) {\r\n            const subscriptionIndex = subscriptions.indexOf(subscription);\r\n            if (subscriptionIndex !== -1) {\r\n                subscriptions.splice(subscriptionIndex, 1);\r\n            }\r\n        }\r\n    }\r\n    _addParent(parent) {\r\n        let { _parent, _parents } = this;\r\n        if (!_parent || _parent === parent) {\r\n            // If we don't have a parent, or the new parent is the same as the\r\n            // current parent, then set this._parent to the new parent.\r\n            this._parent = parent;\r\n        }\r\n        else if (!_parents) {\r\n            // If there's already one parent, but not multiple, allocate an Array to\r\n            // store the rest of the parent Subscriptions.\r\n            this._parents = [parent];\r\n        }\r\n        else if (_parents.indexOf(parent) === -1) {\r\n            // Only add the new parent to the _parents list if it's not already there.\r\n            _parents.push(parent);\r\n        }\r\n    }\r\n}\r\nSubscription.EMPTY = (function (empty) {\r\n    empty.closed = true;\r\n    return empty;\r\n}(new Subscription()));\r\nfunction flattenUnsubscriptionErrors(errors) {\r\n    return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\r\n}\r\n//# sourceMappingURL=Subscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/Subscription.js\n// module id = ../../../../rxjs/_esm2015/Subscription.js\n// module chunks = vendor","import { Observable } from '../Observable';\r\nimport { ScalarObservable } from './ScalarObservable';\r\nimport { EmptyObservable } from './EmptyObservable';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class ArrayLikeObservable extends Observable {\r\n    constructor(arrayLike, scheduler) {\r\n        super();\r\n        this.arrayLike = arrayLike;\r\n        this.scheduler = scheduler;\r\n        if (!scheduler && arrayLike.length === 1) {\r\n            this._isScalar = true;\r\n            this.value = arrayLike[0];\r\n        }\r\n    }\r\n    static create(arrayLike, scheduler) {\r\n        const length = arrayLike.length;\r\n        if (length === 0) {\r\n            return new EmptyObservable();\r\n        }\r\n        else if (length === 1) {\r\n            return new ScalarObservable(arrayLike[0], scheduler);\r\n        }\r\n        else {\r\n            return new ArrayLikeObservable(arrayLike, scheduler);\r\n        }\r\n    }\r\n    static dispatch(state) {\r\n        const { arrayLike, index, length, subscriber } = state;\r\n        if (subscriber.closed) {\r\n            return;\r\n        }\r\n        if (index >= length) {\r\n            subscriber.complete();\r\n            return;\r\n        }\r\n        subscriber.next(arrayLike[index]);\r\n        state.index = index + 1;\r\n        this.schedule(state);\r\n    }\r\n    _subscribe(subscriber) {\r\n        let index = 0;\r\n        const { arrayLike, scheduler } = this;\r\n        const length = arrayLike.length;\r\n        if (scheduler) {\r\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\r\n                arrayLike, index, length, subscriber\r\n            });\r\n        }\r\n        else {\r\n            for (let i = 0; i < length && !subscriber.closed; i++) {\r\n                subscriber.next(arrayLike[i]);\r\n            }\r\n            subscriber.complete();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ArrayLikeObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/ArrayLikeObservable.js\n// module id = ../../../../rxjs/_esm2015/observable/ArrayLikeObservable.js\n// module chunks = vendor","import { Observable } from '../Observable';\r\nimport { ScalarObservable } from './ScalarObservable';\r\nimport { EmptyObservable } from './EmptyObservable';\r\nimport { isScheduler } from '../util/isScheduler';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class ArrayObservable extends Observable {\r\n    constructor(array, scheduler) {\r\n        super();\r\n        this.array = array;\r\n        this.scheduler = scheduler;\r\n        if (!scheduler && array.length === 1) {\r\n            this._isScalar = true;\r\n            this.value = array[0];\r\n        }\r\n    }\r\n    static create(array, scheduler) {\r\n        return new ArrayObservable(array, scheduler);\r\n    }\r\n    /**\r\n     * Creates an Observable that emits some values you specify as arguments,\r\n     * immediately one after the other, and then emits a complete notification.\r\n     *\r\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\r\n     * </span>\r\n     *\r\n     * <img src=\"./img/of.png\" width=\"100%\">\r\n     *\r\n     * This static operator is useful for creating a simple Observable that only\r\n     * emits the arguments given, and the complete notification thereafter. It can\r\n     * be used for composing with other Observables, such as with {@link concat}.\r\n     * By default, it uses a `null` IScheduler, which means the `next`\r\n     * notifications are sent synchronously, although with a different IScheduler\r\n     * it is possible to determine when those notifications will be delivered.\r\n     *\r\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\r\n     * var numbers = Rx.Observable.of(10, 20, 30);\r\n     * var letters = Rx.Observable.of('a', 'b', 'c');\r\n     * var interval = Rx.Observable.interval(1000);\r\n     * var result = numbers.concat(letters).concat(interval);\r\n     * result.subscribe(x => console.log(x));\r\n     *\r\n     * @see {@link create}\r\n     * @see {@link empty}\r\n     * @see {@link never}\r\n     * @see {@link throw}\r\n     *\r\n     * @param {...T} values Arguments that represent `next` values to be emitted.\r\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\r\n     * the emissions of the `next` notifications.\r\n     * @return {Observable<T>} An Observable that emits each given input value.\r\n     * @static true\r\n     * @name of\r\n     * @owner Observable\r\n     */\r\n    static of(...array) {\r\n        let scheduler = array[array.length - 1];\r\n        if (isScheduler(scheduler)) {\r\n            array.pop();\r\n        }\r\n        else {\r\n            scheduler = null;\r\n        }\r\n        const len = array.length;\r\n        if (len > 1) {\r\n            return new ArrayObservable(array, scheduler);\r\n        }\r\n        else if (len === 1) {\r\n            return new ScalarObservable(array[0], scheduler);\r\n        }\r\n        else {\r\n            return new EmptyObservable(scheduler);\r\n        }\r\n    }\r\n    static dispatch(state) {\r\n        const { array, index, count, subscriber } = state;\r\n        if (index >= count) {\r\n            subscriber.complete();\r\n            return;\r\n        }\r\n        subscriber.next(array[index]);\r\n        if (subscriber.closed) {\r\n            return;\r\n        }\r\n        state.index = index + 1;\r\n        this.schedule(state);\r\n    }\r\n    _subscribe(subscriber) {\r\n        let index = 0;\r\n        const array = this.array;\r\n        const count = array.length;\r\n        const scheduler = this.scheduler;\r\n        if (scheduler) {\r\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\r\n                array, index, count, subscriber\r\n            });\r\n        }\r\n        else {\r\n            for (let i = 0; i < count && !subscriber.closed; i++) {\r\n                subscriber.next(array[i]);\r\n            }\r\n            subscriber.complete();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ArrayObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/ArrayObservable.js\n// module id = ../../../../rxjs/_esm2015/observable/ArrayObservable.js\n// module chunks = vendor","import { SubjectSubscriber } from '../Subject';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\r\n/**\r\n * @class ConnectableObservable<T>\r\n */\r\nexport class ConnectableObservable extends Observable {\r\n    constructor(source, subjectFactory) {\r\n        super();\r\n        this.source = source;\r\n        this.subjectFactory = subjectFactory;\r\n        this._refCount = 0;\r\n        this._isComplete = false;\r\n    }\r\n    _subscribe(subscriber) {\r\n        return this.getSubject().subscribe(subscriber);\r\n    }\r\n    getSubject() {\r\n        const subject = this._subject;\r\n        if (!subject || subject.isStopped) {\r\n            this._subject = this.subjectFactory();\r\n        }\r\n        return this._subject;\r\n    }\r\n    connect() {\r\n        let connection = this._connection;\r\n        if (!connection) {\r\n            this._isComplete = false;\r\n            connection = this._connection = new Subscription();\r\n            connection.add(this.source\r\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\r\n            if (connection.closed) {\r\n                this._connection = null;\r\n                connection = Subscription.EMPTY;\r\n            }\r\n            else {\r\n                this._connection = connection;\r\n            }\r\n        }\r\n        return connection;\r\n    }\r\n    refCount() {\r\n        return higherOrderRefCount()(this);\r\n    }\r\n}\r\nconst connectableProto = ConnectableObservable.prototype;\r\nexport const connectableObservableDescriptor = {\r\n    operator: { value: null },\r\n    _refCount: { value: 0, writable: true },\r\n    _subject: { value: null, writable: true },\r\n    _connection: { value: null, writable: true },\r\n    _subscribe: { value: connectableProto._subscribe },\r\n    _isComplete: { value: connectableProto._isComplete, writable: true },\r\n    getSubject: { value: connectableProto.getSubject },\r\n    connect: { value: connectableProto.connect },\r\n    refCount: { value: connectableProto.refCount }\r\n};\r\nclass ConnectableSubscriber extends SubjectSubscriber {\r\n    constructor(destination, connectable) {\r\n        super(destination);\r\n        this.connectable = connectable;\r\n    }\r\n    _error(err) {\r\n        this._unsubscribe();\r\n        super._error(err);\r\n    }\r\n    _complete() {\r\n        this.connectable._isComplete = true;\r\n        this._unsubscribe();\r\n        super._complete();\r\n    }\r\n    _unsubscribe() {\r\n        const connectable = this.connectable;\r\n        if (connectable) {\r\n            this.connectable = null;\r\n            const connection = connectable._connection;\r\n            connectable._refCount = 0;\r\n            connectable._subject = null;\r\n            connectable._connection = null;\r\n            if (connection) {\r\n                connection.unsubscribe();\r\n            }\r\n        }\r\n    }\r\n}\r\nclass RefCountOperator {\r\n    constructor(connectable) {\r\n        this.connectable = connectable;\r\n    }\r\n    call(subscriber, source) {\r\n        const { connectable } = this;\r\n        connectable._refCount++;\r\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\r\n        const subscription = source.subscribe(refCounter);\r\n        if (!refCounter.closed) {\r\n            refCounter.connection = connectable.connect();\r\n        }\r\n        return subscription;\r\n    }\r\n}\r\nclass RefCountSubscriber extends Subscriber {\r\n    constructor(destination, connectable) {\r\n        super(destination);\r\n        this.connectable = connectable;\r\n    }\r\n    _unsubscribe() {\r\n        const { connectable } = this;\r\n        if (!connectable) {\r\n            this.connection = null;\r\n            return;\r\n        }\r\n        this.connectable = null;\r\n        const refCount = connectable._refCount;\r\n        if (refCount <= 0) {\r\n            this.connection = null;\r\n            return;\r\n        }\r\n        connectable._refCount = refCount - 1;\r\n        if (refCount > 1) {\r\n            this.connection = null;\r\n            return;\r\n        }\r\n        ///\r\n        // Compare the local RefCountSubscriber's connection Subscription to the\r\n        // connection Subscription on the shared ConnectableObservable. In cases\r\n        // where the ConnectableObservable source synchronously emits values, and\r\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\r\n        // execution continues to here before the RefCountOperator has a chance to\r\n        // supply the RefCountSubscriber with the shared connection Subscription.\r\n        // For example:\r\n        // ```\r\n        // Observable.range(0, 10)\r\n        //   .publish()\r\n        //   .refCount()\r\n        //   .take(5)\r\n        //   .subscribe();\r\n        // ```\r\n        // In order to account for this case, RefCountSubscriber should only dispose\r\n        // the ConnectableObservable's shared connection Subscription if the\r\n        // connection Subscription exists, *and* either:\r\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\r\n        //      Subscription yet, or,\r\n        //   b. RefCountSubscriber's connection Subscription reference is identical\r\n        //      to the shared connection Subscription\r\n        ///\r\n        const { connection } = this;\r\n        const sharedConnection = connectable._connection;\r\n        this.connection = null;\r\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\r\n            sharedConnection.unsubscribe();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ConnectableObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/ConnectableObservable.js\n// module id = ../../../../rxjs/_esm2015/observable/ConnectableObservable.js\n// module chunks = vendor","import { Observable } from '../Observable';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class EmptyObservable extends Observable {\r\n    constructor(scheduler) {\r\n        super();\r\n        this.scheduler = scheduler;\r\n    }\r\n    /**\r\n     * Creates an Observable that emits no items to the Observer and immediately\r\n     * emits a complete notification.\r\n     *\r\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\r\n     * </span>\r\n     *\r\n     * <img src=\"./img/empty.png\" width=\"100%\">\r\n     *\r\n     * This static operator is useful for creating a simple Observable that only\r\n     * emits the complete notification. It can be used for composing with other\r\n     * Observables, such as in a {@link mergeMap}.\r\n     *\r\n     * @example <caption>Emit the number 7, then complete.</caption>\r\n     * var result = Rx.Observable.empty().startWith(7);\r\n     * result.subscribe(x => console.log(x));\r\n     *\r\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\r\n     * var interval = Rx.Observable.interval(1000);\r\n     * var result = interval.mergeMap(x =>\r\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\r\n     * );\r\n     * result.subscribe(x => console.log(x));\r\n     *\r\n     * // Results in the following to the console:\r\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\r\n     * // x will occur every 1000ms\r\n     * // if x % 2 is equal to 1 print abc\r\n     * // if x % 2 is not equal to 1 nothing will be output\r\n     *\r\n     * @see {@link create}\r\n     * @see {@link never}\r\n     * @see {@link of}\r\n     * @see {@link throw}\r\n     *\r\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\r\n     * the emission of the complete notification.\r\n     * @return {Observable} An \"empty\" Observable: emits only the complete\r\n     * notification.\r\n     * @static true\r\n     * @name empty\r\n     * @owner Observable\r\n     */\r\n    static create(scheduler) {\r\n        return new EmptyObservable(scheduler);\r\n    }\r\n    static dispatch(arg) {\r\n        const { subscriber } = arg;\r\n        subscriber.complete();\r\n    }\r\n    _subscribe(subscriber) {\r\n        const scheduler = this.scheduler;\r\n        if (scheduler) {\r\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\r\n        }\r\n        else {\r\n            subscriber.complete();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=EmptyObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/EmptyObservable.js\n// module id = ../../../../rxjs/_esm2015/observable/EmptyObservable.js\n// module chunks = vendor","import { Observable } from '../Observable';\r\nimport { EmptyObservable } from './EmptyObservable';\r\nimport { isArray } from '../util/isArray';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class ForkJoinObservable extends Observable {\r\n    constructor(sources, resultSelector) {\r\n        super();\r\n        this.sources = sources;\r\n        this.resultSelector = resultSelector;\r\n    }\r\n    /* tslint:enable:max-line-length */\r\n    /**\r\n     * Joins last values emitted by passed Observables.\r\n     *\r\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\r\n     *\r\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\r\n     *\r\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\r\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\r\n     * immediately.\r\n     *\r\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\r\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\r\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\r\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\r\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\r\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\r\n     * or {@link zip} instead.\r\n     *\r\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\r\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\r\n     * and it will not emit anything either, even if it already has some last values from other Observables.\r\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\r\n     * unless at any point some other Observable completes without emitting value, which brings us back to\r\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\r\n     * have to emit something at least once and complete.\r\n     *\r\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\r\n     * will be immediately unsubscribed.\r\n     *\r\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\r\n     * would land in emitted array. Whatever is returned by project function, will appear in output\r\n     * Observable instead. This means that default project can be thought of as a function that takes\r\n     * all its arguments and puts them into an array. Note that project function will be called only\r\n     * when output Observable is supposed to emit a result.\r\n     *\r\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\r\n     * const observable = Rx.Observable.forkJoin(\r\n     *   Rx.Observable.of(1, 2, 3, 4),\r\n     *   Rx.Observable.of(5, 6, 7, 8)\r\n     * );\r\n     * observable.subscribe(\r\n     *   value => console.log(value),\r\n     *   err => {},\r\n     *   () => console.log('This is how it ends!')\r\n     * );\r\n     *\r\n     * // Logs:\r\n     * // [4, 8]\r\n     * // \"This is how it ends!\"\r\n     *\r\n     *\r\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\r\n     * const observable = Rx.Observable.forkJoin(\r\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\r\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\r\n     * );\r\n     * observable.subscribe(\r\n     *   value => console.log(value),\r\n     *   err => {},\r\n     *   () => console.log('This is how it ends!')\r\n     * );\r\n     *\r\n     * // Logs:\r\n     * // [2, 3] after 3 seconds\r\n     * // \"This is how it ends!\" immediately after\r\n     *\r\n     *\r\n     * @example <caption>Use forkJoin with project function</caption>\r\n     * const observable = Rx.Observable.forkJoin(\r\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\r\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\r\n     *   (n, m) => n + m\r\n     * );\r\n     * observable.subscribe(\r\n     *   value => console.log(value),\r\n     *   err => {},\r\n     *   () => console.log('This is how it ends!')\r\n     * );\r\n     *\r\n     * // Logs:\r\n     * // 5 after 3 seconds\r\n     * // \"This is how it ends!\" immediately after\r\n     *\r\n     * @see {@link combineLatest}\r\n     * @see {@link zip}\r\n     *\r\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\r\n     * passed directly to the operator.\r\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\r\n     * that will appear in resulting Observable instead of default array.\r\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\r\n     * or value from project function.\r\n     * @static true\r\n     * @name forkJoin\r\n     * @owner Observable\r\n     */\r\n    static create(...sources) {\r\n        if (sources === null || arguments.length === 0) {\r\n            return new EmptyObservable();\r\n        }\r\n        let resultSelector = null;\r\n        if (typeof sources[sources.length - 1] === 'function') {\r\n            resultSelector = sources.pop();\r\n        }\r\n        // if the first and only other argument besides the resultSelector is an array\r\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\r\n        if (sources.length === 1 && isArray(sources[0])) {\r\n            sources = sources[0];\r\n        }\r\n        if (sources.length === 0) {\r\n            return new EmptyObservable();\r\n        }\r\n        return new ForkJoinObservable(sources, resultSelector);\r\n    }\r\n    _subscribe(subscriber) {\r\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass ForkJoinSubscriber extends OuterSubscriber {\r\n    constructor(destination, sources, resultSelector) {\r\n        super(destination);\r\n        this.sources = sources;\r\n        this.resultSelector = resultSelector;\r\n        this.completed = 0;\r\n        this.haveValues = 0;\r\n        const len = sources.length;\r\n        this.total = len;\r\n        this.values = new Array(len);\r\n        for (let i = 0; i < len; i++) {\r\n            const source = sources[i];\r\n            const innerSubscription = subscribeToResult(this, source, null, i);\r\n            if (innerSubscription) {\r\n                innerSubscription.outerIndex = i;\r\n                this.add(innerSubscription);\r\n            }\r\n        }\r\n    }\r\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this.values[outerIndex] = innerValue;\r\n        if (!innerSub._hasValue) {\r\n            innerSub._hasValue = true;\r\n            this.haveValues++;\r\n        }\r\n    }\r\n    notifyComplete(innerSub) {\r\n        const destination = this.destination;\r\n        const { haveValues, resultSelector, values } = this;\r\n        const len = values.length;\r\n        if (!innerSub._hasValue) {\r\n            destination.complete();\r\n            return;\r\n        }\r\n        this.completed++;\r\n        if (this.completed !== len) {\r\n            return;\r\n        }\r\n        if (haveValues === len) {\r\n            const value = resultSelector ? resultSelector.apply(this, values) : values;\r\n            destination.next(value);\r\n        }\r\n        destination.complete();\r\n    }\r\n}\r\n//# sourceMappingURL=ForkJoinObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/ForkJoinObservable.js\n// module id = ../../../../rxjs/_esm2015/observable/ForkJoinObservable.js\n// module chunks = vendor","import { isArray } from '../util/isArray';\r\nimport { isArrayLike } from '../util/isArrayLike';\r\nimport { isPromise } from '../util/isPromise';\r\nimport { PromiseObservable } from './PromiseObservable';\r\nimport { IteratorObservable } from './IteratorObservable';\r\nimport { ArrayObservable } from './ArrayObservable';\r\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\r\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\r\nimport { Observable } from '../Observable';\r\nimport { ObserveOnSubscriber } from '../operators/observeOn';\r\nimport { observable as Symbol_observable } from '../symbol/observable';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class FromObservable extends Observable {\r\n    constructor(ish, scheduler) {\r\n        super(null);\r\n        this.ish = ish;\r\n        this.scheduler = scheduler;\r\n    }\r\n    /**\r\n     * Creates an Observable from an Array, an array-like object, a Promise, an\r\n     * iterable object, or an Observable-like object.\r\n     *\r\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\r\n     *\r\n     * <img src=\"./img/from.png\" width=\"100%\">\r\n     *\r\n     * Convert various other objects and data types into Observables. `from`\r\n     * converts a Promise or an array-like or an\r\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\r\n     * object into an Observable that emits the items in that promise or array or\r\n     * iterable. A String, in this context, is treated as an array of characters.\r\n     * Observable-like objects (contains a function named with the ES2015 Symbol\r\n     * for Observable) can also be converted through this operator.\r\n     *\r\n     * @example <caption>Converts an array to an Observable</caption>\r\n     * var array = [10, 20, 30];\r\n     * var result = Rx.Observable.from(array);\r\n     * result.subscribe(x => console.log(x));\r\n     *\r\n     * // Results in the following:\r\n     * // 10 20 30\r\n     *\r\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\r\n     * function* generateDoubles(seed) {\r\n     *   var i = seed;\r\n     *   while (true) {\r\n     *     yield i;\r\n     *     i = 2 * i; // double it\r\n     *   }\r\n     * }\r\n     *\r\n     * var iterator = generateDoubles(3);\r\n     * var result = Rx.Observable.from(iterator).take(10);\r\n     * result.subscribe(x => console.log(x));\r\n     *\r\n     * // Results in the following:\r\n     * // 3 6 12 24 48 96 192 384 768 1536\r\n     *\r\n     * @see {@link create}\r\n     * @see {@link fromEvent}\r\n     * @see {@link fromEventPattern}\r\n     * @see {@link fromPromise}\r\n     *\r\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\r\n     * Observable-like, an Array, an iterable or an array-like object to be\r\n     * converted.\r\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\r\n     * emissions of values.\r\n     * @return {Observable<T>} The Observable whose values are originally from the\r\n     * input object that was converted.\r\n     * @static true\r\n     * @name from\r\n     * @owner Observable\r\n     */\r\n    static create(ish, scheduler) {\r\n        if (ish != null) {\r\n            if (typeof ish[Symbol_observable] === 'function') {\r\n                if (ish instanceof Observable && !scheduler) {\r\n                    return ish;\r\n                }\r\n                return new FromObservable(ish, scheduler);\r\n            }\r\n            else if (isArray(ish)) {\r\n                return new ArrayObservable(ish, scheduler);\r\n            }\r\n            else if (isPromise(ish)) {\r\n                return new PromiseObservable(ish, scheduler);\r\n            }\r\n            else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\r\n                return new IteratorObservable(ish, scheduler);\r\n            }\r\n            else if (isArrayLike(ish)) {\r\n                return new ArrayLikeObservable(ish, scheduler);\r\n            }\r\n        }\r\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\r\n    }\r\n    _subscribe(subscriber) {\r\n        const ish = this.ish;\r\n        const scheduler = this.scheduler;\r\n        if (scheduler == null) {\r\n            return ish[Symbol_observable]().subscribe(subscriber);\r\n        }\r\n        else {\r\n            return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=FromObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/FromObservable.js\n// module id = ../../../../rxjs/_esm2015/observable/FromObservable.js\n// module chunks = vendor","import { root } from '../util/root';\r\nimport { Observable } from '../Observable';\r\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class IteratorObservable extends Observable {\r\n    constructor(iterator, scheduler) {\r\n        super();\r\n        this.scheduler = scheduler;\r\n        if (iterator == null) {\r\n            throw new Error('iterator cannot be null.');\r\n        }\r\n        this.iterator = getIterator(iterator);\r\n    }\r\n    static create(iterator, scheduler) {\r\n        return new IteratorObservable(iterator, scheduler);\r\n    }\r\n    static dispatch(state) {\r\n        const { index, hasError, iterator, subscriber } = state;\r\n        if (hasError) {\r\n            subscriber.error(state.error);\r\n            return;\r\n        }\r\n        let result = iterator.next();\r\n        if (result.done) {\r\n            subscriber.complete();\r\n            return;\r\n        }\r\n        subscriber.next(result.value);\r\n        state.index = index + 1;\r\n        if (subscriber.closed) {\r\n            if (typeof iterator.return === 'function') {\r\n                iterator.return();\r\n            }\r\n            return;\r\n        }\r\n        this.schedule(state);\r\n    }\r\n    _subscribe(subscriber) {\r\n        let index = 0;\r\n        const { iterator, scheduler } = this;\r\n        if (scheduler) {\r\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\r\n                index, iterator, subscriber\r\n            });\r\n        }\r\n        else {\r\n            do {\r\n                let result = iterator.next();\r\n                if (result.done) {\r\n                    subscriber.complete();\r\n                    break;\r\n                }\r\n                else {\r\n                    subscriber.next(result.value);\r\n                }\r\n                if (subscriber.closed) {\r\n                    if (typeof iterator.return === 'function') {\r\n                        iterator.return();\r\n                    }\r\n                    break;\r\n                }\r\n            } while (true);\r\n        }\r\n    }\r\n}\r\nclass StringIterator {\r\n    constructor(str, idx = 0, len = str.length) {\r\n        this.str = str;\r\n        this.idx = idx;\r\n        this.len = len;\r\n    }\r\n    [Symbol_iterator]() { return (this); }\r\n    next() {\r\n        return this.idx < this.len ? {\r\n            done: false,\r\n            value: this.str.charAt(this.idx++)\r\n        } : {\r\n            done: true,\r\n            value: undefined\r\n        };\r\n    }\r\n}\r\nclass ArrayIterator {\r\n    constructor(arr, idx = 0, len = toLength(arr)) {\r\n        this.arr = arr;\r\n        this.idx = idx;\r\n        this.len = len;\r\n    }\r\n    [Symbol_iterator]() { return this; }\r\n    next() {\r\n        return this.idx < this.len ? {\r\n            done: false,\r\n            value: this.arr[this.idx++]\r\n        } : {\r\n            done: true,\r\n            value: undefined\r\n        };\r\n    }\r\n}\r\nfunction getIterator(obj) {\r\n    const i = obj[Symbol_iterator];\r\n    if (!i && typeof obj === 'string') {\r\n        return new StringIterator(obj);\r\n    }\r\n    if (!i && obj.length !== undefined) {\r\n        return new ArrayIterator(obj);\r\n    }\r\n    if (!i) {\r\n        throw new TypeError('object is not iterable');\r\n    }\r\n    return obj[Symbol_iterator]();\r\n}\r\nconst maxSafeInteger = Math.pow(2, 53) - 1;\r\nfunction toLength(o) {\r\n    let len = +o.length;\r\n    if (isNaN(len)) {\r\n        return 0;\r\n    }\r\n    if (len === 0 || !numberIsFinite(len)) {\r\n        return len;\r\n    }\r\n    len = sign(len) * Math.floor(Math.abs(len));\r\n    if (len <= 0) {\r\n        return 0;\r\n    }\r\n    if (len > maxSafeInteger) {\r\n        return maxSafeInteger;\r\n    }\r\n    return len;\r\n}\r\nfunction numberIsFinite(value) {\r\n    return typeof value === 'number' && root.isFinite(value);\r\n}\r\nfunction sign(value) {\r\n    let valueAsNumber = +value;\r\n    if (valueAsNumber === 0) {\r\n        return valueAsNumber;\r\n    }\r\n    if (isNaN(valueAsNumber)) {\r\n        return valueAsNumber;\r\n    }\r\n    return valueAsNumber < 0 ? -1 : 1;\r\n}\r\n//# sourceMappingURL=IteratorObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/IteratorObservable.js\n// module id = ../../../../rxjs/_esm2015/observable/IteratorObservable.js\n// module chunks = vendor","import { root } from '../util/root';\r\nimport { Observable } from '../Observable';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PromiseObservable extends Observable {\r\n    constructor(promise, scheduler) {\r\n        super();\r\n        this.promise = promise;\r\n        this.scheduler = scheduler;\r\n    }\r\n    /**\r\n     * Converts a Promise to an Observable.\r\n     *\r\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\r\n     * resolved value, then completes.</span>\r\n     *\r\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\r\n     * Observable. If the Promise resolves with a value, the output Observable\r\n     * emits that resolved value as a `next`, and then completes. If the Promise\r\n     * is rejected, then the output Observable emits the corresponding Error.\r\n     *\r\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\r\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\r\n     * result.subscribe(x => console.log(x), e => console.error(e));\r\n     *\r\n     * @see {@link bindCallback}\r\n     * @see {@link from}\r\n     *\r\n     * @param {PromiseLike<T>} promise The promise to be converted.\r\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\r\n     * the delivery of the resolved value (or the rejection).\r\n     * @return {Observable<T>} An Observable which wraps the Promise.\r\n     * @static true\r\n     * @name fromPromise\r\n     * @owner Observable\r\n     */\r\n    static create(promise, scheduler) {\r\n        return new PromiseObservable(promise, scheduler);\r\n    }\r\n    _subscribe(subscriber) {\r\n        const promise = this.promise;\r\n        const scheduler = this.scheduler;\r\n        if (scheduler == null) {\r\n            if (this._isScalar) {\r\n                if (!subscriber.closed) {\r\n                    subscriber.next(this.value);\r\n                    subscriber.complete();\r\n                }\r\n            }\r\n            else {\r\n                promise.then((value) => {\r\n                    this.value = value;\r\n                    this._isScalar = true;\r\n                    if (!subscriber.closed) {\r\n                        subscriber.next(value);\r\n                        subscriber.complete();\r\n                    }\r\n                }, (err) => {\r\n                    if (!subscriber.closed) {\r\n                        subscriber.error(err);\r\n                    }\r\n                })\r\n                    .then(null, err => {\r\n                    // escape the promise trap, throw unhandled errors\r\n                    root.setTimeout(() => { throw err; });\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            if (this._isScalar) {\r\n                if (!subscriber.closed) {\r\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\r\n                }\r\n            }\r\n            else {\r\n                promise.then((value) => {\r\n                    this.value = value;\r\n                    this._isScalar = true;\r\n                    if (!subscriber.closed) {\r\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\r\n                    }\r\n                }, (err) => {\r\n                    if (!subscriber.closed) {\r\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\r\n                    }\r\n                })\r\n                    .then(null, (err) => {\r\n                    // escape the promise trap, throw unhandled errors\r\n                    root.setTimeout(() => { throw err; });\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction dispatchNext(arg) {\r\n    const { value, subscriber } = arg;\r\n    if (!subscriber.closed) {\r\n        subscriber.next(value);\r\n        subscriber.complete();\r\n    }\r\n}\r\nfunction dispatchError(arg) {\r\n    const { err, subscriber } = arg;\r\n    if (!subscriber.closed) {\r\n        subscriber.error(err);\r\n    }\r\n}\r\n//# sourceMappingURL=PromiseObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/PromiseObservable.js\n// module id = ../../../../rxjs/_esm2015/observable/PromiseObservable.js\n// module chunks = vendor","import { Observable } from '../Observable';\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class ScalarObservable extends Observable {\r\n    constructor(value, scheduler) {\r\n        super();\r\n        this.value = value;\r\n        this.scheduler = scheduler;\r\n        this._isScalar = true;\r\n        if (scheduler) {\r\n            this._isScalar = false;\r\n        }\r\n    }\r\n    static create(value, scheduler) {\r\n        return new ScalarObservable(value, scheduler);\r\n    }\r\n    static dispatch(state) {\r\n        const { done, value, subscriber } = state;\r\n        if (done) {\r\n            subscriber.complete();\r\n            return;\r\n        }\r\n        subscriber.next(value);\r\n        if (subscriber.closed) {\r\n            return;\r\n        }\r\n        state.done = true;\r\n        this.schedule(state);\r\n    }\r\n    _subscribe(subscriber) {\r\n        const value = this.value;\r\n        const scheduler = this.scheduler;\r\n        if (scheduler) {\r\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\r\n                done: false, value, subscriber\r\n            });\r\n        }\r\n        else {\r\n            subscriber.next(value);\r\n            if (!subscriber.closed) {\r\n                subscriber.complete();\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ScalarObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/ScalarObservable.js\n// module id = ../../../../rxjs/_esm2015/observable/ScalarObservable.js\n// module chunks = vendor","import { ForkJoinObservable } from './ForkJoinObservable';\r\nexport const forkJoin = ForkJoinObservable.create;\r\n//# sourceMappingURL=forkJoin.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/forkJoin.js\n// module id = ../../../../rxjs/_esm2015/observable/forkJoin.js\n// module chunks = vendor","import { FromObservable } from './FromObservable';\r\nexport const from = FromObservable.create;\r\n//# sourceMappingURL=from.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/from.js\n// module id = ../../../../rxjs/_esm2015/observable/from.js\n// module chunks = vendor","import { PromiseObservable } from './PromiseObservable';\r\nexport const fromPromise = PromiseObservable.create;\r\n//# sourceMappingURL=fromPromise.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/fromPromise.js\n// module id = ../../../../rxjs/_esm2015/observable/fromPromise.js\n// module chunks = vendor","import { Observable } from '../Observable';\r\nimport { ArrayObservable } from './ArrayObservable';\r\nimport { isScheduler } from '../util/isScheduler';\r\nimport { mergeAll } from '../operators/mergeAll';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Creates an output Observable which concurrently emits all values from every\r\n * given input Observable.\r\n *\r\n * <span class=\"informal\">Flattens multiple Observables together by blending\r\n * their values into one Observable.</span>\r\n *\r\n * <img src=\"./img/merge.png\" width=\"100%\">\r\n *\r\n * `merge` subscribes to each given input Observable (as arguments), and simply\r\n * forwards (without doing any transformation) all the values from all the input\r\n * Observables to the output Observable. The output Observable only completes\r\n * once all input Observables have completed. Any error delivered by an input\r\n * Observable will be immediately emitted on the output Observable.\r\n *\r\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var timer = Rx.Observable.interval(1000);\r\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\r\n * clicksOrTimer.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // timer will emit ascending values, one every second(1000ms) to console\r\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\r\n * // Since the two streams are merged you see these happening\r\n * // as they occur.\r\n *\r\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\r\n * var timer1 = Rx.Observable.interval(1000).take(10);\r\n * var timer2 = Rx.Observable.interval(2000).take(6);\r\n * var timer3 = Rx.Observable.interval(500).take(10);\r\n * var concurrent = 2; // the argument\r\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\r\n * merged.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // - First timer1 and timer2 will run concurrently\r\n * // - timer1 will emit a value every 1000ms for 10 iterations\r\n * // - timer2 will emit a value every 2000ms for 6 iterations\r\n * // - after timer1 hits it's max iteration, timer2 will\r\n * //   continue, and timer3 will start to run concurrently with timer2\r\n * // - when timer2 hits it's max iteration it terminates, and\r\n * //   timer3 will continue to emit a value every 500ms until it is complete\r\n *\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n *\r\n * @param {...ObservableInput} observables Input Observables to merge together.\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\r\n * concurrency of input Observables.\r\n * @return {Observable} an Observable that emits items that are the result of\r\n * every input Observable.\r\n * @static true\r\n * @name merge\r\n * @owner Observable\r\n */\r\nexport function merge(...observables) {\r\n    let concurrent = Number.POSITIVE_INFINITY;\r\n    let scheduler = null;\r\n    let last = observables[observables.length - 1];\r\n    if (isScheduler(last)) {\r\n        scheduler = observables.pop();\r\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\r\n            concurrent = observables.pop();\r\n        }\r\n    }\r\n    else if (typeof last === 'number') {\r\n        concurrent = observables.pop();\r\n    }\r\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\r\n        return observables[0];\r\n    }\r\n    return mergeAll(concurrent)(new ArrayObservable(observables, scheduler));\r\n}\r\n//# sourceMappingURL=merge.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/merge.js\n// module id = ../../../../rxjs/_esm2015/observable/merge.js\n// module chunks = vendor","import { ArrayObservable } from './ArrayObservable';\r\nexport const of = ArrayObservable.of;\r\n//# sourceMappingURL=of.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/observable/of.js\n// module id = ../../../../rxjs/_esm2015/observable/of.js\n// module chunks = vendor","import { catchError as higherOrder } from '../operators/catchError';\r\n/**\r\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\r\n *\r\n * <img src=\"./img/catch.png\" width=\"100%\">\r\n *\r\n * @example <caption>Continues with a different Observable when there's an error</caption>\r\n *\r\n * Observable.of(1, 2, 3, 4, 5)\r\n *   .map(n => {\r\n * \t   if (n == 4) {\r\n * \t     throw 'four!';\r\n *     }\r\n *\t   return n;\r\n *   })\r\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\r\n *   .subscribe(x => console.log(x));\r\n *   // 1, 2, 3, I, II, III, IV, V\r\n *\r\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\r\n *\r\n * Observable.of(1, 2, 3, 4, 5)\r\n *   .map(n => {\r\n * \t   if (n === 4) {\r\n * \t     throw 'four!';\r\n *     }\r\n * \t   return n;\r\n *   })\r\n *   .catch((err, caught) => caught)\r\n *   .take(30)\r\n *   .subscribe(x => console.log(x));\r\n *   // 1, 2, 3, 1, 2, 3, ...\r\n *\r\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\r\n *\r\n * Observable.of(1, 2, 3, 4, 5)\r\n *   .map(n => {\r\n *     if (n == 4) {\r\n *       throw 'four!';\r\n *     }\r\n *     return n;\r\n *   })\r\n *   .catch(err => {\r\n *     throw 'error in source. Details: ' + err;\r\n *   })\r\n *   .subscribe(\r\n *     x => console.log(x),\r\n *     err => console.log(err)\r\n *   );\r\n *   // 1, 2, 3, error in source. Details: four!\r\n *\r\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\r\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\r\n *  is returned by the `selector` will be used to continue the observable chain.\r\n * @return {Observable} An observable that originates from either the source or the observable returned by the\r\n *  catch `selector` function.\r\n * @method catch\r\n * @name catch\r\n * @owner Observable\r\n */\r\nexport function _catch(selector) {\r\n    return higherOrder(selector)(this);\r\n}\r\n//# sourceMappingURL=catch.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/catch.js\n// module id = ../../../../rxjs/_esm2015/operator/catch.js\n// module chunks = vendor","import { concatAll as higherOrder } from '../operators/concatAll';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable by\r\n * concatenating the inner Observables in order.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\r\n * inner Observable after the other.</span>\r\n *\r\n * <img src=\"./img/concatAll.png\" width=\"100%\">\r\n *\r\n * Joins every Observable emitted by the source (a higher-order Observable), in\r\n * a serial fashion. It subscribes to each inner Observable only after the\r\n * previous inner Observable has completed, and merges all of their values into\r\n * the returned observable.\r\n *\r\n * __Warning:__ If the source Observable emits Observables quickly and\r\n * endlessly, and the inner Observables it emits generally complete slower than\r\n * the source emits, you can run into memory issues as the incoming Observables\r\n * collect in an unbounded buffer.\r\n *\r\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\r\n * var firstOrder = higherOrder.concatAll();\r\n * firstOrder.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link concat}\r\n * @see {@link concatMap}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaust}\r\n * @see {@link mergeAll}\r\n * @see {@link switch}\r\n * @see {@link zipAll}\r\n *\r\n * @return {Observable} An Observable emitting values from all the inner\r\n * Observables concatenated.\r\n * @method concatAll\r\n * @owner Observable\r\n */\r\nexport function concatAll() {\r\n    return higherOrder()(this);\r\n}\r\n//# sourceMappingURL=concatAll.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/concatAll.js\n// module id = ../../../../rxjs/_esm2015/operator/concatAll.js\n// module chunks = vendor","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, in a serialized fashion waiting for each one to complete before\r\n * merging the next.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link concatAll}.</span>\r\n *\r\n * <img src=\"./img/concatMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\r\n * concatenated with the previous inner Observable.\r\n *\r\n * __Warning:__ if source values arrive endlessly and faster than their\r\n * corresponding inner Observables can complete, it will result in memory issues\r\n * as inner Observables amass in an unbounded buffer waiting for their turn to\r\n * be subscribed to.\r\n *\r\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n *\r\n * @see {@link concat}\r\n * @see {@link concatAll}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and taking values from each projected inner\r\n * Observable sequentially.\r\n * @method concatMap\r\n * @owner Observable\r\n */\r\nexport function concatMap(project, resultSelector) {\r\n    return higherOrderConcatMap(project, resultSelector)(this);\r\n}\r\n//# sourceMappingURL=concatMap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/concatMap.js\n// module id = ../../../../rxjs/_esm2015/operator/concatMap.js\n// module chunks = vendor","import { every as higherOrder } from '../operators/every';\r\n/**\r\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\r\n *\r\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\r\n *  Observable.of(1, 2, 3, 4, 5, 6)\r\n *     .every(x => x < 5)\r\n *     .subscribe(x => console.log(x)); // -> false\r\n *\r\n * @param {function} predicate A function for determining if an item meets a specified condition.\r\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\r\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\r\n * @method every\r\n * @owner Observable\r\n */\r\nexport function every(predicate, thisArg) {\r\n    return higherOrder(predicate, thisArg)(this);\r\n}\r\n//# sourceMappingURL=every.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/every.js\n// module id = ../../../../rxjs/_esm2015/operator/every.js\n// module chunks = vendor","import { filter as higherOrderFilter } from '../operators/filter';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Filter items emitted by the source Observable by only emitting those that\r\n * satisfy a specified predicate.\r\n *\r\n * <span class=\"informal\">Like\r\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\r\n * it only emits a value from the source if it passes a criterion function.</span>\r\n *\r\n * <img src=\"./img/filter.png\" width=\"100%\">\r\n *\r\n * Similar to the well-known `Array.prototype.filter` method, this operator\r\n * takes values from the source Observable, passes them through a `predicate`\r\n * function and only emits those values that yielded `true`.\r\n *\r\n * @example <caption>Emit only click events whose target was a DIV element</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\r\n * clicksOnDivs.subscribe(x => console.log(x));\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n * @see {@link distinctUntilKeyChanged}\r\n * @see {@link ignoreElements}\r\n * @see {@link partition}\r\n * @see {@link skip}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted, if `false` the value is not passed to the output\r\n * Observable. The `index` parameter is the number `i` for the i-th source\r\n * emission that has happened since the subscription, starting from the number\r\n * `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {Observable} An Observable of values from the source that were\r\n * allowed by the `predicate` function.\r\n * @method filter\r\n * @owner Observable\r\n */\r\nexport function filter(predicate, thisArg) {\r\n    return higherOrderFilter(predicate, thisArg)(this);\r\n}\r\n//# sourceMappingURL=filter.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/filter.js\n// module id = ../../../../rxjs/_esm2015/operator/filter.js\n// module chunks = vendor","import { first as higherOrder } from '../operators/first';\r\n/**\r\n * Emits only the first value (or the first value that meets some condition)\r\n * emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Emits only the first value. Or emits only the first\r\n * value that passes some test.</span>\r\n *\r\n * <img src=\"./img/first.png\" width=\"100%\">\r\n *\r\n * If called with no arguments, `first` emits the first value of the source\r\n * Observable, then completes. If called with a `predicate` function, `first`\r\n * emits the first value of the source that matches the specified condition. It\r\n * may also take a `resultSelector` function to produce the output value from\r\n * the input value, and a `defaultValue` to emit in case the source completes\r\n * before it is able to emit a valid value. Throws an error if `defaultValue`\r\n * was not provided and a matching element is not found.\r\n *\r\n * @example <caption>Emit only the first click that happens on the DOM</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.first();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Emits the first click that happens on a DIV</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link filter}\r\n * @see {@link find}\r\n * @see {@link take}\r\n *\r\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\r\n * callback if the Observable completes before any `next` notification was sent.\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\r\n * An optional function called with each item to test for condition matching.\r\n * @param {function(value: T, index: number): R} [resultSelector] A function to\r\n * produce the value on the output Observable based on the values\r\n * and the indices of the source Observable. The arguments passed to this\r\n * function are:\r\n * - `value`: the value that was emitted on the source.\r\n * - `index`: the \"index\" of the value from the source.\r\n * @param {R} [defaultValue] The default value emitted in case no valid value\r\n * was found on the source.\r\n * @return {Observable<T|R>} An Observable of the first item that matches the\r\n * condition.\r\n * @method first\r\n * @owner Observable\r\n */\r\nexport function first(predicate, resultSelector, defaultValue) {\r\n    return higherOrder(predicate, resultSelector, defaultValue)(this);\r\n}\r\n//# sourceMappingURL=first.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/first.js\n// module id = ../../../../rxjs/_esm2015/operator/first.js\n// module chunks = vendor","import { last as higherOrder } from '../operators/last';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns an Observable that emits only the last item emitted by the source Observable.\r\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\r\n * the last item from the source Observable, the resulting Observable will emit the last item\r\n * from the source Observable that satisfies the predicate.\r\n *\r\n * <img src=\"./img/last.png\" width=\"100%\">\r\n *\r\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\r\n * callback if the Observable completes before any `next` notification was sent.\r\n * @param {function} predicate - The condition any source emitted item has to satisfy.\r\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\r\n * from the source, or an NoSuchElementException if no such items are emitted.\r\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\r\n * @method last\r\n * @owner Observable\r\n */\r\nexport function last(predicate, resultSelector, defaultValue) {\r\n    return higherOrder(predicate, resultSelector, defaultValue)(this);\r\n}\r\n//# sourceMappingURL=last.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/last.js\n// module id = ../../../../rxjs/_esm2015/operator/last.js\n// module chunks = vendor","import { map as higherOrderMap } from '../operators/map';\r\n/**\r\n * Applies a given `project` function to each value emitted by the source\r\n * Observable, and emits the resulting values as an Observable.\r\n *\r\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\r\n * it passes each source value through a transformation function to get\r\n * corresponding output values.</span>\r\n *\r\n * <img src=\"./img/map.png\" width=\"100%\">\r\n *\r\n * Similar to the well known `Array.prototype.map` function, this operator\r\n * applies a projection to each value and emits that projection in the output\r\n * Observable.\r\n *\r\n * @example <caption>Map every click to the clientX position of that click</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var positions = clicks.map(ev => ev.clientX);\r\n * positions.subscribe(x => console.log(x));\r\n *\r\n * @see {@link mapTo}\r\n * @see {@link pluck}\r\n *\r\n * @param {function(value: T, index: number): R} project The function to apply\r\n * to each `value` emitted by the source Observable. The `index` parameter is\r\n * the number `i` for the i-th emission that has happened since the\r\n * subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to define what `this` is in the\r\n * `project` function.\r\n * @return {Observable<R>} An Observable that emits the values from the source\r\n * Observable transformed by the given `project` function.\r\n * @method map\r\n * @owner Observable\r\n */\r\nexport function map(project, thisArg) {\r\n    return higherOrderMap(project, thisArg)(this);\r\n}\r\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/map.js\n// module id = ../../../../rxjs/_esm2015/operator/map.js\n// module chunks = vendor","import { mergeAll as higherOrder } from '../operators/mergeAll';\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable which\r\n * concurrently delivers all values that are emitted on the inner Observables.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n *\r\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\r\n *\r\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\r\n * a higher-order Observable. Each time it observes one of these emitted inner\r\n * Observables, it subscribes to that and delivers all the values from the\r\n * inner Observable on the output Observable. The output Observable only\r\n * completes once all inner Observables have completed. Any error delivered by\r\n * a inner Observable will be immediately emitted on the output Observable.\r\n *\r\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\r\n * var firstOrder = higherOrder.mergeAll();\r\n * firstOrder.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\r\n * var firstOrder = higherOrder.mergeAll(2);\r\n * firstOrder.subscribe(x => console.log(x));\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link concatAll}\r\n * @see {@link exhaust}\r\n * @see {@link merge}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switch}\r\n * @see {@link zipAll}\r\n *\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits values coming from all the\r\n * inner Observables emitted by the source Observable.\r\n * @method mergeAll\r\n * @owner Observable\r\n */\r\nexport function mergeAll(concurrent = Number.POSITIVE_INFINITY) {\r\n    return higherOrder(concurrent)(this);\r\n}\r\n//# sourceMappingURL=mergeAll.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/mergeAll.js\n// module id = ../../../../rxjs/_esm2015/operator/mergeAll.js\n// module chunks = vendor","import { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link mergeAll}.</span>\r\n *\r\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger.\r\n *\r\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\r\n * var letters = Rx.Observable.of('a', 'b', 'c');\r\n * var result = letters.mergeMap(x =>\r\n *   Rx.Observable.interval(1000).map(i => x+i)\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // a0\r\n * // b0\r\n * // c0\r\n * // a1\r\n * // b1\r\n * // c1\r\n * // continues to list a,b,c with respective ascending integers\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method mergeMap\r\n * @owner Observable\r\n */\r\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\r\n    return higherOrderMergeMap(project, resultSelector, concurrent)(this);\r\n}\r\n//# sourceMappingURL=mergeMap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/mergeMap.js\n// module id = ../../../../rxjs/_esm2015/operator/mergeMap.js\n// module chunks = vendor","import { reduce as higherOrderReduce } from '../operators/reduce';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * <img src=\"./img/reduce.png\" width=\"100%\">\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\r\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\r\n *   .takeUntil(Rx.Observable.interval(5000));\r\n * var ones = clicksInFiveSeconds.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.reduce((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An Observable that emits a single value that is the\r\n * result of accumulating the values emitted by the source Observable.\r\n * @method reduce\r\n * @owner Observable\r\n */\r\nexport function reduce(accumulator, seed) {\r\n    // providing a seed of `undefined` *should* be valid and trigger\r\n    // hasSeed! so don't use `seed !== undefined` checks!\r\n    // For this reason, we have to check it here at the original call site\r\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\r\n    // means they didn't provide anything or if they literally provided `undefined`\r\n    if (arguments.length >= 2) {\r\n        return higherOrderReduce(accumulator, seed)(this);\r\n    }\r\n    return higherOrderReduce(accumulator)(this);\r\n}\r\n//# sourceMappingURL=reduce.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/reduce.js\n// module id = ../../../../rxjs/_esm2015/operator/reduce.js\n// module chunks = vendor","import { share as higherOrder } from '../operators/share';\r\n/**\r\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\r\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\r\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\r\n *\r\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\r\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\r\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\r\n * re-emit \"test\" to new subscriptions.\r\n *\r\n * <img src=\"./img/share.png\" width=\"100%\">\r\n *\r\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method share\r\n * @owner Observable\r\n */\r\nexport function share() {\r\n    return higherOrder()(this);\r\n}\r\n;\r\n//# sourceMappingURL=share.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operator/share.js\n// module id = ../../../../rxjs/_esm2015/operator/share.js\n// module chunks = vendor","import { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\n/**\r\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\r\n *\r\n * <img src=\"./img/catch.png\" width=\"100%\">\r\n *\r\n * @example <caption>Continues with a different Observable when there's an error</caption>\r\n *\r\n * Observable.of(1, 2, 3, 4, 5)\r\n *   .map(n => {\r\n * \t   if (n == 4) {\r\n * \t     throw 'four!';\r\n *     }\r\n *\t   return n;\r\n *   })\r\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\r\n *   .subscribe(x => console.log(x));\r\n *   // 1, 2, 3, I, II, III, IV, V\r\n *\r\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\r\n *\r\n * Observable.of(1, 2, 3, 4, 5)\r\n *   .map(n => {\r\n * \t   if (n === 4) {\r\n * \t     throw 'four!';\r\n *     }\r\n * \t   return n;\r\n *   })\r\n *   .catch((err, caught) => caught)\r\n *   .take(30)\r\n *   .subscribe(x => console.log(x));\r\n *   // 1, 2, 3, 1, 2, 3, ...\r\n *\r\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\r\n *\r\n * Observable.of(1, 2, 3, 4, 5)\r\n *   .map(n => {\r\n *     if (n == 4) {\r\n *       throw 'four!';\r\n *     }\r\n *     return n;\r\n *   })\r\n *   .catch(err => {\r\n *     throw 'error in source. Details: ' + err;\r\n *   })\r\n *   .subscribe(\r\n *     x => console.log(x),\r\n *     err => console.log(err)\r\n *   );\r\n *   // 1, 2, 3, error in source. Details: four!\r\n *\r\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\r\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\r\n *  is returned by the `selector` will be used to continue the observable chain.\r\n * @return {Observable} An observable that originates from either the source or the observable returned by the\r\n *  catch `selector` function.\r\n * @name catchError\r\n */\r\nexport function catchError(selector) {\r\n    return function catchErrorOperatorFunction(source) {\r\n        const operator = new CatchOperator(selector);\r\n        const caught = source.lift(operator);\r\n        return (operator.caught = caught);\r\n    };\r\n}\r\nclass CatchOperator {\r\n    constructor(selector) {\r\n        this.selector = selector;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass CatchSubscriber extends OuterSubscriber {\r\n    constructor(destination, selector, caught) {\r\n        super(destination);\r\n        this.selector = selector;\r\n        this.caught = caught;\r\n    }\r\n    // NOTE: overriding `error` instead of `_error` because we don't want\r\n    // to have this flag this subscriber as `isStopped`. We can mimic the\r\n    // behavior of the RetrySubscriber (from the `retry` operator), where\r\n    // we unsubscribe from our source chain, reset our Subscriber flags,\r\n    // then subscribe to the selector result.\r\n    error(err) {\r\n        if (!this.isStopped) {\r\n            let result;\r\n            try {\r\n                result = this.selector(err, this.caught);\r\n            }\r\n            catch (err2) {\r\n                super.error(err2);\r\n                return;\r\n            }\r\n            this._unsubscribeAndRecycle();\r\n            this.add(subscribeToResult(this, result));\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=catchError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/catchError.js\n// module id = ../../../../rxjs/_esm2015/operators/catchError.js\n// module chunks = vendor","import { mergeAll } from './mergeAll';\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable by\r\n * concatenating the inner Observables in order.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\r\n * inner Observable after the other.</span>\r\n *\r\n * <img src=\"./img/concatAll.png\" width=\"100%\">\r\n *\r\n * Joins every Observable emitted by the source (a higher-order Observable), in\r\n * a serial fashion. It subscribes to each inner Observable only after the\r\n * previous inner Observable has completed, and merges all of their values into\r\n * the returned observable.\r\n *\r\n * __Warning:__ If the source Observable emits Observables quickly and\r\n * endlessly, and the inner Observables it emits generally complete slower than\r\n * the source emits, you can run into memory issues as the incoming Observables\r\n * collect in an unbounded buffer.\r\n *\r\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\r\n * var firstOrder = higherOrder.concatAll();\r\n * firstOrder.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link concat}\r\n * @see {@link concatMap}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaust}\r\n * @see {@link mergeAll}\r\n * @see {@link switch}\r\n * @see {@link zipAll}\r\n *\r\n * @return {Observable} An Observable emitting values from all the inner\r\n * Observables concatenated.\r\n * @method concatAll\r\n * @owner Observable\r\n */\r\nexport function concatAll() {\r\n    return mergeAll(1);\r\n}\r\n//# sourceMappingURL=concatAll.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/concatAll.js\n// module id = ../../../../rxjs/_esm2015/operators/concatAll.js\n// module chunks = vendor","import { mergeMap } from './mergeMap';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable, in a serialized fashion waiting for each one to complete before\r\n * merging the next.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link concatAll}.</span>\r\n *\r\n * <img src=\"./img/concatMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\r\n * concatenated with the previous inner Observable.\r\n *\r\n * __Warning:__ if source values arrive endlessly and faster than their\r\n * corresponding inner Observables can complete, it will result in memory issues\r\n * as inner Observables amass in an unbounded buffer waiting for their turn to\r\n * be subscribed to.\r\n *\r\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n *\r\n * @see {@link concat}\r\n * @see {@link concatAll}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaustMap}\r\n * @see {@link mergeMap}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and taking values from each projected inner\r\n * Observable sequentially.\r\n * @method concatMap\r\n * @owner Observable\r\n */\r\nexport function concatMap(project, resultSelector) {\r\n    return mergeMap(project, resultSelector, 1);\r\n}\r\n//# sourceMappingURL=concatMap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/concatMap.js\n// module id = ../../../../rxjs/_esm2015/operators/concatMap.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Emits a given value if the source Observable completes without emitting any\r\n * `next` value, otherwise mirrors the source Observable.\r\n *\r\n * <span class=\"informal\">If the source Observable turns out to be empty, then\r\n * this operator will emit a default value.</span>\r\n *\r\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\r\n *\r\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\r\n * specified default value if the source Observable is empty (completes without\r\n * having emitted any `next` value).\r\n *\r\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\r\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link empty}\r\n * @see {@link last}\r\n *\r\n * @param {any} [defaultValue=null] The default value used if the source\r\n * Observable is empty.\r\n * @return {Observable} An Observable that emits either the specified\r\n * `defaultValue` if the source Observable emits no items, or the values emitted\r\n * by the source Observable.\r\n * @method defaultIfEmpty\r\n * @owner Observable\r\n */\r\nexport function defaultIfEmpty(defaultValue = null) {\r\n    return (source) => source.lift(new DefaultIfEmptyOperator(defaultValue));\r\n}\r\nclass DefaultIfEmptyOperator {\r\n    constructor(defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass DefaultIfEmptySubscriber extends Subscriber {\r\n    constructor(destination, defaultValue) {\r\n        super(destination);\r\n        this.defaultValue = defaultValue;\r\n        this.isEmpty = true;\r\n    }\r\n    _next(value) {\r\n        this.isEmpty = false;\r\n        this.destination.next(value);\r\n    }\r\n    _complete() {\r\n        if (this.isEmpty) {\r\n            this.destination.next(this.defaultValue);\r\n        }\r\n        this.destination.complete();\r\n    }\r\n}\r\n//# sourceMappingURL=defaultIfEmpty.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/defaultIfEmpty.js\n// module id = ../../../../rxjs/_esm2015/operators/defaultIfEmpty.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\n/**\r\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\r\n *\r\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\r\n *  Observable.of(1, 2, 3, 4, 5, 6)\r\n *     .every(x => x < 5)\r\n *     .subscribe(x => console.log(x)); // -> false\r\n *\r\n * @param {function} predicate A function for determining if an item meets a specified condition.\r\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\r\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\r\n * @method every\r\n * @owner Observable\r\n */\r\nexport function every(predicate, thisArg) {\r\n    return (source) => source.lift(new EveryOperator(predicate, thisArg, source));\r\n}\r\nclass EveryOperator {\r\n    constructor(predicate, thisArg, source) {\r\n        this.predicate = predicate;\r\n        this.thisArg = thisArg;\r\n        this.source = source;\r\n    }\r\n    call(observer, source) {\r\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass EverySubscriber extends Subscriber {\r\n    constructor(destination, predicate, thisArg, source) {\r\n        super(destination);\r\n        this.predicate = predicate;\r\n        this.thisArg = thisArg;\r\n        this.source = source;\r\n        this.index = 0;\r\n        this.thisArg = thisArg || this;\r\n    }\r\n    notifyComplete(everyValueMatch) {\r\n        this.destination.next(everyValueMatch);\r\n        this.destination.complete();\r\n    }\r\n    _next(value) {\r\n        let result = false;\r\n        try {\r\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        if (!result) {\r\n            this.notifyComplete(false);\r\n        }\r\n    }\r\n    _complete() {\r\n        this.notifyComplete(true);\r\n    }\r\n}\r\n//# sourceMappingURL=every.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/every.js\n// module id = ../../../../rxjs/_esm2015/operators/every.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Filter items emitted by the source Observable by only emitting those that\r\n * satisfy a specified predicate.\r\n *\r\n * <span class=\"informal\">Like\r\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\r\n * it only emits a value from the source if it passes a criterion function.</span>\r\n *\r\n * <img src=\"./img/filter.png\" width=\"100%\">\r\n *\r\n * Similar to the well-known `Array.prototype.filter` method, this operator\r\n * takes values from the source Observable, passes them through a `predicate`\r\n * function and only emits those values that yielded `true`.\r\n *\r\n * @example <caption>Emit only click events whose target was a DIV element</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\r\n * clicksOnDivs.subscribe(x => console.log(x));\r\n *\r\n * @see {@link distinct}\r\n * @see {@link distinctUntilChanged}\r\n * @see {@link distinctUntilKeyChanged}\r\n * @see {@link ignoreElements}\r\n * @see {@link partition}\r\n * @see {@link skip}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted, if `false` the value is not passed to the output\r\n * Observable. The `index` parameter is the number `i` for the i-th source\r\n * emission that has happened since the subscription, starting from the number\r\n * `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {Observable} An Observable of values from the source that were\r\n * allowed by the `predicate` function.\r\n * @method filter\r\n * @owner Observable\r\n */\r\nexport function filter(predicate, thisArg) {\r\n    return function filterOperatorFunction(source) {\r\n        return source.lift(new FilterOperator(predicate, thisArg));\r\n    };\r\n}\r\nclass FilterOperator {\r\n    constructor(predicate, thisArg) {\r\n        this.predicate = predicate;\r\n        this.thisArg = thisArg;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass FilterSubscriber extends Subscriber {\r\n    constructor(destination, predicate, thisArg) {\r\n        super(destination);\r\n        this.predicate = predicate;\r\n        this.thisArg = thisArg;\r\n        this.count = 0;\r\n    }\r\n    // the try catch block below is left specifically for\r\n    // optimization and perf reasons. a tryCatcher is not necessary here.\r\n    _next(value) {\r\n        let result;\r\n        try {\r\n            result = this.predicate.call(this.thisArg, value, this.count++);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        if (result) {\r\n            this.destination.next(value);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=filter.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/filter.js\n// module id = ../../../../rxjs/_esm2015/operators/filter.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\nimport { EmptyError } from '../util/EmptyError';\r\n/**\r\n * Emits only the first value (or the first value that meets some condition)\r\n * emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Emits only the first value. Or emits only the first\r\n * value that passes some test.</span>\r\n *\r\n * <img src=\"./img/first.png\" width=\"100%\">\r\n *\r\n * If called with no arguments, `first` emits the first value of the source\r\n * Observable, then completes. If called with a `predicate` function, `first`\r\n * emits the first value of the source that matches the specified condition. It\r\n * may also take a `resultSelector` function to produce the output value from\r\n * the input value, and a `defaultValue` to emit in case the source completes\r\n * before it is able to emit a valid value. Throws an error if `defaultValue`\r\n * was not provided and a matching element is not found.\r\n *\r\n * @example <caption>Emit only the first click that happens on the DOM</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.first();\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Emits the first click that happens on a DIV</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * @see {@link filter}\r\n * @see {@link find}\r\n * @see {@link take}\r\n *\r\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\r\n * callback if the Observable completes before any `next` notification was sent.\r\n *\r\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\r\n * An optional function called with each item to test for condition matching.\r\n * @param {function(value: T, index: number): R} [resultSelector] A function to\r\n * produce the value on the output Observable based on the values\r\n * and the indices of the source Observable. The arguments passed to this\r\n * function are:\r\n * - `value`: the value that was emitted on the source.\r\n * - `index`: the \"index\" of the value from the source.\r\n * @param {R} [defaultValue] The default value emitted in case no valid value\r\n * was found on the source.\r\n * @return {Observable<T|R>} An Observable of the first item that matches the\r\n * condition.\r\n * @method first\r\n * @owner Observable\r\n */\r\nexport function first(predicate, resultSelector, defaultValue) {\r\n    return (source) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\r\n}\r\nclass FirstOperator {\r\n    constructor(predicate, resultSelector, defaultValue, source) {\r\n        this.predicate = predicate;\r\n        this.resultSelector = resultSelector;\r\n        this.defaultValue = defaultValue;\r\n        this.source = source;\r\n    }\r\n    call(observer, source) {\r\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass FirstSubscriber extends Subscriber {\r\n    constructor(destination, predicate, resultSelector, defaultValue, source) {\r\n        super(destination);\r\n        this.predicate = predicate;\r\n        this.resultSelector = resultSelector;\r\n        this.defaultValue = defaultValue;\r\n        this.source = source;\r\n        this.index = 0;\r\n        this.hasCompleted = false;\r\n        this._emitted = false;\r\n    }\r\n    _next(value) {\r\n        const index = this.index++;\r\n        if (this.predicate) {\r\n            this._tryPredicate(value, index);\r\n        }\r\n        else {\r\n            this._emit(value, index);\r\n        }\r\n    }\r\n    _tryPredicate(value, index) {\r\n        let result;\r\n        try {\r\n            result = this.predicate(value, index, this.source);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        if (result) {\r\n            this._emit(value, index);\r\n        }\r\n    }\r\n    _emit(value, index) {\r\n        if (this.resultSelector) {\r\n            this._tryResultSelector(value, index);\r\n            return;\r\n        }\r\n        this._emitFinal(value);\r\n    }\r\n    _tryResultSelector(value, index) {\r\n        let result;\r\n        try {\r\n            result = this.resultSelector(value, index);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        this._emitFinal(result);\r\n    }\r\n    _emitFinal(value) {\r\n        const destination = this.destination;\r\n        if (!this._emitted) {\r\n            this._emitted = true;\r\n            destination.next(value);\r\n            destination.complete();\r\n            this.hasCompleted = true;\r\n        }\r\n    }\r\n    _complete() {\r\n        const destination = this.destination;\r\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\r\n            destination.next(this.defaultValue);\r\n            destination.complete();\r\n        }\r\n        else if (!this.hasCompleted) {\r\n            destination.error(new EmptyError);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=first.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/first.js\n// module id = ../../../../rxjs/_esm2015/operators/first.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\nimport { EmptyError } from '../util/EmptyError';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns an Observable that emits only the last item emitted by the source Observable.\r\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\r\n * the last item from the source Observable, the resulting Observable will emit the last item\r\n * from the source Observable that satisfies the predicate.\r\n *\r\n * <img src=\"./img/last.png\" width=\"100%\">\r\n *\r\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\r\n * callback if the Observable completes before any `next` notification was sent.\r\n * @param {function} predicate - The condition any source emitted item has to satisfy.\r\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\r\n * from the source, or an NoSuchElementException if no such items are emitted.\r\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\r\n * @method last\r\n * @owner Observable\r\n */\r\nexport function last(predicate, resultSelector, defaultValue) {\r\n    return (source) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\r\n}\r\nclass LastOperator {\r\n    constructor(predicate, resultSelector, defaultValue, source) {\r\n        this.predicate = predicate;\r\n        this.resultSelector = resultSelector;\r\n        this.defaultValue = defaultValue;\r\n        this.source = source;\r\n    }\r\n    call(observer, source) {\r\n        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass LastSubscriber extends Subscriber {\r\n    constructor(destination, predicate, resultSelector, defaultValue, source) {\r\n        super(destination);\r\n        this.predicate = predicate;\r\n        this.resultSelector = resultSelector;\r\n        this.defaultValue = defaultValue;\r\n        this.source = source;\r\n        this.hasValue = false;\r\n        this.index = 0;\r\n        if (typeof defaultValue !== 'undefined') {\r\n            this.lastValue = defaultValue;\r\n            this.hasValue = true;\r\n        }\r\n    }\r\n    _next(value) {\r\n        const index = this.index++;\r\n        if (this.predicate) {\r\n            this._tryPredicate(value, index);\r\n        }\r\n        else {\r\n            if (this.resultSelector) {\r\n                this._tryResultSelector(value, index);\r\n                return;\r\n            }\r\n            this.lastValue = value;\r\n            this.hasValue = true;\r\n        }\r\n    }\r\n    _tryPredicate(value, index) {\r\n        let result;\r\n        try {\r\n            result = this.predicate(value, index, this.source);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        if (result) {\r\n            if (this.resultSelector) {\r\n                this._tryResultSelector(value, index);\r\n                return;\r\n            }\r\n            this.lastValue = value;\r\n            this.hasValue = true;\r\n        }\r\n    }\r\n    _tryResultSelector(value, index) {\r\n        let result;\r\n        try {\r\n            result = this.resultSelector(value, index);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        this.lastValue = result;\r\n        this.hasValue = true;\r\n    }\r\n    _complete() {\r\n        const destination = this.destination;\r\n        if (this.hasValue) {\r\n            destination.next(this.lastValue);\r\n            destination.complete();\r\n        }\r\n        else {\r\n            destination.error(new EmptyError);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=last.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/last.js\n// module id = ../../../../rxjs/_esm2015/operators/last.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\n/**\r\n * Applies a given `project` function to each value emitted by the source\r\n * Observable, and emits the resulting values as an Observable.\r\n *\r\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\r\n * it passes each source value through a transformation function to get\r\n * corresponding output values.</span>\r\n *\r\n * <img src=\"./img/map.png\" width=\"100%\">\r\n *\r\n * Similar to the well known `Array.prototype.map` function, this operator\r\n * applies a projection to each value and emits that projection in the output\r\n * Observable.\r\n *\r\n * @example <caption>Map every click to the clientX position of that click</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var positions = clicks.map(ev => ev.clientX);\r\n * positions.subscribe(x => console.log(x));\r\n *\r\n * @see {@link mapTo}\r\n * @see {@link pluck}\r\n *\r\n * @param {function(value: T, index: number): R} project The function to apply\r\n * to each `value` emitted by the source Observable. The `index` parameter is\r\n * the number `i` for the i-th emission that has happened since the\r\n * subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to define what `this` is in the\r\n * `project` function.\r\n * @return {Observable<R>} An Observable that emits the values from the source\r\n * Observable transformed by the given `project` function.\r\n * @method map\r\n * @owner Observable\r\n */\r\nexport function map(project, thisArg) {\r\n    return function mapOperation(source) {\r\n        if (typeof project !== 'function') {\r\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\r\n        }\r\n        return source.lift(new MapOperator(project, thisArg));\r\n    };\r\n}\r\nexport class MapOperator {\r\n    constructor(project, thisArg) {\r\n        this.project = project;\r\n        this.thisArg = thisArg;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass MapSubscriber extends Subscriber {\r\n    constructor(destination, project, thisArg) {\r\n        super(destination);\r\n        this.project = project;\r\n        this.count = 0;\r\n        this.thisArg = thisArg || this;\r\n    }\r\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\r\n    // using try/catch optimizations.\r\n    _next(value) {\r\n        let result;\r\n        try {\r\n            result = this.project.call(this.thisArg, value, this.count++);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        this.destination.next(result);\r\n    }\r\n}\r\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/map.js\n// module id = ../../../../rxjs/_esm2015/operators/map.js\n// module chunks = vendor","import { mergeMap } from './mergeMap';\r\nimport { identity } from '../util/identity';\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable which\r\n * concurrently delivers all values that are emitted on the inner Observables.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n *\r\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\r\n *\r\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\r\n * a higher-order Observable. Each time it observes one of these emitted inner\r\n * Observables, it subscribes to that and delivers all the values from the\r\n * inner Observable on the output Observable. The output Observable only\r\n * completes once all inner Observables have completed. Any error delivered by\r\n * a inner Observable will be immediately emitted on the output Observable.\r\n *\r\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\r\n * var firstOrder = higherOrder.mergeAll();\r\n * firstOrder.subscribe(x => console.log(x));\r\n *\r\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\r\n * var firstOrder = higherOrder.mergeAll(2);\r\n * firstOrder.subscribe(x => console.log(x));\r\n *\r\n * @see {@link combineAll}\r\n * @see {@link concatAll}\r\n * @see {@link exhaust}\r\n * @see {@link merge}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switch}\r\n * @see {@link zipAll}\r\n *\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits values coming from all the\r\n * inner Observables emitted by the source Observable.\r\n * @method mergeAll\r\n * @owner Observable\r\n */\r\nexport function mergeAll(concurrent = Number.POSITIVE_INFINITY) {\r\n    return mergeMap(identity, null, concurrent);\r\n}\r\n//# sourceMappingURL=mergeAll.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/mergeAll.js\n// module id = ../../../../rxjs/_esm2015/operators/mergeAll.js\n// module chunks = vendor","import { subscribeToResult } from '../util/subscribeToResult';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Projects each source value to an Observable which is merged in the output\r\n * Observable.\r\n *\r\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\r\n * these inner Observables using {@link mergeAll}.</span>\r\n *\r\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\r\n *\r\n * Returns an Observable that emits items based on applying a function that you\r\n * supply to each item emitted by the source Observable, where that function\r\n * returns an Observable, and then merging those resulting Observables and\r\n * emitting the results of this merger.\r\n *\r\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\r\n * var letters = Rx.Observable.of('a', 'b', 'c');\r\n * var result = letters.mergeMap(x =>\r\n *   Rx.Observable.interval(1000).map(i => x+i)\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // a0\r\n * // b0\r\n * // c0\r\n * // a1\r\n * // b1\r\n * // c1\r\n * // continues to list a,b,c with respective ascending integers\r\n *\r\n * @see {@link concatMap}\r\n * @see {@link exhaustMap}\r\n * @see {@link merge}\r\n * @see {@link mergeAll}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchMap}\r\n *\r\n * @param {function(value: T, ?index: number): ObservableInput} project A function\r\n * that, when applied to an item emitted by the source Observable, returns an\r\n * Observable.\r\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\r\n * A function to produce the value on the output Observable based on the values\r\n * and the indices of the source (outer) emission and the inner Observable\r\n * emission. The arguments passed to this function are:\r\n * - `outerValue`: the value that came from the source\r\n * - `innerValue`: the value that came from the projected Observable\r\n * - `outerIndex`: the \"index\" of the value that came from the source\r\n * - `innerIndex`: the \"index\" of the value from the projected Observable\r\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\r\n * Observables being subscribed to concurrently.\r\n * @return {Observable} An Observable that emits the result of applying the\r\n * projection function (and the optional `resultSelector`) to each item emitted\r\n * by the source Observable and merging the results of the Observables obtained\r\n * from this transformation.\r\n * @method mergeMap\r\n * @owner Observable\r\n */\r\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\r\n    return function mergeMapOperatorFunction(source) {\r\n        if (typeof resultSelector === 'number') {\r\n            concurrent = resultSelector;\r\n            resultSelector = null;\r\n        }\r\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\r\n    };\r\n}\r\nexport class MergeMapOperator {\r\n    constructor(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\r\n        this.project = project;\r\n        this.resultSelector = resultSelector;\r\n        this.concurrent = concurrent;\r\n    }\r\n    call(observer, source) {\r\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class MergeMapSubscriber extends OuterSubscriber {\r\n    constructor(destination, project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\r\n        super(destination);\r\n        this.project = project;\r\n        this.resultSelector = resultSelector;\r\n        this.concurrent = concurrent;\r\n        this.hasCompleted = false;\r\n        this.buffer = [];\r\n        this.active = 0;\r\n        this.index = 0;\r\n    }\r\n    _next(value) {\r\n        if (this.active < this.concurrent) {\r\n            this._tryNext(value);\r\n        }\r\n        else {\r\n            this.buffer.push(value);\r\n        }\r\n    }\r\n    _tryNext(value) {\r\n        let result;\r\n        const index = this.index++;\r\n        try {\r\n            result = this.project(value, index);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        this.active++;\r\n        this._innerSub(result, value, index);\r\n    }\r\n    _innerSub(ish, value, index) {\r\n        this.add(subscribeToResult(this, ish, value, index));\r\n    }\r\n    _complete() {\r\n        this.hasCompleted = true;\r\n        if (this.active === 0 && this.buffer.length === 0) {\r\n            this.destination.complete();\r\n        }\r\n    }\r\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        if (this.resultSelector) {\r\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\r\n        }\r\n        else {\r\n            this.destination.next(innerValue);\r\n        }\r\n    }\r\n    _notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex) {\r\n        let result;\r\n        try {\r\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n            return;\r\n        }\r\n        this.destination.next(result);\r\n    }\r\n    notifyComplete(innerSub) {\r\n        const buffer = this.buffer;\r\n        this.remove(innerSub);\r\n        this.active--;\r\n        if (buffer.length > 0) {\r\n            this._next(buffer.shift());\r\n        }\r\n        else if (this.active === 0 && this.hasCompleted) {\r\n            this.destination.complete();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=mergeMap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/mergeMap.js\n// module id = ../../../../rxjs/_esm2015/operators/mergeMap.js\n// module chunks = vendor","import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Returns an Observable that emits the results of invoking a specified selector on items\r\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\r\n *\r\n * <img src=\"./img/multicast.png\" width=\"100%\">\r\n *\r\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\r\n * which the source sequence's elements will be multicast to the selector function\r\n * or Subject to push source elements into.\r\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\r\n * as many times as needed, without causing multiple subscriptions to the source stream.\r\n * Subscribers to the given source will receive all notifications of the source from the\r\n * time of the subscription forward.\r\n * @return {Observable} An Observable that emits the results of invoking the selector\r\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\r\n * the underlying stream.\r\n * @method multicast\r\n * @owner Observable\r\n */\r\nexport function multicast(subjectOrSubjectFactory, selector) {\r\n    return function multicastOperatorFunction(source) {\r\n        let subjectFactory;\r\n        if (typeof subjectOrSubjectFactory === 'function') {\r\n            subjectFactory = subjectOrSubjectFactory;\r\n        }\r\n        else {\r\n            subjectFactory = function subjectFactory() {\r\n                return subjectOrSubjectFactory;\r\n            };\r\n        }\r\n        if (typeof selector === 'function') {\r\n            return source.lift(new MulticastOperator(subjectFactory, selector));\r\n        }\r\n        const connectable = Object.create(source, connectableObservableDescriptor);\r\n        connectable.source = source;\r\n        connectable.subjectFactory = subjectFactory;\r\n        return connectable;\r\n    };\r\n}\r\nexport class MulticastOperator {\r\n    constructor(subjectFactory, selector) {\r\n        this.subjectFactory = subjectFactory;\r\n        this.selector = selector;\r\n    }\r\n    call(subscriber, source) {\r\n        const { selector } = this;\r\n        const subject = this.subjectFactory();\r\n        const subscription = selector(subject).subscribe(subscriber);\r\n        subscription.add(source.subscribe(subject));\r\n        return subscription;\r\n    }\r\n}\r\n//# sourceMappingURL=multicast.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/multicast.js\n// module id = ../../../../rxjs/_esm2015/operators/multicast.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\nimport { Notification } from '../Notification';\r\n/**\r\n *\r\n * Re-emits all notifications from source Observable with specified scheduler.\r\n *\r\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\r\n *\r\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\r\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\r\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\r\n *\r\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\r\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\r\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\r\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\r\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\r\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\r\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\r\n * little bit more, to ensure that they are emitted at expected moments.\r\n *\r\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\r\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\r\n * will delay all notifications - including error notifications - while `delay` will pass through error\r\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\r\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\r\n * for notification emissions in general.\r\n *\r\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\r\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\r\n *                                               // with async scheduler by default...\r\n *\r\n * intervals\r\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\r\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\r\n *   someDiv.style.height = val + 'px';\r\n * });\r\n *\r\n * @see {@link delay}\r\n *\r\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\r\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\r\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\r\n * but with provided scheduler.\r\n *\r\n * @method observeOn\r\n * @owner Observable\r\n */\r\nexport function observeOn(scheduler, delay = 0) {\r\n    return function observeOnOperatorFunction(source) {\r\n        return source.lift(new ObserveOnOperator(scheduler, delay));\r\n    };\r\n}\r\nexport class ObserveOnOperator {\r\n    constructor(scheduler, delay = 0) {\r\n        this.scheduler = scheduler;\r\n        this.delay = delay;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nexport class ObserveOnSubscriber extends Subscriber {\r\n    constructor(destination, scheduler, delay = 0) {\r\n        super(destination);\r\n        this.scheduler = scheduler;\r\n        this.delay = delay;\r\n    }\r\n    static dispatch(arg) {\r\n        const { notification, destination } = arg;\r\n        notification.observe(destination);\r\n        this.unsubscribe();\r\n    }\r\n    scheduleMessage(notification) {\r\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\r\n    }\r\n    _next(value) {\r\n        this.scheduleMessage(Notification.createNext(value));\r\n    }\r\n    _error(err) {\r\n        this.scheduleMessage(Notification.createError(err));\r\n    }\r\n    _complete() {\r\n        this.scheduleMessage(Notification.createComplete());\r\n    }\r\n}\r\nexport class ObserveOnMessage {\r\n    constructor(notification, destination) {\r\n        this.notification = notification;\r\n        this.destination = destination;\r\n    }\r\n}\r\n//# sourceMappingURL=observeOn.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/observeOn.js\n// module id = ../../../../rxjs/_esm2015/operators/observeOn.js\n// module chunks = vendor","import { scan } from './scan';\r\nimport { takeLast } from './takeLast';\r\nimport { defaultIfEmpty } from './defaultIfEmpty';\r\nimport { pipe } from '../util/pipe';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * <img src=\"./img/reduce.png\" width=\"100%\">\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\r\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\r\n *   .takeUntil(Rx.Observable.interval(5000));\r\n * var ones = clicksInFiveSeconds.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.reduce((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An Observable that emits a single value that is the\r\n * result of accumulating the values emitted by the source Observable.\r\n * @method reduce\r\n * @owner Observable\r\n */\r\nexport function reduce(accumulator, seed) {\r\n    // providing a seed of `undefined` *should* be valid and trigger\r\n    // hasSeed! so don't use `seed !== undefined` checks!\r\n    // For this reason, we have to check it here at the original call site\r\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\r\n    // means they didn't provide anything or if they literally provided `undefined`\r\n    if (arguments.length >= 2) {\r\n        return function reduceOperatorFunctionWithSeed(source) {\r\n            return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\r\n        };\r\n    }\r\n    return function reduceOperatorFunction(source) {\r\n        return pipe(scan((acc, value, index) => {\r\n            return accumulator(acc, value, index + 1);\r\n        }), takeLast(1))(source);\r\n    };\r\n}\r\n//# sourceMappingURL=reduce.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/reduce.js\n// module id = ../../../../rxjs/_esm2015/operators/reduce.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\nexport function refCount() {\r\n    return function refCountOperatorFunction(source) {\r\n        return source.lift(new RefCountOperator(source));\r\n    };\r\n}\r\nclass RefCountOperator {\r\n    constructor(connectable) {\r\n        this.connectable = connectable;\r\n    }\r\n    call(subscriber, source) {\r\n        const { connectable } = this;\r\n        connectable._refCount++;\r\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\r\n        const subscription = source.subscribe(refCounter);\r\n        if (!refCounter.closed) {\r\n            refCounter.connection = connectable.connect();\r\n        }\r\n        return subscription;\r\n    }\r\n}\r\nclass RefCountSubscriber extends Subscriber {\r\n    constructor(destination, connectable) {\r\n        super(destination);\r\n        this.connectable = connectable;\r\n    }\r\n    _unsubscribe() {\r\n        const { connectable } = this;\r\n        if (!connectable) {\r\n            this.connection = null;\r\n            return;\r\n        }\r\n        this.connectable = null;\r\n        const refCount = connectable._refCount;\r\n        if (refCount <= 0) {\r\n            this.connection = null;\r\n            return;\r\n        }\r\n        connectable._refCount = refCount - 1;\r\n        if (refCount > 1) {\r\n            this.connection = null;\r\n            return;\r\n        }\r\n        ///\r\n        // Compare the local RefCountSubscriber's connection Subscription to the\r\n        // connection Subscription on the shared ConnectableObservable. In cases\r\n        // where the ConnectableObservable source synchronously emits values, and\r\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\r\n        // execution continues to here before the RefCountOperator has a chance to\r\n        // supply the RefCountSubscriber with the shared connection Subscription.\r\n        // For example:\r\n        // ```\r\n        // Observable.range(0, 10)\r\n        //   .publish()\r\n        //   .refCount()\r\n        //   .take(5)\r\n        //   .subscribe();\r\n        // ```\r\n        // In order to account for this case, RefCountSubscriber should only dispose\r\n        // the ConnectableObservable's shared connection Subscription if the\r\n        // connection Subscription exists, *and* either:\r\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\r\n        //      Subscription yet, or,\r\n        //   b. RefCountSubscriber's connection Subscription reference is identical\r\n        //      to the shared connection Subscription\r\n        ///\r\n        const { connection } = this;\r\n        const sharedConnection = connectable._connection;\r\n        this.connection = null;\r\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\r\n            sharedConnection.unsubscribe();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=refCount.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/refCount.js\n// module id = ../../../../rxjs/_esm2015/operators/refCount.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\n/* tslint:enable:max-line-length */\r\n/**\r\n * Applies an accumulator function over the source Observable, and returns each\r\n * intermediate result, with an optional seed value.\r\n *\r\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\r\n * accumulation whenever the source emits a value.</span>\r\n *\r\n * <img src=\"./img/scan.png\" width=\"100%\">\r\n *\r\n * Combines together all values emitted on the source, using an accumulator\r\n * function that knows how to join a new source value into the accumulation from\r\n * the past. Is similar to {@link reduce}, but emits the intermediate\r\n * accumulations.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * @example <caption>Count the number of click events</caption>\r\n * var clicks = Rx.Observable.fromEvent(document, 'click');\r\n * var ones = clicks.mapTo(1);\r\n * var seed = 0;\r\n * var count = ones.scan((acc, one) => acc + one, seed);\r\n * count.subscribe(x => console.log(x));\r\n *\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link reduce}\r\n *\r\n * @param {function(acc: R, value: T, index: number): R} accumulator\r\n * The accumulator function called on each source value.\r\n * @param {T|R} [seed] The initial accumulation value.\r\n * @return {Observable<R>} An observable of the accumulated values.\r\n * @method scan\r\n * @owner Observable\r\n */\r\nexport function scan(accumulator, seed) {\r\n    let hasSeed = false;\r\n    // providing a seed of `undefined` *should* be valid and trigger\r\n    // hasSeed! so don't use `seed !== undefined` checks!\r\n    // For this reason, we have to check it here at the original call site\r\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\r\n    // means they didn't provide anything or if they literally provided `undefined`\r\n    if (arguments.length >= 2) {\r\n        hasSeed = true;\r\n    }\r\n    return function scanOperatorFunction(source) {\r\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\r\n    };\r\n}\r\nclass ScanOperator {\r\n    constructor(accumulator, seed, hasSeed = false) {\r\n        this.accumulator = accumulator;\r\n        this.seed = seed;\r\n        this.hasSeed = hasSeed;\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass ScanSubscriber extends Subscriber {\r\n    constructor(destination, accumulator, _seed, hasSeed) {\r\n        super(destination);\r\n        this.accumulator = accumulator;\r\n        this._seed = _seed;\r\n        this.hasSeed = hasSeed;\r\n        this.index = 0;\r\n    }\r\n    get seed() {\r\n        return this._seed;\r\n    }\r\n    set seed(value) {\r\n        this.hasSeed = true;\r\n        this._seed = value;\r\n    }\r\n    _next(value) {\r\n        if (!this.hasSeed) {\r\n            this.seed = value;\r\n            this.destination.next(value);\r\n        }\r\n        else {\r\n            return this._tryNext(value);\r\n        }\r\n    }\r\n    _tryNext(value) {\r\n        const index = this.index++;\r\n        let result;\r\n        try {\r\n            result = this.accumulator(this.seed, value, index);\r\n        }\r\n        catch (err) {\r\n            this.destination.error(err);\r\n        }\r\n        this.seed = result;\r\n        this.destination.next(result);\r\n    }\r\n}\r\n//# sourceMappingURL=scan.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/scan.js\n// module id = ../../../../rxjs/_esm2015/operators/scan.js\n// module chunks = vendor","import { multicast } from './multicast';\r\nimport { refCount } from './refCount';\r\nimport { Subject } from '../Subject';\r\nfunction shareSubjectFactory() {\r\n    return new Subject();\r\n}\r\n/**\r\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\r\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\r\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\r\n * This is an alias for .multicast(() => new Subject()).refCount().\r\n *\r\n * <img src=\"./img/share.png\" width=\"100%\">\r\n *\r\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\r\n * @method share\r\n * @owner Observable\r\n */\r\nexport function share() {\r\n    return (source) => refCount()(multicast(shareSubjectFactory)(source));\r\n}\r\n;\r\n//# sourceMappingURL=share.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/share.js\n// module id = ../../../../rxjs/_esm2015/operators/share.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\r\nimport { EmptyObservable } from '../observable/EmptyObservable';\r\n/**\r\n * Emits only the last `count` values emitted by the source Observable.\r\n *\r\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\r\n * only when the source completes.</span>\r\n *\r\n * <img src=\"./img/takeLast.png\" width=\"100%\">\r\n *\r\n * `takeLast` returns an Observable that emits at most the last `count` values\r\n * emitted by the source Observable. If the source emits fewer than `count`\r\n * values then all of its values are emitted. This operator must wait until the\r\n * `complete` notification emission from the source in order to emit the `next`\r\n * values on the output Observable, because otherwise it is impossible to know\r\n * whether or not more values will be emitted on the source. For this reason,\r\n * all values are emitted synchronously, followed by the complete notification.\r\n *\r\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\r\n * var many = Rx.Observable.range(1, 100);\r\n * var lastThree = many.takeLast(3);\r\n * lastThree.subscribe(x => console.log(x));\r\n *\r\n * @see {@link take}\r\n * @see {@link takeUntil}\r\n * @see {@link takeWhile}\r\n * @see {@link skip}\r\n *\r\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\r\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\r\n *\r\n * @param {number} count The maximum number of values to emit from the end of\r\n * the sequence of values emitted by the source Observable.\r\n * @return {Observable<T>} An Observable that emits at most the last count\r\n * values emitted by the source Observable.\r\n * @method takeLast\r\n * @owner Observable\r\n */\r\nexport function takeLast(count) {\r\n    return function takeLastOperatorFunction(source) {\r\n        if (count === 0) {\r\n            return new EmptyObservable();\r\n        }\r\n        else {\r\n            return source.lift(new TakeLastOperator(count));\r\n        }\r\n    };\r\n}\r\nclass TakeLastOperator {\r\n    constructor(total) {\r\n        this.total = total;\r\n        if (this.total < 0) {\r\n            throw new ArgumentOutOfRangeError;\r\n        }\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\r\n    }\r\n}\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @ignore\r\n * @extends {Ignored}\r\n */\r\nclass TakeLastSubscriber extends Subscriber {\r\n    constructor(destination, total) {\r\n        super(destination);\r\n        this.total = total;\r\n        this.ring = new Array();\r\n        this.count = 0;\r\n    }\r\n    _next(value) {\r\n        const ring = this.ring;\r\n        const total = this.total;\r\n        const count = this.count++;\r\n        if (ring.length < total) {\r\n            ring.push(value);\r\n        }\r\n        else {\r\n            const index = count % total;\r\n            ring[index] = value;\r\n        }\r\n    }\r\n    _complete() {\r\n        const destination = this.destination;\r\n        let count = this.count;\r\n        if (count > 0) {\r\n            const total = this.count >= this.total ? this.total : this.count;\r\n            const ring = this.ring;\r\n            for (let i = 0; i < total; i++) {\r\n                const idx = (count++) % total;\r\n                destination.next(ring[idx]);\r\n            }\r\n        }\r\n        destination.complete();\r\n    }\r\n}\r\n//# sourceMappingURL=takeLast.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/operators/takeLast.js\n// module id = ../../../../rxjs/_esm2015/operators/takeLast.js\n// module chunks = vendor","import { root } from '../util/root';\r\nexport function symbolIteratorPonyfill(root) {\r\n    const Symbol = root.Symbol;\r\n    if (typeof Symbol === 'function') {\r\n        if (!Symbol.iterator) {\r\n            Symbol.iterator = Symbol('iterator polyfill');\r\n        }\r\n        return Symbol.iterator;\r\n    }\r\n    else {\r\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\r\n        const { Set } = root;\r\n        if (Set && typeof new Set()['@@iterator'] === 'function') {\r\n            return '@@iterator';\r\n        }\r\n        const { Map } = root;\r\n        // required for compatability with es6-shim\r\n        if (Map) {\r\n            let keys = Object.getOwnPropertyNames(Map.prototype);\r\n            for (let i = 0; i < keys.length; ++i) {\r\n                let key = keys[i];\r\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\r\n                if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\r\n                    return key;\r\n                }\r\n            }\r\n        }\r\n        return '@@iterator';\r\n    }\r\n}\r\nexport const iterator = symbolIteratorPonyfill(root);\r\n/**\r\n * @deprecated use iterator instead\r\n */\r\nexport const $$iterator = iterator;\r\n//# sourceMappingURL=iterator.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/symbol/iterator.js\n// module id = ../../../../rxjs/_esm2015/symbol/iterator.js\n// module chunks = vendor","import { root } from '../util/root';\r\nexport function getSymbolObservable(context) {\r\n    let $$observable;\r\n    let Symbol = context.Symbol;\r\n    if (typeof Symbol === 'function') {\r\n        if (Symbol.observable) {\r\n            $$observable = Symbol.observable;\r\n        }\r\n        else {\r\n            $$observable = Symbol('observable');\r\n            Symbol.observable = $$observable;\r\n        }\r\n    }\r\n    else {\r\n        $$observable = '@@observable';\r\n    }\r\n    return $$observable;\r\n}\r\nexport const observable = getSymbolObservable(root);\r\n/**\r\n * @deprecated use observable instead\r\n */\r\nexport const $$observable = observable;\r\n//# sourceMappingURL=observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/symbol/observable.js\n// module id = ../../../../rxjs/_esm2015/symbol/observable.js\n// module chunks = vendor","import { root } from '../util/root';\r\nconst Symbol = root.Symbol;\r\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\r\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\r\n/**\r\n * @deprecated use rxSubscriber instead\r\n */\r\nexport const $$rxSubscriber = rxSubscriber;\r\n//# sourceMappingURL=rxSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/symbol/rxSubscriber.js\n// module id = ../../../../rxjs/_esm2015/symbol/rxSubscriber.js\n// module chunks = vendor","/**\r\n * An error thrown when an element was queried at a certain index of an\r\n * Observable, but no such index or position exists in that sequence.\r\n *\r\n * @see {@link elementAt}\r\n * @see {@link take}\r\n * @see {@link takeLast}\r\n *\r\n * @class ArgumentOutOfRangeError\r\n */\r\nexport class ArgumentOutOfRangeError extends Error {\r\n    constructor() {\r\n        const err = super('argument out of range');\r\n        this.name = err.name = 'ArgumentOutOfRangeError';\r\n        this.stack = err.stack;\r\n        this.message = err.message;\r\n    }\r\n}\r\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/ArgumentOutOfRangeError.js\n// module id = ../../../../rxjs/_esm2015/util/ArgumentOutOfRangeError.js\n// module chunks = vendor","/**\r\n * An error thrown when an Observable or a sequence was queried but has no\r\n * elements.\r\n *\r\n * @see {@link first}\r\n * @see {@link last}\r\n * @see {@link single}\r\n *\r\n * @class EmptyError\r\n */\r\nexport class EmptyError extends Error {\r\n    constructor() {\r\n        const err = super('no elements in sequence');\r\n        this.name = err.name = 'EmptyError';\r\n        this.stack = err.stack;\r\n        this.message = err.message;\r\n    }\r\n}\r\n//# sourceMappingURL=EmptyError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/EmptyError.js\n// module id = ../../../../rxjs/_esm2015/util/EmptyError.js\n// module chunks = vendor","/**\r\n * An error thrown when an action is invalid because the object has been\r\n * unsubscribed.\r\n *\r\n * @see {@link Subject}\r\n * @see {@link BehaviorSubject}\r\n *\r\n * @class ObjectUnsubscribedError\r\n */\r\nexport class ObjectUnsubscribedError extends Error {\r\n    constructor() {\r\n        const err = super('object unsubscribed');\r\n        this.name = err.name = 'ObjectUnsubscribedError';\r\n        this.stack = err.stack;\r\n        this.message = err.message;\r\n    }\r\n}\r\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/ObjectUnsubscribedError.js\n// module id = ../../../../rxjs/_esm2015/util/ObjectUnsubscribedError.js\n// module chunks = vendor","/**\r\n * An error thrown when one or more errors have occurred during the\r\n * `unsubscribe` of a {@link Subscription}.\r\n */\r\nexport class UnsubscriptionError extends Error {\r\n    constructor(errors) {\r\n        super();\r\n        this.errors = errors;\r\n        const err = Error.call(this, errors ?\r\n            `${errors.length} errors occurred during unsubscription:\r\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\r\n        this.name = err.name = 'UnsubscriptionError';\r\n        this.stack = err.stack;\r\n        this.message = err.message;\r\n    }\r\n}\r\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/UnsubscriptionError.js\n// module id = ../../../../rxjs/_esm2015/util/UnsubscriptionError.js\n// module chunks = vendor","// typeof any so that it we don't have to cast when comparing a result to the error object\r\nexport const errorObject = { e: {} };\r\n//# sourceMappingURL=errorObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/errorObject.js\n// module id = ../../../../rxjs/_esm2015/util/errorObject.js\n// module chunks = vendor","export function identity(x) {\r\n    return x;\r\n}\r\n//# sourceMappingURL=identity.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/identity.js\n// module id = ../../../../rxjs/_esm2015/util/identity.js\n// module chunks = vendor","export const isArray = Array.isArray || ((x) => x && typeof x.length === 'number');\r\n//# sourceMappingURL=isArray.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isArray.js\n// module id = ../../../../rxjs/_esm2015/util/isArray.js\n// module chunks = vendor","export const isArrayLike = ((x) => x && typeof x.length === 'number');\r\n//# sourceMappingURL=isArrayLike.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isArrayLike.js\n// module id = ../../../../rxjs/_esm2015/util/isArrayLike.js\n// module chunks = vendor","export function isFunction(x) {\r\n    return typeof x === 'function';\r\n}\r\n//# sourceMappingURL=isFunction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isFunction.js\n// module id = ../../../../rxjs/_esm2015/util/isFunction.js\n// module chunks = vendor","export function isObject(x) {\r\n    return x != null && typeof x === 'object';\r\n}\r\n//# sourceMappingURL=isObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isObject.js\n// module id = ../../../../rxjs/_esm2015/util/isObject.js\n// module chunks = vendor","export function isPromise(value) {\r\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\r\n}\r\n//# sourceMappingURL=isPromise.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isPromise.js\n// module id = ../../../../rxjs/_esm2015/util/isPromise.js\n// module chunks = vendor","export function isScheduler(value) {\r\n    return value && typeof value.schedule === 'function';\r\n}\r\n//# sourceMappingURL=isScheduler.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/isScheduler.js\n// module id = ../../../../rxjs/_esm2015/util/isScheduler.js\n// module chunks = vendor","/* tslint:disable:no-empty */\r\nexport function noop() { }\r\n//# sourceMappingURL=noop.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/noop.js\n// module id = ../../../../rxjs/_esm2015/util/noop.js\n// module chunks = vendor","import { noop } from './noop';\r\n/* tslint:enable:max-line-length */\r\nexport function pipe(...fns) {\r\n    return pipeFromArray(fns);\r\n}\r\n/* @internal */\r\nexport function pipeFromArray(fns) {\r\n    if (!fns) {\r\n        return noop;\r\n    }\r\n    if (fns.length === 1) {\r\n        return fns[0];\r\n    }\r\n    return function piped(input) {\r\n        return fns.reduce((prev, fn) => fn(prev), input);\r\n    };\r\n}\r\n//# sourceMappingURL=pipe.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/pipe.js\n// module id = ../../../../rxjs/_esm2015/util/pipe.js\n// module chunks = vendor","// CommonJS / Node have global context exposed as \"global\" variable.\r\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\r\n// the global \"global\" var for now.\r\nconst __window = typeof window !== 'undefined' && window;\r\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\r\n    self instanceof WorkerGlobalScope && self;\r\nconst __global = typeof global !== 'undefined' && global;\r\nconst _root = __window || __global || __self;\r\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\r\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\r\n// Wrap in IIFE\r\n(function () {\r\n    if (!_root) {\r\n        throw new Error('RxJS could not find any global context (window, self, global)');\r\n    }\r\n})();\r\nexport { _root as root };\r\n//# sourceMappingURL=root.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/root.js\n// module id = ../../../../rxjs/_esm2015/util/root.js\n// module chunks = vendor","import { root } from './root';\r\nimport { isArrayLike } from './isArrayLike';\r\nimport { isPromise } from './isPromise';\r\nimport { isObject } from './isObject';\r\nimport { Observable } from '../Observable';\r\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\r\nimport { InnerSubscriber } from '../InnerSubscriber';\r\nimport { observable as Symbol_observable } from '../symbol/observable';\r\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\r\n    let destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\r\n    if (destination.closed) {\r\n        return null;\r\n    }\r\n    if (result instanceof Observable) {\r\n        if (result._isScalar) {\r\n            destination.next(result.value);\r\n            destination.complete();\r\n            return null;\r\n        }\r\n        else {\r\n            destination.syncErrorThrowable = true;\r\n            return result.subscribe(destination);\r\n        }\r\n    }\r\n    else if (isArrayLike(result)) {\r\n        for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\r\n            destination.next(result[i]);\r\n        }\r\n        if (!destination.closed) {\r\n            destination.complete();\r\n        }\r\n    }\r\n    else if (isPromise(result)) {\r\n        result.then((value) => {\r\n            if (!destination.closed) {\r\n                destination.next(value);\r\n                destination.complete();\r\n            }\r\n        }, (err) => destination.error(err))\r\n            .then(null, (err) => {\r\n            // Escaping the Promise trap: globally throw unhandled errors\r\n            root.setTimeout(() => { throw err; });\r\n        });\r\n        return destination;\r\n    }\r\n    else if (result && typeof result[Symbol_iterator] === 'function') {\r\n        const iterator = result[Symbol_iterator]();\r\n        do {\r\n            let item = iterator.next();\r\n            if (item.done) {\r\n                destination.complete();\r\n                break;\r\n            }\r\n            destination.next(item.value);\r\n            if (destination.closed) {\r\n                break;\r\n            }\r\n        } while (true);\r\n    }\r\n    else if (result && typeof result[Symbol_observable] === 'function') {\r\n        const obs = result[Symbol_observable]();\r\n        if (typeof obs.subscribe !== 'function') {\r\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\r\n        }\r\n        else {\r\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\r\n        }\r\n    }\r\n    else {\r\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\r\n        const msg = `You provided ${value} where a stream was expected.`\r\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\r\n        destination.error(new TypeError(msg));\r\n    }\r\n    return null;\r\n}\r\n//# sourceMappingURL=subscribeToResult.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/subscribeToResult.js\n// module id = ../../../../rxjs/_esm2015/util/subscribeToResult.js\n// module chunks = vendor","import { Subscriber } from '../Subscriber';\r\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\r\nimport { empty as emptyObserver } from '../Observer';\r\nexport function toSubscriber(nextOrObserver, error, complete) {\r\n    if (nextOrObserver) {\r\n        if (nextOrObserver instanceof Subscriber) {\r\n            return nextOrObserver;\r\n        }\r\n        if (nextOrObserver[rxSubscriberSymbol]) {\r\n            return nextOrObserver[rxSubscriberSymbol]();\r\n        }\r\n    }\r\n    if (!nextOrObserver && !error && !complete) {\r\n        return new Subscriber(emptyObserver);\r\n    }\r\n    return new Subscriber(nextOrObserver, error, complete);\r\n}\r\n//# sourceMappingURL=toSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/toSubscriber.js\n// module id = ../../../../rxjs/_esm2015/util/toSubscriber.js\n// module chunks = vendor","import { errorObject } from './errorObject';\r\nlet tryCatchTarget;\r\nfunction tryCatcher() {\r\n    try {\r\n        return tryCatchTarget.apply(this, arguments);\r\n    }\r\n    catch (e) {\r\n        errorObject.e = e;\r\n        return errorObject;\r\n    }\r\n}\r\nexport function tryCatch(fn) {\r\n    tryCatchTarget = fn;\r\n    return tryCatcher;\r\n}\r\n;\r\n//# sourceMappingURL=tryCatch.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/rxjs/_esm2015/util/tryCatch.js\n// module id = ../../../../rxjs/_esm2015/util/tryCatch.js\n// module chunks = vendor","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = ../../../../webpack/buildin/global.js\n// module chunks = polyfills vendor","/**\r\n * @license Angular v5.1.3\r\n * (c) 2010-2017 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\nimport { Attribute, ChangeDetectorRef, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Host, Inject, Injectable, InjectionToken, Input, IterableDiffers, KeyValueDiffers, LOCALE_ID, NgModule, NgModuleRef, Optional, Pipe, Renderer2, TemplateRef, Version, ViewContainerRef, WrappedValue, isDevMode, ɵisListLikeIterable, ɵisObservable, ɵisPromise, ɵstringify } from '@angular/core';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * This class should not be used directly by an application developer. Instead, use\r\n * {\\@link Location}.\r\n *\r\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\r\n * agnostic.\r\n * This means that we can have different implementation of `PlatformLocation` for the different\r\n * platforms that angular supports. For example, `\\@angular/platform-browser` provides an\r\n * implementation specific to the browser environment, while `\\@angular/platform-webworker` provides\r\n * one suitable for use with web workers.\r\n *\r\n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\r\n * when they need to interact with the DOM apis like pushState, popState, etc...\r\n *\r\n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\r\n * by the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\r\n * Router} /\r\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\r\n * class they are all platform independent.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass PlatformLocation {\r\n}\r\n/**\r\n * \\@whatItDoes indicates when a location is initialized\r\n * \\@experimental\r\n */\r\nconst LOCATION_INITIALIZED = new InjectionToken('Location Initialized');\r\n/**\r\n * A serializable version of the event from onPopState or onHashChange\r\n *\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `LocationStrategy` is responsible for representing and reading route state\r\n * from the browser's URL. Angular provides two strategies:\r\n * {\\@link HashLocationStrategy} and {\\@link PathLocationStrategy}.\r\n *\r\n * This is used under the hood of the {\\@link Location} service.\r\n *\r\n * Applications should use the {\\@link Router} or {\\@link Location} services to\r\n * interact with application route state.\r\n *\r\n * For instance, {\\@link HashLocationStrategy} produces URLs like\r\n * `http://example.com#/foo`, and {\\@link PathLocationStrategy} produces\r\n * `http://example.com/foo` as an equivalent URL.\r\n *\r\n * See these two classes for more.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass LocationStrategy {\r\n}\r\n/**\r\n * The `APP_BASE_HREF` token represents the base href to be used with the\r\n * {\\@link PathLocationStrategy}.\r\n *\r\n * If you're using {\\@link PathLocationStrategy}, you must provide a provider to a string\r\n * representing the URL prefix that should be preserved when generating and recognizing\r\n * URLs.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import {Component, NgModule} from '\\@angular/core';\r\n * import {APP_BASE_HREF} from '\\@angular/common';\r\n *\r\n * \\@NgModule({\r\n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\r\n * })\r\n * class AppModule {}\r\n * ```\r\n *\r\n * \\@stable\r\n */\r\nconst APP_BASE_HREF = new InjectionToken('appBaseHref');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.\r\n * \\@description\r\n * Depending on which {\\@link LocationStrategy} is used, `Location` will either persist\r\n * to the URL's path or the URL's hash segment.\r\n *\r\n * Note: it's better to use {\\@link Router#navigate} service to trigger route changes. Use\r\n * `Location` only if you need to interact with or create normalized URLs outside of\r\n * routing.\r\n *\r\n * `Location` is responsible for normalizing the URL against the application's base href.\r\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\r\n * trailing slash:\r\n * - `/my/app/user/123` is normalized\r\n * - `my/app/user/123` **is not** normalized\r\n * - `/my/app/user/123/` **is not** normalized\r\n *\r\n * ### Example\r\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\r\n * \\@stable\r\n */\r\nclass Location {\r\n    /**\r\n     * @param {?} platformStrategy\r\n     */\r\n    constructor(platformStrategy) {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._subject = new EventEmitter();\r\n        this._platformStrategy = platformStrategy;\r\n        const /** @type {?} */ browserBaseHref = this._platformStrategy.getBaseHref();\r\n        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\r\n        this._platformStrategy.onPopState((ev) => {\r\n            this._subject.emit({\r\n                'url': this.path(true),\r\n                'pop': true,\r\n                'type': ev.type,\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Returns the normalized URL path.\r\n     * @param {?=} includeHash\r\n     * @return {?}\r\n     */\r\n    path(includeHash = false) {\r\n        return this.normalize(this._platformStrategy.path(includeHash));\r\n    }\r\n    /**\r\n     * Normalizes the given path and compares to the current normalized path.\r\n     * @param {?} path\r\n     * @param {?=} query\r\n     * @return {?}\r\n     */\r\n    isCurrentPathEqualTo(path, query = '') {\r\n        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\r\n    }\r\n    /**\r\n     * Given a string representing a URL, returns the normalized URL path without leading or\r\n     * trailing slashes.\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    normalize(url) {\r\n        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\r\n    }\r\n    /**\r\n     * Given a string representing a URL, returns the platform-specific external URL path.\r\n     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\r\n     * before normalizing. This method will also add a hash if `HashLocationStrategy` is\r\n     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    prepareExternalUrl(url) {\r\n        if (url && url[0] !== '/') {\r\n            url = '/' + url;\r\n        }\r\n        return this._platformStrategy.prepareExternalUrl(url);\r\n    }\r\n    /**\r\n     * Changes the browsers URL to the normalized version of the given URL, and pushes a\r\n     * new item onto the platform's history.\r\n     * @param {?} path\r\n     * @param {?=} query\r\n     * @return {?}\r\n     */\r\n    go(path, query = '') {\r\n        this._platformStrategy.pushState(null, '', path, query);\r\n    }\r\n    /**\r\n     * Changes the browsers URL to the normalized version of the given URL, and replaces\r\n     * the top item on the platform's history stack.\r\n     * @param {?} path\r\n     * @param {?=} query\r\n     * @return {?}\r\n     */\r\n    replaceState(path, query = '') {\r\n        this._platformStrategy.replaceState(null, '', path, query);\r\n    }\r\n    /**\r\n     * Navigates forward in the platform's history.\r\n     * @return {?}\r\n     */\r\n    forward() { this._platformStrategy.forward(); }\r\n    /**\r\n     * Navigates back in the platform's history.\r\n     * @return {?}\r\n     */\r\n    back() { this._platformStrategy.back(); }\r\n    /**\r\n     * Subscribe to the platform's `popState` events.\r\n     * @param {?} onNext\r\n     * @param {?=} onThrow\r\n     * @param {?=} onReturn\r\n     * @return {?}\r\n     */\r\n    subscribe(onNext, onThrow, onReturn) {\r\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\r\n    }\r\n    /**\r\n     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\r\n     * is.\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    static normalizeQueryParams(params) {\r\n        return params && params[0] !== '?' ? '?' + params : params;\r\n    }\r\n    /**\r\n     * Given 2 parts of a url, join them with a slash if needed.\r\n     * @param {?} start\r\n     * @param {?} end\r\n     * @return {?}\r\n     */\r\n    static joinWithSlash(start, end) {\r\n        if (start.length == 0) {\r\n            return end;\r\n        }\r\n        if (end.length == 0) {\r\n            return start;\r\n        }\r\n        let /** @type {?} */ slashes = 0;\r\n        if (start.endsWith('/')) {\r\n            slashes++;\r\n        }\r\n        if (end.startsWith('/')) {\r\n            slashes++;\r\n        }\r\n        if (slashes == 2) {\r\n            return start + end.substring(1);\r\n        }\r\n        if (slashes == 1) {\r\n            return start + end;\r\n        }\r\n        return start + '/' + end;\r\n    }\r\n    /**\r\n     * If url has a trailing slash, remove it, otherwise return url as is. This\r\n     * method looks for the first occurence of either #, ?, or the end of the\r\n     * line as `/` characters after any of these should not be replaced.\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    static stripTrailingSlash(url) {\r\n        const /** @type {?} */ match = url.match(/#|\\?|$/);\r\n        const /** @type {?} */ pathEndIdx = match && match.index || url.length;\r\n        const /** @type {?} */ droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);\r\n        return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);\r\n    }\r\n}\r\nLocation.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nLocation.ctorParameters = () => [\r\n    { type: LocationStrategy, },\r\n];\r\n/**\r\n * @param {?} baseHref\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction _stripBaseHref(baseHref, url) {\r\n    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\r\n}\r\n/**\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction _stripIndexHtml(url) {\r\n    return url.replace(/\\/index.html$/, '');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Use URL hash for storing application location data.\r\n * \\@description\r\n * `HashLocationStrategy` is a {\\@link LocationStrategy} used to configure the\r\n * {\\@link Location} service to represent its state in the\r\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\r\n * of the browser's URL.\r\n *\r\n * For instance, if you call `location.go('/foo')`, the browser's URL will become\r\n * `example.com#/foo`.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example common/location/ts/hash_location_component.ts region='LocationComponent'}\r\n *\r\n * \\@stable\r\n */\r\nclass HashLocationStrategy extends LocationStrategy {\r\n    /**\r\n     * @param {?} _platformLocation\r\n     * @param {?=} _baseHref\r\n     */\r\n    constructor(_platformLocation, _baseHref) {\r\n        super();\r\n        this._platformLocation = _platformLocation;\r\n        this._baseHref = '';\r\n        if (_baseHref != null) {\r\n            this._baseHref = _baseHref;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    onPopState(fn) {\r\n        this._platformLocation.onPopState(fn);\r\n        this._platformLocation.onHashChange(fn);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getBaseHref() { return this._baseHref; }\r\n    /**\r\n     * @param {?=} includeHash\r\n     * @return {?}\r\n     */\r\n    path(includeHash = false) {\r\n        // the hash value is always prefixed with a `#`\r\n        // and if it is empty then it will stay empty\r\n        let /** @type {?} */ path = this._platformLocation.hash;\r\n        if (path == null)\r\n            path = '#';\r\n        return path.length > 0 ? path.substring(1) : path;\r\n    }\r\n    /**\r\n     * @param {?} internal\r\n     * @return {?}\r\n     */\r\n    prepareExternalUrl(internal) {\r\n        const /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);\r\n        return url.length > 0 ? ('#' + url) : url;\r\n    }\r\n    /**\r\n     * @param {?} state\r\n     * @param {?} title\r\n     * @param {?} path\r\n     * @param {?} queryParams\r\n     * @return {?}\r\n     */\r\n    pushState(state, title, path, queryParams) {\r\n        let /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\r\n        if (url.length == 0) {\r\n            url = this._platformLocation.pathname;\r\n        }\r\n        this._platformLocation.pushState(state, title, url);\r\n    }\r\n    /**\r\n     * @param {?} state\r\n     * @param {?} title\r\n     * @param {?} path\r\n     * @param {?} queryParams\r\n     * @return {?}\r\n     */\r\n    replaceState(state, title, path, queryParams) {\r\n        let /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\r\n        if (url.length == 0) {\r\n            url = this._platformLocation.pathname;\r\n        }\r\n        this._platformLocation.replaceState(state, title, url);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    forward() { this._platformLocation.forward(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    back() { this._platformLocation.back(); }\r\n}\r\nHashLocationStrategy.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nHashLocationStrategy.ctorParameters = () => [\r\n    { type: PlatformLocation, },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Use URL for storing application location data.\r\n * \\@description\r\n * `PathLocationStrategy` is a {\\@link LocationStrategy} used to configure the\r\n * {\\@link Location} service to represent its state in the\r\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\r\n * browser's URL.\r\n *\r\n * If you're using `PathLocationStrategy`, you must provide a {\\@link APP_BASE_HREF}\r\n * or add a base element to the document. This URL prefix that will be preserved\r\n * when generating and recognizing URLs.\r\n *\r\n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\r\n * `location.go('/foo')`, the browser's URL will become\r\n * `example.com/my/app/foo`.\r\n *\r\n * Similarly, if you add `<base href='/my/app'/>` to the document and call\r\n * `location.go('/foo')`, the browser's URL will become\r\n * `example.com/my/app/foo`.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\r\n *\r\n * \\@stable\r\n */\r\nclass PathLocationStrategy extends LocationStrategy {\r\n    /**\r\n     * @param {?} _platformLocation\r\n     * @param {?=} href\r\n     */\r\n    constructor(_platformLocation, href) {\r\n        super();\r\n        this._platformLocation = _platformLocation;\r\n        if (href == null) {\r\n            href = this._platformLocation.getBaseHrefFromDOM();\r\n        }\r\n        if (href == null) {\r\n            throw new Error(`No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\r\n        }\r\n        this._baseHref = href;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    onPopState(fn) {\r\n        this._platformLocation.onPopState(fn);\r\n        this._platformLocation.onHashChange(fn);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getBaseHref() { return this._baseHref; }\r\n    /**\r\n     * @param {?} internal\r\n     * @return {?}\r\n     */\r\n    prepareExternalUrl(internal) {\r\n        return Location.joinWithSlash(this._baseHref, internal);\r\n    }\r\n    /**\r\n     * @param {?=} includeHash\r\n     * @return {?}\r\n     */\r\n    path(includeHash = false) {\r\n        const /** @type {?} */ pathname = this._platformLocation.pathname +\r\n            Location.normalizeQueryParams(this._platformLocation.search);\r\n        const /** @type {?} */ hash = this._platformLocation.hash;\r\n        return hash && includeHash ? `${pathname}${hash}` : pathname;\r\n    }\r\n    /**\r\n     * @param {?} state\r\n     * @param {?} title\r\n     * @param {?} url\r\n     * @param {?} queryParams\r\n     * @return {?}\r\n     */\r\n    pushState(state, title, url, queryParams) {\r\n        const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\r\n        this._platformLocation.pushState(state, title, externalUrl);\r\n    }\r\n    /**\r\n     * @param {?} state\r\n     * @param {?} title\r\n     * @param {?} url\r\n     * @param {?} queryParams\r\n     * @return {?}\r\n     */\r\n    replaceState(state, title, url, queryParams) {\r\n        const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\r\n        this._platformLocation.replaceState(state, title, externalUrl);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    forward() { this._platformLocation.forward(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    back() { this._platformLocation.back(); }\r\n}\r\nPathLocationStrategy.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nPathLocationStrategy.ctorParameters = () => [\r\n    { type: PlatformLocation, },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// THIS CODE IS GENERATED - DO NOT MODIFY\r\n// See angular/tools/gulp-tasks/cldr/extract.js\r\n/**\r\n * \\@experimental\r\n */\r\nconst CURRENCIES = {\r\n    'AOA': [, 'Kz'],\r\n    'ARS': [, '$'],\r\n    'AUD': ['A$', '$'],\r\n    'BAM': [, 'KM'],\r\n    'BBD': [, '$'],\r\n    'BDT': [, '৳'],\r\n    'BMD': [, '$'],\r\n    'BND': [, '$'],\r\n    'BOB': [, 'Bs'],\r\n    'BRL': ['R$'],\r\n    'BSD': [, '$'],\r\n    'BWP': [, 'P'],\r\n    'BYN': [, 'р.'],\r\n    'BZD': [, '$'],\r\n    'CAD': ['CA$', '$'],\r\n    'CLP': [, '$'],\r\n    'CNY': ['CN¥', '¥'],\r\n    'COP': [, '$'],\r\n    'CRC': [, '₡'],\r\n    'CUC': [, '$'],\r\n    'CUP': [, '$'],\r\n    'CZK': [, 'Kč'],\r\n    'DKK': [, 'kr'],\r\n    'DOP': [, '$'],\r\n    'EGP': [, 'E£'],\r\n    'ESP': [, '₧'],\r\n    'EUR': ['€'],\r\n    'FJD': [, '$'],\r\n    'FKP': [, '£'],\r\n    'GBP': ['£'],\r\n    'GEL': [, '₾'],\r\n    'GIP': [, '£'],\r\n    'GNF': [, 'FG'],\r\n    'GTQ': [, 'Q'],\r\n    'GYD': [, '$'],\r\n    'HKD': ['HK$', '$'],\r\n    'HNL': [, 'L'],\r\n    'HRK': [, 'kn'],\r\n    'HUF': [, 'Ft'],\r\n    'IDR': [, 'Rp'],\r\n    'ILS': ['₪'],\r\n    'INR': ['₹'],\r\n    'ISK': [, 'kr'],\r\n    'JMD': [, '$'],\r\n    'JPY': ['¥'],\r\n    'KHR': [, '៛'],\r\n    'KMF': [, 'CF'],\r\n    'KPW': [, '₩'],\r\n    'KRW': ['₩'],\r\n    'KYD': [, '$'],\r\n    'KZT': [, '₸'],\r\n    'LAK': [, '₭'],\r\n    'LBP': [, 'L£'],\r\n    'LKR': [, 'Rs'],\r\n    'LRD': [, '$'],\r\n    'LTL': [, 'Lt'],\r\n    'LVL': [, 'Ls'],\r\n    'MGA': [, 'Ar'],\r\n    'MMK': [, 'K'],\r\n    'MNT': [, '₮'],\r\n    'MUR': [, 'Rs'],\r\n    'MXN': ['MX$', '$'],\r\n    'MYR': [, 'RM'],\r\n    'NAD': [, '$'],\r\n    'NGN': [, '₦'],\r\n    'NIO': [, 'C$'],\r\n    'NOK': [, 'kr'],\r\n    'NPR': [, 'Rs'],\r\n    'NZD': ['NZ$', '$'],\r\n    'PHP': [, '₱'],\r\n    'PKR': [, 'Rs'],\r\n    'PLN': [, 'zł'],\r\n    'PYG': [, '₲'],\r\n    'RON': [, 'lei'],\r\n    'RUB': [, '₽'],\r\n    'RUR': [, 'р.'],\r\n    'RWF': [, 'RF'],\r\n    'SBD': [, '$'],\r\n    'SEK': [, 'kr'],\r\n    'SGD': [, '$'],\r\n    'SHP': [, '£'],\r\n    'SRD': [, '$'],\r\n    'SSP': [, '£'],\r\n    'STD': [, 'Db'],\r\n    'SYP': [, '£'],\r\n    'THB': [, '฿'],\r\n    'TOP': [, 'T$'],\r\n    'TRY': [, '₺'],\r\n    'TTD': [, '$'],\r\n    'TWD': ['NT$', '$'],\r\n    'UAH': [, '₴'],\r\n    'USD': ['$'],\r\n    'UYU': [, '$'],\r\n    'VEF': [, 'Bs'],\r\n    'VND': ['₫'],\r\n    'XAF': ['FCFA'],\r\n    'XCD': ['EC$', '$'],\r\n    'XOF': ['CFA'],\r\n    'XPF': ['CFPF'],\r\n    'ZAR': [, 'R'],\r\n    'ZMW': [, 'ZK'],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// THIS CODE IS GENERATED - DO NOT MODIFY\r\n// See angular/tools/gulp-tasks/cldr/extract.js\r\nvar localeEn = [\r\n    'en',\r\n    [\r\n        ['a', 'p'],\r\n        ['AM', 'PM'],\r\n    ],\r\n    [\r\n        ['AM', 'PM'],\r\n        ,\r\n    ],\r\n    [\r\n        ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n        ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\r\n    ],\r\n    ,\r\n    [\r\n        ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\r\n        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n        [\r\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n            'October', 'November', 'December'\r\n        ]\r\n    ],\r\n    ,\r\n    [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\r\n    ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\r\n    ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],\r\n    [\r\n        '{1}, {0}',\r\n        ,\r\n        '{1} \\'at\\' {0}',\r\n    ],\r\n    ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\r\n    ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'], '$', 'US Dollar',\r\n    function (n) {\r\n        let /** @type {?} */ i = Math.floor(Math.abs(n)), /** @type {?} */ v = n.toString().replace(/^[^.]*\\.?/, '').length;\r\n        if (i === 1 && v === 0)\r\n            return 1;\r\n        return 5;\r\n    }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@experimental i18n support is experimental.\r\n */\r\nconst LOCALE_DATA = {};\r\n/**\r\n * Register global data to be used internally by Angular. See the\r\n * {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale data.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} data\r\n * @param {?=} localeId\r\n * @param {?=} extraData\r\n * @return {?}\r\n */\r\nfunction registerLocaleData(data, localeId, extraData) {\r\n    if (typeof localeId !== 'string') {\r\n        extraData = localeId;\r\n        localeId = data[0 /* LocaleId */];\r\n    }\r\n    localeId = localeId.toLowerCase().replace(/_/g, '-');\r\n    LOCALE_DATA[localeId] = data;\r\n    if (extraData) {\r\n        LOCALE_DATA[localeId][18 /* ExtraData */] = extraData;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst NumberFormatStyle = {\r\n    Decimal: 0,\r\n    Percent: 1,\r\n    Currency: 2,\r\n    Scientific: 3,\r\n};\r\nNumberFormatStyle[NumberFormatStyle.Decimal] = \"Decimal\";\r\nNumberFormatStyle[NumberFormatStyle.Percent] = \"Percent\";\r\nNumberFormatStyle[NumberFormatStyle.Currency] = \"Currency\";\r\nNumberFormatStyle[NumberFormatStyle.Scientific] = \"Scientific\";\r\n/** @enum {number} */\r\nconst Plural = {\r\n    Zero: 0,\r\n    One: 1,\r\n    Two: 2,\r\n    Few: 3,\r\n    Many: 4,\r\n    Other: 5,\r\n};\r\nPlural[Plural.Zero] = \"Zero\";\r\nPlural[Plural.One] = \"One\";\r\nPlural[Plural.Two] = \"Two\";\r\nPlural[Plural.Few] = \"Few\";\r\nPlural[Plural.Many] = \"Many\";\r\nPlural[Plural.Other] = \"Other\";\r\n/** @enum {number} */\r\nconst FormStyle = {\r\n    Format: 0,\r\n    Standalone: 1,\r\n};\r\nFormStyle[FormStyle.Format] = \"Format\";\r\nFormStyle[FormStyle.Standalone] = \"Standalone\";\r\n/** @enum {number} */\r\nconst TranslationWidth = {\r\n    Narrow: 0,\r\n    Abbreviated: 1,\r\n    Wide: 2,\r\n    Short: 3,\r\n};\r\nTranslationWidth[TranslationWidth.Narrow] = \"Narrow\";\r\nTranslationWidth[TranslationWidth.Abbreviated] = \"Abbreviated\";\r\nTranslationWidth[TranslationWidth.Wide] = \"Wide\";\r\nTranslationWidth[TranslationWidth.Short] = \"Short\";\r\n/** @enum {number} */\r\nconst FormatWidth = {\r\n    Short: 0,\r\n    Medium: 1,\r\n    Long: 2,\r\n    Full: 3,\r\n};\r\nFormatWidth[FormatWidth.Short] = \"Short\";\r\nFormatWidth[FormatWidth.Medium] = \"Medium\";\r\nFormatWidth[FormatWidth.Long] = \"Long\";\r\nFormatWidth[FormatWidth.Full] = \"Full\";\r\n/** @enum {number} */\r\nconst NumberSymbol = {\r\n    Decimal: 0,\r\n    Group: 1,\r\n    List: 2,\r\n    PercentSign: 3,\r\n    PlusSign: 4,\r\n    MinusSign: 5,\r\n    Exponential: 6,\r\n    SuperscriptingExponent: 7,\r\n    PerMille: 8,\r\n    Infinity: 9,\r\n    NaN: 10,\r\n    TimeSeparator: 11,\r\n    CurrencyDecimal: 12,\r\n    CurrencyGroup: 13,\r\n};\r\nNumberSymbol[NumberSymbol.Decimal] = \"Decimal\";\r\nNumberSymbol[NumberSymbol.Group] = \"Group\";\r\nNumberSymbol[NumberSymbol.List] = \"List\";\r\nNumberSymbol[NumberSymbol.PercentSign] = \"PercentSign\";\r\nNumberSymbol[NumberSymbol.PlusSign] = \"PlusSign\";\r\nNumberSymbol[NumberSymbol.MinusSign] = \"MinusSign\";\r\nNumberSymbol[NumberSymbol.Exponential] = \"Exponential\";\r\nNumberSymbol[NumberSymbol.SuperscriptingExponent] = \"SuperscriptingExponent\";\r\nNumberSymbol[NumberSymbol.PerMille] = \"PerMille\";\r\nNumberSymbol[NumberSymbol.Infinity] = \"Infinity\";\r\nNumberSymbol[NumberSymbol.NaN] = \"NaN\";\r\nNumberSymbol[NumberSymbol.TimeSeparator] = \"TimeSeparator\";\r\nNumberSymbol[NumberSymbol.CurrencyDecimal] = \"CurrencyDecimal\";\r\nNumberSymbol[NumberSymbol.CurrencyGroup] = \"CurrencyGroup\";\r\n/** @enum {number} */\r\nconst WeekDay = {\r\n    Sunday: 0,\r\n    Monday: 1,\r\n    Tuesday: 2,\r\n    Wednesday: 3,\r\n    Thursday: 4,\r\n    Friday: 5,\r\n    Saturday: 6,\r\n};\r\nWeekDay[WeekDay.Sunday] = \"Sunday\";\r\nWeekDay[WeekDay.Monday] = \"Monday\";\r\nWeekDay[WeekDay.Tuesday] = \"Tuesday\";\r\nWeekDay[WeekDay.Wednesday] = \"Wednesday\";\r\nWeekDay[WeekDay.Thursday] = \"Thursday\";\r\nWeekDay[WeekDay.Friday] = \"Friday\";\r\nWeekDay[WeekDay.Saturday] = \"Saturday\";\r\n/**\r\n * The locale id for the chosen locale (e.g `en-GB`).\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction getLocaleId(locale) {\r\n    return findLocaleData(locale)[0 /* LocaleId */];\r\n}\r\n/**\r\n * Periods of the day (e.g. `[AM, PM]` for en-US).\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @param {?} formStyle\r\n * @param {?} width\r\n * @return {?}\r\n */\r\nfunction getLocaleDayPeriods(locale, formStyle, width) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    const /** @type {?} */ amPmData = /** @type {?} */ ([data[1 /* DayPeriodsFormat */], data[2 /* DayPeriodsStandalone */]]);\r\n    const /** @type {?} */ amPm = getLastDefinedValue(amPmData, formStyle);\r\n    return getLastDefinedValue(amPm, width);\r\n}\r\n/**\r\n * Days of the week for the Gregorian calendar (e.g. `[Sunday, Monday, ... Saturday]` for en-US).\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @param {?} formStyle\r\n * @param {?} width\r\n * @return {?}\r\n */\r\nfunction getLocaleDayNames(locale, formStyle, width) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    const /** @type {?} */ daysData = /** @type {?} */ ([data[3 /* DaysFormat */], data[4 /* DaysStandalone */]]);\r\n    const /** @type {?} */ days = getLastDefinedValue(daysData, formStyle);\r\n    return getLastDefinedValue(days, width);\r\n}\r\n/**\r\n * Months of the year for the Gregorian calendar (e.g. `[January, February, ...]` for en-US).\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @param {?} formStyle\r\n * @param {?} width\r\n * @return {?}\r\n */\r\nfunction getLocaleMonthNames(locale, formStyle, width) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    const /** @type {?} */ monthsData = /** @type {?} */ ([data[5 /* MonthsFormat */], data[6 /* MonthsStandalone */]]);\r\n    const /** @type {?} */ months = getLastDefinedValue(monthsData, formStyle);\r\n    return getLastDefinedValue(months, width);\r\n}\r\n/**\r\n * Eras for the Gregorian calendar (e.g. AD/BC).\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @param {?} width\r\n * @return {?}\r\n */\r\nfunction getLocaleEraNames(locale, width) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    const /** @type {?} */ erasData = /** @type {?} */ (data[7 /* Eras */]);\r\n    return getLastDefinedValue(erasData, width);\r\n}\r\n/**\r\n * First day of the week for this locale, based on english days (Sunday = 0, Monday = 1, ...).\r\n * For example in french the value would be 1 because the first day of the week is Monday.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction getLocaleFirstDayOfWeek(locale) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    return data[8 /* FirstDayOfWeek */];\r\n}\r\n/**\r\n * Range of days in the week that represent the week-end for this locale, based on english days\r\n * (Sunday = 0, Monday = 1, ...).\r\n * For example in english the value would be [6,0] for Saturday to Sunday.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction getLocaleWeekEndRange(locale) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    return data[9 /* WeekendRange */];\r\n}\r\n/**\r\n * Date format that depends on the locale.\r\n *\r\n * There are four basic date formats:\r\n * - `full` should contain long-weekday (EEEE), year (y), long-month (MMMM), day (d).\r\n *\r\n *  For example, English uses `EEEE, MMMM d, y`, corresponding to a date like\r\n *  \"Tuesday, September 14, 1999\".\r\n *\r\n * - `long` should contain year, long-month, day.\r\n *\r\n *  For example, `MMMM d, y`, corresponding to a date like \"September 14, 1999\".\r\n *\r\n * - `medium` should contain year, abbreviated-month (MMM), day.\r\n *\r\n *  For example, `MMM d, y`, corresponding to a date like \"Sep 14, 1999\".\r\n *  For languages that do not use abbreviated months, use the numeric month (MM/M). For example,\r\n *  `y/MM/dd`, corresponding to a date like \"1999/09/14\".\r\n *\r\n * - `short` should contain year, numeric-month (MM/M), and day.\r\n *\r\n *  For example, `M/d/yy`, corresponding to a date like \"9/14/99\".\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @param {?} width\r\n * @return {?}\r\n */\r\nfunction getLocaleDateFormat(locale, width) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    return data[10 /* DateFormat */][width];\r\n}\r\n/**\r\n * Time format that depends on the locale.\r\n *\r\n * The standard formats include four basic time formats:\r\n * - `full` should contain hour (h/H), minute (mm), second (ss), and zone (zzzz).\r\n * - `long` should contain hour, minute, second, and zone (z)\r\n * - `medium` should contain hour, minute, second.\r\n * - `short` should contain hour, minute.\r\n *\r\n * Note: The patterns depend on whether the main country using your language uses 12-hour time or\r\n * not:\r\n * - For 12-hour time, use a pattern like `hh:mm a` using h to mean a 12-hour clock cycle running\r\n * 1 through 12 (midnight plus 1 minute is 12:01), or using K to mean a 12-hour clock cycle\r\n * running 0 through 11 (midnight plus 1 minute is 0:01).\r\n * - For 24-hour time, use a pattern like `HH:mm` using H to mean a 24-hour clock cycle running 0\r\n * through 23 (midnight plus 1 minute is 0:01), or using k to mean a 24-hour clock cycle running\r\n * 1 through 24 (midnight plus 1 minute is 24:01).\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @param {?} width\r\n * @return {?}\r\n */\r\nfunction getLocaleTimeFormat(locale, width) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    return data[11 /* TimeFormat */][width];\r\n}\r\n/**\r\n * Date-time format that depends on the locale.\r\n *\r\n * The date-time pattern shows how to combine separate patterns for date (represented by {1})\r\n * and time (represented by {0}) into a single pattern. It usually doesn't need to be changed.\r\n * What you want to pay attention to are:\r\n * - possibly removing a space for languages that don't use it, such as many East Asian languages\r\n * - possibly adding a comma, other punctuation, or a combining word\r\n *\r\n * For example:\r\n * - English uses `{1} 'at' {0}` or `{1}, {0}` (depending on date style), while Japanese uses\r\n *  `{1}{0}`.\r\n * - An English formatted date-time using the combining pattern `{1}, {0}` could be\r\n *  `Dec 10, 2010, 3:59:49 PM`. Notice the comma and space between the date portion and the time\r\n *  portion.\r\n *\r\n * There are four formats (`full`, `long`, `medium`, `short`); the determination of which to use\r\n * is normally based on the date style. For example, if the date has a full month and weekday\r\n * name, the full combining pattern will be used to combine that with a time. If the date has\r\n * numeric month, the short version of the combining pattern will be used to combine that with a\r\n * time. English uses `{1} 'at' {0}` for full and long styles, and `{1}, {0}` for medium and short\r\n * styles.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @param {?} width\r\n * @return {?}\r\n */\r\nfunction getLocaleDateTimeFormat(locale, width) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    const /** @type {?} */ dateTimeFormatData = /** @type {?} */ (data[12 /* DateTimeFormat */]);\r\n    return getLastDefinedValue(dateTimeFormatData, width);\r\n}\r\n/**\r\n * Number symbol that can be used to replace placeholders in number formats.\r\n * See {\\@link NumberSymbol} for more information.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @param {?} symbol\r\n * @return {?}\r\n */\r\nfunction getLocaleNumberSymbol(locale, symbol) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    const /** @type {?} */ res = data[13 /* NumberSymbols */][symbol];\r\n    if (typeof res === 'undefined') {\r\n        if (symbol === NumberSymbol.CurrencyDecimal) {\r\n            return data[13 /* NumberSymbols */][NumberSymbol.Decimal];\r\n        }\r\n        else if (symbol === NumberSymbol.CurrencyGroup) {\r\n            return data[13 /* NumberSymbols */][NumberSymbol.Group];\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Number format that depends on the locale.\r\n *\r\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\r\n * when used to format the number 12345.678 could result in \"12'345,67\". That would happen if the\r\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\r\n *\r\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders;\r\n * they stand for the decimal separator, and so on, and are NOT real characters.\r\n * You must NOT \"translate\" the placeholders; for example, don't change `.` to `,` even though in\r\n * your language the decimal point is written with a comma. The symbols should be replaced by the\r\n * local equivalents, using the Number Symbols for your language.\r\n *\r\n * Here are the special characters used in number patterns:\r\n *\r\n * | Symbol | Meaning |\r\n * |--------|---------|\r\n * | . | Replaced automatically by the character used for the decimal point. |\r\n * | , | Replaced by the \"grouping\" (thousands) separator. |\r\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\r\n * | # | Replaced by a digit (or nothing if there aren't enough). |\r\n * | ¤ | This will be replaced by a currency symbol, such as $ or USD. |\r\n * | % | This marks a percent format. The % symbol may change position, but must be retained. |\r\n * | E | This marks a scientific format. The E symbol may change position, but must be retained. |\r\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\r\n *\r\n * You can find more information\r\n * [on the CLDR website](http://cldr.unicode.org/translation/number-patterns)\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction getLocaleNumberFormat(locale, type) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    return data[14 /* NumberFormats */][type];\r\n}\r\n/**\r\n * The symbol used to represent the currency for the main country using this locale (e.g. $ for\r\n * the locale en-US).\r\n * The symbol will be `null` if the main country cannot be determined.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction getLocaleCurrencySymbol(locale) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    return data[15 /* CurrencySymbol */] || null;\r\n}\r\n/**\r\n * The name of the currency for the main country using this locale (e.g. USD for the locale\r\n * en-US).\r\n * The name will be `null` if the main country cannot be determined.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction getLocaleCurrencyName(locale) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    return data[16 /* CurrencyName */] || null;\r\n}\r\n/**\r\n * The locale plural function used by ICU expressions to determine the plural case to use.\r\n * See {\\@link NgPlural} for more information.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction getLocalePluralCase(locale) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    return data[17 /* PluralCase */];\r\n}\r\n/**\r\n * @param {?} data\r\n * @return {?}\r\n */\r\nfunction checkFullData(data) {\r\n    if (!data[18 /* ExtraData */]) {\r\n        throw new Error(`Missing extra locale data for the locale \"${data[0 /* LocaleId */]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\r\n    }\r\n}\r\n/**\r\n * Rules used to determine which day period to use (See `dayPeriods` below).\r\n * The rules can either be an array or a single value. If it's an array, consider it as \"from\"\r\n * and \"to\". If it's a single value then it means that the period is only valid at this exact\r\n * value.\r\n * There is always the same number of rules as the number of day periods, which means that the\r\n * first rule is applied to the first day period and so on.\r\n * You should fallback to AM/PM when there are no rules available.\r\n *\r\n * Note: this is only available if you load the full locale data.\r\n * See the {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale\r\n * data.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction getLocaleExtraDayPeriodRules(locale) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    checkFullData(data);\r\n    const /** @type {?} */ rules = data[18 /* ExtraData */][2 /* ExtraDayPeriodsRules */] || [];\r\n    return rules.map((rule) => {\r\n        if (typeof rule === 'string') {\r\n            return extractTime(rule);\r\n        }\r\n        return [extractTime(rule[0]), extractTime(rule[1])];\r\n    });\r\n}\r\n/**\r\n * Day Periods indicate roughly how the day is broken up in different languages (e.g. morning,\r\n * noon, afternoon, midnight, ...).\r\n * You should use the function {\\@link getLocaleExtraDayPeriodRules} to determine which period to\r\n * use.\r\n * You should fallback to AM/PM when there are no day periods available.\r\n *\r\n * Note: this is only available if you load the full locale data.\r\n * See the {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale\r\n * data.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @param {?} formStyle\r\n * @param {?} width\r\n * @return {?}\r\n */\r\nfunction getLocaleExtraDayPeriods(locale, formStyle, width) {\r\n    const /** @type {?} */ data = findLocaleData(locale);\r\n    checkFullData(data);\r\n    const /** @type {?} */ dayPeriodsData = /** @type {?} */ ([\r\n        data[18 /* ExtraData */][0 /* ExtraDayPeriodFormats */],\r\n        data[18 /* ExtraData */][1 /* ExtraDayPeriodStandalone */]\r\n    ]);\r\n    const /** @type {?} */ dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\r\n    return getLastDefinedValue(dayPeriods, width) || [];\r\n}\r\n/**\r\n * Returns the first value that is defined in an array, going backwards.\r\n *\r\n * To avoid repeating the same data (e.g. when \"format\" and \"standalone\" are the same) we only\r\n * add the first one to the locale data arrays, the other ones are only defined when different.\r\n * We use this function to retrieve the first defined value.\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @template T\r\n * @param {?} data\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction getLastDefinedValue(data, index) {\r\n    for (let /** @type {?} */ i = index; i > -1; i--) {\r\n        if (typeof data[i] !== 'undefined') {\r\n            return data[i];\r\n        }\r\n    }\r\n    throw new Error('Locale data API: locale data undefined');\r\n}\r\n/**\r\n * Extract the hours and minutes from a string like \"15:45\"\r\n * @param {?} time\r\n * @return {?}\r\n */\r\nfunction extractTime(time) {\r\n    const [h, m] = time.split(':');\r\n    return { hours: +h, minutes: +m };\r\n}\r\n/**\r\n * Finds the locale data for a locale id\r\n *\r\n * \\@experimental i18n support is experimental.\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction findLocaleData(locale) {\r\n    const /** @type {?} */ normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\r\n    let /** @type {?} */ match = LOCALE_DATA[normalizedLocale];\r\n    if (match) {\r\n        return match;\r\n    }\r\n    // let's try to find a parent locale\r\n    const /** @type {?} */ parentLocale = normalizedLocale.split('-')[0];\r\n    match = LOCALE_DATA[parentLocale];\r\n    if (match) {\r\n        return match;\r\n    }\r\n    if (parentLocale === 'en') {\r\n        return localeEn;\r\n    }\r\n    throw new Error(`Missing locale data for the locale \"${locale}\".`);\r\n}\r\n/**\r\n * Return the currency symbol for a given currency code, or the code if no symbol available\r\n * (e.g.: $, US$, or USD)\r\n *\r\n * \\@internal\r\n * @param {?} code\r\n * @param {?} format\r\n * @return {?}\r\n */\r\nfunction findCurrencySymbol(code, format) {\r\n    const /** @type {?} */ currency = CURRENCIES[code] || {};\r\n    const /** @type {?} */ symbol = currency[0] || code;\r\n    return format === 'wide' ? symbol : currency[1] || symbol;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @deprecated from v5\r\n */\r\nconst DEPRECATED_PLURAL_FN = new InjectionToken('UseV4Plurals');\r\n/**\r\n * \\@experimental\r\n * @abstract\r\n */\r\nclass NgLocalization {\r\n}\r\n/**\r\n * Returns the plural category for a given value.\r\n * - \"=value\" when the case exists,\r\n * - the plural category otherwise\r\n *\r\n * \\@internal\r\n * @param {?} value\r\n * @param {?} cases\r\n * @param {?} ngLocalization\r\n * @param {?=} locale\r\n * @return {?}\r\n */\r\nfunction getPluralCategory(value, cases, ngLocalization, locale) {\r\n    let /** @type {?} */ key = `=${value}`;\r\n    if (cases.indexOf(key) > -1) {\r\n        return key;\r\n    }\r\n    key = ngLocalization.getPluralCategory(value, locale);\r\n    if (cases.indexOf(key) > -1) {\r\n        return key;\r\n    }\r\n    if (cases.indexOf('other') > -1) {\r\n        return 'other';\r\n    }\r\n    throw new Error(`No plural message found for value \"${value}\"`);\r\n}\r\n/**\r\n * Returns the plural case based on the locale\r\n *\r\n * \\@experimental\r\n */\r\nclass NgLocaleLocalization extends NgLocalization {\r\n    /**\r\n     * @param {?} locale\r\n     * @param {?=} deprecatedPluralFn\r\n     */\r\n    constructor(locale, /** @deprecated from v5 */\r\n        deprecatedPluralFn) {\r\n        super();\r\n        this.locale = locale;\r\n        this.deprecatedPluralFn = deprecatedPluralFn;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} locale\r\n     * @return {?}\r\n     */\r\n    getPluralCategory(value, locale) {\r\n        const /** @type {?} */ plural = this.deprecatedPluralFn ? this.deprecatedPluralFn(locale || this.locale, value) :\r\n            getLocalePluralCase(locale || this.locale)(value);\r\n        switch (plural) {\r\n            case Plural.Zero:\r\n                return 'zero';\r\n            case Plural.One:\r\n                return 'one';\r\n            case Plural.Two:\r\n                return 'two';\r\n            case Plural.Few:\r\n                return 'few';\r\n            case Plural.Many:\r\n                return 'many';\r\n            default:\r\n                return 'other';\r\n        }\r\n    }\r\n}\r\nNgLocaleLocalization.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nNgLocaleLocalization.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DEPRECATED_PLURAL_FN,] },] },\r\n];\r\n/**\r\n * Returns the plural case based on the locale\r\n *\r\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\r\n * \\@experimental\r\n * @param {?} locale\r\n * @param {?} nLike\r\n * @return {?}\r\n */\r\nfunction getPluralCase(locale, nLike) {\r\n    // TODO(vicb): lazy compute\r\n    if (typeof nLike === 'string') {\r\n        nLike = parseInt(/** @type {?} */ (nLike), 10);\r\n    }\r\n    const /** @type {?} */ n = /** @type {?} */ (nLike);\r\n    const /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\r\n    const /** @type {?} */ i = Math.floor(Math.abs(n));\r\n    const /** @type {?} */ v = nDecimal.length;\r\n    const /** @type {?} */ f = parseInt(nDecimal, 10);\r\n    const /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\r\n    const /** @type {?} */ lang = locale.split('-')[0].toLowerCase();\r\n    switch (lang) {\r\n        case 'af':\r\n        case 'asa':\r\n        case 'az':\r\n        case 'bem':\r\n        case 'bez':\r\n        case 'bg':\r\n        case 'brx':\r\n        case 'ce':\r\n        case 'cgg':\r\n        case 'chr':\r\n        case 'ckb':\r\n        case 'ee':\r\n        case 'el':\r\n        case 'eo':\r\n        case 'es':\r\n        case 'eu':\r\n        case 'fo':\r\n        case 'fur':\r\n        case 'gsw':\r\n        case 'ha':\r\n        case 'haw':\r\n        case 'hu':\r\n        case 'jgo':\r\n        case 'jmc':\r\n        case 'ka':\r\n        case 'kk':\r\n        case 'kkj':\r\n        case 'kl':\r\n        case 'ks':\r\n        case 'ksb':\r\n        case 'ky':\r\n        case 'lb':\r\n        case 'lg':\r\n        case 'mas':\r\n        case 'mgo':\r\n        case 'ml':\r\n        case 'mn':\r\n        case 'nb':\r\n        case 'nd':\r\n        case 'ne':\r\n        case 'nn':\r\n        case 'nnh':\r\n        case 'nyn':\r\n        case 'om':\r\n        case 'or':\r\n        case 'os':\r\n        case 'ps':\r\n        case 'rm':\r\n        case 'rof':\r\n        case 'rwk':\r\n        case 'saq':\r\n        case 'seh':\r\n        case 'sn':\r\n        case 'so':\r\n        case 'sq':\r\n        case 'ta':\r\n        case 'te':\r\n        case 'teo':\r\n        case 'tk':\r\n        case 'tr':\r\n        case 'ug':\r\n        case 'uz':\r\n        case 'vo':\r\n        case 'vun':\r\n        case 'wae':\r\n        case 'xog':\r\n            if (n === 1)\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'ak':\r\n        case 'ln':\r\n        case 'mg':\r\n        case 'pa':\r\n        case 'ti':\r\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'am':\r\n        case 'as':\r\n        case 'bn':\r\n        case 'fa':\r\n        case 'gu':\r\n        case 'hi':\r\n        case 'kn':\r\n        case 'mr':\r\n        case 'zu':\r\n            if (i === 0 || n === 1)\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'ar':\r\n            if (n === 0)\r\n                return Plural.Zero;\r\n            if (n === 1)\r\n                return Plural.One;\r\n            if (n === 2)\r\n                return Plural.Two;\r\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\r\n                return Plural.Few;\r\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'ast':\r\n        case 'ca':\r\n        case 'de':\r\n        case 'en':\r\n        case 'et':\r\n        case 'fi':\r\n        case 'fy':\r\n        case 'gl':\r\n        case 'it':\r\n        case 'nl':\r\n        case 'sv':\r\n        case 'sw':\r\n        case 'ur':\r\n        case 'yi':\r\n            if (i === 1 && v === 0)\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'be':\r\n            if (n % 10 === 1 && !(n % 100 === 11))\r\n                return Plural.One;\r\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\r\n                !(n % 100 >= 12 && n % 100 <= 14))\r\n                return Plural.Few;\r\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\r\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'br':\r\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\r\n                return Plural.One;\r\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\r\n                return Plural.Two;\r\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\r\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\r\n                    n % 100 >= 90 && n % 100 <= 99))\r\n                return Plural.Few;\r\n            if (!(n === 0) && n % 1e6 === 0)\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'bs':\r\n        case 'hr':\r\n        case 'sr':\r\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\r\n                return Plural.One;\r\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\r\n                !(i % 100 >= 12 && i % 100 <= 14) ||\r\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\r\n                    !(f % 100 >= 12 && f % 100 <= 14))\r\n                return Plural.Few;\r\n            return Plural.Other;\r\n        case 'cs':\r\n        case 'sk':\r\n            if (i === 1 && v === 0)\r\n                return Plural.One;\r\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\r\n                return Plural.Few;\r\n            if (!(v === 0))\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'cy':\r\n            if (n === 0)\r\n                return Plural.Zero;\r\n            if (n === 1)\r\n                return Plural.One;\r\n            if (n === 2)\r\n                return Plural.Two;\r\n            if (n === 3)\r\n                return Plural.Few;\r\n            if (n === 6)\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'da':\r\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'dsb':\r\n        case 'hsb':\r\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\r\n                return Plural.One;\r\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\r\n                return Plural.Two;\r\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\r\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\r\n                return Plural.Few;\r\n            return Plural.Other;\r\n        case 'ff':\r\n        case 'fr':\r\n        case 'hy':\r\n        case 'kab':\r\n            if (i === 0 || i === 1)\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'fil':\r\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\r\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\r\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'ga':\r\n            if (n === 1)\r\n                return Plural.One;\r\n            if (n === 2)\r\n                return Plural.Two;\r\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\r\n                return Plural.Few;\r\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'gd':\r\n            if (n === 1 || n === 11)\r\n                return Plural.One;\r\n            if (n === 2 || n === 12)\r\n                return Plural.Two;\r\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\r\n                return Plural.Few;\r\n            return Plural.Other;\r\n        case 'gv':\r\n            if (v === 0 && i % 10 === 1)\r\n                return Plural.One;\r\n            if (v === 0 && i % 10 === 2)\r\n                return Plural.Two;\r\n            if (v === 0 &&\r\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\r\n                return Plural.Few;\r\n            if (!(v === 0))\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'he':\r\n            if (i === 1 && v === 0)\r\n                return Plural.One;\r\n            if (i === 2 && v === 0)\r\n                return Plural.Two;\r\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'is':\r\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'ksh':\r\n            if (n === 0)\r\n                return Plural.Zero;\r\n            if (n === 1)\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'kw':\r\n        case 'naq':\r\n        case 'se':\r\n        case 'smn':\r\n            if (n === 1)\r\n                return Plural.One;\r\n            if (n === 2)\r\n                return Plural.Two;\r\n            return Plural.Other;\r\n        case 'lag':\r\n            if (n === 0)\r\n                return Plural.Zero;\r\n            if ((i === 0 || i === 1) && !(n === 0))\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'lt':\r\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\r\n                return Plural.One;\r\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\r\n                !(n % 100 >= 11 && n % 100 <= 19))\r\n                return Plural.Few;\r\n            if (!(f === 0))\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'lv':\r\n        case 'prg':\r\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\r\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\r\n                return Plural.Zero;\r\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\r\n                !(v === 2) && f % 10 === 1)\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'mk':\r\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'mt':\r\n            if (n === 1)\r\n                return Plural.One;\r\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\r\n                return Plural.Few;\r\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'pl':\r\n            if (i === 1 && v === 0)\r\n                return Plural.One;\r\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\r\n                !(i % 100 >= 12 && i % 100 <= 14))\r\n                return Plural.Few;\r\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\r\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\r\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'pt':\r\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'ro':\r\n            if (i === 1 && v === 0)\r\n                return Plural.One;\r\n            if (!(v === 0) || n === 0 ||\r\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\r\n                return Plural.Few;\r\n            return Plural.Other;\r\n        case 'ru':\r\n        case 'uk':\r\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\r\n                return Plural.One;\r\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\r\n                !(i % 100 >= 12 && i % 100 <= 14))\r\n                return Plural.Few;\r\n            if (v === 0 && i % 10 === 0 ||\r\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\r\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\r\n                return Plural.Many;\r\n            return Plural.Other;\r\n        case 'shi':\r\n            if (i === 0 || n === 1)\r\n                return Plural.One;\r\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\r\n                return Plural.Few;\r\n            return Plural.Other;\r\n        case 'si':\r\n            if (n === 0 || n === 1 || i === 0 && f === 1)\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        case 'sl':\r\n            if (v === 0 && i % 100 === 1)\r\n                return Plural.One;\r\n            if (v === 0 && i % 100 === 2)\r\n                return Plural.Two;\r\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\r\n                return Plural.Few;\r\n            return Plural.Other;\r\n        case 'tzm':\r\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\r\n                return Plural.One;\r\n            return Plural.Other;\r\n        // When there is no specification, the default is always \"other\"\r\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\r\n        // > other (required—general plural form — also used if the language only has a single form)\r\n        default:\r\n            return Plural.Other;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} cookieStr\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction parseCookieValue(cookieStr, name) {\r\n    name = encodeURIComponent(name);\r\n    for (const /** @type {?} */ cookie of cookieStr.split(';')) {\r\n        const /** @type {?} */ eqIndex = cookie.indexOf('=');\r\n        const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\r\n        if (cookieName.trim() === name) {\r\n            return decodeURIComponent(cookieValue);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@ngModule CommonModule\r\n *\r\n * \\@whatItDoes Adds and removes CSS classes on an HTML element.\r\n *\r\n * \\@howToUse\r\n * ```\r\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\r\n *\r\n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\r\n *\r\n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\r\n *\r\n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\r\n *\r\n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\r\n * ```\r\n *\r\n * \\@description\r\n *\r\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\r\n * - `string` - the CSS classes listed in the string (space delimited) are added,\r\n * - `Array` - the CSS classes declared as Array elements are added,\r\n * - `Object` - keys are CSS classes that get added when the expression given in the value\r\n *              evaluates to a truthy value, otherwise they are removed.\r\n *\r\n * \\@stable\r\n */\r\nclass NgClass {\r\n    /**\r\n     * @param {?} _iterableDiffers\r\n     * @param {?} _keyValueDiffers\r\n     * @param {?} _ngEl\r\n     * @param {?} _renderer\r\n     */\r\n    constructor(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {\r\n        this._iterableDiffers = _iterableDiffers;\r\n        this._keyValueDiffers = _keyValueDiffers;\r\n        this._ngEl = _ngEl;\r\n        this._renderer = _renderer;\r\n        this._initialClasses = [];\r\n    }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    set klass(v) {\r\n        this._applyInitialClasses(true);\r\n        this._initialClasses = typeof v === 'string' ? v.split(/\\s+/) : [];\r\n        this._applyInitialClasses(false);\r\n        this._applyClasses(this._rawClass, false);\r\n    }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    set ngClass(v) {\r\n        this._cleanupClasses(this._rawClass);\r\n        this._iterableDiffer = null;\r\n        this._keyValueDiffer = null;\r\n        this._rawClass = typeof v === 'string' ? v.split(/\\s+/) : v;\r\n        if (this._rawClass) {\r\n            if (ɵisListLikeIterable(this._rawClass)) {\r\n                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\r\n            }\r\n            else {\r\n                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngDoCheck() {\r\n        if (this._iterableDiffer) {\r\n            const /** @type {?} */ iterableChanges = this._iterableDiffer.diff(/** @type {?} */ (this._rawClass));\r\n            if (iterableChanges) {\r\n                this._applyIterableChanges(iterableChanges);\r\n            }\r\n        }\r\n        else if (this._keyValueDiffer) {\r\n            const /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff(/** @type {?} */ (this._rawClass));\r\n            if (keyValueChanges) {\r\n                this._applyKeyValueChanges(keyValueChanges);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} rawClassVal\r\n     * @return {?}\r\n     */\r\n    _cleanupClasses(rawClassVal) {\r\n        this._applyClasses(rawClassVal, true);\r\n        this._applyInitialClasses(false);\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    _applyKeyValueChanges(changes) {\r\n        changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\r\n        changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\r\n        changes.forEachRemovedItem((record) => {\r\n            if (record.previousValue) {\r\n                this._toggleClass(record.key, false);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    _applyIterableChanges(changes) {\r\n        changes.forEachAddedItem((record) => {\r\n            if (typeof record.item === 'string') {\r\n                this._toggleClass(record.item, true);\r\n            }\r\n            else {\r\n                throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${ɵstringify(record.item)}`);\r\n            }\r\n        });\r\n        changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\r\n    }\r\n    /**\r\n     * @param {?} isCleanup\r\n     * @return {?}\r\n     */\r\n    _applyInitialClasses(isCleanup) {\r\n        this._initialClasses.forEach(klass => this._toggleClass(klass, !isCleanup));\r\n    }\r\n    /**\r\n     * @param {?} rawClassVal\r\n     * @param {?} isCleanup\r\n     * @return {?}\r\n     */\r\n    _applyClasses(rawClassVal, isCleanup) {\r\n        if (rawClassVal) {\r\n            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\r\n                (/** @type {?} */ (rawClassVal)).forEach((klass) => this._toggleClass(klass, !isCleanup));\r\n            }\r\n            else {\r\n                Object.keys(rawClassVal).forEach(klass => {\r\n                    if (rawClassVal[klass] != null)\r\n                        this._toggleClass(klass, !isCleanup);\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} klass\r\n     * @param {?} enabled\r\n     * @return {?}\r\n     */\r\n    _toggleClass(klass, enabled) {\r\n        klass = klass.trim();\r\n        if (klass) {\r\n            klass.split(/\\s+/g).forEach(klass => {\r\n                if (enabled) {\r\n                    this._renderer.addClass(this._ngEl.nativeElement, klass);\r\n                }\r\n                else {\r\n                    this._renderer.removeClass(this._ngEl.nativeElement, klass);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nNgClass.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngClass]' },] },\r\n];\r\n/** @nocollapse */\r\nNgClass.ctorParameters = () => [\r\n    { type: IterableDiffers, },\r\n    { type: KeyValueDiffers, },\r\n    { type: ElementRef, },\r\n    { type: Renderer2, },\r\n];\r\nNgClass.propDecorators = {\r\n    \"klass\": [{ type: Input, args: ['class',] },],\r\n    \"ngClass\": [{ type: Input },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Instantiates a single {\\@link Component} type and inserts its Host View into current View.\r\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\r\n *\r\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\r\n * any existing component will get destroyed.\r\n *\r\n * ### Fine tune control\r\n *\r\n * You can control the component creation process by using the following optional attributes:\r\n *\r\n * * `ngComponentOutletInjector`: Optional custom {\\@link Injector} that will be used as parent for\r\n * the Component. Defaults to the injector of the current view container.\r\n *\r\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\r\n * section of the component, if exists.\r\n *\r\n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\r\n * module, then load a component from that module.\r\n *\r\n * ### Syntax\r\n *\r\n * Simple\r\n * ```\r\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\r\n * ```\r\n *\r\n * Customized injector/content\r\n * ```\r\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\r\n *                                   injector: injectorExpression;\r\n *                                   content: contentNodesExpression;\">\r\n * </ng-container>\r\n * ```\r\n *\r\n * Customized ngModuleFactory\r\n * ```\r\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\r\n *                                   ngModuleFactory: moduleFactory;\">\r\n * </ng-container>\r\n * ```\r\n * ## Example\r\n *\r\n * {\\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\r\n *\r\n * A more complete example with additional options:\r\n *\r\n * {\\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\r\n * A more complete example with ngModuleFactory:\r\n *\r\n * {\\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\r\n *\r\n * \\@experimental\r\n */\r\nclass NgComponentOutlet {\r\n    /**\r\n     * @param {?} _viewContainerRef\r\n     */\r\n    constructor(_viewContainerRef) {\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._componentRef = null;\r\n        this._moduleRef = null;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        this._viewContainerRef.clear();\r\n        this._componentRef = null;\r\n        if (this.ngComponentOutlet) {\r\n            const /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\r\n            if (changes['ngComponentOutletNgModuleFactory']) {\r\n                if (this._moduleRef)\r\n                    this._moduleRef.destroy();\r\n                if (this.ngComponentOutletNgModuleFactory) {\r\n                    const /** @type {?} */ parentModule = elInjector.get(NgModuleRef);\r\n                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\r\n                }\r\n                else {\r\n                    this._moduleRef = null;\r\n                }\r\n            }\r\n            const /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\r\n                elInjector.get(ComponentFactoryResolver);\r\n            const /** @type {?} */ componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\r\n            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        if (this._moduleRef)\r\n            this._moduleRef.destroy();\r\n    }\r\n}\r\nNgComponentOutlet.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngComponentOutlet]' },] },\r\n];\r\n/** @nocollapse */\r\nNgComponentOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef, },\r\n];\r\nNgComponentOutlet.propDecorators = {\r\n    \"ngComponentOutlet\": [{ type: Input },],\r\n    \"ngComponentOutletInjector\": [{ type: Input },],\r\n    \"ngComponentOutletContent\": [{ type: Input },],\r\n    \"ngComponentOutletNgModuleFactory\": [{ type: Input },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@stable\r\n */\r\nclass NgForOfContext {\r\n    /**\r\n     * @param {?} $implicit\r\n     * @param {?} ngForOf\r\n     * @param {?} index\r\n     * @param {?} count\r\n     */\r\n    constructor($implicit, ngForOf, index, count) {\r\n        this.$implicit = $implicit;\r\n        this.ngForOf = ngForOf;\r\n        this.index = index;\r\n        this.count = count;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get first() { return this.index === 0; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get last() { return this.index === this.count - 1; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get even() { return this.index % 2 === 0; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get odd() { return !this.even; }\r\n}\r\n/**\r\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\r\n * for each instantiated template inherits from the outer context with the given loop variable\r\n * set to the current item from the iterable.\r\n *\r\n * ### Local Variables\r\n *\r\n * `NgForOf` provides several exported values that can be aliased to local variables:\r\n *\r\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\r\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\r\n * more complex then a property access, for example when using the async pipe (`userStreams |\r\n * async`).\r\n * - `index: number`: The index of the current item in the iterable.\r\n * - `first: boolean`: True when the item is the first item in the iterable.\r\n * - `last: boolean`: True when the item is the last item in the iterable.\r\n * - `even: boolean`: True when the item has an even index in the iterable.\r\n * - `odd: boolean`: True when the item has an odd index in the iterable.\r\n *\r\n * ```\r\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\r\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\r\n * </li>\r\n * ```\r\n *\r\n * ### Change Propagation\r\n *\r\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\r\n *\r\n * * When an item is added, a new instance of the template is added to the DOM.\r\n * * When an item is removed, its template instance is removed from the DOM.\r\n * * When items are reordered, their respective templates are reordered in the DOM.\r\n * * Otherwise, the DOM element for that item will remain the same.\r\n *\r\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\r\n * those changes in the DOM. This has important implications for animations and any stateful\r\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\r\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\r\n * such as user input.\r\n *\r\n * It is possible for the identities of elements in the iterator to change while the data does not.\r\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\r\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\r\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\r\n * elements were deleted and all new elements inserted). This is an expensive operation and should\r\n * be avoided if possible.\r\n *\r\n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\r\n * `trackBy` takes a function which has two arguments: `index` and `item`.\r\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\r\n *\r\n * ### Syntax\r\n *\r\n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\r\n *\r\n * With `<ng-template>` element:\r\n *\r\n * ```\r\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\r\n *   <li>...</li>\r\n * </ng-template>\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\r\n * example.\r\n *\r\n * \\@stable\r\n */\r\nclass NgForOf {\r\n    /**\r\n     * @param {?} _viewContainer\r\n     * @param {?} _template\r\n     * @param {?} _differs\r\n     */\r\n    constructor(_viewContainer, _template, _differs) {\r\n        this._viewContainer = _viewContainer;\r\n        this._template = _template;\r\n        this._differs = _differs;\r\n        this._differ = null;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    set ngForTrackBy(fn) {\r\n        if (isDevMode() && fn != null && typeof fn !== 'function') {\r\n            // TODO(vicb): use a log service once there is a public one available\r\n            if (/** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\r\n                console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\r\n                    `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\r\n            }\r\n        }\r\n        this._trackByFn = fn;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get ngForTrackBy() { return this._trackByFn; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set ngForTemplate(value) {\r\n        // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\r\n        // The current type is too restrictive; a template that just uses index, for example,\r\n        // should be acceptable.\r\n        if (value) {\r\n            this._template = value;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if ('ngForOf' in changes) {\r\n            // React on ngForOf changes only once all inputs have been initialized\r\n            const /** @type {?} */ value = changes['ngForOf'].currentValue;\r\n            if (!this._differ && value) {\r\n                try {\r\n                    this._differ = this._differs.find(value).create(this.ngForTrackBy);\r\n                }\r\n                catch (/** @type {?} */ e) {\r\n                    throw new Error(`Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngDoCheck() {\r\n        if (this._differ) {\r\n            const /** @type {?} */ changes = this._differ.diff(this.ngForOf);\r\n            if (changes)\r\n                this._applyChanges(changes);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    _applyChanges(changes) {\r\n        const /** @type {?} */ insertTuples = [];\r\n        changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\r\n            if (item.previousIndex == null) {\r\n                const /** @type {?} */ view = this._viewContainer.createEmbeddedView(this._template, new NgForOfContext(/** @type {?} */ ((null)), this.ngForOf, -1, -1), currentIndex);\r\n                const /** @type {?} */ tuple = new RecordViewTuple(item, view);\r\n                insertTuples.push(tuple);\r\n            }\r\n            else if (currentIndex == null) {\r\n                this._viewContainer.remove(adjustedPreviousIndex);\r\n            }\r\n            else {\r\n                const /** @type {?} */ view = /** @type {?} */ ((this._viewContainer.get(adjustedPreviousIndex)));\r\n                this._viewContainer.move(view, currentIndex);\r\n                const /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));\r\n                insertTuples.push(tuple);\r\n            }\r\n        });\r\n        for (let /** @type {?} */ i = 0; i < insertTuples.length; i++) {\r\n            this._perViewChange(insertTuples[i].view, insertTuples[i].record);\r\n        }\r\n        for (let /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {\r\n            const /** @type {?} */ viewRef = /** @type {?} */ (this._viewContainer.get(i));\r\n            viewRef.context.index = i;\r\n            viewRef.context.count = ilen;\r\n        }\r\n        changes.forEachIdentityChange((record) => {\r\n            const /** @type {?} */ viewRef = /** @type {?} */ (this._viewContainer.get(record.currentIndex));\r\n            viewRef.context.$implicit = record.item;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} view\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _perViewChange(view, record) {\r\n        view.context.$implicit = record.item;\r\n    }\r\n}\r\nNgForOf.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngFor][ngForOf]' },] },\r\n];\r\n/** @nocollapse */\r\nNgForOf.ctorParameters = () => [\r\n    { type: ViewContainerRef, },\r\n    { type: TemplateRef, },\r\n    { type: IterableDiffers, },\r\n];\r\nNgForOf.propDecorators = {\r\n    \"ngForOf\": [{ type: Input },],\r\n    \"ngForTrackBy\": [{ type: Input },],\r\n    \"ngForTemplate\": [{ type: Input },],\r\n};\r\nclass RecordViewTuple {\r\n    /**\r\n     * @param {?} record\r\n     * @param {?} view\r\n     */\r\n    constructor(record, view) {\r\n        this.record = record;\r\n        this.view = view;\r\n    }\r\n}\r\n/**\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction getTypeNameForDebugging(type) {\r\n    return type['name'] || typeof type;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Conditionally includes a template based on the value of an `expression`.\r\n *\r\n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\r\n * when expression is truthy or falsy respectively. Typically the:\r\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\r\n *  - `else` template is blank unless it is bound.\r\n *\r\n * ## Most common usage\r\n *\r\n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\r\n * seen in this example:\r\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\r\n *\r\n * ## Showing an alternative template using `else`\r\n *\r\n * If it is necessary to display a template when the `expression` is falsy use the `else` template\r\n * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\r\n * The template can be defined anywhere in the component view but is typically placed right after\r\n * `ngIf` for readability.\r\n *\r\n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\r\n *\r\n * ## Using non-inlined `then` template\r\n *\r\n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\r\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\r\n * change at runtime as shown in this example.\r\n *\r\n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\r\n *\r\n * ## Storing conditional result in a variable\r\n *\r\n * A common pattern is that we need to show a set of properties from the same object. If the\r\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\r\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\r\n * when using the `async` pipe as shown in following example:\r\n *\r\n * ```\r\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\r\n * ```\r\n *\r\n * There are several inefficiencies in the above example:\r\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\r\n *    example above.\r\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\r\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\r\n *  - We have to place the `async` pipe in parenthesis.\r\n *\r\n * A better way to do this is to use `ngIf` and store the result of the condition in a local\r\n * variable as shown in the the example below:\r\n *\r\n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\r\n *\r\n * Notice that:\r\n *  - We use only one `async` pipe and hence only one subscription gets created.\r\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\r\n *  - The local `user` can then be bound repeatedly in a more efficient way.\r\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\r\n *    display the data if `userStream` returns a value.\r\n *  - We can display an alternative template while waiting for the data.\r\n *\r\n * ### Syntax\r\n *\r\n * Simple form:\r\n * - `<div *ngIf=\"condition\">...</div>`\r\n * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\r\n *\r\n * Form with an else block:\r\n * ```\r\n * <div *ngIf=\"condition; else elseBlock\">...</div>\r\n * <ng-template #elseBlock>...</ng-template>\r\n * ```\r\n *\r\n * Form with a `then` and `else` block:\r\n * ```\r\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\r\n * <ng-template #thenBlock>...</ng-template>\r\n * <ng-template #elseBlock>...</ng-template>\r\n * ```\r\n *\r\n * Form with storing the value locally:\r\n * ```\r\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\r\n * <ng-template #elseBlock>...</ng-template>\r\n * ```\r\n *\r\n * \\@stable\r\n */\r\nclass NgIf {\r\n    /**\r\n     * @param {?} _viewContainer\r\n     * @param {?} templateRef\r\n     */\r\n    constructor(_viewContainer, templateRef) {\r\n        this._viewContainer = _viewContainer;\r\n        this._context = new NgIfContext();\r\n        this._thenTemplateRef = null;\r\n        this._elseTemplateRef = null;\r\n        this._thenViewRef = null;\r\n        this._elseViewRef = null;\r\n        this._thenTemplateRef = templateRef;\r\n    }\r\n    /**\r\n     * @param {?} condition\r\n     * @return {?}\r\n     */\r\n    set ngIf(condition) {\r\n        this._context.$implicit = this._context.ngIf = condition;\r\n        this._updateView();\r\n    }\r\n    /**\r\n     * @param {?} templateRef\r\n     * @return {?}\r\n     */\r\n    set ngIfThen(templateRef) {\r\n        this._thenTemplateRef = templateRef;\r\n        this._thenViewRef = null; // clear previous view if any.\r\n        this._updateView();\r\n    }\r\n    /**\r\n     * @param {?} templateRef\r\n     * @return {?}\r\n     */\r\n    set ngIfElse(templateRef) {\r\n        this._elseTemplateRef = templateRef;\r\n        this._elseViewRef = null; // clear previous view if any.\r\n        this._updateView();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _updateView() {\r\n        if (this._context.$implicit) {\r\n            if (!this._thenViewRef) {\r\n                this._viewContainer.clear();\r\n                this._elseViewRef = null;\r\n                if (this._thenTemplateRef) {\r\n                    this._thenViewRef =\r\n                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (!this._elseViewRef) {\r\n                this._viewContainer.clear();\r\n                this._thenViewRef = null;\r\n                if (this._elseTemplateRef) {\r\n                    this._elseViewRef =\r\n                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nNgIf.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngIf]' },] },\r\n];\r\n/** @nocollapse */\r\nNgIf.ctorParameters = () => [\r\n    { type: ViewContainerRef, },\r\n    { type: TemplateRef, },\r\n];\r\nNgIf.propDecorators = {\r\n    \"ngIf\": [{ type: Input },],\r\n    \"ngIfThen\": [{ type: Input },],\r\n    \"ngIfElse\": [{ type: Input },],\r\n};\r\n/**\r\n * \\@stable\r\n */\r\nclass NgIfContext {\r\n    constructor() {\r\n        this.$implicit = null;\r\n        this.ngIf = null;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass SwitchView {\r\n    /**\r\n     * @param {?} _viewContainerRef\r\n     * @param {?} _templateRef\r\n     */\r\n    constructor(_viewContainerRef, _templateRef) {\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._templateRef = _templateRef;\r\n        this._created = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    create() {\r\n        this._created = true;\r\n        this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        this._created = false;\r\n        this._viewContainerRef.clear();\r\n    }\r\n    /**\r\n     * @param {?} created\r\n     * @return {?}\r\n     */\r\n    enforceState(created) {\r\n        if (created && !this._created) {\r\n            this.create();\r\n        }\r\n        else if (!created && this._created) {\r\n            this.destroy();\r\n        }\r\n    }\r\n}\r\n/**\r\n * \\@ngModule CommonModule\r\n *\r\n * \\@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch\r\n *             expression.\r\n *\r\n * \\@howToUse\r\n * ```\r\n *     <container-element [ngSwitch]=\"switch_expression\">\r\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\r\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\r\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\r\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\r\n *         <!-- use a ng-container to group multiple root nodes -->\r\n *         <inner-element></inner-element>\r\n *         <inner-other-element></inner-other-element>\r\n *       </ng-container>\r\n *       <some-element *ngSwitchDefault>...</some-element>\r\n *     </container-element>\r\n * ```\r\n * \\@description\r\n *\r\n * `NgSwitch` stamps out nested views when their match expression value matches the value of the\r\n * switch expression.\r\n *\r\n * In other words:\r\n * - you define a container element (where you place the directive with a switch expression on the\r\n * `[ngSwitch]=\"...\"` attribute)\r\n * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view\r\n * root elements.\r\n *\r\n * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will\r\n * be preserved at the location.\r\n *\r\n * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the\r\n * expression is evaluated.\r\n * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is\r\n * stamped out.\r\n *\r\n * \\@stable\r\n */\r\nclass NgSwitch {\r\n    constructor() {\r\n        this._defaultUsed = false;\r\n        this._caseCount = 0;\r\n        this._lastCaseCheckIndex = 0;\r\n        this._lastCasesMatched = false;\r\n    }\r\n    /**\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    set ngSwitch(newValue) {\r\n        this._ngSwitch = newValue;\r\n        if (this._caseCount === 0) {\r\n            this._updateDefaultCases(true);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _addCase() { return this._caseCount++; }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} view\r\n     * @return {?}\r\n     */\r\n    _addDefault(view) {\r\n        if (!this._defaultViews) {\r\n            this._defaultViews = [];\r\n        }\r\n        this._defaultViews.push(view);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _matchCase(value) {\r\n        const /** @type {?} */ matched = value == this._ngSwitch;\r\n        this._lastCasesMatched = this._lastCasesMatched || matched;\r\n        this._lastCaseCheckIndex++;\r\n        if (this._lastCaseCheckIndex === this._caseCount) {\r\n            this._updateDefaultCases(!this._lastCasesMatched);\r\n            this._lastCaseCheckIndex = 0;\r\n            this._lastCasesMatched = false;\r\n        }\r\n        return matched;\r\n    }\r\n    /**\r\n     * @param {?} useDefault\r\n     * @return {?}\r\n     */\r\n    _updateDefaultCases(useDefault) {\r\n        if (this._defaultViews && useDefault !== this._defaultUsed) {\r\n            this._defaultUsed = useDefault;\r\n            for (let /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {\r\n                const /** @type {?} */ defaultView = this._defaultViews[i];\r\n                defaultView.enforceState(useDefault);\r\n            }\r\n        }\r\n    }\r\n}\r\nNgSwitch.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngSwitch]' },] },\r\n];\r\n/** @nocollapse */\r\nNgSwitch.ctorParameters = () => [];\r\nNgSwitch.propDecorators = {\r\n    \"ngSwitch\": [{ type: Input },],\r\n};\r\n/**\r\n * \\@ngModule CommonModule\r\n *\r\n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgSwitch} when the\r\n *             given expression evaluate to respectively the same/different value as the switch\r\n *             expression.\r\n *\r\n * \\@howToUse\r\n * ```\r\n * <container-element [ngSwitch]=\"switch_expression\">\r\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\r\n * </container-element>\r\n * ```\r\n * \\@description\r\n *\r\n * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch\r\n * expression.\r\n *\r\n * If multiple match expressions match the switch expression value, all of them are displayed.\r\n *\r\n * See {\\@link NgSwitch} for more details and example.\r\n *\r\n * \\@stable\r\n */\r\nclass NgSwitchCase {\r\n    /**\r\n     * @param {?} viewContainer\r\n     * @param {?} templateRef\r\n     * @param {?} ngSwitch\r\n     */\r\n    constructor(viewContainer, templateRef, ngSwitch) {\r\n        this.ngSwitch = ngSwitch;\r\n        ngSwitch._addCase();\r\n        this._view = new SwitchView(viewContainer, templateRef);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\r\n}\r\nNgSwitchCase.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngSwitchCase]' },] },\r\n];\r\n/** @nocollapse */\r\nNgSwitchCase.ctorParameters = () => [\r\n    { type: ViewContainerRef, },\r\n    { type: TemplateRef, },\r\n    { type: NgSwitch, decorators: [{ type: Host },] },\r\n];\r\nNgSwitchCase.propDecorators = {\r\n    \"ngSwitchCase\": [{ type: Input },],\r\n};\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Creates a view that is added to the parent {\\@link NgSwitch} when no case expressions\r\n * match the\r\n *             switch expression.\r\n *\r\n * \\@howToUse\r\n * ```\r\n * <container-element [ngSwitch]=\"switch_expression\">\r\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\r\n *   <some-other-element *ngSwitchDefault>...</some-other-element>\r\n * </container-element>\r\n * ```\r\n *\r\n * \\@description\r\n *\r\n * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch\r\n * expression.\r\n *\r\n * See {\\@link NgSwitch} for more details and example.\r\n *\r\n * \\@stable\r\n */\r\nclass NgSwitchDefault {\r\n    /**\r\n     * @param {?} viewContainer\r\n     * @param {?} templateRef\r\n     * @param {?} ngSwitch\r\n     */\r\n    constructor(viewContainer, templateRef, ngSwitch) {\r\n        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\r\n    }\r\n}\r\nNgSwitchDefault.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngSwitchDefault]' },] },\r\n];\r\n/** @nocollapse */\r\nNgSwitchDefault.ctorParameters = () => [\r\n    { type: ViewContainerRef, },\r\n    { type: TemplateRef, },\r\n    { type: NgSwitch, decorators: [{ type: Host },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@ngModule CommonModule\r\n *\r\n * \\@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\r\n *\r\n * \\@howToUse\r\n * ```\r\n * <some-element [ngPlural]=\"value\">\r\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\r\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\r\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\r\n * </some-element>\r\n * ```\r\n *\r\n * \\@description\r\n *\r\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\r\n * that match the switch expression's pluralization category.\r\n *\r\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\r\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\r\n * expression:\r\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\r\n *   matches the switch expression exactly,\r\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\r\n *   value matches aren't found and the value maps to its category for the defined locale.\r\n *\r\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\r\n *\r\n * \\@experimental\r\n */\r\nclass NgPlural {\r\n    /**\r\n     * @param {?} _localization\r\n     */\r\n    constructor(_localization) {\r\n        this._localization = _localization;\r\n        this._caseViews = {};\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set ngPlural(value) {\r\n        this._switchValue = value;\r\n        this._updateView();\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} switchView\r\n     * @return {?}\r\n     */\r\n    addCase(value, switchView) { this._caseViews[value] = switchView; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _updateView() {\r\n        this._clearViews();\r\n        const /** @type {?} */ cases = Object.keys(this._caseViews);\r\n        const /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);\r\n        this._activateView(this._caseViews[key]);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _clearViews() {\r\n        if (this._activeView)\r\n            this._activeView.destroy();\r\n    }\r\n    /**\r\n     * @param {?} view\r\n     * @return {?}\r\n     */\r\n    _activateView(view) {\r\n        if (view) {\r\n            this._activeView = view;\r\n            this._activeView.create();\r\n        }\r\n    }\r\n}\r\nNgPlural.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngPlural]' },] },\r\n];\r\n/** @nocollapse */\r\nNgPlural.ctorParameters = () => [\r\n    { type: NgLocalization, },\r\n];\r\nNgPlural.propDecorators = {\r\n    \"ngPlural\": [{ type: Input },],\r\n};\r\n/**\r\n * \\@ngModule CommonModule\r\n *\r\n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\r\n *             given expression matches the plural expression according to CLDR rules.\r\n *\r\n * \\@howToUse\r\n * ```\r\n * <some-element [ngPlural]=\"value\">\r\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\r\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\r\n * </some-element>\r\n * ```\r\n *\r\n * See {\\@link NgPlural} for more details and example.\r\n *\r\n * \\@experimental\r\n */\r\nclass NgPluralCase {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} template\r\n     * @param {?} viewContainer\r\n     * @param {?} ngPlural\r\n     */\r\n    constructor(value, template, viewContainer, ngPlural) {\r\n        this.value = value;\r\n        const /** @type {?} */ isANumber = !isNaN(Number(value));\r\n        ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\r\n    }\r\n}\r\nNgPluralCase.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngPluralCase]' },] },\r\n];\r\n/** @nocollapse */\r\nNgPluralCase.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase',] },] },\r\n    { type: TemplateRef, },\r\n    { type: ViewContainerRef, },\r\n    { type: NgPlural, decorators: [{ type: Host },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@ngModule CommonModule\r\n *\r\n * \\@whatItDoes Update an HTML element styles.\r\n *\r\n * \\@howToUse\r\n * ```\r\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\r\n *\r\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\r\n *\r\n * <some-element [ngStyle]=\"objExp\">...</some-element>\r\n * ```\r\n *\r\n * \\@description\r\n *\r\n * The styles are updated according to the value of the expression evaluation:\r\n * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\r\n * - values are the values assigned to those properties (expressed in the given unit).\r\n *\r\n * \\@stable\r\n */\r\nclass NgStyle {\r\n    /**\r\n     * @param {?} _differs\r\n     * @param {?} _ngEl\r\n     * @param {?} _renderer\r\n     */\r\n    constructor(_differs, _ngEl, _renderer) {\r\n        this._differs = _differs;\r\n        this._ngEl = _ngEl;\r\n        this._renderer = _renderer;\r\n    }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    set ngStyle(v) {\r\n        this._ngStyle = v;\r\n        if (!this._differ && v) {\r\n            this._differ = this._differs.find(v).create();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngDoCheck() {\r\n        if (this._differ) {\r\n            const /** @type {?} */ changes = this._differ.diff(this._ngStyle);\r\n            if (changes) {\r\n                this._applyChanges(changes);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    _applyChanges(changes) {\r\n        changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\r\n        changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\r\n        changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\r\n    }\r\n    /**\r\n     * @param {?} nameAndUnit\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _setStyle(nameAndUnit, value) {\r\n        const [name, unit] = nameAndUnit.split('.');\r\n        value = value != null && unit ? `${value}${unit}` : value;\r\n        this._renderer.setStyle(this._ngEl.nativeElement, name, /** @type {?} */ (value));\r\n    }\r\n}\r\nNgStyle.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngStyle]' },] },\r\n];\r\n/** @nocollapse */\r\nNgStyle.ctorParameters = () => [\r\n    { type: KeyValueDiffers, },\r\n    { type: ElementRef, },\r\n    { type: Renderer2, },\r\n];\r\nNgStyle.propDecorators = {\r\n    \"ngStyle\": [{ type: Input },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@ngModule CommonModule\r\n *\r\n * \\@whatItDoes Inserts an embedded view from a prepared `TemplateRef`\r\n *\r\n * \\@howToUse\r\n * ```\r\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\r\n * ```\r\n *\r\n * \\@description\r\n *\r\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\r\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\r\n * by the local template `let` declarations.\r\n *\r\n * Note: using the key `$implicit` in the context object will set it's value as default.\r\n *\r\n * ## Example\r\n *\r\n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\r\n *\r\n * \\@stable\r\n */\r\nclass NgTemplateOutlet {\r\n    /**\r\n     * @param {?} _viewContainerRef\r\n     */\r\n    constructor(_viewContainerRef) {\r\n        this._viewContainerRef = _viewContainerRef;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        const /** @type {?} */ recreateView = this._shouldRecreateView(changes);\r\n        if (recreateView) {\r\n            if (this._viewRef) {\r\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\r\n            }\r\n            if (this.ngTemplateOutlet) {\r\n                this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);\r\n            }\r\n        }\r\n        else {\r\n            if (this._viewRef && this.ngTemplateOutletContext) {\r\n                this._updateExistingContext(this.ngTemplateOutletContext);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * We need to re-create existing embedded view if:\r\n     * - templateRef has changed\r\n     * - context has changes\r\n     *\r\n     * We mark context object as changed when the corresponding object\r\n     * shape changes (new properties are added or existing properties are removed).\r\n     * In other words we consider context with the same properties as \"the same\" even\r\n     * if object reference changes (see https://github.com/angular/angular/issues/13407).\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    _shouldRecreateView(changes) {\r\n        const /** @type {?} */ ctxChange = changes['ngTemplateOutletContext'];\r\n        return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\r\n    }\r\n    /**\r\n     * @param {?} ctxChange\r\n     * @return {?}\r\n     */\r\n    _hasContextShapeChanged(ctxChange) {\r\n        const /** @type {?} */ prevCtxKeys = Object.keys(ctxChange.previousValue || {});\r\n        const /** @type {?} */ currCtxKeys = Object.keys(ctxChange.currentValue || {});\r\n        if (prevCtxKeys.length === currCtxKeys.length) {\r\n            for (let /** @type {?} */ propName of currCtxKeys) {\r\n                if (prevCtxKeys.indexOf(propName) === -1) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _updateExistingContext(ctx) {\r\n        for (let /** @type {?} */ propName of Object.keys(ctx)) {\r\n            (/** @type {?} */ (this._viewRef.context))[propName] = (/** @type {?} */ (this.ngTemplateOutletContext))[propName];\r\n        }\r\n    }\r\n}\r\nNgTemplateOutlet.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngTemplateOutlet]' },] },\r\n];\r\n/** @nocollapse */\r\nNgTemplateOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef, },\r\n];\r\nNgTemplateOutlet.propDecorators = {\r\n    \"ngTemplateOutletContext\": [{ type: Input },],\r\n    \"ngTemplateOutlet\": [{ type: Input },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A collection of Angular directives that are likely to be used in each and every Angular\r\n * application.\r\n */\r\nconst COMMON_DIRECTIVES = [\r\n    NgClass,\r\n    NgComponentOutlet,\r\n    NgForOf,\r\n    NgIf,\r\n    NgTemplateOutlet,\r\n    NgStyle,\r\n    NgSwitch,\r\n    NgSwitchCase,\r\n    NgSwitchDefault,\r\n    NgPlural,\r\n    NgPluralCase,\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst NAMED_FORMATS = {};\r\nconst DATE_FORMATS_SPLIT = /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\r\n/** @enum {number} */\r\nconst ZoneWidth = {\r\n    Short: 0,\r\n    ShortGMT: 1,\r\n    Long: 2,\r\n    Extended: 3,\r\n};\r\nZoneWidth[ZoneWidth.Short] = \"Short\";\r\nZoneWidth[ZoneWidth.ShortGMT] = \"ShortGMT\";\r\nZoneWidth[ZoneWidth.Long] = \"Long\";\r\nZoneWidth[ZoneWidth.Extended] = \"Extended\";\r\n/** @enum {number} */\r\nconst DateType = {\r\n    FullYear: 0,\r\n    Month: 1,\r\n    Date: 2,\r\n    Hours: 3,\r\n    Minutes: 4,\r\n    Seconds: 5,\r\n    Milliseconds: 6,\r\n    Day: 7,\r\n};\r\nDateType[DateType.FullYear] = \"FullYear\";\r\nDateType[DateType.Month] = \"Month\";\r\nDateType[DateType.Date] = \"Date\";\r\nDateType[DateType.Hours] = \"Hours\";\r\nDateType[DateType.Minutes] = \"Minutes\";\r\nDateType[DateType.Seconds] = \"Seconds\";\r\nDateType[DateType.Milliseconds] = \"Milliseconds\";\r\nDateType[DateType.Day] = \"Day\";\r\n/** @enum {number} */\r\nconst TranslationType = {\r\n    DayPeriods: 0,\r\n    Days: 1,\r\n    Months: 2,\r\n    Eras: 3,\r\n};\r\nTranslationType[TranslationType.DayPeriods] = \"DayPeriods\";\r\nTranslationType[TranslationType.Days] = \"Days\";\r\nTranslationType[TranslationType.Months] = \"Months\";\r\nTranslationType[TranslationType.Eras] = \"Eras\";\r\n/**\r\n * Transforms a date to a locale string based on a pattern and a timezone\r\n *\r\n * \\@internal\r\n * @param {?} date\r\n * @param {?} format\r\n * @param {?} locale\r\n * @param {?=} timezone\r\n * @return {?}\r\n */\r\nfunction formatDate(date, format, locale, timezone) {\r\n    const /** @type {?} */ namedFormat = getNamedFormat(locale, format);\r\n    format = namedFormat || format;\r\n    let /** @type {?} */ parts = [];\r\n    let /** @type {?} */ match;\r\n    while (format) {\r\n        match = DATE_FORMATS_SPLIT.exec(format);\r\n        if (match) {\r\n            parts = parts.concat(match.slice(1));\r\n            const /** @type {?} */ part = parts.pop();\r\n            if (!part) {\r\n                break;\r\n            }\r\n            format = part;\r\n        }\r\n        else {\r\n            parts.push(format);\r\n            break;\r\n        }\r\n    }\r\n    let /** @type {?} */ dateTimezoneOffset = date.getTimezoneOffset();\r\n    if (timezone) {\r\n        dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\r\n        date = convertTimezoneToLocal(date, timezone, true);\r\n    }\r\n    let /** @type {?} */ text = '';\r\n    parts.forEach(value => {\r\n        const /** @type {?} */ dateFormatter = getDateFormatter(value);\r\n        text += dateFormatter ?\r\n            dateFormatter(date, locale, dateTimezoneOffset) :\r\n            value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\r\n    });\r\n    return text;\r\n}\r\n/**\r\n * @param {?} locale\r\n * @param {?} format\r\n * @return {?}\r\n */\r\nfunction getNamedFormat(locale, format) {\r\n    const /** @type {?} */ localeId = getLocaleId(locale);\r\n    NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\r\n    if (NAMED_FORMATS[localeId][format]) {\r\n        return NAMED_FORMATS[localeId][format];\r\n    }\r\n    let /** @type {?} */ formatValue = '';\r\n    switch (format) {\r\n        case 'shortDate':\r\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\r\n            break;\r\n        case 'mediumDate':\r\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\r\n            break;\r\n        case 'longDate':\r\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\r\n            break;\r\n        case 'fullDate':\r\n            formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\r\n            break;\r\n        case 'shortTime':\r\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\r\n            break;\r\n        case 'mediumTime':\r\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\r\n            break;\r\n        case 'longTime':\r\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\r\n            break;\r\n        case 'fullTime':\r\n            formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\r\n            break;\r\n        case 'short':\r\n            const /** @type {?} */ shortTime = getNamedFormat(locale, 'shortTime');\r\n            const /** @type {?} */ shortDate = getNamedFormat(locale, 'shortDate');\r\n            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\r\n            break;\r\n        case 'medium':\r\n            const /** @type {?} */ mediumTime = getNamedFormat(locale, 'mediumTime');\r\n            const /** @type {?} */ mediumDate = getNamedFormat(locale, 'mediumDate');\r\n            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\r\n            break;\r\n        case 'long':\r\n            const /** @type {?} */ longTime = getNamedFormat(locale, 'longTime');\r\n            const /** @type {?} */ longDate = getNamedFormat(locale, 'longDate');\r\n            formatValue =\r\n                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\r\n            break;\r\n        case 'full':\r\n            const /** @type {?} */ fullTime = getNamedFormat(locale, 'fullTime');\r\n            const /** @type {?} */ fullDate = getNamedFormat(locale, 'fullDate');\r\n            formatValue =\r\n                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\r\n            break;\r\n    }\r\n    if (formatValue) {\r\n        NAMED_FORMATS[localeId][format] = formatValue;\r\n    }\r\n    return formatValue;\r\n}\r\n/**\r\n * @param {?} str\r\n * @param {?} opt_values\r\n * @return {?}\r\n */\r\nfunction formatDateTime(str, opt_values) {\r\n    if (opt_values) {\r\n        str = str.replace(/\\{([^}]+)}/g, function (match, key) {\r\n            return (opt_values != null && key in opt_values) ? opt_values[key] : match;\r\n        });\r\n    }\r\n    return str;\r\n}\r\n/**\r\n * @param {?} num\r\n * @param {?} digits\r\n * @param {?=} minusSign\r\n * @param {?=} trim\r\n * @param {?=} negWrap\r\n * @return {?}\r\n */\r\nfunction padNumber(num, digits, minusSign = '-', trim, negWrap) {\r\n    let /** @type {?} */ neg = '';\r\n    if (num < 0 || (negWrap && num <= 0)) {\r\n        if (negWrap) {\r\n            num = -num + 1;\r\n        }\r\n        else {\r\n            num = -num;\r\n            neg = minusSign;\r\n        }\r\n    }\r\n    let /** @type {?} */ strNum = '' + num;\r\n    while (strNum.length < digits)\r\n        strNum = '0' + strNum;\r\n    if (trim) {\r\n        strNum = strNum.substr(strNum.length - digits);\r\n    }\r\n    return neg + strNum;\r\n}\r\n/**\r\n * Returns a date formatter that transforms a date into its locale digit representation\r\n * @param {?} name\r\n * @param {?} size\r\n * @param {?=} offset\r\n * @param {?=} trim\r\n * @param {?=} negWrap\r\n * @return {?}\r\n */\r\nfunction dateGetter(name, size, offset = 0, trim = false, negWrap = false) {\r\n    return function (date, locale) {\r\n        let /** @type {?} */ part = getDatePart(name, date, size);\r\n        if (offset > 0 || part > -offset) {\r\n            part += offset;\r\n        }\r\n        if (name === DateType.Hours && part === 0 && offset === -12) {\r\n            part = 12;\r\n        }\r\n        return padNumber(part, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim, negWrap);\r\n    };\r\n}\r\n/**\r\n * @param {?} name\r\n * @param {?} date\r\n * @param {?} size\r\n * @return {?}\r\n */\r\nfunction getDatePart(name, date, size) {\r\n    switch (name) {\r\n        case DateType.FullYear:\r\n            return date.getFullYear();\r\n        case DateType.Month:\r\n            return date.getMonth();\r\n        case DateType.Date:\r\n            return date.getDate();\r\n        case DateType.Hours:\r\n            return date.getHours();\r\n        case DateType.Minutes:\r\n            return date.getMinutes();\r\n        case DateType.Seconds:\r\n            return date.getSeconds();\r\n        case DateType.Milliseconds:\r\n            const /** @type {?} */ div = size === 1 ? 100 : (size === 2 ? 10 : 1);\r\n            return Math.round(date.getMilliseconds() / div);\r\n        case DateType.Day:\r\n            return date.getDay();\r\n        default:\r\n            throw new Error(`Unknown DateType value \"${name}\".`);\r\n    }\r\n}\r\n/**\r\n * Returns a date formatter that transforms a date into its locale string representation\r\n * @param {?} name\r\n * @param {?} width\r\n * @param {?=} form\r\n * @param {?=} extended\r\n * @return {?}\r\n */\r\nfunction dateStrGetter(name, width, form = FormStyle.Format, extended = false) {\r\n    return function (date, locale) {\r\n        return getDateTranslation(date, locale, name, width, form, extended);\r\n    };\r\n}\r\n/**\r\n * Returns the locale translation of a date for a given form, type and width\r\n * @param {?} date\r\n * @param {?} locale\r\n * @param {?} name\r\n * @param {?} width\r\n * @param {?} form\r\n * @param {?} extended\r\n * @return {?}\r\n */\r\nfunction getDateTranslation(date, locale, name, width, form, extended) {\r\n    switch (name) {\r\n        case TranslationType.Months:\r\n            return getLocaleMonthNames(locale, form, width)[date.getMonth()];\r\n        case TranslationType.Days:\r\n            return getLocaleDayNames(locale, form, width)[date.getDay()];\r\n        case TranslationType.DayPeriods:\r\n            const /** @type {?} */ currentHours = date.getHours();\r\n            const /** @type {?} */ currentMinutes = date.getMinutes();\r\n            if (extended) {\r\n                const /** @type {?} */ rules = getLocaleExtraDayPeriodRules(locale);\r\n                const /** @type {?} */ dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\r\n                let /** @type {?} */ result;\r\n                rules.forEach((rule, index) => {\r\n                    if (Array.isArray(rule)) {\r\n                        // morning, afternoon, evening, night\r\n                        const { hours: hoursFrom, minutes: minutesFrom } = rule[0];\r\n                        const { hours: hoursTo, minutes: minutesTo } = rule[1];\r\n                        if (currentHours >= hoursFrom && currentMinutes >= minutesFrom &&\r\n                            (currentHours < hoursTo ||\r\n                                (currentHours === hoursTo && currentMinutes < minutesTo))) {\r\n                            result = dayPeriods[index];\r\n                        }\r\n                    }\r\n                    else {\r\n                        // noon or midnight\r\n                        const { hours, minutes } = rule;\r\n                        if (hours === currentHours && minutes === currentMinutes) {\r\n                            result = dayPeriods[index];\r\n                        }\r\n                    }\r\n                });\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n            // if no rules for the day periods, we use am/pm by default\r\n            return getLocaleDayPeriods(locale, form, /** @type {?} */ (width))[currentHours < 12 ? 0 : 1];\r\n        case TranslationType.Eras:\r\n            return getLocaleEraNames(locale, /** @type {?} */ (width))[date.getFullYear() <= 0 ? 0 : 1];\r\n        default:\r\n            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\r\n            // However Closure Compiler does not understand that and reports an error in typed mode.\r\n            // The `throw new Error` below works around the problem, and the unexpected: never variable\r\n            // makes sure tsc still checks this code is unreachable.\r\n            const /** @type {?} */ unexpected = name;\r\n            throw new Error(`unexpected translation type ${unexpected}`);\r\n    }\r\n}\r\n/**\r\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\r\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\r\n * extended = +04:30)\r\n * @param {?} width\r\n * @return {?}\r\n */\r\nfunction timeZoneGetter(width) {\r\n    return function (date, locale, offset) {\r\n        const /** @type {?} */ zone = -1 * offset;\r\n        const /** @type {?} */ minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\r\n        const /** @type {?} */ hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\r\n        switch (width) {\r\n            case ZoneWidth.Short:\r\n                return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\r\n                    padNumber(Math.abs(zone % 60), 2, minusSign);\r\n            case ZoneWidth.ShortGMT:\r\n                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\r\n            case ZoneWidth.Long:\r\n                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\r\n                    padNumber(Math.abs(zone % 60), 2, minusSign);\r\n            case ZoneWidth.Extended:\r\n                if (offset === 0) {\r\n                    return 'Z';\r\n                }\r\n                else {\r\n                    return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\r\n                        padNumber(Math.abs(zone % 60), 2, minusSign);\r\n                }\r\n            default:\r\n                throw new Error(`Unknown zone width \"${width}\"`);\r\n        }\r\n    };\r\n}\r\nconst JANUARY = 0;\r\nconst THURSDAY = 4;\r\n/**\r\n * @param {?} year\r\n * @return {?}\r\n */\r\nfunction getFirstThursdayOfYear(year) {\r\n    const /** @type {?} */ firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();\r\n    return new Date(year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\r\n}\r\n/**\r\n * @param {?} datetime\r\n * @return {?}\r\n */\r\nfunction getThursdayThisWeek(datetime) {\r\n    return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));\r\n}\r\n/**\r\n * @param {?} size\r\n * @param {?=} monthBased\r\n * @return {?}\r\n */\r\nfunction weekGetter(size, monthBased = false) {\r\n    return function (date, locale) {\r\n        let /** @type {?} */ result;\r\n        if (monthBased) {\r\n            const /** @type {?} */ nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\r\n            const /** @type {?} */ today = date.getDate();\r\n            result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\r\n        }\r\n        else {\r\n            const /** @type {?} */ firstThurs = getFirstThursdayOfYear(date.getFullYear());\r\n            const /** @type {?} */ thisThurs = getThursdayThisWeek(date);\r\n            const /** @type {?} */ diff = thisThurs.getTime() - firstThurs.getTime();\r\n            result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\r\n        }\r\n        return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\r\n    };\r\n}\r\nconst DATE_FORMATS = {};\r\n/**\r\n * @param {?} format\r\n * @return {?}\r\n */\r\nfunction getDateFormatter(format) {\r\n    if (DATE_FORMATS[format]) {\r\n        return DATE_FORMATS[format];\r\n    }\r\n    let /** @type {?} */ formatter;\r\n    switch (format) {\r\n        // Era name (AD/BC)\r\n        case 'G':\r\n        case 'GG':\r\n        case 'GGG':\r\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\r\n            break;\r\n        case 'GGGG':\r\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\r\n            break;\r\n        case 'GGGGG':\r\n            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\r\n            break;\r\n        // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\r\n        case 'y':\r\n            formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\r\n            break;\r\n        // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\r\n        case 'yy':\r\n            formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\r\n            break;\r\n        // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\r\n        case 'yyy':\r\n            formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\r\n            break;\r\n        // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\r\n        case 'yyyy':\r\n            formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\r\n            break;\r\n        // Month of the year (1-12), numeric\r\n        case 'M':\r\n        case 'L':\r\n            formatter = dateGetter(DateType.Month, 1, 1);\r\n            break;\r\n        case 'MM':\r\n        case 'LL':\r\n            formatter = dateGetter(DateType.Month, 2, 1);\r\n            break;\r\n        // Month of the year (January, ...), string, format\r\n        case 'MMM':\r\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\r\n            break;\r\n        case 'MMMM':\r\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\r\n            break;\r\n        case 'MMMMM':\r\n            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\r\n            break;\r\n        // Month of the year (January, ...), string, standalone\r\n        case 'LLL':\r\n            formatter =\r\n                dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\r\n            break;\r\n        case 'LLLL':\r\n            formatter =\r\n                dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\r\n            break;\r\n        case 'LLLLL':\r\n            formatter =\r\n                dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\r\n            break;\r\n        // Week of the year (1, ... 52)\r\n        case 'w':\r\n            formatter = weekGetter(1);\r\n            break;\r\n        case 'ww':\r\n            formatter = weekGetter(2);\r\n            break;\r\n        // Week of the month (1, ...)\r\n        case 'W':\r\n            formatter = weekGetter(1, true);\r\n            break;\r\n        // Day of the month (1-31)\r\n        case 'd':\r\n            formatter = dateGetter(DateType.Date, 1);\r\n            break;\r\n        case 'dd':\r\n            formatter = dateGetter(DateType.Date, 2);\r\n            break;\r\n        // Day of the Week\r\n        case 'E':\r\n        case 'EE':\r\n        case 'EEE':\r\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\r\n            break;\r\n        case 'EEEE':\r\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\r\n            break;\r\n        case 'EEEEE':\r\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\r\n            break;\r\n        case 'EEEEEE':\r\n            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\r\n            break;\r\n        // Generic period of the day (am-pm)\r\n        case 'a':\r\n        case 'aa':\r\n        case 'aaa':\r\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\r\n            break;\r\n        case 'aaaa':\r\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\r\n            break;\r\n        case 'aaaaa':\r\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\r\n            break;\r\n        // Extended period of the day (midnight, at night, ...), standalone\r\n        case 'b':\r\n        case 'bb':\r\n        case 'bbb':\r\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\r\n            break;\r\n        case 'bbbb':\r\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\r\n            break;\r\n        case 'bbbbb':\r\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\r\n            break;\r\n        // Extended period of the day (midnight, night, ...), standalone\r\n        case 'B':\r\n        case 'BB':\r\n        case 'BBB':\r\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\r\n            break;\r\n        case 'BBBB':\r\n            formatter =\r\n                dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\r\n            break;\r\n        case 'BBBBB':\r\n            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\r\n            break;\r\n        // Hour in AM/PM, (1-12)\r\n        case 'h':\r\n            formatter = dateGetter(DateType.Hours, 1, -12);\r\n            break;\r\n        case 'hh':\r\n            formatter = dateGetter(DateType.Hours, 2, -12);\r\n            break;\r\n        // Hour of the day (0-23)\r\n        case 'H':\r\n            formatter = dateGetter(DateType.Hours, 1);\r\n            break;\r\n        // Hour in day, padded (00-23)\r\n        case 'HH':\r\n            formatter = dateGetter(DateType.Hours, 2);\r\n            break;\r\n        // Minute of the hour (0-59)\r\n        case 'm':\r\n            formatter = dateGetter(DateType.Minutes, 1);\r\n            break;\r\n        case 'mm':\r\n            formatter = dateGetter(DateType.Minutes, 2);\r\n            break;\r\n        // Second of the minute (0-59)\r\n        case 's':\r\n            formatter = dateGetter(DateType.Seconds, 1);\r\n            break;\r\n        case 'ss':\r\n            formatter = dateGetter(DateType.Seconds, 2);\r\n            break;\r\n        // Fractional second padded (0-9)\r\n        case 'S':\r\n            formatter = dateGetter(DateType.Milliseconds, 1);\r\n            break;\r\n        case 'SS':\r\n            formatter = dateGetter(DateType.Milliseconds, 2);\r\n            break;\r\n        // = millisecond\r\n        case 'SSS':\r\n            formatter = dateGetter(DateType.Milliseconds, 3);\r\n            break;\r\n        // Timezone ISO8601 short format (-0430)\r\n        case 'Z':\r\n        case 'ZZ':\r\n        case 'ZZZ':\r\n            formatter = timeZoneGetter(ZoneWidth.Short);\r\n            break;\r\n        // Timezone ISO8601 extended format (-04:30)\r\n        case 'ZZZZZ':\r\n            formatter = timeZoneGetter(ZoneWidth.Extended);\r\n            break;\r\n        // Timezone GMT short format (GMT+4)\r\n        case 'O':\r\n        case 'OO':\r\n        case 'OOO':\r\n        // Should be location, but fallback to format O instead because we don't have the data yet\r\n        case 'z':\r\n        case 'zz':\r\n        case 'zzz':\r\n            formatter = timeZoneGetter(ZoneWidth.ShortGMT);\r\n            break;\r\n        // Timezone GMT long format (GMT+0430)\r\n        case 'OOOO':\r\n        case 'ZZZZ':\r\n        // Should be location, but fallback to format O instead because we don't have the data yet\r\n        case 'zzzz':\r\n            formatter = timeZoneGetter(ZoneWidth.Long);\r\n            break;\r\n        default:\r\n            return null;\r\n    }\r\n    DATE_FORMATS[format] = formatter;\r\n    return formatter;\r\n}\r\n/**\r\n * @param {?} timezone\r\n * @param {?} fallback\r\n * @return {?}\r\n */\r\nfunction timezoneToOffset(timezone, fallback) {\r\n    // Support: IE 9-11 only, Edge 13-15+\r\n    // IE/Edge do not \"understand\" colon (`:`) in timezone\r\n    timezone = timezone.replace(/:/g, '');\r\n    const /** @type {?} */ requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\r\n    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} minutes\r\n * @return {?}\r\n */\r\nfunction addDateMinutes(date, minutes) {\r\n    date = new Date(date.getTime());\r\n    date.setMinutes(date.getMinutes() + minutes);\r\n    return date;\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} timezone\r\n * @param {?} reverse\r\n * @return {?}\r\n */\r\nfunction convertTimezoneToLocal(date, timezone, reverse) {\r\n    const /** @type {?} */ reverseValue = reverse ? -1 : 1;\r\n    const /** @type {?} */ dateTimezoneOffset = date.getTimezoneOffset();\r\n    const /** @type {?} */ timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\r\n    return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} type\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction invalidPipeArgumentError(type, value) {\r\n    return Error(`InvalidPipeArgument: '${value}' for pipe '${ɵstringify(type)}'`);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst ISO8601_DATE_REGEX = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Formats a date according to locale rules.\r\n * \\@howToUse `date_expression | date[:format[:timezone[:locale]]]`\r\n * \\@description\r\n *\r\n * Where:\r\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\r\n * (https://www.w3.org/TR/NOTE-datetime).\r\n * - `format` indicates which date/time components to include. The format can be predefined as\r\n *   shown below (all examples are given for `en-US`) or custom as shown in the table.\r\n *   - `'short'`: equivalent to `'M/d/yy, h:mm a'` (e.g. `6/15/15, 9:03 AM`)\r\n *   - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (e.g. `Jun 15, 2015, 9:03:01 AM`)\r\n *   - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (e.g. `June 15, 2015 at 9:03:01 AM GMT+1`)\r\n *   - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (e.g. `Monday, June 15, 2015 at\r\n * 9:03:01 AM GMT+01:00`)\r\n *   - `'shortDate'`: equivalent to `'M/d/yy'` (e.g. `6/15/15`)\r\n *   - `'mediumDate'`: equivalent to `'MMM d, y'` (e.g. `Jun 15, 2015`)\r\n *   - `'longDate'`: equivalent to `'MMMM d, y'` (e.g. `June 15, 2015`)\r\n *   - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (e.g. `Monday, June 15, 2015`)\r\n *   - `'shortTime'`: equivalent to `'h:mm a'` (e.g. `9:03 AM`)\r\n *   - `'mediumTime'`: equivalent to `'h:mm:ss a'` (e.g. `9:03:01 AM`)\r\n *   - `'longTime'`: equivalent to `'h:mm:ss a z'` (e.g. `9:03:01 AM GMT+1`)\r\n *   - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (e.g. `9:03:01 AM GMT+01:00`)\r\n *  - `timezone` to be used for formatting. It understands UTC/GMT and the continental US time zone\r\n *  abbreviations, but for general use, use a time zone offset, for example,\r\n *  `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)\r\n *  If not specified, the local system timezone of the end-user's browser will be used.\r\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\r\n * default)\r\n *\r\n *\r\n *  | Field Type         | Format      | Description                                                   | Example Value                                              |\r\n *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\r\n *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |\r\n *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |\r\n *  |                    | GGGGG       | Narrow                                                        | A                                                          |\r\n *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\r\n *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\r\n *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\r\n *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\r\n *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |\r\n *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\r\n *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |\r\n *  |                    | MMMM        | Wide                                                          | September                                                  |\r\n *  |                    | MMMMM       | Narrow                                                        | S                                                          |\r\n *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |\r\n *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\r\n *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |\r\n *  |                    | LLLL        | Wide                                                          | September                                                  |\r\n *  |                    | LLLLL       | Narrow                                                        | S                                                          |\r\n *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |\r\n *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\r\n *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |\r\n *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |\r\n *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |\r\n *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\r\n *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |\r\n *  |                    | EEEEE       | Narrow                                                        | T                                                          |\r\n *  |                    | EEEEEE      | Short                                                         | Tu                                                         |\r\n *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\r\n *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\r\n *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |\r\n *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\r\n *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\r\n *  |                    | BBBBB       | Narrow                                                        | md                                                         |\r\n *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\r\n *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\r\n *  |                    | bbbbb       | Narrow                                                        | md                                                         |\r\n *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |\r\n *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\r\n *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |\r\n *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\r\n *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |\r\n *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\r\n *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |\r\n *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\r\n *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |\r\n *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\r\n *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\r\n *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\r\n *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\r\n *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\r\n *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\r\n *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\r\n *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\r\n *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\r\n *\r\n *\r\n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\r\n * applied and the formatted text will have the same day, month and year of the expression.\r\n *\r\n * WARNINGS:\r\n * - this pipe has only access to en-US locale data by default. If you want to localize the dates\r\n *   in another language, you will have to import data for other locales.\r\n *   See the {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import additional locale\r\n *   data.\r\n * - Fields suffixed with * are only available in the extra dataset.\r\n *   See the {\\@linkDocs guide/i18n#i18n-pipes \"I18n guide\"} to know how to import extra locale\r\n *   data.\r\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\r\n *   Instead users should treat the date as an immutable object and change the reference when the\r\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\r\n *   which would be an expensive operation).\r\n *\r\n * ### Examples\r\n *\r\n * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)\r\n * in the _local_ time and locale is 'en-US':\r\n *\r\n * {\\@example common/pipes/ts/date_pipe.ts region='DatePipe'}\r\n *\r\n * \\@stable\r\n */\r\nclass DatePipe {\r\n    /**\r\n     * @param {?} locale\r\n     */\r\n    constructor(locale) {\r\n        this.locale = locale;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} format\r\n     * @param {?=} timezone\r\n     * @param {?=} locale\r\n     * @return {?}\r\n     */\r\n    transform(value, format = 'mediumDate', timezone, locale) {\r\n        if (value == null || value === '' || value !== value)\r\n            return null;\r\n        if (typeof value === 'string') {\r\n            value = value.trim();\r\n        }\r\n        let /** @type {?} */ date;\r\n        if (isDate$1(value)) {\r\n            date = value;\r\n        }\r\n        else if (!isNaN(value - parseFloat(value))) {\r\n            date = new Date(parseFloat(value));\r\n        }\r\n        else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\r\n            /**\r\n             * For ISO Strings without time the day, month and year must be extracted from the ISO String\r\n             * before Date creation to avoid time offset and errors in the new Date.\r\n             * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\r\n             * date, some browsers (e.g. IE 9) will throw an invalid Date error\r\n             * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\r\n             * is applied\r\n             * Note: ISO months are 0 for January, 1 for February, ...\r\n             */\r\n            const [y, m, d] = value.split('-').map((val) => +val);\r\n            date = new Date(y, m - 1, d);\r\n        }\r\n        else {\r\n            date = new Date(value);\r\n        }\r\n        if (!isDate$1(date)) {\r\n            let /** @type {?} */ match;\r\n            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\r\n                date = isoStringToDate(match);\r\n            }\r\n            else {\r\n                throw invalidPipeArgumentError(DatePipe, value);\r\n            }\r\n        }\r\n        return formatDate(date, format, locale || this.locale, timezone);\r\n    }\r\n}\r\nDatePipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'date', pure: true },] },\r\n];\r\n/** @nocollapse */\r\nDatePipe.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\r\n];\r\n/**\r\n * \\@internal\r\n * @param {?} match\r\n * @return {?}\r\n */\r\nfunction isoStringToDate(match) {\r\n    const /** @type {?} */ date = new Date(0);\r\n    let /** @type {?} */ tzHour = 0;\r\n    let /** @type {?} */ tzMin = 0;\r\n    const /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\r\n    const /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;\r\n    if (match[9]) {\r\n        tzHour = +(match[9] + match[10]);\r\n        tzMin = +(match[9] + match[11]);\r\n    }\r\n    dateSetter.call(date, +(match[1]), +(match[2]) - 1, +(match[3]));\r\n    const /** @type {?} */ h = +(match[4] || '0') - tzHour;\r\n    const /** @type {?} */ m = +(match[5] || '0') - tzMin;\r\n    const /** @type {?} */ s = +(match[6] || '0');\r\n    const /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\r\n    timeSetter.call(date, h, m, s, ms);\r\n    return date;\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isDate$1(value) {\r\n    return value instanceof Date && !isNaN(value.valueOf());\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass NumberFormatter {\r\n    /**\r\n     * @param {?} num\r\n     * @param {?} locale\r\n     * @param {?} style\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    static format(num, locale, style, opts = {}) {\r\n        const { minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency, currencyAsSymbol = false } = opts;\r\n        const /** @type {?} */ options = {\r\n            minimumIntegerDigits,\r\n            minimumFractionDigits,\r\n            maximumFractionDigits,\r\n            style: NumberFormatStyle[style].toLowerCase()\r\n        };\r\n        if (style == NumberFormatStyle.Currency) {\r\n            options.currency = typeof currency == 'string' ? currency : undefined;\r\n            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\r\n        }\r\n        return new Intl.NumberFormat(locale, options).format(num);\r\n    }\r\n}\r\nconst DATE_FORMATS_SPLIT$1 = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\r\nconst PATTERN_ALIASES = {\r\n    // Keys are quoted so they do not get renamed during closure compilation.\r\n    'yMMMdjms': datePartGetterFactory(combine([\r\n        digitCondition('year', 1),\r\n        nameCondition('month', 3),\r\n        digitCondition('day', 1),\r\n        digitCondition('hour', 1),\r\n        digitCondition('minute', 1),\r\n        digitCondition('second', 1),\r\n    ])),\r\n    'yMdjm': datePartGetterFactory(combine([\r\n        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\r\n        digitCondition('hour', 1), digitCondition('minute', 1)\r\n    ])),\r\n    'yMMMMEEEEd': datePartGetterFactory(combine([\r\n        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\r\n        digitCondition('day', 1)\r\n    ])),\r\n    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\r\n    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\r\n    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\r\n    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\r\n    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\r\n};\r\nconst DATE_FORMATS$1 = {\r\n    // Keys are quoted so they do not get renamed.\r\n    'yyyy': datePartGetterFactory(digitCondition('year', 4)),\r\n    'yy': datePartGetterFactory(digitCondition('year', 2)),\r\n    'y': datePartGetterFactory(digitCondition('year', 1)),\r\n    'MMMM': datePartGetterFactory(nameCondition('month', 4)),\r\n    'MMM': datePartGetterFactory(nameCondition('month', 3)),\r\n    'MM': datePartGetterFactory(digitCondition('month', 2)),\r\n    'M': datePartGetterFactory(digitCondition('month', 1)),\r\n    'LLLL': datePartGetterFactory(nameCondition('month', 4)),\r\n    'L': datePartGetterFactory(nameCondition('month', 1)),\r\n    'dd': datePartGetterFactory(digitCondition('day', 2)),\r\n    'd': datePartGetterFactory(digitCondition('day', 1)),\r\n    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\r\n    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\r\n    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\r\n    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\r\n    'jj': datePartGetterFactory(digitCondition('hour', 2)),\r\n    'j': datePartGetterFactory(digitCondition('hour', 1)),\r\n    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\r\n    'm': datePartGetterFactory(digitCondition('minute', 1)),\r\n    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\r\n    's': datePartGetterFactory(digitCondition('second', 1)),\r\n    // while ISO 8601 requires fractions to be prefixed with `.` or `,`\r\n    // we can be just safely rely on using `sss` since we currently don't support single or two digit\r\n    // fractions\r\n    'sss': datePartGetterFactory(digitCondition('second', 3)),\r\n    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\r\n    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\r\n    'EE': datePartGetterFactory(nameCondition('weekday', 2)),\r\n    'E': datePartGetterFactory(nameCondition('weekday', 1)),\r\n    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\r\n    'Z': timeZoneGetter$1('short'),\r\n    'z': timeZoneGetter$1('long'),\r\n    'ww': datePartGetterFactory({}),\r\n    // Week of year, padded (00-53). Week 01 is the week with the\r\n    // first Thursday of the year. not support ?\r\n    'w': datePartGetterFactory({}),\r\n    // Week of year (0-53). Week 1 is the week with the first Thursday\r\n    // of the year not support ?\r\n    'G': datePartGetterFactory(nameCondition('era', 1)),\r\n    'GG': datePartGetterFactory(nameCondition('era', 2)),\r\n    'GGG': datePartGetterFactory(nameCondition('era', 3)),\r\n    'GGGG': datePartGetterFactory(nameCondition('era', 4))\r\n};\r\n/**\r\n * @param {?} inner\r\n * @return {?}\r\n */\r\nfunction digitModifier(inner) {\r\n    return function (date, locale) {\r\n        const /** @type {?} */ result = inner(date, locale);\r\n        return result.length == 1 ? '0' + result : result;\r\n    };\r\n}\r\n/**\r\n * @param {?} inner\r\n * @return {?}\r\n */\r\nfunction hourClockExtractor(inner) {\r\n    return function (date, locale) { return inner(date, locale).split(' ')[1]; };\r\n}\r\n/**\r\n * @param {?} inner\r\n * @return {?}\r\n */\r\nfunction hourExtractor(inner) {\r\n    return function (date, locale) { return inner(date, locale).split(' ')[0]; };\r\n}\r\n/**\r\n * @param {?} date\r\n * @param {?} locale\r\n * @param {?} options\r\n * @return {?}\r\n */\r\nfunction intlDateFormat(date, locale, options) {\r\n    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\r\n}\r\n/**\r\n * @param {?} timezone\r\n * @return {?}\r\n */\r\nfunction timeZoneGetter$1(timezone) {\r\n    // To workaround `Intl` API restriction for single timezone let format with 24 hours\r\n    const /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };\r\n    return function (date, locale) {\r\n        const /** @type {?} */ result = intlDateFormat(date, locale, options);\r\n        // Then extract first 3 letters that related to hours\r\n        return result ? result.substring(3) : '';\r\n    };\r\n}\r\n/**\r\n * @param {?} options\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction hour12Modify(options, value) {\r\n    options.hour12 = value;\r\n    return options;\r\n}\r\n/**\r\n * @param {?} prop\r\n * @param {?} len\r\n * @return {?}\r\n */\r\nfunction digitCondition(prop, len) {\r\n    const /** @type {?} */ result = {};\r\n    result[prop] = len === 2 ? '2-digit' : 'numeric';\r\n    return result;\r\n}\r\n/**\r\n * @param {?} prop\r\n * @param {?} len\r\n * @return {?}\r\n */\r\nfunction nameCondition(prop, len) {\r\n    const /** @type {?} */ result = {};\r\n    if (len < 4) {\r\n        result[prop] = len > 1 ? 'short' : 'narrow';\r\n    }\r\n    else {\r\n        result[prop] = 'long';\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param {?} options\r\n * @return {?}\r\n */\r\nfunction combine(options) {\r\n    return options.reduce((merged, opt) => (Object.assign({}, merged, opt)), {});\r\n}\r\n/**\r\n * @param {?} ret\r\n * @return {?}\r\n */\r\nfunction datePartGetterFactory(ret) {\r\n    return (date, locale) => intlDateFormat(date, locale, ret);\r\n}\r\nconst DATE_FORMATTER_CACHE = new Map();\r\n/**\r\n * @param {?} format\r\n * @param {?} date\r\n * @param {?} locale\r\n * @return {?}\r\n */\r\nfunction dateFormatter(format, date, locale) {\r\n    const /** @type {?} */ fn = PATTERN_ALIASES[format];\r\n    if (fn)\r\n        return fn(date, locale);\r\n    const /** @type {?} */ cacheKey = format;\r\n    let /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);\r\n    if (!parts) {\r\n        parts = [];\r\n        let /** @type {?} */ match;\r\n        DATE_FORMATS_SPLIT$1.exec(format);\r\n        let /** @type {?} */ _format = format;\r\n        while (_format) {\r\n            match = DATE_FORMATS_SPLIT$1.exec(_format);\r\n            if (match) {\r\n                parts = parts.concat(match.slice(1));\r\n                _format = /** @type {?} */ ((parts.pop()));\r\n            }\r\n            else {\r\n                parts.push(_format);\r\n                _format = null;\r\n            }\r\n        }\r\n        DATE_FORMATTER_CACHE.set(cacheKey, parts);\r\n    }\r\n    return parts.reduce((text, part) => {\r\n        const /** @type {?} */ fn = DATE_FORMATS$1[part];\r\n        return text + (fn ? fn(date, locale) : partToTime(part));\r\n    }, '');\r\n}\r\n/**\r\n * @param {?} part\r\n * @return {?}\r\n */\r\nfunction partToTime(part) {\r\n    return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\r\n}\r\nclass DateFormatter {\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} locale\r\n     * @param {?} pattern\r\n     * @return {?}\r\n     */\r\n    static format(date, locale, pattern) {\r\n        return dateFormatter(pattern, date, locale);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n* @license\r\n* Copyright Google Inc. All Rights Reserved.\r\n*\r\n* Use of this source code is governed by an MIT-style license that can be\r\n* found in the LICENSE file at https://angular.io/license\r\n  */\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Formats a date according to locale rules.\r\n * \\@howToUse `date_expression | date[:format]`\r\n * \\@description\r\n *\r\n * Where:\r\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\r\n * (https://www.w3.org/TR/NOTE-datetime).\r\n * - `format` indicates which date/time components to include. The format can be predefined as\r\n *   shown below or custom as shown in the table.\r\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\r\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\r\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\r\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\r\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\r\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\r\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\r\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\r\n *\r\n *\r\n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\r\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\r\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\r\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\r\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\r\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\r\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\r\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\r\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\r\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\r\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\r\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\r\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\r\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\r\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\r\n *\r\n * In javascript, only the components specified will be respected (not the ordering,\r\n * punctuations, ...) and details of the formatting will be dependent on the locale.\r\n *\r\n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\r\n *\r\n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\r\n * applied and the formatted text will have the same day, month and year of the expression.\r\n *\r\n * WARNINGS:\r\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\r\n *   Instead users should treat the date as an immutable object and change the reference when the\r\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\r\n *   which would be an expensive operation).\r\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\r\n *   browsers.\r\n *\r\n * ### Examples\r\n *\r\n * Assuming `dateObj` is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08)\r\n * in the _local_ time and locale is 'en-US':\r\n *\r\n * {\\@example common/pipes/ts/date_pipe.ts region='DeprecatedDatePipe'}\r\n *\r\n * \\@stable\r\n */\r\nclass DeprecatedDatePipe {\r\n    /**\r\n     * @param {?} _locale\r\n     */\r\n    constructor(_locale) {\r\n        this._locale = _locale;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} pattern\r\n     * @return {?}\r\n     */\r\n    transform(value, pattern = 'mediumDate') {\r\n        if (value == null || value === '' || value !== value)\r\n            return null;\r\n        let /** @type {?} */ date;\r\n        if (typeof value === 'string') {\r\n            value = value.trim();\r\n        }\r\n        if (isDate(value)) {\r\n            date = value;\r\n        }\r\n        else if (!isNaN(value - parseFloat(value))) {\r\n            date = new Date(parseFloat(value));\r\n        }\r\n        else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\r\n            /**\r\n             * For ISO Strings without time the day, month and year must be extracted from the ISO String\r\n             * before Date creation to avoid time offset and errors in the new Date.\r\n             * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\r\n             * date, some browsers (e.g. IE 9) will throw an invalid Date error\r\n             * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the\r\n             * timeoffset\r\n             * is applied\r\n             * Note: ISO months are 0 for January, 1 for February, ...\r\n             */\r\n            const [y, m, d] = value.split('-').map((val) => parseInt(val, 10));\r\n            date = new Date(y, m - 1, d);\r\n        }\r\n        else {\r\n            date = new Date(value);\r\n        }\r\n        if (!isDate(date)) {\r\n            let /** @type {?} */ match;\r\n            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\r\n                date = isoStringToDate(match);\r\n            }\r\n            else {\r\n                throw invalidPipeArgumentError(DeprecatedDatePipe, value);\r\n            }\r\n        }\r\n        return DateFormatter.format(date, this._locale, DeprecatedDatePipe._ALIASES[pattern] || pattern);\r\n    }\r\n}\r\n/**\r\n * \\@internal\r\n */\r\nDeprecatedDatePipe._ALIASES = {\r\n    'medium': 'yMMMdjms',\r\n    'short': 'yMdjm',\r\n    'fullDate': 'yMMMMEEEEd',\r\n    'longDate': 'yMMMMd',\r\n    'mediumDate': 'yMMMd',\r\n    'shortDate': 'yMd',\r\n    'mediumTime': 'jms',\r\n    'shortTime': 'jm'\r\n};\r\nDeprecatedDatePipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'date', pure: true },] },\r\n];\r\n/** @nocollapse */\r\nDeprecatedDatePipe.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\r\n];\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isDate(value) {\r\n    return value instanceof Date && !isNaN(value.valueOf());\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\r\nconst MAX_DIGITS = 22;\r\nconst DECIMAL_SEP = '.';\r\nconst ZERO_CHAR = '0';\r\nconst PATTERN_SEP = ';';\r\nconst GROUP_SEP = ',';\r\nconst DIGIT_CHAR = '#';\r\nconst CURRENCY_CHAR = '¤';\r\nconst PERCENT_CHAR = '%';\r\n/**\r\n * Transform a number to a locale string based on a style and a format\r\n *\r\n * \\@internal\r\n * @param {?} value\r\n * @param {?} locale\r\n * @param {?} style\r\n * @param {?=} digitsInfo\r\n * @param {?=} currency\r\n * @return {?}\r\n */\r\nfunction formatNumber$1(value, locale, style, digitsInfo, currency = null) {\r\n    const /** @type {?} */ res = { str: null };\r\n    const /** @type {?} */ format = getLocaleNumberFormat(locale, style);\r\n    let /** @type {?} */ num;\r\n    // Convert strings to numbers\r\n    if (typeof value === 'string' && !isNaN(+value - parseFloat(value))) {\r\n        num = +value;\r\n    }\r\n    else if (typeof value !== 'number') {\r\n        res.error = `${value} is not a number`;\r\n        return res;\r\n    }\r\n    else {\r\n        num = value;\r\n    }\r\n    const /** @type {?} */ pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\r\n    let /** @type {?} */ formattedText = '';\r\n    let /** @type {?} */ isZero = false;\r\n    if (!isFinite(num)) {\r\n        formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\r\n    }\r\n    else {\r\n        let /** @type {?} */ parsedNumber = parseNumber(num);\r\n        if (style === NumberFormatStyle.Percent) {\r\n            parsedNumber = toPercent(parsedNumber);\r\n        }\r\n        let /** @type {?} */ minInt = pattern.minInt;\r\n        let /** @type {?} */ minFraction = pattern.minFrac;\r\n        let /** @type {?} */ maxFraction = pattern.maxFrac;\r\n        if (digitsInfo) {\r\n            const /** @type {?} */ parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\r\n            if (parts === null) {\r\n                res.error = `${digitsInfo} is not a valid digit info`;\r\n                return res;\r\n            }\r\n            const /** @type {?} */ minIntPart = parts[1];\r\n            const /** @type {?} */ minFractionPart = parts[3];\r\n            const /** @type {?} */ maxFractionPart = parts[5];\r\n            if (minIntPart != null) {\r\n                minInt = parseIntAutoRadix(minIntPart);\r\n            }\r\n            if (minFractionPart != null) {\r\n                minFraction = parseIntAutoRadix(minFractionPart);\r\n            }\r\n            if (maxFractionPart != null) {\r\n                maxFraction = parseIntAutoRadix(maxFractionPart);\r\n            }\r\n            else if (minFractionPart != null && minFraction > maxFraction) {\r\n                maxFraction = minFraction;\r\n            }\r\n        }\r\n        roundNumber(parsedNumber, minFraction, maxFraction);\r\n        let /** @type {?} */ digits = parsedNumber.digits;\r\n        let /** @type {?} */ integerLen = parsedNumber.integerLen;\r\n        const /** @type {?} */ exponent = parsedNumber.exponent;\r\n        let /** @type {?} */ decimals = [];\r\n        isZero = digits.every(d => !d);\r\n        // pad zeros for small numbers\r\n        for (; integerLen < minInt; integerLen++) {\r\n            digits.unshift(0);\r\n        }\r\n        // pad zeros for small numbers\r\n        for (; integerLen < 0; integerLen++) {\r\n            digits.unshift(0);\r\n        }\r\n        // extract decimals digits\r\n        if (integerLen > 0) {\r\n            decimals = digits.splice(integerLen, digits.length);\r\n        }\r\n        else {\r\n            decimals = digits;\r\n            digits = [0];\r\n        }\r\n        // format the integer digits with grouping separators\r\n        const /** @type {?} */ groups = [];\r\n        if (digits.length >= pattern.lgSize) {\r\n            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\r\n        }\r\n        while (digits.length > pattern.gSize) {\r\n            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\r\n        }\r\n        if (digits.length) {\r\n            groups.unshift(digits.join(''));\r\n        }\r\n        const /** @type {?} */ groupSymbol = currency ? NumberSymbol.CurrencyGroup : NumberSymbol.Group;\r\n        formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\r\n        // append the decimal digits\r\n        if (decimals.length) {\r\n            const /** @type {?} */ decimalSymbol = currency ? NumberSymbol.CurrencyDecimal : NumberSymbol.Decimal;\r\n            formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\r\n        }\r\n        if (exponent) {\r\n            formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\r\n        }\r\n    }\r\n    if (num < 0 && !isZero) {\r\n        formattedText = pattern.negPre + formattedText + pattern.negSuf;\r\n    }\r\n    else {\r\n        formattedText = pattern.posPre + formattedText + pattern.posSuf;\r\n    }\r\n    if (style === NumberFormatStyle.Currency && currency !== null) {\r\n        res.str = formattedText\r\n            .replace(CURRENCY_CHAR, currency)\r\n            .replace(CURRENCY_CHAR, '');\r\n        return res;\r\n    }\r\n    if (style === NumberFormatStyle.Percent) {\r\n        res.str = formattedText.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));\r\n        return res;\r\n    }\r\n    res.str = formattedText;\r\n    return res;\r\n}\r\n/**\r\n * @param {?} format\r\n * @param {?=} minusSign\r\n * @return {?}\r\n */\r\nfunction parseNumberFormat(format, minusSign = '-') {\r\n    const /** @type {?} */ p = {\r\n        minInt: 1,\r\n        minFrac: 0,\r\n        maxFrac: 0,\r\n        posPre: '',\r\n        posSuf: '',\r\n        negPre: '',\r\n        negSuf: '',\r\n        gSize: 0,\r\n        lgSize: 0\r\n    };\r\n    const /** @type {?} */ patternParts = format.split(PATTERN_SEP);\r\n    const /** @type {?} */ positive = patternParts[0];\r\n    const /** @type {?} */ negative = patternParts[1];\r\n    const /** @type {?} */ positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?\r\n        positive.split(DECIMAL_SEP) :\r\n        [\r\n            positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),\r\n            positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)\r\n        ], /** @type {?} */\r\n    integer = positiveParts[0], /** @type {?} */ fraction = positiveParts[1] || '';\r\n    p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));\r\n    for (let /** @type {?} */ i = 0; i < fraction.length; i++) {\r\n        const /** @type {?} */ ch = fraction.charAt(i);\r\n        if (ch === ZERO_CHAR) {\r\n            p.minFrac = p.maxFrac = i + 1;\r\n        }\r\n        else if (ch === DIGIT_CHAR) {\r\n            p.maxFrac = i + 1;\r\n        }\r\n        else {\r\n            p.posSuf += ch;\r\n        }\r\n    }\r\n    const /** @type {?} */ groups = integer.split(GROUP_SEP);\r\n    p.gSize = groups[1] ? groups[1].length : 0;\r\n    p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;\r\n    if (negative) {\r\n        const /** @type {?} */ trunkLen = positive.length - p.posPre.length - p.posSuf.length, /** @type {?} */\r\n        pos = negative.indexOf(DIGIT_CHAR);\r\n        p.negPre = negative.substr(0, pos).replace(/'/g, '');\r\n        p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');\r\n    }\r\n    else {\r\n        p.negPre = minusSign + p.posPre;\r\n        p.negSuf = p.posSuf;\r\n    }\r\n    return p;\r\n}\r\n/**\r\n * @param {?} parsedNumber\r\n * @return {?}\r\n */\r\nfunction toPercent(parsedNumber) {\r\n    // if the number is 0, don't do anything\r\n    if (parsedNumber.digits[0] === 0) {\r\n        return parsedNumber;\r\n    }\r\n    // Getting the current number of decimals\r\n    const /** @type {?} */ fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;\r\n    if (parsedNumber.exponent) {\r\n        parsedNumber.exponent += 2;\r\n    }\r\n    else {\r\n        if (fractionLen === 0) {\r\n            parsedNumber.digits.push(0, 0);\r\n        }\r\n        else if (fractionLen === 1) {\r\n            parsedNumber.digits.push(0);\r\n        }\r\n        parsedNumber.integerLen += 2;\r\n    }\r\n    return parsedNumber;\r\n}\r\n/**\r\n * Parses a number.\r\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\r\n * @param {?} num\r\n * @return {?}\r\n */\r\nfunction parseNumber(num) {\r\n    let /** @type {?} */ numStr = Math.abs(num) + '';\r\n    let /** @type {?} */ exponent = 0, /** @type {?} */ digits, /** @type {?} */ integerLen;\r\n    let /** @type {?} */ i, /** @type {?} */ j, /** @type {?} */ zeros;\r\n    // Decimal point?\r\n    if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\r\n        numStr = numStr.replace(DECIMAL_SEP, '');\r\n    }\r\n    // Exponential form?\r\n    if ((i = numStr.search(/e/i)) > 0) {\r\n        // Work out the exponent.\r\n        if (integerLen < 0)\r\n            integerLen = i;\r\n        integerLen += +numStr.slice(i + 1);\r\n        numStr = numStr.substring(0, i);\r\n    }\r\n    else if (integerLen < 0) {\r\n        // There was no decimal point or exponent so it is an integer.\r\n        integerLen = numStr.length;\r\n    }\r\n    // Count the number of leading zeros.\r\n    for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {\r\n        /* empty */\r\n    }\r\n    if (i === (zeros = numStr.length)) {\r\n        // The digits are all zero.\r\n        digits = [0];\r\n        integerLen = 1;\r\n    }\r\n    else {\r\n        // Count the number of trailing zeros\r\n        zeros--;\r\n        while (numStr.charAt(zeros) === ZERO_CHAR)\r\n            zeros--;\r\n        // Trailing zeros are insignificant so ignore them\r\n        integerLen -= i;\r\n        digits = [];\r\n        // Convert string to array of digits without leading/trailing zeros.\r\n        for (j = 0; i <= zeros; i++, j++) {\r\n            digits[j] = +numStr.charAt(i);\r\n        }\r\n    }\r\n    // If the number overflows the maximum allowed digits then use an exponent.\r\n    if (integerLen > MAX_DIGITS) {\r\n        digits = digits.splice(0, MAX_DIGITS - 1);\r\n        exponent = integerLen - 1;\r\n        integerLen = 1;\r\n    }\r\n    return { digits, exponent, integerLen };\r\n}\r\n/**\r\n * Round the parsed number to the specified number of decimal places\r\n * This function changes the parsedNumber in-place\r\n * @param {?} parsedNumber\r\n * @param {?} minFrac\r\n * @param {?} maxFrac\r\n * @return {?}\r\n */\r\nfunction roundNumber(parsedNumber, minFrac, maxFrac) {\r\n    if (minFrac > maxFrac) {\r\n        throw new Error(`The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);\r\n    }\r\n    let /** @type {?} */ digits = parsedNumber.digits;\r\n    let /** @type {?} */ fractionLen = digits.length - parsedNumber.integerLen;\r\n    const /** @type {?} */ fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\r\n    // The index of the digit to where rounding is to occur\r\n    let /** @type {?} */ roundAt = fractionSize + parsedNumber.integerLen;\r\n    let /** @type {?} */ digit = digits[roundAt];\r\n    if (roundAt > 0) {\r\n        // Drop fractional digits beyond `roundAt`\r\n        digits.splice(Math.max(parsedNumber.integerLen, roundAt));\r\n        // Set non-fractional digits beyond `roundAt` to 0\r\n        for (let /** @type {?} */ j = roundAt; j < digits.length; j++) {\r\n            digits[j] = 0;\r\n        }\r\n    }\r\n    else {\r\n        // We rounded to zero so reset the parsedNumber\r\n        fractionLen = Math.max(0, fractionLen);\r\n        parsedNumber.integerLen = 1;\r\n        digits.length = Math.max(1, roundAt = fractionSize + 1);\r\n        digits[0] = 0;\r\n        for (let /** @type {?} */ i = 1; i < roundAt; i++)\r\n            digits[i] = 0;\r\n    }\r\n    if (digit >= 5) {\r\n        if (roundAt - 1 < 0) {\r\n            for (let /** @type {?} */ k = 0; k > roundAt; k--) {\r\n                digits.unshift(0);\r\n                parsedNumber.integerLen++;\r\n            }\r\n            digits.unshift(1);\r\n            parsedNumber.integerLen++;\r\n        }\r\n        else {\r\n            digits[roundAt - 1]++;\r\n        }\r\n    }\r\n    // Pad out with zeros to get the required fraction length\r\n    for (; fractionLen < Math.max(0, fractionSize); fractionLen++)\r\n        digits.push(0);\r\n    let /** @type {?} */ dropTrailingZeros = fractionSize !== 0;\r\n    // Minimal length = nb of decimals required + current nb of integers\r\n    // Any number besides that is optional and can be removed if it's a trailing 0\r\n    const /** @type {?} */ minLen = minFrac + parsedNumber.integerLen;\r\n    // Do any carrying, e.g. a digit was rounded up to 10\r\n    const /** @type {?} */ carry = digits.reduceRight(function (carry, d, i, digits) {\r\n        d = d + carry;\r\n        digits[i] = d < 10 ? d : d - 10; // d % 10\r\n        if (dropTrailingZeros) {\r\n            // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)\r\n            if (digits[i] === 0 && i >= minLen) {\r\n                digits.pop();\r\n            }\r\n            else {\r\n                dropTrailingZeros = false;\r\n            }\r\n        }\r\n        return d >= 10 ? 1 : 0; // Math.floor(d / 10);\r\n    }, 0);\r\n    if (carry) {\r\n        digits.unshift(carry);\r\n        parsedNumber.integerLen++;\r\n    }\r\n}\r\n/**\r\n * \\@internal\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction parseIntAutoRadix(text) {\r\n    const /** @type {?} */ result = parseInt(text);\r\n    if (isNaN(result)) {\r\n        throw new Error('Invalid integer literal when parsing ' + text);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} pipe\r\n * @param {?} locale\r\n * @param {?} value\r\n * @param {?} style\r\n * @param {?=} digits\r\n * @param {?=} currency\r\n * @param {?=} currencyAsSymbol\r\n * @return {?}\r\n */\r\nfunction formatNumber(pipe, locale, value, style, digits, currency = null, currencyAsSymbol = false) {\r\n    if (value == null)\r\n        return null;\r\n    // Convert strings to numbers\r\n    value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;\r\n    if (typeof value !== 'number') {\r\n        throw invalidPipeArgumentError(pipe, value);\r\n    }\r\n    let /** @type {?} */ minInt;\r\n    let /** @type {?} */ minFraction;\r\n    let /** @type {?} */ maxFraction;\r\n    if (style !== NumberFormatStyle.Currency) {\r\n        // rely on Intl default for currency\r\n        minInt = 1;\r\n        minFraction = 0;\r\n        maxFraction = 3;\r\n    }\r\n    if (digits) {\r\n        const /** @type {?} */ parts = digits.match(NUMBER_FORMAT_REGEXP);\r\n        if (parts === null) {\r\n            throw new Error(`${digits} is not a valid digit info for number pipes`);\r\n        }\r\n        if (parts[1] != null) {\r\n            // min integer digits\r\n            minInt = parseIntAutoRadix(parts[1]);\r\n        }\r\n        if (parts[3] != null) {\r\n            // min fraction digits\r\n            minFraction = parseIntAutoRadix(parts[3]);\r\n        }\r\n        if (parts[5] != null) {\r\n            // max fraction digits\r\n            maxFraction = parseIntAutoRadix(parts[5]);\r\n        }\r\n    }\r\n    return NumberFormatter.format(/** @type {?} */ (value), locale, style, {\r\n        minimumIntegerDigits: minInt,\r\n        minimumFractionDigits: minFraction,\r\n        maximumFractionDigits: maxFraction,\r\n        currency: currency,\r\n        currencyAsSymbol: currencyAsSymbol,\r\n    });\r\n}\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Formats a number according to locale rules.\r\n * \\@howToUse `number_expression | number[:digitInfo]`\r\n *\r\n * Formats a number as text. Group sizing and separator and other locale-specific\r\n * configurations are based on the active locale.\r\n *\r\n * where `expression` is a number:\r\n *  - `digitInfo` is a `string` which has a following format: <br>\r\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\r\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\r\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\r\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\r\n *\r\n * For more information on the acceptable range for each of these numbers and other\r\n * details see your native internationalization library.\r\n *\r\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\r\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}\r\n *\r\n * \\@stable\r\n */\r\nclass DeprecatedDecimalPipe {\r\n    /**\r\n     * @param {?} _locale\r\n     */\r\n    constructor(_locale) {\r\n        this._locale = _locale;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} digits\r\n     * @return {?}\r\n     */\r\n    transform(value, digits) {\r\n        return formatNumber(DeprecatedDecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\r\n    }\r\n}\r\nDeprecatedDecimalPipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'number' },] },\r\n];\r\n/** @nocollapse */\r\nDeprecatedDecimalPipe.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\r\n];\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\r\n * \\@howToUse `number_expression | percent[:digitInfo]`\r\n *\r\n * \\@description\r\n *\r\n * Formats a number as percentage.\r\n *\r\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\r\n *\r\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\r\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}\r\n *\r\n * \\@stable\r\n */\r\nclass DeprecatedPercentPipe {\r\n    /**\r\n     * @param {?} _locale\r\n     */\r\n    constructor(_locale) {\r\n        this._locale = _locale;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} digits\r\n     * @return {?}\r\n     */\r\n    transform(value, digits) {\r\n        return formatNumber(DeprecatedPercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\r\n    }\r\n}\r\nDeprecatedPercentPipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'percent' },] },\r\n];\r\n/** @nocollapse */\r\nDeprecatedPercentPipe.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\r\n];\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Formats a number as currency using locale rules.\r\n * \\@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`\r\n * \\@description\r\n *\r\n * Use `currency` to format a number as currency.\r\n *\r\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\r\n *    as `USD` for the US dollar and `EUR` for the euro.\r\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\r\n *   - `true`: use symbol (e.g. `$`).\r\n *   - `false`(default): use code (e.g. `USD`).\r\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\r\n *\r\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\r\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}\r\n *\r\n * \\@stable\r\n */\r\nclass DeprecatedCurrencyPipe {\r\n    /**\r\n     * @param {?} _locale\r\n     */\r\n    constructor(_locale) {\r\n        this._locale = _locale;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} currencyCode\r\n     * @param {?=} symbolDisplay\r\n     * @param {?=} digits\r\n     * @return {?}\r\n     */\r\n    transform(value, currencyCode = 'USD', symbolDisplay = false, digits) {\r\n        return formatNumber(DeprecatedCurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);\r\n    }\r\n}\r\nDeprecatedCurrencyPipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'currency' },] },\r\n];\r\n/** @nocollapse */\r\nDeprecatedCurrencyPipe.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A collection of deprecated i18n pipes that require intl api\r\n *\r\n * @deprecated from v5\r\n */\r\nconst COMMON_DEPRECATED_I18N_PIPES = [DeprecatedDecimalPipe, DeprecatedPercentPipe, DeprecatedCurrencyPipe, DeprecatedDatePipe];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass ObservableStrategy {\r\n    /**\r\n     * @param {?} async\r\n     * @param {?} updateLatestValue\r\n     * @return {?}\r\n     */\r\n    createSubscription(async, updateLatestValue) {\r\n        return async.subscribe({ next: updateLatestValue, error: (e) => { throw e; } });\r\n    }\r\n    /**\r\n     * @param {?} subscription\r\n     * @return {?}\r\n     */\r\n    dispose(subscription) { subscription.unsubscribe(); }\r\n    /**\r\n     * @param {?} subscription\r\n     * @return {?}\r\n     */\r\n    onDestroy(subscription) { subscription.unsubscribe(); }\r\n}\r\nclass PromiseStrategy {\r\n    /**\r\n     * @param {?} async\r\n     * @param {?} updateLatestValue\r\n     * @return {?}\r\n     */\r\n    createSubscription(async, updateLatestValue) {\r\n        return async.then(updateLatestValue, e => { throw e; });\r\n    }\r\n    /**\r\n     * @param {?} subscription\r\n     * @return {?}\r\n     */\r\n    dispose(subscription) { }\r\n    /**\r\n     * @param {?} subscription\r\n     * @return {?}\r\n     */\r\n    onDestroy(subscription) { }\r\n}\r\nconst _promiseStrategy = new PromiseStrategy();\r\nconst _observableStrategy = new ObservableStrategy();\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Unwraps a value from an asynchronous primitive.\r\n * \\@howToUse `observable_or_promise_expression | async`\r\n * \\@description\r\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\r\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\r\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\r\n * potential memory leaks.\r\n *\r\n *\r\n * ## Examples\r\n *\r\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\r\n * promise.\r\n *\r\n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\r\n *\r\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\r\n * to the view. The Observable continuously updates the view with the current time.\r\n *\r\n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\r\n *\r\n * \\@stable\r\n */\r\nclass AsyncPipe {\r\n    /**\r\n     * @param {?} _ref\r\n     */\r\n    constructor(_ref) {\r\n        this._ref = _ref;\r\n        this._latestValue = null;\r\n        this._latestReturnedValue = null;\r\n        this._subscription = null;\r\n        this._obj = null;\r\n        this._strategy = /** @type {?} */ ((null));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        if (this._subscription) {\r\n            this._dispose();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    transform(obj) {\r\n        if (!this._obj) {\r\n            if (obj) {\r\n                this._subscribe(obj);\r\n            }\r\n            this._latestReturnedValue = this._latestValue;\r\n            return this._latestValue;\r\n        }\r\n        if (obj !== this._obj) {\r\n            this._dispose();\r\n            return this.transform(/** @type {?} */ (obj));\r\n        }\r\n        if (this._latestValue === this._latestReturnedValue) {\r\n            return this._latestReturnedValue;\r\n        }\r\n        this._latestReturnedValue = this._latestValue;\r\n        return WrappedValue.wrap(this._latestValue);\r\n    }\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    _subscribe(obj) {\r\n        this._obj = obj;\r\n        this._strategy = this._selectStrategy(obj);\r\n        this._subscription = this._strategy.createSubscription(obj, (value) => this._updateLatestValue(obj, value));\r\n    }\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    _selectStrategy(obj) {\r\n        if (ɵisPromise(obj)) {\r\n            return _promiseStrategy;\r\n        }\r\n        if (ɵisObservable(obj)) {\r\n            return _observableStrategy;\r\n        }\r\n        throw invalidPipeArgumentError(AsyncPipe, obj);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _dispose() {\r\n        this._strategy.dispose(/** @type {?} */ ((this._subscription)));\r\n        this._latestValue = null;\r\n        this._latestReturnedValue = null;\r\n        this._subscription = null;\r\n        this._obj = null;\r\n    }\r\n    /**\r\n     * @param {?} async\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _updateLatestValue(async, value) {\r\n        if (async === this._obj) {\r\n            this._latestValue = value;\r\n            this._ref.markForCheck();\r\n        }\r\n    }\r\n}\r\nAsyncPipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'async', pure: false },] },\r\n];\r\n/** @nocollapse */\r\nAsyncPipe.ctorParameters = () => [\r\n    { type: ChangeDetectorRef, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Transforms text to lowercase.\r\n *\r\n * {\\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }\r\n *\r\n * \\@stable\r\n */\r\nclass LowerCasePipe {\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    transform(value) {\r\n        if (!value)\r\n            return value;\r\n        if (typeof value !== 'string') {\r\n            throw invalidPipeArgumentError(LowerCasePipe, value);\r\n        }\r\n        return value.toLowerCase();\r\n    }\r\n}\r\nLowerCasePipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'lowercase' },] },\r\n];\r\n/** @nocollapse */\r\nLowerCasePipe.ctorParameters = () => [];\r\n/**\r\n * Helper method to transform a single word to titlecase.\r\n *\r\n * \\@stable\r\n * @param {?} word\r\n * @return {?}\r\n */\r\nfunction titleCaseWord(word) {\r\n    if (!word)\r\n        return word;\r\n    return word[0].toUpperCase() + word.substr(1).toLowerCase();\r\n}\r\n/**\r\n * Transforms text to titlecase.\r\n *\r\n * \\@stable\r\n */\r\nclass TitleCasePipe {\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    transform(value) {\r\n        if (!value)\r\n            return value;\r\n        if (typeof value !== 'string') {\r\n            throw invalidPipeArgumentError(TitleCasePipe, value);\r\n        }\r\n        return value.split(/\\b/g).map(word => titleCaseWord(word)).join('');\r\n    }\r\n}\r\nTitleCasePipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'titlecase' },] },\r\n];\r\n/** @nocollapse */\r\nTitleCasePipe.ctorParameters = () => [];\r\n/**\r\n * Transforms text to uppercase.\r\n *\r\n * \\@stable\r\n */\r\nclass UpperCasePipe {\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    transform(value) {\r\n        if (!value)\r\n            return value;\r\n        if (typeof value !== 'string') {\r\n            throw invalidPipeArgumentError(UpperCasePipe, value);\r\n        }\r\n        return value.toUpperCase();\r\n    }\r\n}\r\nUpperCasePipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'uppercase' },] },\r\n];\r\n/** @nocollapse */\r\nUpperCasePipe.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _INTERPOLATION_REGEXP = /#/g;\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.\r\n * \\@howToUse `expression | i18nPlural:mapping[:locale]`\r\n * \\@description\r\n *\r\n *  Where:\r\n *  - `expression` is a number.\r\n *  - `mapping` is an object that mimics the ICU format, see\r\n *    http://userguide.icu-project.org/formatparse/messages\r\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\r\n * default)\r\n *\r\n *  ## Example\r\n *\r\n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\r\n *\r\n * \\@experimental\r\n */\r\nclass I18nPluralPipe {\r\n    /**\r\n     * @param {?} _localization\r\n     */\r\n    constructor(_localization) {\r\n        this._localization = _localization;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} pluralMap\r\n     * @param {?=} locale\r\n     * @return {?}\r\n     */\r\n    transform(value, pluralMap, locale) {\r\n        if (value == null)\r\n            return '';\r\n        if (typeof pluralMap !== 'object' || pluralMap === null) {\r\n            throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\r\n        }\r\n        const /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\r\n        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\r\n    }\r\n}\r\nI18nPluralPipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'i18nPlural', pure: true },] },\r\n];\r\n/** @nocollapse */\r\nI18nPluralPipe.ctorParameters = () => [\r\n    { type: NgLocalization, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Generic selector that displays the string that matches the current value.\r\n * \\@howToUse `expression | i18nSelect:mapping`\r\n * \\@description\r\n *\r\n *  Where `mapping` is an object that indicates the text that should be displayed\r\n *  for different values of the provided `expression`.\r\n *  If none of the keys of the mapping match the value of the `expression`, then the content\r\n *  of the `other` key is returned when present, otherwise an empty string is returned.\r\n *\r\n *  ## Example\r\n *\r\n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\r\n *\r\n *  \\@experimental\r\n */\r\nclass I18nSelectPipe {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} mapping\r\n     * @return {?}\r\n     */\r\n    transform(value, mapping) {\r\n        if (value == null)\r\n            return '';\r\n        if (typeof mapping !== 'object' || typeof value !== 'string') {\r\n            throw invalidPipeArgumentError(I18nSelectPipe, mapping);\r\n        }\r\n        if (mapping.hasOwnProperty(value)) {\r\n            return mapping[value];\r\n        }\r\n        if (mapping.hasOwnProperty('other')) {\r\n            return mapping['other'];\r\n        }\r\n        return '';\r\n    }\r\n}\r\nI18nSelectPipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'i18nSelect', pure: true },] },\r\n];\r\n/** @nocollapse */\r\nI18nSelectPipe.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Converts value into JSON string.\r\n * \\@howToUse `expression | json`\r\n * \\@description\r\n *\r\n * Converts value into string using `JSON.stringify`. Useful for debugging.\r\n *\r\n * ### Example\r\n * {\\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\r\n *\r\n * \\@stable\r\n */\r\nclass JsonPipe {\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    transform(value) { return JSON.stringify(value, null, 2); }\r\n}\r\nJsonPipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'json', pure: false },] },\r\n];\r\n/** @nocollapse */\r\nJsonPipe.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Formats a number according to locale rules.\r\n * \\@howToUse `number_expression | number[:digitInfo[:locale]]`\r\n *\r\n * Formats a number as text. Group sizing and separator and other locale-specific\r\n * configurations are based on the active locale.\r\n *\r\n * where `expression` is a number:\r\n *  - `digitInfo` is a `string` which has a following format: <br>\r\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\r\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\r\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\r\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\r\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\r\n * default)\r\n *\r\n * For more information on the acceptable range for each of these numbers and other\r\n * details see your native internationalization library.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\r\n *\r\n * \\@stable\r\n */\r\nclass DecimalPipe {\r\n    /**\r\n     * @param {?} _locale\r\n     */\r\n    constructor(_locale) {\r\n        this._locale = _locale;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} digits\r\n     * @param {?=} locale\r\n     * @return {?}\r\n     */\r\n    transform(value, digits, locale) {\r\n        if (isEmpty(value))\r\n            return null;\r\n        locale = locale || this._locale;\r\n        const { str, error } = formatNumber$1(value, locale, NumberFormatStyle.Decimal, digits);\r\n        if (error) {\r\n            throw invalidPipeArgumentError(DecimalPipe, error);\r\n        }\r\n        return str;\r\n    }\r\n}\r\nDecimalPipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'number' },] },\r\n];\r\n/** @nocollapse */\r\nDecimalPipe.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\r\n];\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\r\n * \\@howToUse `number_expression | percent[:digitInfo[:locale]]`\r\n *\r\n * \\@description\r\n *\r\n * Formats a number as percentage.\r\n *\r\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\r\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\r\n * default)\r\n *\r\n * ### Example\r\n *\r\n * {\\@example common/pipes/ts/percent_pipe.ts region='PercentPipe'}\r\n *\r\n * \\@stable\r\n */\r\nclass PercentPipe {\r\n    /**\r\n     * @param {?} _locale\r\n     */\r\n    constructor(_locale) {\r\n        this._locale = _locale;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} digits\r\n     * @param {?=} locale\r\n     * @return {?}\r\n     */\r\n    transform(value, digits, locale) {\r\n        if (isEmpty(value))\r\n            return null;\r\n        locale = locale || this._locale;\r\n        const { str, error } = formatNumber$1(value, locale, NumberFormatStyle.Percent, digits);\r\n        if (error) {\r\n            throw invalidPipeArgumentError(PercentPipe, error);\r\n        }\r\n        return str;\r\n    }\r\n}\r\nPercentPipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'percent' },] },\r\n];\r\n/** @nocollapse */\r\nPercentPipe.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\r\n];\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Formats a number as currency using locale rules.\r\n * \\@howToUse `number_expression | currency[:currencyCode[:display[:digitInfo[:locale]]]]`\r\n * \\@description\r\n *\r\n * Use `currency` to format a number as currency.\r\n *\r\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\r\n *    as `USD` for the US dollar and `EUR` for the euro.\r\n * - `display` indicates whether to show the currency symbol or the code.\r\n *   - `code`: use code (e.g. `USD`).\r\n *   - `symbol`(default): use symbol (e.g. `$`).\r\n *   - `symbol-narrow`: some countries have two symbols for their currency, one regular and one\r\n *   narrow (e.g. the canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`).\r\n *   - boolean (deprecated from v5): `true` for symbol and false for `code`\r\n *   If there is no narrow symbol for the chosen currency, the regular symbol will be used.\r\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\r\n *  - `locale` is a `string` defining the locale to use (uses the current {\\@link LOCALE_ID} by\r\n * default)\r\n *\r\n * ### Example\r\n *\r\n * {\\@example common/pipes/ts/currency_pipe.ts region='CurrencyPipe'}\r\n *\r\n * \\@stable\r\n */\r\nclass CurrencyPipe {\r\n    /**\r\n     * @param {?} _locale\r\n     */\r\n    constructor(_locale) {\r\n        this._locale = _locale;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} currencyCode\r\n     * @param {?=} display\r\n     * @param {?=} digits\r\n     * @param {?=} locale\r\n     * @return {?}\r\n     */\r\n    transform(value, currencyCode, display = 'symbol', digits, locale) {\r\n        if (isEmpty(value))\r\n            return null;\r\n        locale = locale || this._locale;\r\n        if (typeof display === 'boolean') {\r\n            if (/** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\r\n                console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\r\n            }\r\n            display = display ? 'symbol' : 'code';\r\n        }\r\n        let /** @type {?} */ currency = currencyCode || 'USD';\r\n        if (display !== 'code') {\r\n            currency = findCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow');\r\n        }\r\n        const { str, error } = formatNumber$1(value, locale, NumberFormatStyle.Currency, digits, currency);\r\n        if (error) {\r\n            throw invalidPipeArgumentError(CurrencyPipe, error);\r\n        }\r\n        return str;\r\n    }\r\n}\r\nCurrencyPipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'currency' },] },\r\n];\r\n/** @nocollapse */\r\nCurrencyPipe.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },\r\n];\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isEmpty(value) {\r\n    return value == null || value === '' || value !== value;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@ngModule CommonModule\r\n * \\@whatItDoes Creates a new List or String containing a subset (slice) of the elements.\r\n * \\@howToUse `array_or_string_expression | slice:start[:end]`\r\n * \\@description\r\n *\r\n * Where the input expression is a `List` or `String`, and:\r\n * - `start`: The starting index of the subset to return.\r\n *   - **a positive integer**: return the item at `start` index and all items after\r\n *     in the list or string expression.\r\n *   - **a negative integer**: return the item at `start` index from the end and all items after\r\n *     in the list or string expression.\r\n *   - **if positive and greater than the size of the expression**: return an empty list or string.\r\n *   - **if negative and greater than the size of the expression**: return entire list or string.\r\n * - `end`: The ending index of the subset to return.\r\n *   - **omitted**: return all items until the end.\r\n *   - **if positive**: return all items before `end` index of the list or string.\r\n *   - **if negative**: return all items before `end` index from the end of the list or string.\r\n *\r\n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\r\n * and `String.prototype.slice()`.\r\n *\r\n * When operating on a [List], the returned list is always a copy even when all\r\n * the elements are being returned.\r\n *\r\n * When operating on a blank value, the pipe returns the blank value.\r\n *\r\n * ## List Example\r\n *\r\n * This `ngFor` example:\r\n *\r\n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\r\n *\r\n * produces the following:\r\n *\r\n *     <li>b</li>\r\n *     <li>c</li>\r\n *\r\n * ## String Examples\r\n *\r\n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\r\n *\r\n * \\@stable\r\n */\r\nclass SlicePipe {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} start\r\n     * @param {?=} end\r\n     * @return {?}\r\n     */\r\n    transform(value, start, end) {\r\n        if (value == null)\r\n            return value;\r\n        if (!this.supports(value)) {\r\n            throw invalidPipeArgumentError(SlicePipe, value);\r\n        }\r\n        return value.slice(start, end);\r\n    }\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    supports(obj) { return typeof obj === 'string' || Array.isArray(obj); }\r\n}\r\nSlicePipe.decorators = [\r\n    { type: Pipe, args: [{ name: 'slice', pure: false },] },\r\n];\r\n/** @nocollapse */\r\nSlicePipe.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * This module provides a set of common Pipes.\r\n */\r\n/**\r\n * A collection of Angular pipes that are likely to be used in each and every application.\r\n */\r\nconst COMMON_PIPES = [\r\n    AsyncPipe,\r\n    UpperCasePipe,\r\n    LowerCasePipe,\r\n    JsonPipe,\r\n    SlicePipe,\r\n    DecimalPipe,\r\n    PercentPipe,\r\n    TitleCasePipe,\r\n    CurrencyPipe,\r\n    DatePipe,\r\n    I18nPluralPipe,\r\n    I18nSelectPipe,\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The module that includes all the basic Angular directives like {\\@link NgIf}, {\\@link NgForOf}, ...\r\n *\r\n * \\@stable\r\n */\r\nclass CommonModule {\r\n}\r\nCommonModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\r\n                exports: [COMMON_DIRECTIVES, COMMON_PIPES],\r\n                providers: [\r\n                    { provide: NgLocalization, useClass: NgLocaleLocalization },\r\n                ],\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nCommonModule.ctorParameters = () => [];\r\nconst ɵ0 = getPluralCase;\r\n/**\r\n * A module that contains the deprecated i18n pipes.\r\n *\r\n * @deprecated from v5\r\n */\r\nclass DeprecatedI18NPipesModule {\r\n}\r\nDeprecatedI18NPipesModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [COMMON_DEPRECATED_I18N_PIPES],\r\n                exports: [COMMON_DEPRECATED_I18N_PIPES],\r\n                providers: [{ provide: DEPRECATED_PLURAL_FN, useValue: ɵ0 }],\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nDeprecatedI18NPipesModule.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\r\n *\r\n * Note: Document might not be available in the Application Context when Application and Rendering\r\n * Contexts are not the same (e.g. when running the application into a Web Worker).\r\n *\r\n * \\@stable\r\n */\r\nconst DOCUMENT = new InjectionToken('DocumentToken');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst PLATFORM_BROWSER_ID = 'browser';\r\nconst PLATFORM_SERVER_ID = 'server';\r\nconst PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\r\nconst PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\r\n/**\r\n * Returns whether a platform id represents a browser platform.\r\n * \\@experimental\r\n * @param {?} platformId\r\n * @return {?}\r\n */\r\nfunction isPlatformBrowser(platformId) {\r\n    return platformId === PLATFORM_BROWSER_ID;\r\n}\r\n/**\r\n * Returns whether a platform id represents a server platform.\r\n * \\@experimental\r\n * @param {?} platformId\r\n * @return {?}\r\n */\r\nfunction isPlatformServer(platformId) {\r\n    return platformId === PLATFORM_SERVER_ID;\r\n}\r\n/**\r\n * Returns whether a platform id represents a web worker app platform.\r\n * \\@experimental\r\n * @param {?} platformId\r\n * @return {?}\r\n */\r\nfunction isPlatformWorkerApp(platformId) {\r\n    return platformId === PLATFORM_WORKER_APP_ID;\r\n}\r\n/**\r\n * Returns whether a platform id represents a web worker UI platform.\r\n * \\@experimental\r\n * @param {?} platformId\r\n * @return {?}\r\n */\r\nfunction isPlatformWorkerUi(platformId) {\r\n    return platformId === PLATFORM_WORKER_UI_ID;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of the common package.\r\n */\r\n/**\r\n * \\@stable\r\n */\r\nconst VERSION = new Version('5.1.3');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of the common package.\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\r\n\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { NgLocaleLocalization, NgLocalization, registerLocaleData, Plural, NumberFormatStyle, FormStyle, TranslationWidth, FormatWidth, NumberSymbol, WeekDay, getLocaleDayPeriods, getLocaleDayNames, getLocaleMonthNames, getLocaleId, getLocaleEraNames, getLocaleWeekEndRange, getLocaleFirstDayOfWeek, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocalePluralCase, getLocaleTimeFormat, getLocaleNumberSymbol, getLocaleNumberFormat, getLocaleCurrencyName, getLocaleCurrencySymbol, CURRENCIES, parseCookieValue as ɵparseCookieValue, CommonModule, DeprecatedI18NPipesModule, NgClass, NgForOf, NgForOfContext, NgIf, NgIfContext, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NgComponentOutlet, DOCUMENT, AsyncPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, JsonPipe, LowerCasePipe, CurrencyPipe, DecimalPipe, PercentPipe, SlicePipe, UpperCasePipe, TitleCasePipe, DeprecatedDatePipe, DeprecatedCurrencyPipe, DeprecatedDecimalPipe, DeprecatedPercentPipe, PLATFORM_BROWSER_ID as ɵPLATFORM_BROWSER_ID, PLATFORM_SERVER_ID as ɵPLATFORM_SERVER_ID, PLATFORM_WORKER_APP_ID as ɵPLATFORM_WORKER_APP_ID, PLATFORM_WORKER_UI_ID as ɵPLATFORM_WORKER_UI_ID, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi, VERSION, PlatformLocation, LOCATION_INITIALIZED, LocationStrategy, APP_BASE_HREF, HashLocationStrategy, PathLocationStrategy, Location, COMMON_DIRECTIVES as ɵe, findLocaleData as ɵd, DEPRECATED_PLURAL_FN as ɵa, getPluralCase as ɵb, COMMON_DEPRECATED_I18N_PIPES as ɵg, COMMON_PIPES as ɵf };\r\n//# sourceMappingURL=common.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/common/esm2015/common.js\n// module id = ../../../common/esm2015/common.js\n// module chunks = vendor","/**\r\n * @license Angular v5.1.3\r\n * (c) 2010-2017 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\nimport { Inject, Injectable, InjectionToken, NgModule, Optional, PLATFORM_ID } from '@angular/core';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { concatMap } from 'rxjs/operator/concatMap';\r\nimport { filter } from 'rxjs/operator/filter';\r\nimport { map } from 'rxjs/operator/map';\r\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass HttpHandler {\r\n}\r\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass HttpBackend {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n/**\r\n * Immutable set of Http headers, with lazy parsing.\r\n * \\@stable\r\n */\r\nclass HttpHeaders {\r\n    /**\r\n     * @param {?=} headers\r\n     */\r\n    constructor(headers) {\r\n        /**\r\n         * Internal map of lowercased header names to the normalized\r\n         * form of the name (the form seen first).\r\n         */\r\n        this.normalizedNames = new Map();\r\n        /**\r\n         * Queued updates to be materialized the next initialization.\r\n         */\r\n        this.lazyUpdate = null;\r\n        if (!headers) {\r\n            this.headers = new Map();\r\n        }\r\n        else if (typeof headers === 'string') {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                headers.split('\\n').forEach(line => {\r\n                    const /** @type {?} */ index = line.indexOf(':');\r\n                    if (index > 0) {\r\n                        const /** @type {?} */ name = line.slice(0, index);\r\n                        const /** @type {?} */ key = name.toLowerCase();\r\n                        const /** @type {?} */ value = line.slice(index + 1).trim();\r\n                        this.maybeSetNormalizedName(name, key);\r\n                        if (this.headers.has(key)) {\r\n                            /** @type {?} */ ((this.headers.get(key))).push(value);\r\n                        }\r\n                        else {\r\n                            this.headers.set(key, [value]);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        else {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                Object.keys(headers).forEach(name => {\r\n                    let /** @type {?} */ values = headers[name];\r\n                    const /** @type {?} */ key = name.toLowerCase();\r\n                    if (typeof values === 'string') {\r\n                        values = [values];\r\n                    }\r\n                    if (values.length > 0) {\r\n                        this.headers.set(key, values);\r\n                        this.maybeSetNormalizedName(name, key);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Checks for existence of header by given name.\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    has(name) {\r\n        this.init();\r\n        return this.headers.has(name.toLowerCase());\r\n    }\r\n    /**\r\n     * Returns first header that matches given name.\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    get(name) {\r\n        this.init();\r\n        const /** @type {?} */ values = this.headers.get(name.toLowerCase());\r\n        return values && values.length > 0 ? values[0] : null;\r\n    }\r\n    /**\r\n     * Returns the names of the headers\r\n     * @return {?}\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.normalizedNames.values());\r\n    }\r\n    /**\r\n     * Returns list of header values for a given name.\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getAll(name) {\r\n        this.init();\r\n        return this.headers.get(name.toLowerCase()) || null;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    append(name, value) {\r\n        return this.clone({ name, value, op: 'a' });\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set(name, value) {\r\n        return this.clone({ name, value, op: 's' });\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    delete(name, value) {\r\n        return this.clone({ name, value, op: 'd' });\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} lcName\r\n     * @return {?}\r\n     */\r\n    maybeSetNormalizedName(name, lcName) {\r\n        if (!this.normalizedNames.has(lcName)) {\r\n            this.normalizedNames.set(lcName, name);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    init() {\r\n        if (!!this.lazyInit) {\r\n            if (this.lazyInit instanceof HttpHeaders) {\r\n                this.copyFrom(this.lazyInit);\r\n            }\r\n            else {\r\n                this.lazyInit();\r\n            }\r\n            this.lazyInit = null;\r\n            if (!!this.lazyUpdate) {\r\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\r\n                this.lazyUpdate = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} other\r\n     * @return {?}\r\n     */\r\n    copyFrom(other) {\r\n        other.init();\r\n        Array.from(other.headers.keys()).forEach(key => {\r\n            this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));\r\n            this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    clone(update) {\r\n        const /** @type {?} */ clone = new HttpHeaders();\r\n        clone.lazyInit =\r\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\r\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\r\n        return clone;\r\n    }\r\n    /**\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    applyUpdate(update) {\r\n        const /** @type {?} */ key = update.name.toLowerCase();\r\n        switch (update.op) {\r\n            case 'a':\r\n            case 's':\r\n                let /** @type {?} */ value = /** @type {?} */ ((update.value));\r\n                if (typeof value === 'string') {\r\n                    value = [value];\r\n                }\r\n                if (value.length === 0) {\r\n                    return;\r\n                }\r\n                this.maybeSetNormalizedName(update.name, key);\r\n                const /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\r\n                base.push(...value);\r\n                this.headers.set(key, base);\r\n                break;\r\n            case 'd':\r\n                const /** @type {?} */ toDelete = /** @type {?} */ (update.value);\r\n                if (!toDelete) {\r\n                    this.headers.delete(key);\r\n                    this.normalizedNames.delete(key);\r\n                }\r\n                else {\r\n                    let /** @type {?} */ existing = this.headers.get(key);\r\n                    if (!existing) {\r\n                        return;\r\n                    }\r\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\r\n                    if (existing.length === 0) {\r\n                        this.headers.delete(key);\r\n                        this.normalizedNames.delete(key);\r\n                    }\r\n                    else {\r\n                        this.headers.set(key, existing);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEach(fn) {\r\n        this.init();\r\n        Array.from(this.normalizedNames.keys())\r\n            .forEach(key => fn(/** @type {?} */ ((this.normalizedNames.get(key))), /** @type {?} */ ((this.headers.get(key)))));\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A codec for encoding and decoding parameters in URLs.\r\n *\r\n * Used by `HttpParams`.\r\n *\r\n * \\@stable\r\n *\r\n * @record\r\n */\r\n\r\n/**\r\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\r\n * serialize and parse URL parameter keys and values.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpUrlEncodingCodec {\r\n    /**\r\n     * @param {?} k\r\n     * @return {?}\r\n     */\r\n    encodeKey(k) { return standardEncoding(k); }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    encodeValue(v) { return standardEncoding(v); }\r\n    /**\r\n     * @param {?} k\r\n     * @return {?}\r\n     */\r\n    decodeKey(k) { return decodeURIComponent(k); }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    decodeValue(v) { return decodeURIComponent(v); }\r\n}\r\n/**\r\n * @param {?} rawParams\r\n * @param {?} codec\r\n * @return {?}\r\n */\r\nfunction paramParser(rawParams, codec) {\r\n    const /** @type {?} */ map$$1 = new Map();\r\n    if (rawParams.length > 0) {\r\n        const /** @type {?} */ params = rawParams.split('&');\r\n        params.forEach((param) => {\r\n            const /** @type {?} */ eqIdx = param.indexOf('=');\r\n            const [key, val] = eqIdx == -1 ?\r\n                [codec.decodeKey(param), ''] :\r\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\r\n            const /** @type {?} */ list = map$$1.get(key) || [];\r\n            list.push(val);\r\n            map$$1.set(key, list);\r\n        });\r\n    }\r\n    return map$$1;\r\n}\r\n/**\r\n * @param {?} v\r\n * @return {?}\r\n */\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v)\r\n        .replace(/%40/gi, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/gi, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%3B/gi, ';')\r\n        .replace(/%2B/gi, '+')\r\n        .replace(/%3D/gi, '=')\r\n        .replace(/%3F/gi, '?')\r\n        .replace(/%2F/gi, '/');\r\n}\r\n/**\r\n * Options used to construct an `HttpParams` instance.\r\n * @record\r\n */\r\n\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable - all mutation operations return a new instance.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpParams {\r\n    /**\r\n     * @param {?=} options\r\n     */\r\n    constructor(options = /** @type {?} */ ({})) {\r\n        this.updates = null;\r\n        this.cloneFrom = null;\r\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n        if (!!options.fromString) {\r\n            if (!!options.fromObject) {\r\n                throw new Error(`Cannot specify both fromString and fromObject.`);\r\n            }\r\n            this.map = paramParser(options.fromString, this.encoder);\r\n        }\r\n        else if (!!options.fromObject) {\r\n            this.map = new Map();\r\n            Object.keys(options.fromObject).forEach(key => {\r\n                const /** @type {?} */ value = (/** @type {?} */ (options.fromObject))[key]; /** @type {?} */\r\n                ((this.map)).set(key, Array.isArray(value) ? value : [value]);\r\n            });\r\n        }\r\n        else {\r\n            this.map = null;\r\n        }\r\n    }\r\n    /**\r\n     * Check whether the body has one or more values for the given parameter name.\r\n     * @param {?} param\r\n     * @return {?}\r\n     */\r\n    has(param) {\r\n        this.init();\r\n        return /** @type {?} */ ((this.map)).has(param);\r\n    }\r\n    /**\r\n     * Get the first value for the given parameter name, or `null` if it's not present.\r\n     * @param {?} param\r\n     * @return {?}\r\n     */\r\n    get(param) {\r\n        this.init();\r\n        const /** @type {?} */ res = /** @type {?} */ ((this.map)).get(param);\r\n        return !!res ? res[0] : null;\r\n    }\r\n    /**\r\n     * Get all values for the given parameter name, or `null` if it's not present.\r\n     * @param {?} param\r\n     * @return {?}\r\n     */\r\n    getAll(param) {\r\n        this.init();\r\n        return /** @type {?} */ ((this.map)).get(param) || null;\r\n    }\r\n    /**\r\n     * Get all the parameter names for this body.\r\n     * @return {?}\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(/** @type {?} */ ((this.map)).keys());\r\n    }\r\n    /**\r\n     * Construct a new body with an appended value for the given parameter name.\r\n     * @param {?} param\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    append(param, value) { return this.clone({ param, value, op: 'a' }); }\r\n    /**\r\n     * Construct a new body with a new value for the given parameter name.\r\n     * @param {?} param\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set(param, value) { return this.clone({ param, value, op: 's' }); }\r\n    /**\r\n     * Construct a new body with either the given value for the given parameter\r\n     * removed, if a value is given, or all values for the given parameter removed\r\n     * if not.\r\n     * @param {?} param\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    delete(param, value) { return this.clone({ param, value, op: 'd' }); }\r\n    /**\r\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        this.init();\r\n        return this.keys()\r\n            .map(key => {\r\n            const /** @type {?} */ eKey = this.encoder.encodeKey(key);\r\n            return /** @type {?} */ ((/** @type {?} */ ((this.map)).get(key))).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');\r\n        })\r\n            .join('&');\r\n    }\r\n    /**\r\n     * @param {?} update\r\n     * @return {?}\r\n     */\r\n    clone(update) {\r\n        const /** @type {?} */ clone = new HttpParams(/** @type {?} */ ({ encoder: this.encoder }));\r\n        clone.cloneFrom = this.cloneFrom || this;\r\n        clone.updates = (this.updates || []).concat([update]);\r\n        return clone;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    init() {\r\n        if (this.map === null) {\r\n            this.map = new Map();\r\n        }\r\n        if (this.cloneFrom !== null) {\r\n            this.cloneFrom.init();\r\n            this.cloneFrom.keys().forEach(key => /** @type {?} */ ((this.map)).set(key, /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((this.cloneFrom)).map)).get(key))))); /** @type {?} */\r\n            ((this.updates)).forEach(update => {\r\n                switch (update.op) {\r\n                    case 'a':\r\n                    case 's':\r\n                        const /** @type {?} */ base = (update.op === 'a' ? /** @type {?} */ ((this.map)).get(update.param) : undefined) || [];\r\n                        base.push(/** @type {?} */ ((update.value))); /** @type {?} */\r\n                        ((this.map)).set(update.param, base);\r\n                        break;\r\n                    case 'd':\r\n                        if (update.value !== undefined) {\r\n                            let /** @type {?} */ base = /** @type {?} */ ((this.map)).get(update.param) || [];\r\n                            const /** @type {?} */ idx = base.indexOf(update.value);\r\n                            if (idx !== -1) {\r\n                                base.splice(idx, 1);\r\n                            }\r\n                            if (base.length > 0) {\r\n                                /** @type {?} */ ((this.map)).set(update.param, base);\r\n                            }\r\n                            else {\r\n                                /** @type {?} */ ((this.map)).delete(update.param);\r\n                            }\r\n                        }\r\n                        else {\r\n                            /** @type {?} */ ((this.map)).delete(update.param);\r\n                            break;\r\n                        }\r\n                }\r\n            });\r\n            this.cloneFrom = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n * @param {?} method\r\n * @return {?}\r\n */\r\nfunction mightHaveBody(method) {\r\n    switch (method) {\r\n        case 'DELETE':\r\n        case 'GET':\r\n        case 'HEAD':\r\n        case 'OPTIONS':\r\n        case 'JSONP':\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isArrayBuffer(value) {\r\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isBlob(value) {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isFormData(value) {\r\n    return typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpRequest {\r\n    /**\r\n     * @param {?} method\r\n     * @param {?} url\r\n     * @param {?=} third\r\n     * @param {?=} fourth\r\n     */\r\n    constructor(method, url, third, fourth) {\r\n        this.url = url;\r\n        /**\r\n         * The request body, or `null` if one isn't set.\r\n         *\r\n         * Bodies are not enforced to be immutable, as they can include a reference to any\r\n         * user-defined data type. However, interceptors should take care to preserve\r\n         * idempotence by treating them as such.\r\n         */\r\n        this.body = null;\r\n        /**\r\n         * Whether this request should be made in a way that exposes progress events.\r\n         *\r\n         * Progress events are expensive (change detection runs on each event) and so\r\n         * they should only be requested if the consumer intends to monitor them.\r\n         */\r\n        this.reportProgress = false;\r\n        /**\r\n         * Whether this request should be sent with outgoing credentials (cookies).\r\n         */\r\n        this.withCredentials = false;\r\n        /**\r\n         * The expected response type of the server.\r\n         *\r\n         * This is used to parse the response appropriately before returning it to\r\n         * the requestee.\r\n         */\r\n        this.responseType = 'json';\r\n        this.method = method.toUpperCase();\r\n        // Next, need to figure out which argument holds the HttpRequestInit\r\n        // options, if any.\r\n        let /** @type {?} */ options;\r\n        // Check whether a body argument is expected. The only valid way to omit\r\n        // the body argument is to use a known no-body method like GET.\r\n        if (mightHaveBody(this.method) || !!fourth) {\r\n            // Body is the third argument, options are the fourth.\r\n            this.body = (third !== undefined) ? /** @type {?} */ (third) : null;\r\n            options = fourth;\r\n        }\r\n        else {\r\n            // No body required, options are the third argument. The body stays null.\r\n            options = /** @type {?} */ (third);\r\n        }\r\n        // If options have been passed, interpret them.\r\n        if (options) {\r\n            // Normalize reportProgress and withCredentials.\r\n            this.reportProgress = !!options.reportProgress;\r\n            this.withCredentials = !!options.withCredentials;\r\n            // Override default response type of 'json' if one is provided.\r\n            if (!!options.responseType) {\r\n                this.responseType = options.responseType;\r\n            }\r\n            // Override headers if they're provided.\r\n            if (!!options.headers) {\r\n                this.headers = options.headers;\r\n            }\r\n            if (!!options.params) {\r\n                this.params = options.params;\r\n            }\r\n        }\r\n        // If no headers have been passed in, construct a new HttpHeaders instance.\r\n        if (!this.headers) {\r\n            this.headers = new HttpHeaders();\r\n        }\r\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\r\n        if (!this.params) {\r\n            this.params = new HttpParams();\r\n            this.urlWithParams = url;\r\n        }\r\n        else {\r\n            // Encode the parameters to a string in preparation for inclusion in the URL.\r\n            const /** @type {?} */ params = this.params.toString();\r\n            if (params.length === 0) {\r\n                // No parameters, the visible URL is just the URL given at creation time.\r\n                this.urlWithParams = url;\r\n            }\r\n            else {\r\n                // Does the URL already have query parameters? Look for '?'.\r\n                const /** @type {?} */ qIdx = url.indexOf('?');\r\n                // There are 3 cases to handle:\r\n                // 1) No existing parameters -> append '?' followed by params.\r\n                // 2) '?' exists and is followed by existing query string ->\r\n                //    append '&' followed by params.\r\n                // 3) '?' exists at the end of the url -> append params directly.\r\n                // This basically amounts to determining the character, if any, with\r\n                // which to join the URL and parameters.\r\n                const /** @type {?} */ sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\r\n                this.urlWithParams = url + sep + params;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     * @return {?}\r\n     */\r\n    serializeBody() {\r\n        // If no body is present, no need to serialize it.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // Check whether the body is already in a serialized form. If so,\r\n        // it can just be returned directly.\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        // Check whether the body is an instance of HttpUrlEncodedParams.\r\n        if (this.body instanceof HttpParams) {\r\n            return this.body.toString();\r\n        }\r\n        // Check whether the body is an object or array, and serialize with JSON if so.\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        // Fall back on toString() for everything else.\r\n        return (/** @type {?} */ (this.body)).toString();\r\n    }\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     * @return {?}\r\n     */\r\n    detectContentTypeHeader() {\r\n        // An empty body has no content type.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // FormData bodies rely on the browser's content type assignment.\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n        // Blobs usually have their own content type. If it doesn't, then\r\n        // no type can be inferred.\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        // Array buffers have unknown contents and thus no type can be inferred.\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n        // Technically, strings could be a form of JSON data, but it's safe enough\r\n        // to assume they're plain strings.\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n        // `HttpUrlEncodedParams` has its own content-type.\r\n        if (this.body instanceof HttpParams) {\r\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\r\n        }\r\n        // Arrays, objects, and numbers will be encoded as JSON.\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            Array.isArray(this.body)) {\r\n            return 'application/json';\r\n        }\r\n        // No type could be inferred.\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    clone(update = {}) {\r\n        // For method, url, and responseType, take the current value unless\r\n        // it is overridden in the update hash.\r\n        const /** @type {?} */ method = update.method || this.method;\r\n        const /** @type {?} */ url = update.url || this.url;\r\n        const /** @type {?} */ responseType = update.responseType || this.responseType;\r\n        // The body is somewhat special - a `null` value in update.body means\r\n        // whatever current body is present is being overridden with an empty\r\n        // body, whereas an `undefined` value in update.body implies no\r\n        // override.\r\n        const /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\r\n        // Carefully handle the boolean options to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        const /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\r\n        const /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\r\n        // Headers and params may be appended to if `setHeaders` or\r\n        // `setParams` are used.\r\n        let /** @type {?} */ headers = update.headers || this.headers;\r\n        let /** @type {?} */ params = update.params || this.params;\r\n        // Check whether the caller has asked to add headers.\r\n        if (update.setHeaders !== undefined) {\r\n            // Set every requested header.\r\n            headers =\r\n                Object.keys(update.setHeaders)\r\n                    .reduce((headers, name) => headers.set(name, /** @type {?} */ ((update.setHeaders))[name]), headers);\r\n        }\r\n        // Check whether the caller has asked to set params.\r\n        if (update.setParams) {\r\n            // Set every requested param.\r\n            params = Object.keys(update.setParams)\r\n                .reduce((params, param) => params.set(param, /** @type {?} */ ((update.setParams))[param]), params);\r\n        }\r\n        // Finally, construct the new HttpRequest using the pieces from above.\r\n        return new HttpRequest(method, url, body, {\r\n            params, headers, reportProgress, responseType, withCredentials,\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst HttpEventType = {\r\n    /**\r\n       * The request was sent out over the wire.\r\n       */\r\n    Sent: 0,\r\n    /**\r\n       * An upload progress event was received.\r\n       */\r\n    UploadProgress: 1,\r\n    /**\r\n       * The response status code and headers were received.\r\n       */\r\n    ResponseHeader: 2,\r\n    /**\r\n       * A download progress event was received.\r\n       */\r\n    DownloadProgress: 3,\r\n    /**\r\n       * The full response including the body was received.\r\n       */\r\n    Response: 4,\r\n    /**\r\n       * A custom event from an interceptor or a backend.\r\n       */\r\n    User: 5,\r\n};\r\nHttpEventType[HttpEventType.Sent] = \"Sent\";\r\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\r\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\r\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\r\nHttpEventType[HttpEventType.Response] = \"Response\";\r\nHttpEventType[HttpEventType.User] = \"User\";\r\n/**\r\n * Base interface for progress events.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * A download progress event.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * An upload progress event.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * An event indicating that the request was sent to the server. Useful\r\n * when a request may be retried multiple times, to distinguish between\r\n * retries on the final event stream.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * A user-defined event.\r\n *\r\n * Grouping all custom events under this type ensures they will be handled\r\n * and forwarded by all implementations of interceptors.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * An error that represents a failed attempt to JSON.parse text coming back\r\n * from the server.\r\n *\r\n * It bundles the Error object with the actual response body that failed to parse.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass HttpResponseBase {\r\n    /**\r\n     * Super-constructor for all responses.\r\n     *\r\n     * The single parameter accepted is an initialization hash. Any properties\r\n     * of the response passed there will override the default values.\r\n     * @param {?} init\r\n     * @param {?=} defaultStatus\r\n     * @param {?=} defaultStatusText\r\n     */\r\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\r\n        // If the hash has values passed, use them to initialize the response.\r\n        // Otherwise use the default values.\r\n        this.headers = init.headers || new HttpHeaders();\r\n        this.status = init.status !== undefined ? init.status : defaultStatus;\r\n        this.statusText = init.statusText || defaultStatusText;\r\n        this.url = init.url || null;\r\n        // Cache the ok value to avoid defining a getter.\r\n        this.ok = this.status >= 200 && this.status < 300;\r\n    }\r\n}\r\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpHeaderResponse extends HttpResponseBase {\r\n    /**\r\n     * Create a new `HttpHeaderResponse` with the given parameters.\r\n     * @param {?=} init\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.ResponseHeader;\r\n    }\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    clone(update = {}) {\r\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\r\n        // overriding the current parameters with new ones if given.\r\n        return new HttpHeaderResponse({\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpResponse extends HttpResponseBase {\r\n    /**\r\n     * Construct a new `HttpResponse`.\r\n     * @param {?=} init\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.Response;\r\n        this.body = init.body !== undefined ? init.body : null;\r\n    }\r\n    /**\r\n     * @param {?=} update\r\n     * @return {?}\r\n     */\r\n    clone(update = {}) {\r\n        return new HttpResponse({\r\n            body: (update.body !== undefined) ? update.body : this.body,\r\n            headers: update.headers || this.headers,\r\n            status: (update.status !== undefined) ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpErrorResponse extends HttpResponseBase {\r\n    /**\r\n     * @param {?} init\r\n     */\r\n    constructor(init) {\r\n        // Initialize with a default status of 0 / Unknown Error.\r\n        super(init, 0, 'Unknown Error');\r\n        this.name = 'HttpErrorResponse';\r\n        /**\r\n         * Errors are never okay, even when the status code is in the 2xx success range.\r\n         */\r\n        this.ok = false;\r\n        // If the response was successful, then this was a parse error. Otherwise, it was\r\n        // a protocol-level failure of some sort. Either the request failed in transit\r\n        // or the server returned an unsuccessful status code.\r\n        if (this.status >= 200 && this.status < 300) {\r\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\r\n        }\r\n        else {\r\n            this.message =\r\n                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\r\n        }\r\n        this.error = init.error || null;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. Basically, this clones the object and adds the body.\r\n * @template T\r\n * @param {?} options\r\n * @param {?} body\r\n * @return {?}\r\n */\r\nfunction addBody(options, body) {\r\n    return {\r\n        body,\r\n        headers: options.headers,\r\n        observe: options.observe,\r\n        params: options.params,\r\n        reportProgress: options.reportProgress,\r\n        responseType: options.responseType,\r\n        withCredentials: options.withCredentials,\r\n    };\r\n}\r\n/**\r\n * Perform HTTP requests.\r\n *\r\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies according to which\r\n * signature is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * \\@stable\r\n */\r\nclass HttpClient {\r\n    /**\r\n     * @param {?} handler\r\n     */\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    /**\r\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * This method can be called in one of two ways. Either an `HttpRequest`\r\n     * instance can be passed directly as the only parameter, or a method can be\r\n     * passed as the first parameter, a string URL as the second, and an\r\n     * options hash as the third.\r\n     *\r\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\r\n     * raw `HttpEvent` stream will be returned.\r\n     *\r\n     * If a request is instead built by providing a URL, the options object\r\n     * determines the return type of `request()`. In addition to configuring\r\n     * request parameters such as the outgoing headers and/or the body, the options\r\n     * hash specifies two key pieces of information about the request: the\r\n     * `responseType` and what to `observe`.\r\n     *\r\n     * The `responseType` value determines how a successful response body will be\r\n     * parsed. If `responseType` is the default `json`, a type interface for the\r\n     * resulting object may be passed as a type parameter to `request()`.\r\n     *\r\n     * The `observe` value determines the return type of `request()`, based on what\r\n     * the consumer is interested in observing. A value of `events` will return an\r\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\r\n     * including progress events by default. A value of `response` will return an\r\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\r\n     * depends on the `responseType` and any optionally provided type parameter.\r\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\r\n     * @param {?} first\r\n     * @param {?=} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    request(first, url, options = {}) {\r\n        let /** @type {?} */ req;\r\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\r\n        if (first instanceof HttpRequest) {\r\n            // It is. The other arguments must be undefined (per the signatures) and can be\r\n            // ignored.\r\n            req = /** @type {?} */ (first);\r\n        }\r\n        else {\r\n            // It's a string, so it represents a URL. Construct a request based on it,\r\n            // and incorporate the remaining arguments (assuming GET unless a method is\r\n            // provided.\r\n            // Figure out the headers.\r\n            let /** @type {?} */ headers = undefined;\r\n            if (options.headers instanceof HttpHeaders) {\r\n                headers = options.headers;\r\n            }\r\n            else {\r\n                headers = new HttpHeaders(options.headers);\r\n            }\r\n            // Sort out parameters.\r\n            let /** @type {?} */ params = undefined;\r\n            if (!!options.params) {\r\n                if (options.params instanceof HttpParams) {\r\n                    params = options.params;\r\n                }\r\n                else {\r\n                    params = new HttpParams(/** @type {?} */ ({ fromObject: options.params }));\r\n                }\r\n            }\r\n            // Construct the request.\r\n            req = new HttpRequest(first, /** @type {?} */ ((url)), (options.body !== undefined ? options.body : null), {\r\n                headers,\r\n                params,\r\n                reportProgress: options.reportProgress,\r\n                // By default, JSON is assumed to be returned for all calls.\r\n                responseType: options.responseType || 'json',\r\n                withCredentials: options.withCredentials,\r\n            });\r\n        }\r\n        // Start with an Observable.of() the initial request, and run the handler (which\r\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\r\n        // inside an Observable chain, which causes interceptors to be re-run on every\r\n        // subscription (this also makes retries re-run the handler, including interceptors).\r\n        const /** @type {?} */ events$ = concatMap.call(of(req), (req) => this.handler.handle(req));\r\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\r\n        // the only option is to get the event stream. Otherwise, return the event stream if\r\n        // that is what was requested.\r\n        if (first instanceof HttpRequest || options.observe === 'events') {\r\n            return events$;\r\n        }\r\n        // The requested stream contains either the full response or the body. In either\r\n        // case, the first step is to filter the event stream to extract a stream of\r\n        // responses(s).\r\n        const /** @type {?} */ res$ = filter.call(events$, (event) => event instanceof HttpResponse);\r\n        // Decide which stream to return.\r\n        switch (options.observe || 'body') {\r\n            case 'body':\r\n                // The requested stream is the body. Map the response stream to the response\r\n                // body. This could be done more simply, but a misbehaving interceptor might\r\n                // transform the response body into a different format and ignore the requested\r\n                // responseType. Guard against this by validating that the response is of the\r\n                // requested type.\r\n                switch (req.responseType) {\r\n                    case 'arraybuffer':\r\n                        return map.call(res$, (res) => {\r\n                            // Validate that the body is an ArrayBuffer.\r\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\r\n                                throw new Error('Response is not an ArrayBuffer.');\r\n                            }\r\n                            return res.body;\r\n                        });\r\n                    case 'blob':\r\n                        return map.call(res$, (res) => {\r\n                            // Validate that the body is a Blob.\r\n                            if (res.body !== null && !(res.body instanceof Blob)) {\r\n                                throw new Error('Response is not a Blob.');\r\n                            }\r\n                            return res.body;\r\n                        });\r\n                    case 'text':\r\n                        return map.call(res$, (res) => {\r\n                            // Validate that the body is a string.\r\n                            if (res.body !== null && typeof res.body !== 'string') {\r\n                                throw new Error('Response is not a string.');\r\n                            }\r\n                            return res.body;\r\n                        });\r\n                    case 'json':\r\n                    default:\r\n                        // No validation needed for JSON responses, as they can be of any type.\r\n                        return map.call(res$, (res) => res.body);\r\n                }\r\n            case 'response':\r\n                // The response stream was requested directly, so return it.\r\n                return res$;\r\n            default:\r\n                // Guard against new future observe types being added.\r\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\r\n        }\r\n    }\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * DELETE request to be executed on the server. See the individual overloads for\r\n     * details of `delete()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    delete(url, options = {}) {\r\n        return this.request('DELETE', url, /** @type {?} */ (options));\r\n    }\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * GET request to be executed on the server. See the individual overloads for\r\n     * details of `get()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    get(url, options = {}) {\r\n        return this.request('GET', url, /** @type {?} */ (options));\r\n    }\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * HEAD request to be executed on the server. See the individual overloads for\r\n     * details of `head()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    head(url, options = {}) {\r\n        return this.request('HEAD', url, /** @type {?} */ (options));\r\n    }\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause a request\r\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\r\n     *\r\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\r\n     * If no such interceptor is reached, then the `JSONP` request will likely be\r\n     * rejected by the configured backend.\r\n     * @template T\r\n     * @param {?} url\r\n     * @param {?} callbackParam\r\n     * @return {?}\r\n     */\r\n    jsonp(url, callbackParam) {\r\n        return this.request('JSONP', url, {\r\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\r\n            observe: 'body',\r\n            responseType: 'json',\r\n        });\r\n    }\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * OPTIONS request to be executed on the server. See the individual overloads for\r\n     * details of `options()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    options(url, options = {}) {\r\n        return this.request('OPTIONS', url, /** @type {?} */ (options));\r\n    }\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * PATCH request to be executed on the server. See the individual overloads for\r\n     * details of `patch()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    patch(url, body, options = {}) {\r\n        return this.request('PATCH', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * POST request to be executed on the server. See the individual overloads for\r\n     * details of `post()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    post(url, body, options = {}) {\r\n        return this.request('POST', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an `Observable` which, when subscribed, will cause the configured\r\n     * POST request to be executed on the server. See the individual overloads for\r\n     * details of `post()`'s return type based on the provided options.\r\n     * @param {?} url\r\n     * @param {?} body\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    put(url, body, options = {}) {\r\n        return this.request('PUT', url, addBody(options, body));\r\n    }\r\n}\r\nHttpClient.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nHttpClient.ctorParameters = () => [\r\n    { type: HttpHandler, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Intercepts `HttpRequest` and handles them.\r\n *\r\n * Most interceptors will transform the outgoing request before passing it to the\r\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\r\n *\r\n * In rare cases, interceptors may wish to completely handle a request themselves,\r\n * and not delegate to the remainder of the chain. This behavior is allowed.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpInterceptorHandler {\r\n    /**\r\n     * @param {?} next\r\n     * @param {?} interceptor\r\n     */\r\n    constructor(next, interceptor) {\r\n        this.next = next;\r\n        this.interceptor = interceptor;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    handle(req) {\r\n        return this.interceptor.intercept(req, this.next);\r\n    }\r\n}\r\n/**\r\n * A multi-provider token which represents the array of `HttpInterceptor`s that\r\n * are registered.\r\n *\r\n * \\@stable\r\n */\r\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\r\nclass NoopInterceptor {\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    intercept(req, next) {\r\n        return next.handle(req);\r\n    }\r\n}\r\nNoopInterceptor.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nNoopInterceptor.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Every request made through JSONP needs a callback name that's unique across the\r\n// whole page. Each request is assigned an id and the callback name is constructed\r\n// from that. The next id to be assigned is tracked in a global variable here that\r\n// is shared among all applications on the page.\r\nlet nextRequestId = 0;\r\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\r\n// passed in its URL.\r\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\r\n// have a request method JSONP.\r\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\r\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\r\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass JsonpCallbackContext {\r\n}\r\n/**\r\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n *\r\n * \\@stable\r\n */\r\nclass JsonpClientBackend {\r\n    /**\r\n     * @param {?} callbackMap\r\n     * @param {?} document\r\n     */\r\n    constructor(callbackMap, document) {\r\n        this.callbackMap = callbackMap;\r\n        this.document = document;\r\n    }\r\n    /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     * @return {?}\r\n     */\r\n    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }\r\n    /**\r\n     * Process a JSONP request and return an event stream of the results.\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    handle(req) {\r\n        // Firstly, check both the method and response type. If either doesn't match\r\n        // then the request was improperly routed here and cannot be handled.\r\n        if (req.method !== 'JSONP') {\r\n            throw new Error(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        else if (req.responseType !== 'json') {\r\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\r\n        }\r\n        // Everything else happens inside the Observable boundary.\r\n        return new Observable((observer) => {\r\n            // The first step to make a request is to generate the callback name, and replace the\r\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\r\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\r\n            const /** @type {?} */ callback = this.nextCallback();\r\n            const /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\r\n            // Construct the <script> tag and point it at the URL.\r\n            const /** @type {?} */ node = this.document.createElement('script');\r\n            node.src = url;\r\n            // A JSONP request requires waiting for multiple callbacks. These variables\r\n            // are closed over and track state across those callbacks.\r\n            // The response object, if one has been received, or null otherwise.\r\n            let /** @type {?} */ body = null;\r\n            // Whether the response callback has been called.\r\n            let /** @type {?} */ finished = false;\r\n            // Whether the request has been cancelled (and thus any other callbacks)\r\n            // should be ignored.\r\n            let /** @type {?} */ cancelled = false;\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            this.callbackMap[callback] = (data) => {\r\n                // Data has been received from the JSONP script. Firstly, delete this callback.\r\n                delete this.callbackMap[callback];\r\n                // Next, make sure the request wasn't cancelled in the meantime.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Set state to indicate data was received.\r\n                body = data;\r\n                finished = true;\r\n            };\r\n            // cleanup() is a utility closure that removes the <script> from the page and\r\n            // the response callback from the window. This logic is used in both the\r\n            // success, error, and cancellation paths, so it's extracted out for convenience.\r\n            const /** @type {?} */ cleanup = () => {\r\n                // Remove the <script> tag if it's still on the page.\r\n                if (node.parentNode) {\r\n                    node.parentNode.removeChild(node);\r\n                }\r\n                // Remove the response callback from the callbackMap (window object in the\r\n                // browser).\r\n                delete this.callbackMap[callback];\r\n            };\r\n            // onLoad() is the success callback which runs after the response callback\r\n            // if the JSONP script loads successfully. The event itself is unimportant.\r\n            // If something went wrong, onLoad() may run without the response callback\r\n            // having been invoked.\r\n            const /** @type {?} */ onLoad = (event) => {\r\n                // Do nothing if the request has been cancelled.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                // Cleanup the page.\r\n                cleanup();\r\n                // Check whether the response callback has run.\r\n                if (!finished) {\r\n                    // It hasn't, something went wrong with the request. Return an error via\r\n                    // the Observable error path. All JSONP errors have status 0.\r\n                    observer.error(new HttpErrorResponse({\r\n                        url,\r\n                        status: 0,\r\n                        statusText: 'JSONP Error',\r\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\r\n                    }));\r\n                    return;\r\n                }\r\n                // Success. body either contains the response body or null if none was\r\n                // returned.\r\n                observer.next(new HttpResponse({\r\n                    body,\r\n                    status: 200,\r\n                    statusText: 'OK', url,\r\n                }));\r\n                // Complete the stream, the resposne is over.\r\n                observer.complete();\r\n            };\r\n            // onError() is the error callback, which runs if the script returned generates\r\n            // a Javascript error. It emits the error via the Observable error channel as\r\n            // a HttpErrorResponse.\r\n            const /** @type {?} */ onError = (error) => {\r\n                // If the request was already cancelled, no need to emit anything.\r\n                if (cancelled) {\r\n                    return;\r\n                }\r\n                cleanup();\r\n                // Wrap the error in a HttpErrorResponse.\r\n                observer.error(new HttpErrorResponse({\r\n                    error,\r\n                    status: 0,\r\n                    statusText: 'JSONP Error', url,\r\n                }));\r\n            };\r\n            // Subscribe to both the success (load) and error events on the <script> tag,\r\n            // and add it to the page.\r\n            node.addEventListener('load', onLoad);\r\n            node.addEventListener('error', onError);\r\n            this.document.body.appendChild(node);\r\n            // The request has now been successfully sent.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // Cancellation handler.\r\n            return () => {\r\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\r\n                cancelled = true;\r\n                // Remove the event listeners so they won't run if the events later fire.\r\n                node.removeEventListener('load', onLoad);\r\n                node.removeEventListener('error', onError);\r\n                // And finally, clean up the page.\r\n                cleanup();\r\n            };\r\n        });\r\n    }\r\n}\r\nJsonpClientBackend.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nJsonpClientBackend.ctorParameters = () => [\r\n    { type: JsonpCallbackContext, },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\r\n];\r\n/**\r\n * An `HttpInterceptor` which identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * \\@stable\r\n */\r\nclass JsonpInterceptor {\r\n    /**\r\n     * @param {?} jsonp\r\n     */\r\n    constructor(jsonp) {\r\n        this.jsonp = jsonp;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    intercept(req, next) {\r\n        if (req.method === 'JSONP') {\r\n            return this.jsonp.handle(/** @type {?} */ (req));\r\n        }\r\n        // Fall through for normal HTTP requests.\r\n        return next.handle(req);\r\n    }\r\n}\r\nJsonpInterceptor.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nJsonpInterceptor.ctorParameters = () => [\r\n    { type: JsonpClientBackend, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n * @param {?} xhr\r\n * @return {?}\r\n */\r\nfunction getResponseUrl(xhr) {\r\n    if ('responseURL' in xhr && xhr.responseURL) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader('X-Request-URL');\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass XhrFactory {\r\n}\r\n/**\r\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\r\n *\r\n * \\@stable\r\n */\r\nclass BrowserXhr {\r\n    constructor() { }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    build() { return /** @type {?} */ ((new XMLHttpRequest())); }\r\n}\r\nBrowserXhr.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nBrowserXhr.ctorParameters = () => [];\r\n/**\r\n * An `HttpBackend` which uses the XMLHttpRequest API to send\r\n * requests to a backend server.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpXhrBackend {\r\n    /**\r\n     * @param {?} xhrFactory\r\n     */\r\n    constructor(xhrFactory) {\r\n        this.xhrFactory = xhrFactory;\r\n    }\r\n    /**\r\n     * Process a request and return a stream of response events.\r\n     * @param {?} req\r\n     * @return {?}\r\n     */\r\n    handle(req) {\r\n        // Quick check to give a better error message when a user attempts to use\r\n        // HttpClient.jsonp() without installing the JsonpClientModule\r\n        if (req.method === 'JSONP') {\r\n            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\r\n        }\r\n        // Everything happens on Observable subscription.\r\n        return new Observable((observer) => {\r\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\r\n            const /** @type {?} */ xhr = this.xhrFactory.build();\r\n            xhr.open(req.method, req.urlWithParams);\r\n            if (!!req.withCredentials) {\r\n                xhr.withCredentials = true;\r\n            }\r\n            // Add all the requested headers.\r\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\r\n            // Add an Accept header if one isn't present already.\r\n            if (!req.headers.has('Accept')) {\r\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            // Auto-detect the Content-Type header if one isn't present already.\r\n            if (!req.headers.has('Content-Type')) {\r\n                const /** @type {?} */ detectedType = req.detectContentTypeHeader();\r\n                // Sometimes Content-Type detection fails.\r\n                if (detectedType !== null) {\r\n                    xhr.setRequestHeader('Content-Type', detectedType);\r\n                }\r\n            }\r\n            // Set the responseType if one was requested.\r\n            if (req.responseType) {\r\n                const /** @type {?} */ responseType = req.responseType.toLowerCase();\r\n                // JSON responses need to be processed as text. This is because if the server\r\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n                // is parsed by first requesting text and then applying JSON.parse.\r\n                xhr.responseType = /** @type {?} */ (((responseType !== 'json') ? responseType : 'text'));\r\n            }\r\n            // Serialize the request body if one is present. If not, this will be set to null.\r\n            const /** @type {?} */ reqBody = req.serializeBody();\r\n            // If progress events are enabled, response headers will be delivered\r\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n            // event. However, since response headers don't change in between these\r\n            // two events, it doesn't make sense to parse them twice. So headerResponse\r\n            // caches the data extracted from the response whenever it's first parsed,\r\n            // to ensure parsing isn't duplicated.\r\n            let /** @type {?} */ headerResponse = null;\r\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n            // state, and memoizes it into headerResponse.\r\n            const /** @type {?} */ partialFromXhr = () => {\r\n                if (headerResponse !== null) {\r\n                    return headerResponse;\r\n                }\r\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\r\n                const /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\r\n                const /** @type {?} */ statusText = xhr.statusText || 'OK';\r\n                // Parse headers from XMLHttpRequest - this step is lazy.\r\n                const /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n                // request URL.\r\n                const /** @type {?} */ url = getResponseUrl(xhr) || req.url;\r\n                // Construct the HttpHeaderResponse and memoize it.\r\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\r\n                return headerResponse;\r\n            };\r\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n            // emit. This allows them to be unregistered as event listeners later.\r\n            // First up is the load event, which represents a response being fully available.\r\n            const /** @type {?} */ onLoad = () => {\r\n                // Read response state from the memoized partial data.\r\n                let { headers, status, statusText, url } = partialFromXhr();\r\n                // The body will be read out if present.\r\n                let /** @type {?} */ body = null;\r\n                if (status !== 204) {\r\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\r\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\r\n                }\r\n                // Normalize another potential bug (this one comes from CORS).\r\n                if (status === 0) {\r\n                    status = !!body ? 200 : 0;\r\n                }\r\n                // ok determines whether the response will be transmitted on the event or\r\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n                // but a successful status code can still result in an error if the user\r\n                // asked for JSON data and the body cannot be parsed as such.\r\n                let /** @type {?} */ ok = status >= 200 && status < 300;\r\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n                // will have done that already).\r\n                if (req.responseType === 'json' && typeof body === 'string') {\r\n                    // Save the original body, before attempting XSSI prefix stripping.\r\n                    const /** @type {?} */ originalBody = body;\r\n                    body = body.replace(XSSI_PREFIX, '');\r\n                    try {\r\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\r\n                        body = body !== '' ? JSON.parse(body) : null;\r\n                    }\r\n                    catch (/** @type {?} */ error) {\r\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\r\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\r\n                        // a better error response.\r\n                        body = originalBody;\r\n                        // If this was an error request to begin with, leave it as a string, it probably\r\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n                        if (ok) {\r\n                            // Even though the response status was 2xx, this is still an error.\r\n                            ok = false;\r\n                            // The parse error contains the text of the body that failed to parse.\r\n                            body = /** @type {?} */ ({ error, text: body });\r\n                        }\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    // A successful response is delivered on the event stream.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                    // The full body has been received and delivered, no further events\r\n                    // are possible. This request is complete.\r\n                    observer.complete();\r\n                }\r\n                else {\r\n                    // An unsuccessful request is delivered on the error channel.\r\n                    observer.error(new HttpErrorResponse({\r\n                        // The error in this case is the response body (error from the server).\r\n                        error: body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                }\r\n            };\r\n            // The onError callback is called when something goes wrong at the network level.\r\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n            // transmitted on the error channel.\r\n            const /** @type {?} */ onError = (error) => {\r\n                const /** @type {?} */ res = new HttpErrorResponse({\r\n                    error,\r\n                    status: xhr.status || 0,\r\n                    statusText: xhr.statusText || 'Unknown Error',\r\n                });\r\n                observer.error(res);\r\n            };\r\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n            // has been sent on the stream. This is necessary to track if progress\r\n            // is enabled since the event will be sent on only the first download\r\n            // progerss event.\r\n            let /** @type {?} */ sentHeaders = false;\r\n            // The download progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const /** @type {?} */ onDownProgress = (event) => {\r\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n                if (!sentHeaders) {\r\n                    observer.next(partialFromXhr());\r\n                    sentHeaders = true;\r\n                }\r\n                // Start building the download progress event to deliver on the response\r\n                // event stream.\r\n                let /** @type {?} */ progressEvent = {\r\n                    type: HttpEventType.DownloadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // Set the total number of bytes in the event if it's available.\r\n                if (event.lengthComputable) {\r\n                    progressEvent.total = event.total;\r\n                }\r\n                // If the request was for text content and a partial response is\r\n                // available on XMLHttpRequest, include it in the progress event\r\n                // to allow for streaming reads.\r\n                if (req.responseType === 'text' && !!xhr.responseText) {\r\n                    progressEvent.partialText = xhr.responseText;\r\n                }\r\n                // Finally, fire the event.\r\n                observer.next(progressEvent);\r\n            };\r\n            // The upload progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const /** @type {?} */ onUpProgress = (event) => {\r\n                // Upload progress events are simpler. Begin building the progress\r\n                // event.\r\n                let /** @type {?} */ progress = {\r\n                    type: HttpEventType.UploadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // If the total number of bytes being uploaded is available, include\r\n                // it.\r\n                if (event.lengthComputable) {\r\n                    progress.total = event.total;\r\n                }\r\n                // Send the event.\r\n                observer.next(progress);\r\n            };\r\n            // By default, register for load and error events.\r\n            xhr.addEventListener('load', onLoad);\r\n            xhr.addEventListener('error', onError);\r\n            // Progress events are only enabled if requested.\r\n            if (req.reportProgress) {\r\n                // Download progress is always enabled if requested.\r\n                xhr.addEventListener('progress', onDownProgress);\r\n                // Upload progress depends on whether there is a body to upload.\r\n                if (reqBody !== null && xhr.upload) {\r\n                    xhr.upload.addEventListener('progress', onUpProgress);\r\n                }\r\n            }\r\n            // Fire the request, and notify the event stream that it was fired.\r\n            xhr.send(reqBody);\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // This is the return from the Observable function, which is the\r\n            // request cancellation handler.\r\n            return () => {\r\n                // On a cancellation, remove all registered event listeners.\r\n                xhr.removeEventListener('error', onError);\r\n                xhr.removeEventListener('load', onLoad);\r\n                if (req.reportProgress) {\r\n                    xhr.removeEventListener('progress', onDownProgress);\r\n                    if (reqBody !== null && xhr.upload) {\r\n                        xhr.upload.removeEventListener('progress', onUpProgress);\r\n                    }\r\n                }\r\n                // Finally, abort the in-flight request.\r\n                xhr.abort();\r\n            };\r\n        });\r\n    }\r\n}\r\nHttpXhrBackend.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nHttpXhrBackend.ctorParameters = () => [\r\n    { type: XhrFactory, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\r\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\r\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass HttpXsrfTokenExtractor {\r\n}\r\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\r\nclass HttpXsrfCookieExtractor {\r\n    /**\r\n     * @param {?} doc\r\n     * @param {?} platform\r\n     * @param {?} cookieName\r\n     */\r\n    constructor(doc, platform, cookieName) {\r\n        this.doc = doc;\r\n        this.platform = platform;\r\n        this.cookieName = cookieName;\r\n        this.lastCookieString = '';\r\n        this.lastToken = null;\r\n        /**\r\n         * \\@internal for testing\r\n         */\r\n        this.parseCount = 0;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getToken() {\r\n        if (this.platform === 'server') {\r\n            return null;\r\n        }\r\n        const /** @type {?} */ cookieString = this.doc.cookie || '';\r\n        if (cookieString !== this.lastCookieString) {\r\n            this.parseCount++;\r\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\r\n            this.lastCookieString = cookieString;\r\n        }\r\n        return this.lastToken;\r\n    }\r\n}\r\nHttpXsrfCookieExtractor.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nHttpXsrfCookieExtractor.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] },] },\r\n];\r\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\r\nclass HttpXsrfInterceptor {\r\n    /**\r\n     * @param {?} tokenService\r\n     * @param {?} headerName\r\n     */\r\n    constructor(tokenService, headerName) {\r\n        this.tokenService = tokenService;\r\n        this.headerName = headerName;\r\n    }\r\n    /**\r\n     * @param {?} req\r\n     * @param {?} next\r\n     * @return {?}\r\n     */\r\n    intercept(req, next) {\r\n        const /** @type {?} */ lcUrl = req.url.toLowerCase();\r\n        // Skip both non-mutating requests and absolute URLs.\r\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\r\n        // anyway as the cookie set\r\n        // on our origin is not the same as the token expected by another origin.\r\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\r\n            lcUrl.startsWith('https://')) {\r\n            return next.handle(req);\r\n        }\r\n        const /** @type {?} */ token = this.tokenService.getToken();\r\n        // Be careful not to overwrite an existing header of the same name.\r\n        if (token !== null && !req.headers.has(this.headerName)) {\r\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\r\n        }\r\n        return next.handle(req);\r\n    }\r\n}\r\nHttpXsrfInterceptor.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nHttpXsrfInterceptor.ctorParameters = () => [\r\n    { type: HttpXsrfTokenExtractor, },\r\n    { type: undefined, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\r\n * to a request before passing it to the given `HttpBackend`.\r\n *\r\n * Meant to be used as a factory function within `HttpClientModule`.\r\n *\r\n * \\@stable\r\n * @param {?} backend\r\n * @param {?=} interceptors\r\n * @return {?}\r\n */\r\nfunction interceptingHandler(backend, interceptors = []) {\r\n    if (!interceptors) {\r\n        return backend;\r\n    }\r\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\r\n}\r\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n * \\@stable\r\n * @return {?}\r\n */\r\nfunction jsonpCallbackContext() {\r\n    if (typeof window === 'object') {\r\n        return window;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * `NgModule` which adds XSRF protection support to outgoing requests.\r\n *\r\n * Provided the server supports a cookie-based XSRF protection system, this\r\n * module can be used directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\r\n * the header name and `XSRF-TOKEN` for the cookie name.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpClientXsrfModule {\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     * @return {?}\r\n     */\r\n    static disable() {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\r\n            ],\r\n        };\r\n    }\r\n    /**\r\n     * Configure XSRF protection to use the given cookie name or header name,\r\n     * or the default names (as described above) if not provided.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    static withOptions(options = {}) {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\r\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\r\n            ],\r\n        };\r\n    }\r\n}\r\nHttpClientXsrfModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                providers: [\r\n                    HttpXsrfInterceptor,\r\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\r\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\r\n                ],\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nHttpClientXsrfModule.ctorParameters = () => [];\r\n/**\r\n * `NgModule` which provides the `HttpClient` and associated services.\r\n *\r\n * Interceptors can be added to the chain behind `HttpClient` by binding them\r\n * to the multiprovider for `HTTP_INTERCEPTORS`.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpClientModule {\r\n}\r\nHttpClientModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    HttpClientXsrfModule.withOptions({\r\n                        cookieName: 'XSRF-TOKEN',\r\n                        headerName: 'X-XSRF-TOKEN',\r\n                    }),\r\n                ],\r\n                providers: [\r\n                    HttpClient,\r\n                    // HttpHandler is the backend + interceptors and is constructed\r\n                    // using the interceptingHandler factory function.\r\n                    {\r\n                        provide: HttpHandler,\r\n                        useFactory: interceptingHandler,\r\n                        deps: [HttpBackend, [new Optional(), new Inject(HTTP_INTERCEPTORS)]],\r\n                    },\r\n                    HttpXhrBackend,\r\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n                    BrowserXhr,\r\n                    { provide: XhrFactory, useExisting: BrowserXhr },\r\n                ],\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nHttpClientModule.ctorParameters = () => [];\r\n/**\r\n * `NgModule` which enables JSONP support in `HttpClient`.\r\n *\r\n * Without this module, Jsonp requests will reach the backend\r\n * with method JSONP, where they'll be rejected.\r\n *\r\n * \\@stable\r\n */\r\nclass HttpClientJsonpModule {\r\n}\r\nHttpClientJsonpModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                providers: [\r\n                    JsonpClientBackend,\r\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\r\n                ],\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nHttpClientJsonpModule.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, interceptingHandler as ɵinterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor, NoopInterceptor as ɵa, JsonpCallbackContext as ɵb, jsonpCallbackContext as ɵc, BrowserXhr as ɵd, HttpXsrfCookieExtractor as ɵg, HttpXsrfInterceptor as ɵh, XSRF_COOKIE_NAME as ɵe, XSRF_HEADER_NAME as ɵf };\r\n//# sourceMappingURL=http.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/common/esm2015/http.js\n// module id = ../../../common/esm2015/http.js\n// module chunks = vendor","/**\r\n * @license Angular v5.1.3\r\n * (c) 2010-2017 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Attention:\r\n// This file duplicates types and values from @angular/core\r\n// so that we are able to make @angular/compiler independent of @angular/core.\r\n// This is important to prevent a build cycle, as @angular/core needs to\r\n// be compiled with the compiler.\r\n/**\r\n * @record\r\n */\r\nfunction Inject() { }\r\nconst createInject = makeMetadataFactory('Inject', (token) => ({ token }));\r\nconst createInjectionToken = makeMetadataFactory('InjectionToken', (desc) => ({ _desc: desc }));\r\n/**\r\n * @record\r\n */\r\nfunction Attribute() { }\r\nconst createAttribute = makeMetadataFactory('Attribute', (attributeName) => ({ attributeName }));\r\n/**\r\n * @record\r\n */\r\nfunction Query() { }\r\nconst createContentChildren = makeMetadataFactory('ContentChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: false, descendants: false }, data)));\r\nconst createContentChild = makeMetadataFactory('ContentChild', (selector, data = {}) => (Object.assign({ selector, first: true, isViewQuery: false, descendants: true }, data)));\r\nconst createViewChildren = makeMetadataFactory('ViewChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: true, descendants: true }, data)));\r\nconst createViewChild = makeMetadataFactory('ViewChild', (selector, data) => (Object.assign({ selector, first: true, isViewQuery: true, descendants: true }, data)));\r\n/**\r\n * @record\r\n */\r\nfunction Directive() { }\r\nconst createDirective = makeMetadataFactory('Directive', (dir = {}) => dir);\r\n/**\r\n * @record\r\n */\r\nfunction Component() { }\r\n/** @enum {number} */\r\nconst ViewEncapsulation = {\r\n    Emulated: 0,\r\n    Native: 1,\r\n    None: 2,\r\n};\r\nViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\r\nViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\r\nViewEncapsulation[ViewEncapsulation.None] = \"None\";\r\n/** @enum {number} */\r\nconst ChangeDetectionStrategy = {\r\n    OnPush: 0,\r\n    Default: 1,\r\n};\r\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\r\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\r\nconst createComponent = makeMetadataFactory('Component', (c = {}) => (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c)));\r\n/**\r\n * @record\r\n */\r\nfunction Pipe() { }\r\nconst createPipe = makeMetadataFactory('Pipe', (p) => (Object.assign({ pure: true }, p)));\r\n/**\r\n * @record\r\n */\r\nfunction Input() { }\r\nconst createInput = makeMetadataFactory('Input', (bindingPropertyName) => ({ bindingPropertyName }));\r\n/**\r\n * @record\r\n */\r\nfunction Output() { }\r\nconst createOutput = makeMetadataFactory('Output', (bindingPropertyName) => ({ bindingPropertyName }));\r\n/**\r\n * @record\r\n */\r\nfunction HostBinding() { }\r\nconst createHostBinding = makeMetadataFactory('HostBinding', (hostPropertyName) => ({ hostPropertyName }));\r\n/**\r\n * @record\r\n */\r\nfunction HostListener() { }\r\nconst createHostListener = makeMetadataFactory('HostListener', (eventName, args) => ({ eventName, args }));\r\n/**\r\n * @record\r\n */\r\nfunction NgModule() { }\r\nconst createNgModule = makeMetadataFactory('NgModule', (ngModule) => ngModule);\r\n/**\r\n * @record\r\n */\r\nfunction ModuleWithProviders() { }\r\n/**\r\n * @record\r\n */\r\nfunction SchemaMetadata() { }\r\nconst CUSTOM_ELEMENTS_SCHEMA = {\r\n    name: 'custom-elements'\r\n};\r\nconst NO_ERRORS_SCHEMA = {\r\n    name: 'no-errors-schema'\r\n};\r\nconst createOptional = makeMetadataFactory('Optional');\r\nconst createInjectable = makeMetadataFactory('Injectable');\r\nconst createSelf = makeMetadataFactory('Self');\r\nconst createSkipSelf = makeMetadataFactory('SkipSelf');\r\nconst createHost = makeMetadataFactory('Host');\r\nconst Type = Function;\r\n/** @enum {number} */\r\nconst SecurityContext = {\r\n    NONE: 0,\r\n    HTML: 1,\r\n    STYLE: 2,\r\n    SCRIPT: 3,\r\n    URL: 4,\r\n    RESOURCE_URL: 5,\r\n};\r\nSecurityContext[SecurityContext.NONE] = \"NONE\";\r\nSecurityContext[SecurityContext.HTML] = \"HTML\";\r\nSecurityContext[SecurityContext.STYLE] = \"STYLE\";\r\nSecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\r\nSecurityContext[SecurityContext.URL] = \"URL\";\r\nSecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\r\n/** @enum {number} */\r\nconst NodeFlags = {\r\n    None: 0,\r\n    TypeElement: 1,\r\n    TypeText: 2,\r\n    ProjectedTemplate: 4,\r\n    CatRenderNode: 3,\r\n    TypeNgContent: 8,\r\n    TypePipe: 16,\r\n    TypePureArray: 32,\r\n    TypePureObject: 64,\r\n    TypePurePipe: 128,\r\n    CatPureExpression: 224,\r\n    TypeValueProvider: 256,\r\n    TypeClassProvider: 512,\r\n    TypeFactoryProvider: 1024,\r\n    TypeUseExistingProvider: 2048,\r\n    LazyProvider: 4096,\r\n    PrivateProvider: 8192,\r\n    TypeDirective: 16384,\r\n    Component: 32768,\r\n    CatProviderNoDirective: 3840,\r\n    CatProvider: 20224,\r\n    OnInit: 65536,\r\n    OnDestroy: 131072,\r\n    DoCheck: 262144,\r\n    OnChanges: 524288,\r\n    AfterContentInit: 1048576,\r\n    AfterContentChecked: 2097152,\r\n    AfterViewInit: 4194304,\r\n    AfterViewChecked: 8388608,\r\n    EmbeddedViews: 16777216,\r\n    ComponentView: 33554432,\r\n    TypeContentQuery: 67108864,\r\n    TypeViewQuery: 134217728,\r\n    StaticQuery: 268435456,\r\n    DynamicQuery: 536870912,\r\n    CatQuery: 201326592,\r\n    // mutually exclusive values...\r\n    Types: 201347067,\r\n};\r\n/** @enum {number} */\r\nconst DepFlags = {\r\n    None: 0,\r\n    SkipSelf: 1,\r\n    Optional: 2,\r\n    Value: 8,\r\n};\r\n/** @enum {number} */\r\nconst ArgumentType = { Inline: 0, Dynamic: 1, };\r\n/** @enum {number} */\r\nconst BindingFlags = {\r\n    TypeElementAttribute: 1,\r\n    TypeElementClass: 2,\r\n    TypeElementStyle: 4,\r\n    TypeProperty: 8,\r\n    SyntheticProperty: 16,\r\n    SyntheticHostProperty: 32,\r\n    CatSyntheticProperty: 48,\r\n    // mutually exclusive values...\r\n    Types: 15,\r\n};\r\n/** @enum {number} */\r\nconst QueryBindingType = { First: 0, All: 1, };\r\n/** @enum {number} */\r\nconst QueryValueType = {\r\n    ElementRef: 0,\r\n    RenderElement: 1,\r\n    TemplateRef: 2,\r\n    ViewContainerRef: 3,\r\n    Provider: 4,\r\n};\r\n/** @enum {number} */\r\nconst ViewFlags = {\r\n    None: 0,\r\n    OnPush: 2,\r\n};\r\n/** @enum {number} */\r\nconst MissingTranslationStrategy = {\r\n    Error: 0,\r\n    Warning: 1,\r\n    Ignore: 2,\r\n};\r\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = \"Error\";\r\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = \"Warning\";\r\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = \"Ignore\";\r\n/**\r\n * @record\r\n */\r\nfunction MetadataFactory() { }\r\n/**\r\n * @template T\r\n * @param {?} name\r\n * @param {?=} props\r\n * @return {?}\r\n */\r\nfunction makeMetadataFactory(name, props) {\r\n    const /** @type {?} */ factory = (...args) => {\r\n        const /** @type {?} */ values = props ? props(...args) : {};\r\n        return Object.assign({ ngMetadataName: name }, values);\r\n    };\r\n    factory.isTypeOf = (obj) => obj && obj.ngMetadataName === name;\r\n    factory.ngMetadataName = name;\r\n    return factory;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction Route() { }\r\n\r\n\r\n\r\nvar core = Object.freeze({\r\n\tInject: Inject,\r\n\tcreateInject: createInject,\r\n\tcreateInjectionToken: createInjectionToken,\r\n\tAttribute: Attribute,\r\n\tcreateAttribute: createAttribute,\r\n\tQuery: Query,\r\n\tcreateContentChildren: createContentChildren,\r\n\tcreateContentChild: createContentChild,\r\n\tcreateViewChildren: createViewChildren,\r\n\tcreateViewChild: createViewChild,\r\n\tDirective: Directive,\r\n\tcreateDirective: createDirective,\r\n\tComponent: Component,\r\n\tViewEncapsulation: ViewEncapsulation,\r\n\tChangeDetectionStrategy: ChangeDetectionStrategy,\r\n\tcreateComponent: createComponent,\r\n\tPipe: Pipe,\r\n\tcreatePipe: createPipe,\r\n\tInput: Input,\r\n\tcreateInput: createInput,\r\n\tOutput: Output,\r\n\tcreateOutput: createOutput,\r\n\tHostBinding: HostBinding,\r\n\tcreateHostBinding: createHostBinding,\r\n\tHostListener: HostListener,\r\n\tcreateHostListener: createHostListener,\r\n\tNgModule: NgModule,\r\n\tcreateNgModule: createNgModule,\r\n\tModuleWithProviders: ModuleWithProviders,\r\n\tSchemaMetadata: SchemaMetadata,\r\n\tCUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,\r\n\tNO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,\r\n\tcreateOptional: createOptional,\r\n\tcreateInjectable: createInjectable,\r\n\tcreateSelf: createSelf,\r\n\tcreateSkipSelf: createSkipSelf,\r\n\tcreateHost: createHost,\r\n\tType: Type,\r\n\tSecurityContext: SecurityContext,\r\n\tNodeFlags: NodeFlags,\r\n\tDepFlags: DepFlags,\r\n\tArgumentType: ArgumentType,\r\n\tBindingFlags: BindingFlags,\r\n\tQueryBindingType: QueryBindingType,\r\n\tQueryValueType: QueryValueType,\r\n\tViewFlags: ViewFlags,\r\n\tMissingTranslationStrategy: MissingTranslationStrategy,\r\n\tMetadataFactory: MetadataFactory,\r\n\tRoute: Route\r\n});\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\nfunction dashCaseToCamelCase(input) {\r\n    return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());\r\n}\r\n/**\r\n * @param {?} input\r\n * @param {?} defaultValues\r\n * @return {?}\r\n */\r\nfunction splitAtColon(input, defaultValues) {\r\n    return _splitAt(input, ':', defaultValues);\r\n}\r\n/**\r\n * @param {?} input\r\n * @param {?} defaultValues\r\n * @return {?}\r\n */\r\nfunction splitAtPeriod(input, defaultValues) {\r\n    return _splitAt(input, '.', defaultValues);\r\n}\r\n/**\r\n * @param {?} input\r\n * @param {?} character\r\n * @param {?} defaultValues\r\n * @return {?}\r\n */\r\nfunction _splitAt(input, character, defaultValues) {\r\n    const /** @type {?} */ characterIndex = input.indexOf(character);\r\n    if (characterIndex == -1)\r\n        return defaultValues;\r\n    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\r\n}\r\n/**\r\n * @param {?} value\r\n * @param {?} visitor\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction visitValue(value, visitor, context) {\r\n    if (Array.isArray(value)) {\r\n        return visitor.visitArray(/** @type {?} */ (value), context);\r\n    }\r\n    if (isStrictStringMap(value)) {\r\n        return visitor.visitStringMap(/** @type {?} */ (value), context);\r\n    }\r\n    if (value == null || typeof value == 'string' || typeof value == 'number' ||\r\n        typeof value == 'boolean') {\r\n        return visitor.visitPrimitive(value, context);\r\n    }\r\n    return visitor.visitOther(value, context);\r\n}\r\n/**\r\n * @param {?} val\r\n * @return {?}\r\n */\r\nfunction isDefined(val) {\r\n    return val !== null && val !== undefined;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} val\r\n * @return {?}\r\n */\r\nfunction noUndefined(val) {\r\n    return val === undefined ? /** @type {?} */ ((null)) : val;\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\nclass ValueTransformer {\r\n    /**\r\n     * @param {?} arr\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitArray(arr, context) {\r\n        return arr.map(value => visitValue(value, this, context));\r\n    }\r\n    /**\r\n     * @param {?} map\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStringMap(map, context) {\r\n        const /** @type {?} */ result = {};\r\n        Object.keys(map).forEach(key => { result[key] = visitValue(map[key], this, context); });\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPrimitive(value, context) { return value; }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitOther(value, context) { return value; }\r\n}\r\nconst SyncAsync = {\r\n    assertSync: (value) => {\r\n        if (isPromise(value)) {\r\n            throw new Error(`Illegal state: value cannot be a promise`);\r\n        }\r\n        return value;\r\n    },\r\n    then: (value, cb) => { return isPromise(value) ? value.then(cb) : cb(value); },\r\n    all: (syncAsyncValues) => {\r\n        return syncAsyncValues.some(isPromise) ? Promise.all(syncAsyncValues) : /** @type {?} */ (syncAsyncValues);\r\n    }\r\n};\r\n/**\r\n * @param {?} msg\r\n * @param {?=} parseErrors\r\n * @return {?}\r\n */\r\nfunction syntaxError(msg, parseErrors) {\r\n    const /** @type {?} */ error = Error(msg);\r\n    (/** @type {?} */ (error))[ERROR_SYNTAX_ERROR] = true;\r\n    if (parseErrors)\r\n        (/** @type {?} */ (error))[ERROR_PARSE_ERRORS] = parseErrors;\r\n    return error;\r\n}\r\nconst ERROR_SYNTAX_ERROR = 'ngSyntaxError';\r\nconst ERROR_PARSE_ERRORS = 'ngParseErrors';\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction isSyntaxError(error) {\r\n    return (/** @type {?} */ (error))[ERROR_SYNTAX_ERROR];\r\n}\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction getParseErrors(error) {\r\n    return (/** @type {?} */ (error))[ERROR_PARSE_ERRORS] || [];\r\n}\r\n/**\r\n * @param {?} s\r\n * @return {?}\r\n */\r\nfunction escapeRegExp(s) {\r\n    return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\r\n}\r\nconst STRING_MAP_PROTO = Object.getPrototypeOf({});\r\n/**\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction isStrictStringMap(obj) {\r\n    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\r\n}\r\n/**\r\n * @param {?} str\r\n * @return {?}\r\n */\r\nfunction utf8Encode(str) {\r\n    let /** @type {?} */ encoded = '';\r\n    for (let /** @type {?} */ index = 0; index < str.length; index++) {\r\n        let /** @type {?} */ codePoint = str.charCodeAt(index);\r\n        // decode surrogate\r\n        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\r\n        if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > (index + 1)) {\r\n            const /** @type {?} */ low = str.charCodeAt(index + 1);\r\n            if (low >= 0xdc00 && low <= 0xdfff) {\r\n                index++;\r\n                codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;\r\n            }\r\n        }\r\n        if (codePoint <= 0x7f) {\r\n            encoded += String.fromCharCode(codePoint);\r\n        }\r\n        else if (codePoint <= 0x7ff) {\r\n            encoded += String.fromCharCode(((codePoint >> 6) & 0x1F) | 0xc0, (codePoint & 0x3f) | 0x80);\r\n        }\r\n        else if (codePoint <= 0xffff) {\r\n            encoded += String.fromCharCode((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\r\n        }\r\n        else if (codePoint <= 0x1fffff) {\r\n            encoded += String.fromCharCode(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\r\n        }\r\n    }\r\n    return encoded;\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction stringify(token) {\r\n    if (typeof token === 'string') {\r\n        return token;\r\n    }\r\n    if (token instanceof Array) {\r\n        return '[' + token.map(stringify).join(', ') + ']';\r\n    }\r\n    if (token == null) {\r\n        return '' + token;\r\n    }\r\n    if (token.overriddenName) {\r\n        return `${token.overriddenName}`;\r\n    }\r\n    if (token.name) {\r\n        return `${token.name}`;\r\n    }\r\n    const /** @type {?} */ res = token.toString();\r\n    if (res == null) {\r\n        return '' + res;\r\n    }\r\n    const /** @type {?} */ newLineIndex = res.indexOf('\\n');\r\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\r\n}\r\n/**\r\n * Lazily retrieves the reference value from a forwardRef.\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction resolveForwardRef(type) {\r\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__')) {\r\n        return type();\r\n    }\r\n    else {\r\n        return type;\r\n    }\r\n}\r\n/**\r\n * Determine if the argument is shaped like a Promise\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction isPromise(obj) {\r\n    // allow any Promise/A+ compliant thenable.\r\n    // It's up to the caller to ensure that obj.then conforms to the spec\r\n    return !!obj && typeof obj.then === 'function';\r\n}\r\nclass Version {\r\n    /**\r\n     * @param {?} full\r\n     */\r\n    constructor(full) {\r\n        this.full = full;\r\n        const /** @type {?} */ splits = full.split('.');\r\n        this.major = splits[0];\r\n        this.minor = splits[1];\r\n        this.patch = splits.slice(2).join('.');\r\n    }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of the common package.\r\n */\r\n/**\r\n * \\@stable\r\n */\r\nconst VERSION = new Version('5.1.3');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\r\n * @record\r\n */\r\n\r\n/**\r\n * A segment of text within the template.\r\n */\r\nclass TextAst {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} ngContentIndex\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(value, ngContentIndex, sourceSpan) {\r\n        this.value = value;\r\n        this.ngContentIndex = ngContentIndex;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitText(this, context); }\r\n}\r\n/**\r\n * A bound expression within the text of a template.\r\n */\r\nclass BoundTextAst {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} ngContentIndex\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(value, ngContentIndex, sourceSpan) {\r\n        this.value = value;\r\n        this.ngContentIndex = ngContentIndex;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        return visitor.visitBoundText(this, context);\r\n    }\r\n}\r\n/**\r\n * A plain attribute on an element.\r\n */\r\nclass AttrAst {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(name, value, sourceSpan) {\r\n        this.name = name;\r\n        this.value = value;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitAttr(this, context); }\r\n}\r\n/**\r\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\r\n * `[\\@trigger]=\"stateExp\"`)\r\n */\r\nclass BoundElementPropertyAst {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} type\r\n     * @param {?} securityContext\r\n     * @param {?} value\r\n     * @param {?} unit\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(name, type, securityContext, value, unit, sourceSpan) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.securityContext = securityContext;\r\n        this.value = value;\r\n        this.unit = unit;\r\n        this.sourceSpan = sourceSpan;\r\n        this.isAnimation = this.type === PropertyBindingType.Animation;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        return visitor.visitElementProperty(this, context);\r\n    }\r\n}\r\n/**\r\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\r\n * `(\\@trigger.phase)=\"callback($event)\"`).\r\n */\r\nclass BoundEventAst {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} target\r\n     * @param {?} phase\r\n     * @param {?} handler\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(name, target, phase, handler, sourceSpan) {\r\n        this.name = name;\r\n        this.target = target;\r\n        this.phase = phase;\r\n        this.handler = handler;\r\n        this.sourceSpan = sourceSpan;\r\n        this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);\r\n        this.isAnimation = !!this.phase;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} target\r\n     * @param {?} phase\r\n     * @return {?}\r\n     */\r\n    static calcFullName(name, target, phase) {\r\n        if (target) {\r\n            return `${target}:${name}`;\r\n        }\r\n        else if (phase) {\r\n            return `@${name}.${phase}`;\r\n        }\r\n        else {\r\n            return name;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        return visitor.visitEvent(this, context);\r\n    }\r\n}\r\n/**\r\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\r\n */\r\nclass ReferenceAst {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(name, value, sourceSpan) {\r\n        this.name = name;\r\n        this.value = value;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        return visitor.visitReference(this, context);\r\n    }\r\n}\r\n/**\r\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\r\n */\r\nclass VariableAst {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(name, value, sourceSpan) {\r\n        this.name = name;\r\n        this.value = value;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        return visitor.visitVariable(this, context);\r\n    }\r\n}\r\n/**\r\n * An element declaration in a template.\r\n */\r\nclass ElementAst {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} attrs\r\n     * @param {?} inputs\r\n     * @param {?} outputs\r\n     * @param {?} references\r\n     * @param {?} directives\r\n     * @param {?} providers\r\n     * @param {?} hasViewContainer\r\n     * @param {?} queryMatches\r\n     * @param {?} children\r\n     * @param {?} ngContentIndex\r\n     * @param {?} sourceSpan\r\n     * @param {?} endSourceSpan\r\n     */\r\n    constructor(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {\r\n        this.name = name;\r\n        this.attrs = attrs;\r\n        this.inputs = inputs;\r\n        this.outputs = outputs;\r\n        this.references = references;\r\n        this.directives = directives;\r\n        this.providers = providers;\r\n        this.hasViewContainer = hasViewContainer;\r\n        this.queryMatches = queryMatches;\r\n        this.children = children;\r\n        this.ngContentIndex = ngContentIndex;\r\n        this.sourceSpan = sourceSpan;\r\n        this.endSourceSpan = endSourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        return visitor.visitElement(this, context);\r\n    }\r\n}\r\n/**\r\n * A `<ng-template>` element included in an Angular template.\r\n */\r\nclass EmbeddedTemplateAst {\r\n    /**\r\n     * @param {?} attrs\r\n     * @param {?} outputs\r\n     * @param {?} references\r\n     * @param {?} variables\r\n     * @param {?} directives\r\n     * @param {?} providers\r\n     * @param {?} hasViewContainer\r\n     * @param {?} queryMatches\r\n     * @param {?} children\r\n     * @param {?} ngContentIndex\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {\r\n        this.attrs = attrs;\r\n        this.outputs = outputs;\r\n        this.references = references;\r\n        this.variables = variables;\r\n        this.directives = directives;\r\n        this.providers = providers;\r\n        this.hasViewContainer = hasViewContainer;\r\n        this.queryMatches = queryMatches;\r\n        this.children = children;\r\n        this.ngContentIndex = ngContentIndex;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        return visitor.visitEmbeddedTemplate(this, context);\r\n    }\r\n}\r\n/**\r\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\r\n */\r\nclass BoundDirectivePropertyAst {\r\n    /**\r\n     * @param {?} directiveName\r\n     * @param {?} templateName\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(directiveName, templateName, value, sourceSpan) {\r\n        this.directiveName = directiveName;\r\n        this.templateName = templateName;\r\n        this.value = value;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        return visitor.visitDirectiveProperty(this, context);\r\n    }\r\n}\r\n/**\r\n * A directive declared on an element.\r\n */\r\nclass DirectiveAst {\r\n    /**\r\n     * @param {?} directive\r\n     * @param {?} inputs\r\n     * @param {?} hostProperties\r\n     * @param {?} hostEvents\r\n     * @param {?} contentQueryStartId\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {\r\n        this.directive = directive;\r\n        this.inputs = inputs;\r\n        this.hostProperties = hostProperties;\r\n        this.hostEvents = hostEvents;\r\n        this.contentQueryStartId = contentQueryStartId;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        return visitor.visitDirective(this, context);\r\n    }\r\n}\r\n/**\r\n * A provider declared on an element\r\n */\r\nclass ProviderAst {\r\n    /**\r\n     * @param {?} token\r\n     * @param {?} multiProvider\r\n     * @param {?} eager\r\n     * @param {?} providers\r\n     * @param {?} providerType\r\n     * @param {?} lifecycleHooks\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {\r\n        this.token = token;\r\n        this.multiProvider = multiProvider;\r\n        this.eager = eager;\r\n        this.providers = providers;\r\n        this.providerType = providerType;\r\n        this.lifecycleHooks = lifecycleHooks;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        // No visit method in the visitor for now...\r\n        return null;\r\n    }\r\n}\r\n/** @enum {number} */\r\nconst ProviderAstType = {\r\n    PublicService: 0,\r\n    PrivateService: 1,\r\n    Component: 2,\r\n    Directive: 3,\r\n    Builtin: 4,\r\n};\r\nProviderAstType[ProviderAstType.PublicService] = \"PublicService\";\r\nProviderAstType[ProviderAstType.PrivateService] = \"PrivateService\";\r\nProviderAstType[ProviderAstType.Component] = \"Component\";\r\nProviderAstType[ProviderAstType.Directive] = \"Directive\";\r\nProviderAstType[ProviderAstType.Builtin] = \"Builtin\";\r\n/**\r\n * Position where content is to be projected (instance of `<ng-content>` in a template).\r\n */\r\nclass NgContentAst {\r\n    /**\r\n     * @param {?} index\r\n     * @param {?} ngContentIndex\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(index, ngContentIndex, sourceSpan) {\r\n        this.index = index;\r\n        this.ngContentIndex = ngContentIndex;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) {\r\n        return visitor.visitNgContent(this, context);\r\n    }\r\n}\r\n/** @enum {number} */\r\nconst PropertyBindingType = {\r\n    /**\r\n       * A normal binding to a property (e.g. `[property]=\"expression\"`).\r\n       */\r\n    Property: 0,\r\n    /**\r\n       * A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\r\n       */\r\n    Attribute: 1,\r\n    /**\r\n       * A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\r\n       */\r\n    Class: 2,\r\n    /**\r\n       * A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\r\n       */\r\n    Style: 3,\r\n    /**\r\n       * A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\r\n       */\r\n    Animation: 4,\r\n};\r\nPropertyBindingType[PropertyBindingType.Property] = \"Property\";\r\nPropertyBindingType[PropertyBindingType.Attribute] = \"Attribute\";\r\nPropertyBindingType[PropertyBindingType.Class] = \"Class\";\r\nPropertyBindingType[PropertyBindingType.Style] = \"Style\";\r\nPropertyBindingType[PropertyBindingType.Animation] = \"Animation\";\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * A visitor for {\\@link TemplateAst} trees that will process each node.\r\n * @record\r\n */\r\n\r\n/**\r\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\r\n * as the base class for a visitor that is only interested in a subset of the node types.\r\n */\r\nclass NullTemplateVisitor {\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitNgContent(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitEmbeddedTemplate(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReference(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitVariable(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitEvent(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElementProperty(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttr(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitBoundText(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDirective(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDirectiveProperty(ast, context) { }\r\n}\r\n/**\r\n * Base class that can be used to build a visitor that visits each node\r\n * in an template ast recursively.\r\n */\r\nclass RecursiveTemplateAstVisitor extends NullTemplateVisitor {\r\n    constructor() { super(); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitEmbeddedTemplate(ast, context) {\r\n        return this.visitChildren(context, visit => {\r\n            visit(ast.attrs);\r\n            visit(ast.references);\r\n            visit(ast.variables);\r\n            visit(ast.directives);\r\n            visit(ast.providers);\r\n            visit(ast.children);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(ast, context) {\r\n        return this.visitChildren(context, visit => {\r\n            visit(ast.attrs);\r\n            visit(ast.inputs);\r\n            visit(ast.outputs);\r\n            visit(ast.references);\r\n            visit(ast.directives);\r\n            visit(ast.providers);\r\n            visit(ast.children);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDirective(ast, context) {\r\n        return this.visitChildren(context, visit => {\r\n            visit(ast.inputs);\r\n            visit(ast.hostProperties);\r\n            visit(ast.hostEvents);\r\n        });\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} context\r\n     * @param {?} cb\r\n     * @return {?}\r\n     */\r\n    visitChildren(context, cb) {\r\n        let /** @type {?} */ results = [];\r\n        let /** @type {?} */ t = this;\r\n        /**\r\n         * @template T\r\n         * @param {?} children\r\n         * @return {?}\r\n         */\r\n        function visit(children) {\r\n            if (children && children.length)\r\n                results.push(templateVisitAll(t, children, context));\r\n        }\r\n        cb(visit);\r\n        return [].concat.apply([], results);\r\n    }\r\n}\r\n/**\r\n * Visit every node in a list of {\\@link TemplateAst}s with the given {\\@link TemplateAstVisitor}.\r\n * @param {?} visitor\r\n * @param {?} asts\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction templateVisitAll(visitor, asts, context = null) {\r\n    const /** @type {?} */ result = [];\r\n    const /** @type {?} */ visit = visitor.visit ?\r\n        (ast) => /** @type {?} */ ((visitor.visit))(ast, context) || ast.visit(visitor, context) :\r\n        (ast) => ast.visit(visitor, context);\r\n    asts.forEach(ast => {\r\n        const /** @type {?} */ astResult = visit(ast);\r\n        if (astResult) {\r\n            result.push(astResult);\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass CompilerConfig {\r\n    /**\r\n     * @param {?=} __0\r\n     */\r\n    constructor({ defaultEncapsulation = ViewEncapsulation.Emulated, useJit = true, jitDevMode = false, missingTranslation = null, enableLegacyTemplate, preserveWhitespaces, strictInjectionParameters } = {}) {\r\n        this.defaultEncapsulation = defaultEncapsulation;\r\n        this.useJit = !!useJit;\r\n        this.jitDevMode = !!jitDevMode;\r\n        this.missingTranslation = missingTranslation;\r\n        this.enableLegacyTemplate = enableLegacyTemplate === true;\r\n        this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));\r\n        this.strictInjectionParameters = strictInjectionParameters === true;\r\n    }\r\n}\r\n/**\r\n * @param {?} preserveWhitespacesOption\r\n * @param {?=} defaultSetting\r\n * @return {?}\r\n */\r\nfunction preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting = true) {\r\n    return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A token representing the a reference to a static type.\r\n *\r\n * This token is unique for a filePath and name and can be used as a hash table key.\r\n */\r\nclass StaticSymbol {\r\n    /**\r\n     * @param {?} filePath\r\n     * @param {?} name\r\n     * @param {?} members\r\n     */\r\n    constructor(filePath, name, members) {\r\n        this.filePath = filePath;\r\n        this.name = name;\r\n        this.members = members;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    assertNoMembers() {\r\n        if (this.members.length) {\r\n            throw new Error(`Illegal state: symbol without members expected, but got ${JSON.stringify(this)}.`);\r\n        }\r\n    }\r\n}\r\n/**\r\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\r\n * same symbol values.\r\n */\r\nclass StaticSymbolCache {\r\n    constructor() {\r\n        this.cache = new Map();\r\n    }\r\n    /**\r\n     * @param {?} declarationFile\r\n     * @param {?} name\r\n     * @param {?=} members\r\n     * @return {?}\r\n     */\r\n    get(declarationFile, name, members) {\r\n        members = members || [];\r\n        const /** @type {?} */ memberSuffix = members.length ? `.${members.join('.')}` : '';\r\n        const /** @type {?} */ key = `\"${declarationFile}\".${name}${memberSuffix}`;\r\n        let /** @type {?} */ result = this.cache.get(key);\r\n        if (!result) {\r\n            result = new StaticSymbol(declarationFile, name, members);\r\n            this.cache.set(key, result);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// group 0: \"[prop] or (event) or @trigger\"\r\n// group 1: \"prop\" from \"[prop]\"\r\n// group 2: \"event\" from \"(event)\"\r\n// group 3: \"@trigger\" from \"@trigger\"\r\nconst HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\r\n/**\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction _sanitizeIdentifier(name) {\r\n    return name.replace(/\\W/g, '_');\r\n}\r\nlet _anonymousTypeIndex = 0;\r\n/**\r\n * @param {?} compileIdentifier\r\n * @return {?}\r\n */\r\nfunction identifierName(compileIdentifier) {\r\n    if (!compileIdentifier || !compileIdentifier.reference) {\r\n        return null;\r\n    }\r\n    const /** @type {?} */ ref = compileIdentifier.reference;\r\n    if (ref instanceof StaticSymbol) {\r\n        return ref.name;\r\n    }\r\n    if (ref['__anonymousType']) {\r\n        return ref['__anonymousType'];\r\n    }\r\n    let /** @type {?} */ identifier = stringify(ref);\r\n    if (identifier.indexOf('(') >= 0) {\r\n        // case: anonymous functions!\r\n        identifier = `anonymous_${_anonymousTypeIndex++}`;\r\n        ref['__anonymousType'] = identifier;\r\n    }\r\n    else {\r\n        identifier = _sanitizeIdentifier(identifier);\r\n    }\r\n    return identifier;\r\n}\r\n/**\r\n * @param {?} compileIdentifier\r\n * @return {?}\r\n */\r\nfunction identifierModuleUrl(compileIdentifier) {\r\n    const /** @type {?} */ ref = compileIdentifier.reference;\r\n    if (ref instanceof StaticSymbol) {\r\n        return ref.filePath;\r\n    }\r\n    // Runtime type\r\n    return `./${stringify(ref)}`;\r\n}\r\n/**\r\n * @param {?} compType\r\n * @param {?} embeddedTemplateIndex\r\n * @return {?}\r\n */\r\nfunction viewClassName(compType, embeddedTemplateIndex) {\r\n    return `View_${identifierName({ reference: compType })}_${embeddedTemplateIndex}`;\r\n}\r\n/**\r\n * @param {?} compType\r\n * @return {?}\r\n */\r\nfunction rendererTypeName(compType) {\r\n    return `RenderType_${identifierName({ reference: compType })}`;\r\n}\r\n/**\r\n * @param {?} compType\r\n * @return {?}\r\n */\r\nfunction hostViewClassName(compType) {\r\n    return `HostView_${identifierName({ reference: compType })}`;\r\n}\r\n/**\r\n * @param {?} compType\r\n * @return {?}\r\n */\r\nfunction componentFactoryName(compType) {\r\n    return `${identifierName({ reference: compType })}NgFactory`;\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/** @enum {number} */\r\nconst CompileSummaryKind = {\r\n    Pipe: 0,\r\n    Directive: 1,\r\n    NgModule: 2,\r\n    Injectable: 3,\r\n};\r\nCompileSummaryKind[CompileSummaryKind.Pipe] = \"Pipe\";\r\nCompileSummaryKind[CompileSummaryKind.Directive] = \"Directive\";\r\nCompileSummaryKind[CompileSummaryKind.NgModule] = \"NgModule\";\r\nCompileSummaryKind[CompileSummaryKind.Injectable] = \"Injectable\";\r\n/**\r\n * A CompileSummary is the data needed to use a directive / pipe / module\r\n * in other modules / components. However, this data is not enough to compile\r\n * the directive / module itself.\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction tokenName(token) {\r\n    return token.value != null ? _sanitizeIdentifier(token.value) : identifierName(token.identifier);\r\n}\r\n/**\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction tokenReference(token) {\r\n    if (token.identifier != null) {\r\n        return token.identifier.reference;\r\n    }\r\n    else {\r\n        return token.value;\r\n    }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata regarding compilation of a type.\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata about a stylesheet\r\n */\r\nclass CompileStylesheetMetadata {\r\n    /**\r\n     * @param {?=} __0\r\n     */\r\n    constructor({ moduleUrl, styles, styleUrls } = {}) {\r\n        this.moduleUrl = moduleUrl || null;\r\n        this.styles = _normalizeArray(styles);\r\n        this.styleUrls = _normalizeArray(styleUrls);\r\n    }\r\n}\r\n/**\r\n * Summary Metadata regarding compilation of a template.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata regarding compilation of a template.\r\n */\r\nclass CompileTemplateMetadata {\r\n    /**\r\n     * @param {?} __0\r\n     */\r\n    constructor({ encapsulation, template, templateUrl, htmlAst, styles, styleUrls, externalStylesheets, animations, ngContentSelectors, interpolation, isInline, preserveWhitespaces }) {\r\n        this.encapsulation = encapsulation;\r\n        this.template = template;\r\n        this.templateUrl = templateUrl;\r\n        this.htmlAst = htmlAst;\r\n        this.styles = _normalizeArray(styles);\r\n        this.styleUrls = _normalizeArray(styleUrls);\r\n        this.externalStylesheets = _normalizeArray(externalStylesheets);\r\n        this.animations = animations ? flatten(animations) : [];\r\n        this.ngContentSelectors = ngContentSelectors || [];\r\n        if (interpolation && interpolation.length != 2) {\r\n            throw new Error(`'interpolation' should have a start and an end symbol.`);\r\n        }\r\n        this.interpolation = interpolation;\r\n        this.isInline = isInline;\r\n        this.preserveWhitespaces = preserveWhitespaces;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toSummary() {\r\n        return {\r\n            ngContentSelectors: this.ngContentSelectors,\r\n            encapsulation: this.encapsulation,\r\n        };\r\n    }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata regarding compilation of a directive.\r\n */\r\nclass CompileDirectiveMetadata {\r\n    /**\r\n     * @param {?} __0\r\n     * @return {?}\r\n     */\r\n    static create({ isHost, type, isComponent, selector, exportAs, changeDetection, inputs, outputs, host, providers, viewProviders, queries, viewQueries, entryComponents, template, componentViewType, rendererType, componentFactory }) {\r\n        const /** @type {?} */ hostListeners = {};\r\n        const /** @type {?} */ hostProperties = {};\r\n        const /** @type {?} */ hostAttributes = {};\r\n        if (host != null) {\r\n            Object.keys(host).forEach(key => {\r\n                const /** @type {?} */ value = host[key];\r\n                const /** @type {?} */ matches = key.match(HOST_REG_EXP);\r\n                if (matches === null) {\r\n                    hostAttributes[key] = value;\r\n                }\r\n                else if (matches[1] != null) {\r\n                    hostProperties[matches[1]] = value;\r\n                }\r\n                else if (matches[2] != null) {\r\n                    hostListeners[matches[2]] = value;\r\n                }\r\n            });\r\n        }\r\n        const /** @type {?} */ inputsMap = {};\r\n        if (inputs != null) {\r\n            inputs.forEach((bindConfig) => {\r\n                // canonical syntax: `dirProp: elProp`\r\n                // if there is no `:`, use dirProp = elProp\r\n                const /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\r\n                inputsMap[parts[0]] = parts[1];\r\n            });\r\n        }\r\n        const /** @type {?} */ outputsMap = {};\r\n        if (outputs != null) {\r\n            outputs.forEach((bindConfig) => {\r\n                // canonical syntax: `dirProp: elProp`\r\n                // if there is no `:`, use dirProp = elProp\r\n                const /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\r\n                outputsMap[parts[0]] = parts[1];\r\n            });\r\n        }\r\n        return new CompileDirectiveMetadata({\r\n            isHost,\r\n            type,\r\n            isComponent: !!isComponent, selector, exportAs, changeDetection,\r\n            inputs: inputsMap,\r\n            outputs: outputsMap,\r\n            hostListeners,\r\n            hostProperties,\r\n            hostAttributes,\r\n            providers,\r\n            viewProviders,\r\n            queries,\r\n            viewQueries,\r\n            entryComponents,\r\n            template,\r\n            componentViewType,\r\n            rendererType,\r\n            componentFactory,\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} __0\r\n     */\r\n    constructor({ isHost, type, isComponent, selector, exportAs, changeDetection, inputs, outputs, hostListeners, hostProperties, hostAttributes, providers, viewProviders, queries, viewQueries, entryComponents, template, componentViewType, rendererType, componentFactory }) {\r\n        this.isHost = !!isHost;\r\n        this.type = type;\r\n        this.isComponent = isComponent;\r\n        this.selector = selector;\r\n        this.exportAs = exportAs;\r\n        this.changeDetection = changeDetection;\r\n        this.inputs = inputs;\r\n        this.outputs = outputs;\r\n        this.hostListeners = hostListeners;\r\n        this.hostProperties = hostProperties;\r\n        this.hostAttributes = hostAttributes;\r\n        this.providers = _normalizeArray(providers);\r\n        this.viewProviders = _normalizeArray(viewProviders);\r\n        this.queries = _normalizeArray(queries);\r\n        this.viewQueries = _normalizeArray(viewQueries);\r\n        this.entryComponents = _normalizeArray(entryComponents);\r\n        this.template = template;\r\n        this.componentViewType = componentViewType;\r\n        this.rendererType = rendererType;\r\n        this.componentFactory = componentFactory;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toSummary() {\r\n        return {\r\n            summaryKind: CompileSummaryKind.Directive,\r\n            type: this.type,\r\n            isComponent: this.isComponent,\r\n            selector: this.selector,\r\n            exportAs: this.exportAs,\r\n            inputs: this.inputs,\r\n            outputs: this.outputs,\r\n            hostListeners: this.hostListeners,\r\n            hostProperties: this.hostProperties,\r\n            hostAttributes: this.hostAttributes,\r\n            providers: this.providers,\r\n            viewProviders: this.viewProviders,\r\n            queries: this.queries,\r\n            viewQueries: this.viewQueries,\r\n            entryComponents: this.entryComponents,\r\n            changeDetection: this.changeDetection,\r\n            template: this.template && this.template.toSummary(),\r\n            componentViewType: this.componentViewType,\r\n            rendererType: this.rendererType,\r\n            componentFactory: this.componentFactory\r\n        };\r\n    }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\nclass CompilePipeMetadata {\r\n    /**\r\n     * @param {?} __0\r\n     */\r\n    constructor({ type, name, pure }) {\r\n        this.type = type;\r\n        this.name = name;\r\n        this.pure = !!pure;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toSummary() {\r\n        return {\r\n            summaryKind: CompileSummaryKind.Pipe,\r\n            type: this.type,\r\n            name: this.name,\r\n            pure: this.pure\r\n        };\r\n    }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata regarding compilation of a module.\r\n */\r\nclass CompileNgModuleMetadata {\r\n    /**\r\n     * @param {?} __0\r\n     */\r\n    constructor({ type, providers, declaredDirectives, exportedDirectives, declaredPipes, exportedPipes, entryComponents, bootstrapComponents, importedModules, exportedModules, schemas, transitiveModule, id }) {\r\n        this.type = type || null;\r\n        this.declaredDirectives = _normalizeArray(declaredDirectives);\r\n        this.exportedDirectives = _normalizeArray(exportedDirectives);\r\n        this.declaredPipes = _normalizeArray(declaredPipes);\r\n        this.exportedPipes = _normalizeArray(exportedPipes);\r\n        this.providers = _normalizeArray(providers);\r\n        this.entryComponents = _normalizeArray(entryComponents);\r\n        this.bootstrapComponents = _normalizeArray(bootstrapComponents);\r\n        this.importedModules = _normalizeArray(importedModules);\r\n        this.exportedModules = _normalizeArray(exportedModules);\r\n        this.schemas = _normalizeArray(schemas);\r\n        this.id = id || null;\r\n        this.transitiveModule = transitiveModule || null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toSummary() {\r\n        const /** @type {?} */ module = /** @type {?} */ ((this.transitiveModule));\r\n        return {\r\n            summaryKind: CompileSummaryKind.NgModule,\r\n            type: this.type,\r\n            entryComponents: module.entryComponents,\r\n            providers: module.providers,\r\n            modules: module.modules,\r\n            exportedDirectives: module.exportedDirectives,\r\n            exportedPipes: module.exportedPipes\r\n        };\r\n    }\r\n}\r\nclass TransitiveCompileNgModuleMetadata {\r\n    constructor() {\r\n        this.directivesSet = new Set();\r\n        this.directives = [];\r\n        this.exportedDirectivesSet = new Set();\r\n        this.exportedDirectives = [];\r\n        this.pipesSet = new Set();\r\n        this.pipes = [];\r\n        this.exportedPipesSet = new Set();\r\n        this.exportedPipes = [];\r\n        this.modulesSet = new Set();\r\n        this.modules = [];\r\n        this.entryComponentsSet = new Set();\r\n        this.entryComponents = [];\r\n        this.providers = [];\r\n    }\r\n    /**\r\n     * @param {?} provider\r\n     * @param {?} module\r\n     * @return {?}\r\n     */\r\n    addProvider(provider, module) {\r\n        this.providers.push({ provider: provider, module: module });\r\n    }\r\n    /**\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\r\n    addDirective(id) {\r\n        if (!this.directivesSet.has(id.reference)) {\r\n            this.directivesSet.add(id.reference);\r\n            this.directives.push(id);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\r\n    addExportedDirective(id) {\r\n        if (!this.exportedDirectivesSet.has(id.reference)) {\r\n            this.exportedDirectivesSet.add(id.reference);\r\n            this.exportedDirectives.push(id);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\r\n    addPipe(id) {\r\n        if (!this.pipesSet.has(id.reference)) {\r\n            this.pipesSet.add(id.reference);\r\n            this.pipes.push(id);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\r\n    addExportedPipe(id) {\r\n        if (!this.exportedPipesSet.has(id.reference)) {\r\n            this.exportedPipesSet.add(id.reference);\r\n            this.exportedPipes.push(id);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\r\n    addModule(id) {\r\n        if (!this.modulesSet.has(id.reference)) {\r\n            this.modulesSet.add(id.reference);\r\n            this.modules.push(id);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ec\r\n     * @return {?}\r\n     */\r\n    addEntryComponent(ec) {\r\n        if (!this.entryComponentsSet.has(ec.componentType)) {\r\n            this.entryComponentsSet.add(ec.componentType);\r\n            this.entryComponents.push(ec);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction _normalizeArray(obj) {\r\n    return obj || [];\r\n}\r\nclass ProviderMeta {\r\n    /**\r\n     * @param {?} token\r\n     * @param {?} __1\r\n     */\r\n    constructor(token, { useClass, useValue, useExisting, useFactory, deps, multi }) {\r\n        this.token = token;\r\n        this.useClass = useClass || null;\r\n        this.useValue = useValue;\r\n        this.useExisting = useExisting;\r\n        this.useFactory = useFactory || null;\r\n        this.dependencies = deps || null;\r\n        this.multi = !!multi;\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} list\r\n * @return {?}\r\n */\r\nfunction flatten(list) {\r\n    return list.reduce((flat, item) => {\r\n        const /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;\r\n        return (/** @type {?} */ (flat)).concat(flatItem);\r\n    }, []);\r\n}\r\n/**\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction jitSourceUrl(url) {\r\n    // Note: We need 3 \"/\" so that ng shows up as a separate domain\r\n    // in the chrome dev tools.\r\n    return url.replace(/(\\w+:\\/\\/[\\w:-]+)?(\\/+)?/, 'ng:///');\r\n}\r\n/**\r\n * @param {?} ngModuleType\r\n * @param {?} compMeta\r\n * @param {?} templateMeta\r\n * @return {?}\r\n */\r\nfunction templateSourceUrl(ngModuleType, compMeta, templateMeta) {\r\n    let /** @type {?} */ url;\r\n    if (templateMeta.isInline) {\r\n        if (compMeta.type.reference instanceof StaticSymbol) {\r\n            // Note: a .ts file might contain multiple components with inline templates,\r\n            // so we need to give them unique urls, as these will be used for sourcemaps.\r\n            url = `${compMeta.type.reference.filePath}.${compMeta.type.reference.name}.html`;\r\n        }\r\n        else {\r\n            url = `${identifierName(ngModuleType)}/${identifierName(compMeta.type)}.html`;\r\n        }\r\n    }\r\n    else {\r\n        url = /** @type {?} */ ((templateMeta.templateUrl));\r\n    }\r\n    return compMeta.type.reference instanceof StaticSymbol ? url : jitSourceUrl(url);\r\n}\r\n/**\r\n * @param {?} meta\r\n * @param {?} id\r\n * @return {?}\r\n */\r\nfunction sharedStylesheetJitUrl(meta, id) {\r\n    const /** @type {?} */ pathParts = /** @type {?} */ ((meta.moduleUrl)).split(/\\/\\\\/g);\r\n    const /** @type {?} */ baseName = pathParts[pathParts.length - 1];\r\n    return jitSourceUrl(`css/${id}${baseName}.ngstyle.js`);\r\n}\r\n/**\r\n * @param {?} moduleMeta\r\n * @return {?}\r\n */\r\nfunction ngModuleJitUrl(moduleMeta) {\r\n    return jitSourceUrl(`${identifierName(moduleMeta.type)}/module.ngfactory.js`);\r\n}\r\n/**\r\n * @param {?} ngModuleType\r\n * @param {?} compMeta\r\n * @return {?}\r\n */\r\nfunction templateJitUrl(ngModuleType, compMeta) {\r\n    return jitSourceUrl(`${identifierName(ngModuleType)}/${identifierName(compMeta.type)}.ngfactory.js`);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A path is an ordered set of elements. Typically a path is to  a\r\n * particular offset in a source file. The head of the list is the top\r\n * most node. The tail is the node that contains the offset directly.\r\n *\r\n * For example, the expresion `a + b + c` might have an ast that looks\r\n * like:\r\n *     +\r\n *    / \\\r\n *   a   +\r\n *      / \\\r\n *     b   c\r\n *\r\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\r\n * 'c' at 9-10]` and the path the node at offset 1 would be\r\n * `['+' at 1-10, 'a' at 1-2]`.\r\n */\r\nclass AstPath {\r\n    /**\r\n     * @param {?} path\r\n     * @param {?=} position\r\n     */\r\n    constructor(path, position = -1) {\r\n        this.path = path;\r\n        this.position = position;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get empty() { return !this.path || !this.path.length; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get head() { return this.path[0]; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get tail() { return this.path[this.path.length - 1]; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    parentOf(node) {\r\n        return node && this.path[this.path.indexOf(node) - 1];\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    childOf(node) { return this.path[this.path.indexOf(node) + 1]; }\r\n    /**\r\n     * @template N\r\n     * @param {?} ctor\r\n     * @return {?}\r\n     */\r\n    first(ctor) {\r\n        for (let /** @type {?} */ i = this.path.length - 1; i >= 0; i--) {\r\n            let /** @type {?} */ item = this.path[i];\r\n            if (item instanceof ctor)\r\n                return /** @type {?} */ (item);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    push(node) { this.path.push(node); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    pop() { return /** @type {?} */ ((this.path.pop())); }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\nclass Text {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(value, sourceSpan) {\r\n        this.value = value;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitText(this, context); }\r\n}\r\nclass Expansion {\r\n    /**\r\n     * @param {?} switchValue\r\n     * @param {?} type\r\n     * @param {?} cases\r\n     * @param {?} sourceSpan\r\n     * @param {?} switchValueSourceSpan\r\n     */\r\n    constructor(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {\r\n        this.switchValue = switchValue;\r\n        this.type = type;\r\n        this.cases = cases;\r\n        this.sourceSpan = sourceSpan;\r\n        this.switchValueSourceSpan = switchValueSourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitExpansion(this, context); }\r\n}\r\nclass ExpansionCase {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} expression\r\n     * @param {?} sourceSpan\r\n     * @param {?} valueSourceSpan\r\n     * @param {?} expSourceSpan\r\n     */\r\n    constructor(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\r\n        this.value = value;\r\n        this.expression = expression;\r\n        this.sourceSpan = sourceSpan;\r\n        this.valueSourceSpan = valueSourceSpan;\r\n        this.expSourceSpan = expSourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitExpansionCase(this, context); }\r\n}\r\nclass Attribute$1 {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     * @param {?=} valueSpan\r\n     */\r\n    constructor(name, value, sourceSpan, valueSpan) {\r\n        this.name = name;\r\n        this.value = value;\r\n        this.sourceSpan = sourceSpan;\r\n        this.valueSpan = valueSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitAttribute(this, context); }\r\n}\r\nclass Element {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} attrs\r\n     * @param {?} children\r\n     * @param {?} sourceSpan\r\n     * @param {?=} startSourceSpan\r\n     * @param {?=} endSourceSpan\r\n     */\r\n    constructor(name, attrs, children, sourceSpan, startSourceSpan = null, endSourceSpan = null) {\r\n        this.name = name;\r\n        this.attrs = attrs;\r\n        this.children = children;\r\n        this.sourceSpan = sourceSpan;\r\n        this.startSourceSpan = startSourceSpan;\r\n        this.endSourceSpan = endSourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitElement(this, context); }\r\n}\r\nclass Comment {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(value, sourceSpan) {\r\n        this.value = value;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitComment(this, context); }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} visitor\r\n * @param {?} nodes\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction visitAll(visitor, nodes, context = null) {\r\n    const /** @type {?} */ result = [];\r\n    const /** @type {?} */ visit = visitor.visit ?\r\n        (ast) => /** @type {?} */ ((visitor.visit))(ast, context) || ast.visit(visitor, context) :\r\n        (ast) => ast.visit(visitor, context);\r\n    nodes.forEach(ast => {\r\n        const /** @type {?} */ astResult = visit(ast);\r\n        if (astResult) {\r\n            result.push(astResult);\r\n        }\r\n    });\r\n    return result;\r\n}\r\nclass RecursiveVisitor {\r\n    constructor() { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(ast, context) {\r\n        this.visitChildren(context, visit => {\r\n            visit(ast.attrs);\r\n            visit(ast.children);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(ast, context) {\r\n        return this.visitChildren(context, visit => { visit(ast.cases); });\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(ast, context) { }\r\n    /**\r\n     * @template T\r\n     * @param {?} context\r\n     * @param {?} cb\r\n     * @return {?}\r\n     */\r\n    visitChildren(context, cb) {\r\n        let /** @type {?} */ results = [];\r\n        let /** @type {?} */ t = this;\r\n        /**\r\n         * @template T\r\n         * @param {?} children\r\n         * @return {?}\r\n         */\r\n        function visit(children) {\r\n            if (children)\r\n                results.push(visitAll(t, children, context));\r\n        }\r\n        cb(visit);\r\n        return [].concat.apply([], results);\r\n    }\r\n}\r\n/**\r\n * @param {?} ast\r\n * @return {?}\r\n */\r\nfunction spanOf(ast) {\r\n    const /** @type {?} */ start = ast.sourceSpan.start.offset;\r\n    let /** @type {?} */ end = ast.sourceSpan.end.offset;\r\n    if (ast instanceof Element) {\r\n        if (ast.endSourceSpan) {\r\n            end = ast.endSourceSpan.end.offset;\r\n        }\r\n        else if (ast.children && ast.children.length) {\r\n            end = spanOf(ast.children[ast.children.length - 1]).end;\r\n        }\r\n    }\r\n    return { start, end };\r\n}\r\n/**\r\n * @param {?} nodes\r\n * @param {?} position\r\n * @return {?}\r\n */\r\nfunction findNode(nodes, position) {\r\n    const /** @type {?} */ path = [];\r\n    const /** @type {?} */ visitor = new class extends RecursiveVisitor {\r\n        /**\r\n         * @param {?} ast\r\n         * @param {?} context\r\n         * @return {?}\r\n         */\r\n        visit(ast, context) {\r\n            const /** @type {?} */ span = spanOf(ast);\r\n            if (span.start <= position && position < span.end) {\r\n                path.push(ast);\r\n            }\r\n            else {\r\n                // Returning a value here will result in the children being skipped.\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    visitAll(visitor, nodes);\r\n    return new AstPath(path, position);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} identifier\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction assertArrayOfStrings(identifier, value) {\r\n    if (value == null) {\r\n        return;\r\n    }\r\n    if (!Array.isArray(value)) {\r\n        throw new Error(`Expected '${identifier}' to be an array of strings.`);\r\n    }\r\n    for (let /** @type {?} */ i = 0; i < value.length; i += 1) {\r\n        if (typeof value[i] !== 'string') {\r\n            throw new Error(`Expected '${identifier}' to be an array of strings.`);\r\n        }\r\n    }\r\n}\r\nconst INTERPOLATION_BLACKLIST_REGEXPS = [\r\n    /^\\s*$/,\r\n    /[<>]/,\r\n    /^[{}]$/,\r\n    /&(#|[a-z])/i,\r\n    /^\\/\\//,\r\n];\r\n/**\r\n * @param {?} identifier\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction assertInterpolationSymbols(identifier, value) {\r\n    if (value != null && !(Array.isArray(value) && value.length == 2)) {\r\n        throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\r\n    }\r\n    else if (value != null) {\r\n        const /** @type {?} */ start = /** @type {?} */ (value[0]);\r\n        const /** @type {?} */ end = /** @type {?} */ (value[1]);\r\n        // black list checking\r\n        INTERPOLATION_BLACKLIST_REGEXPS.forEach(regexp => {\r\n            if (regexp.test(start) || regexp.test(end)) {\r\n                throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass InterpolationConfig {\r\n    /**\r\n     * @param {?} start\r\n     * @param {?} end\r\n     */\r\n    constructor(start, end) {\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n    /**\r\n     * @param {?} markers\r\n     * @return {?}\r\n     */\r\n    static fromArray(markers) {\r\n        if (!markers) {\r\n            return DEFAULT_INTERPOLATION_CONFIG;\r\n        }\r\n        assertInterpolationSymbols('interpolation', markers);\r\n        return new InterpolationConfig(markers[0], markers[1]);\r\n    }\r\n}\r\nconst DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass StyleWithImports {\r\n    /**\r\n     * @param {?} style\r\n     * @param {?} styleUrls\r\n     */\r\n    constructor(style, styleUrls) {\r\n        this.style = style;\r\n        this.styleUrls = styleUrls;\r\n    }\r\n}\r\n/**\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction isStyleUrlResolvable(url) {\r\n    if (url == null || url.length === 0 || url[0] == '/')\r\n        return false;\r\n    const /** @type {?} */ schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\r\n    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\r\n}\r\n/**\r\n * Rewrites stylesheets by resolving and removing the \\@import urls that\r\n * are either relative or don't have a `package:` scheme\r\n * @param {?} resolver\r\n * @param {?} baseUrl\r\n * @param {?} cssText\r\n * @return {?}\r\n */\r\nfunction extractStyleUrls(resolver, baseUrl, cssText) {\r\n    const /** @type {?} */ foundUrls = [];\r\n    const /** @type {?} */ modifiedCssText = cssText.replace(CSS_STRIPPABLE_COMMENT_REGEXP, '')\r\n        .replace(CSS_IMPORT_REGEXP, (...m) => {\r\n        const /** @type {?} */ url = m[1] || m[2];\r\n        if (!isStyleUrlResolvable(url)) {\r\n            // Do not attempt to resolve non-package absolute URLs with URI\r\n            // scheme\r\n            return m[0];\r\n        }\r\n        foundUrls.push(resolver.resolve(baseUrl, url));\r\n        return '';\r\n    });\r\n    return new StyleWithImports(modifiedCssText, foundUrls);\r\n}\r\nconst CSS_IMPORT_REGEXP = /@import\\s+(?:url\\()?\\s*(?:(?:['\"]([^'\"]*))|([^;\\)\\s]*))[^;]*;?/g;\r\nconst CSS_STRIPPABLE_COMMENT_REGEXP = /\\/\\*(?!#\\s*(?:sourceURL|sourceMappingURL)=)[\\s\\S]+?\\*\\//g;\r\nconst URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst TagContentType = {\r\n    RAW_TEXT: 0,\r\n    ESCAPABLE_RAW_TEXT: 1,\r\n    PARSABLE_DATA: 2,\r\n};\r\nTagContentType[TagContentType.RAW_TEXT] = \"RAW_TEXT\";\r\nTagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = \"ESCAPABLE_RAW_TEXT\";\r\nTagContentType[TagContentType.PARSABLE_DATA] = \"PARSABLE_DATA\";\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} elementName\r\n * @return {?}\r\n */\r\nfunction splitNsName(elementName) {\r\n    if (elementName[0] != ':') {\r\n        return [null, elementName];\r\n    }\r\n    const /** @type {?} */ colonIndex = elementName.indexOf(':', 1);\r\n    if (colonIndex == -1) {\r\n        throw new Error(`Unsupported format \"${elementName}\" expecting \":namespace:name\"`);\r\n    }\r\n    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\r\n}\r\n/**\r\n * @param {?} tagName\r\n * @return {?}\r\n */\r\nfunction isNgContainer(tagName) {\r\n    return splitNsName(tagName)[1] === 'ng-container';\r\n}\r\n/**\r\n * @param {?} tagName\r\n * @return {?}\r\n */\r\nfunction isNgContent(tagName) {\r\n    return splitNsName(tagName)[1] === 'ng-content';\r\n}\r\n/**\r\n * @param {?} tagName\r\n * @return {?}\r\n */\r\nfunction isNgTemplate(tagName) {\r\n    return splitNsName(tagName)[1] === 'ng-template';\r\n}\r\n/**\r\n * @param {?} fullName\r\n * @return {?}\r\n */\r\nfunction getNsPrefix(fullName) {\r\n    return fullName === null ? null : splitNsName(fullName)[0];\r\n}\r\n/**\r\n * @param {?} prefix\r\n * @param {?} localName\r\n * @return {?}\r\n */\r\nfunction mergeNsAndName(prefix, localName) {\r\n    return prefix ? `:${prefix}:${localName}` : localName;\r\n}\r\n// see http://www.w3.org/TR/html51/syntax.html#named-character-references\r\n// see https://html.spec.whatwg.org/multipage/entities.json\r\n// This list is not exhaustive to keep the compiler footprint low.\r\n// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not\r\n// exist.\r\nconst NAMED_ENTITIES = {\r\n    'Aacute': '\\u00C1',\r\n    'aacute': '\\u00E1',\r\n    'Acirc': '\\u00C2',\r\n    'acirc': '\\u00E2',\r\n    'acute': '\\u00B4',\r\n    'AElig': '\\u00C6',\r\n    'aelig': '\\u00E6',\r\n    'Agrave': '\\u00C0',\r\n    'agrave': '\\u00E0',\r\n    'alefsym': '\\u2135',\r\n    'Alpha': '\\u0391',\r\n    'alpha': '\\u03B1',\r\n    'amp': '&',\r\n    'and': '\\u2227',\r\n    'ang': '\\u2220',\r\n    'apos': '\\u0027',\r\n    'Aring': '\\u00C5',\r\n    'aring': '\\u00E5',\r\n    'asymp': '\\u2248',\r\n    'Atilde': '\\u00C3',\r\n    'atilde': '\\u00E3',\r\n    'Auml': '\\u00C4',\r\n    'auml': '\\u00E4',\r\n    'bdquo': '\\u201E',\r\n    'Beta': '\\u0392',\r\n    'beta': '\\u03B2',\r\n    'brvbar': '\\u00A6',\r\n    'bull': '\\u2022',\r\n    'cap': '\\u2229',\r\n    'Ccedil': '\\u00C7',\r\n    'ccedil': '\\u00E7',\r\n    'cedil': '\\u00B8',\r\n    'cent': '\\u00A2',\r\n    'Chi': '\\u03A7',\r\n    'chi': '\\u03C7',\r\n    'circ': '\\u02C6',\r\n    'clubs': '\\u2663',\r\n    'cong': '\\u2245',\r\n    'copy': '\\u00A9',\r\n    'crarr': '\\u21B5',\r\n    'cup': '\\u222A',\r\n    'curren': '\\u00A4',\r\n    'dagger': '\\u2020',\r\n    'Dagger': '\\u2021',\r\n    'darr': '\\u2193',\r\n    'dArr': '\\u21D3',\r\n    'deg': '\\u00B0',\r\n    'Delta': '\\u0394',\r\n    'delta': '\\u03B4',\r\n    'diams': '\\u2666',\r\n    'divide': '\\u00F7',\r\n    'Eacute': '\\u00C9',\r\n    'eacute': '\\u00E9',\r\n    'Ecirc': '\\u00CA',\r\n    'ecirc': '\\u00EA',\r\n    'Egrave': '\\u00C8',\r\n    'egrave': '\\u00E8',\r\n    'empty': '\\u2205',\r\n    'emsp': '\\u2003',\r\n    'ensp': '\\u2002',\r\n    'Epsilon': '\\u0395',\r\n    'epsilon': '\\u03B5',\r\n    'equiv': '\\u2261',\r\n    'Eta': '\\u0397',\r\n    'eta': '\\u03B7',\r\n    'ETH': '\\u00D0',\r\n    'eth': '\\u00F0',\r\n    'Euml': '\\u00CB',\r\n    'euml': '\\u00EB',\r\n    'euro': '\\u20AC',\r\n    'exist': '\\u2203',\r\n    'fnof': '\\u0192',\r\n    'forall': '\\u2200',\r\n    'frac12': '\\u00BD',\r\n    'frac14': '\\u00BC',\r\n    'frac34': '\\u00BE',\r\n    'frasl': '\\u2044',\r\n    'Gamma': '\\u0393',\r\n    'gamma': '\\u03B3',\r\n    'ge': '\\u2265',\r\n    'gt': '>',\r\n    'harr': '\\u2194',\r\n    'hArr': '\\u21D4',\r\n    'hearts': '\\u2665',\r\n    'hellip': '\\u2026',\r\n    'Iacute': '\\u00CD',\r\n    'iacute': '\\u00ED',\r\n    'Icirc': '\\u00CE',\r\n    'icirc': '\\u00EE',\r\n    'iexcl': '\\u00A1',\r\n    'Igrave': '\\u00CC',\r\n    'igrave': '\\u00EC',\r\n    'image': '\\u2111',\r\n    'infin': '\\u221E',\r\n    'int': '\\u222B',\r\n    'Iota': '\\u0399',\r\n    'iota': '\\u03B9',\r\n    'iquest': '\\u00BF',\r\n    'isin': '\\u2208',\r\n    'Iuml': '\\u00CF',\r\n    'iuml': '\\u00EF',\r\n    'Kappa': '\\u039A',\r\n    'kappa': '\\u03BA',\r\n    'Lambda': '\\u039B',\r\n    'lambda': '\\u03BB',\r\n    'lang': '\\u27E8',\r\n    'laquo': '\\u00AB',\r\n    'larr': '\\u2190',\r\n    'lArr': '\\u21D0',\r\n    'lceil': '\\u2308',\r\n    'ldquo': '\\u201C',\r\n    'le': '\\u2264',\r\n    'lfloor': '\\u230A',\r\n    'lowast': '\\u2217',\r\n    'loz': '\\u25CA',\r\n    'lrm': '\\u200E',\r\n    'lsaquo': '\\u2039',\r\n    'lsquo': '\\u2018',\r\n    'lt': '<',\r\n    'macr': '\\u00AF',\r\n    'mdash': '\\u2014',\r\n    'micro': '\\u00B5',\r\n    'middot': '\\u00B7',\r\n    'minus': '\\u2212',\r\n    'Mu': '\\u039C',\r\n    'mu': '\\u03BC',\r\n    'nabla': '\\u2207',\r\n    'nbsp': '\\u00A0',\r\n    'ndash': '\\u2013',\r\n    'ne': '\\u2260',\r\n    'ni': '\\u220B',\r\n    'not': '\\u00AC',\r\n    'notin': '\\u2209',\r\n    'nsub': '\\u2284',\r\n    'Ntilde': '\\u00D1',\r\n    'ntilde': '\\u00F1',\r\n    'Nu': '\\u039D',\r\n    'nu': '\\u03BD',\r\n    'Oacute': '\\u00D3',\r\n    'oacute': '\\u00F3',\r\n    'Ocirc': '\\u00D4',\r\n    'ocirc': '\\u00F4',\r\n    'OElig': '\\u0152',\r\n    'oelig': '\\u0153',\r\n    'Ograve': '\\u00D2',\r\n    'ograve': '\\u00F2',\r\n    'oline': '\\u203E',\r\n    'Omega': '\\u03A9',\r\n    'omega': '\\u03C9',\r\n    'Omicron': '\\u039F',\r\n    'omicron': '\\u03BF',\r\n    'oplus': '\\u2295',\r\n    'or': '\\u2228',\r\n    'ordf': '\\u00AA',\r\n    'ordm': '\\u00BA',\r\n    'Oslash': '\\u00D8',\r\n    'oslash': '\\u00F8',\r\n    'Otilde': '\\u00D5',\r\n    'otilde': '\\u00F5',\r\n    'otimes': '\\u2297',\r\n    'Ouml': '\\u00D6',\r\n    'ouml': '\\u00F6',\r\n    'para': '\\u00B6',\r\n    'permil': '\\u2030',\r\n    'perp': '\\u22A5',\r\n    'Phi': '\\u03A6',\r\n    'phi': '\\u03C6',\r\n    'Pi': '\\u03A0',\r\n    'pi': '\\u03C0',\r\n    'piv': '\\u03D6',\r\n    'plusmn': '\\u00B1',\r\n    'pound': '\\u00A3',\r\n    'prime': '\\u2032',\r\n    'Prime': '\\u2033',\r\n    'prod': '\\u220F',\r\n    'prop': '\\u221D',\r\n    'Psi': '\\u03A8',\r\n    'psi': '\\u03C8',\r\n    'quot': '\\u0022',\r\n    'radic': '\\u221A',\r\n    'rang': '\\u27E9',\r\n    'raquo': '\\u00BB',\r\n    'rarr': '\\u2192',\r\n    'rArr': '\\u21D2',\r\n    'rceil': '\\u2309',\r\n    'rdquo': '\\u201D',\r\n    'real': '\\u211C',\r\n    'reg': '\\u00AE',\r\n    'rfloor': '\\u230B',\r\n    'Rho': '\\u03A1',\r\n    'rho': '\\u03C1',\r\n    'rlm': '\\u200F',\r\n    'rsaquo': '\\u203A',\r\n    'rsquo': '\\u2019',\r\n    'sbquo': '\\u201A',\r\n    'Scaron': '\\u0160',\r\n    'scaron': '\\u0161',\r\n    'sdot': '\\u22C5',\r\n    'sect': '\\u00A7',\r\n    'shy': '\\u00AD',\r\n    'Sigma': '\\u03A3',\r\n    'sigma': '\\u03C3',\r\n    'sigmaf': '\\u03C2',\r\n    'sim': '\\u223C',\r\n    'spades': '\\u2660',\r\n    'sub': '\\u2282',\r\n    'sube': '\\u2286',\r\n    'sum': '\\u2211',\r\n    'sup': '\\u2283',\r\n    'sup1': '\\u00B9',\r\n    'sup2': '\\u00B2',\r\n    'sup3': '\\u00B3',\r\n    'supe': '\\u2287',\r\n    'szlig': '\\u00DF',\r\n    'Tau': '\\u03A4',\r\n    'tau': '\\u03C4',\r\n    'there4': '\\u2234',\r\n    'Theta': '\\u0398',\r\n    'theta': '\\u03B8',\r\n    'thetasym': '\\u03D1',\r\n    'thinsp': '\\u2009',\r\n    'THORN': '\\u00DE',\r\n    'thorn': '\\u00FE',\r\n    'tilde': '\\u02DC',\r\n    'times': '\\u00D7',\r\n    'trade': '\\u2122',\r\n    'Uacute': '\\u00DA',\r\n    'uacute': '\\u00FA',\r\n    'uarr': '\\u2191',\r\n    'uArr': '\\u21D1',\r\n    'Ucirc': '\\u00DB',\r\n    'ucirc': '\\u00FB',\r\n    'Ugrave': '\\u00D9',\r\n    'ugrave': '\\u00F9',\r\n    'uml': '\\u00A8',\r\n    'upsih': '\\u03D2',\r\n    'Upsilon': '\\u03A5',\r\n    'upsilon': '\\u03C5',\r\n    'Uuml': '\\u00DC',\r\n    'uuml': '\\u00FC',\r\n    'weierp': '\\u2118',\r\n    'Xi': '\\u039E',\r\n    'xi': '\\u03BE',\r\n    'Yacute': '\\u00DD',\r\n    'yacute': '\\u00FD',\r\n    'yen': '\\u00A5',\r\n    'yuml': '\\u00FF',\r\n    'Yuml': '\\u0178',\r\n    'Zeta': '\\u0396',\r\n    'zeta': '\\u03B6',\r\n    'zwj': '\\u200D',\r\n    'zwnj': '\\u200C',\r\n};\r\n// The &ngsp; pseudo-entity is denoting a space. see:\r\n// https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart\r\nconst NGSP_UNICODE = '\\uE500';\r\nNAMED_ENTITIES['ngsp'] = NGSP_UNICODE;\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst NG_CONTENT_SELECT_ATTR = 'select';\r\nconst LINK_ELEMENT = 'link';\r\nconst LINK_STYLE_REL_ATTR = 'rel';\r\nconst LINK_STYLE_HREF_ATTR = 'href';\r\nconst LINK_STYLE_REL_VALUE = 'stylesheet';\r\nconst STYLE_ELEMENT = 'style';\r\nconst SCRIPT_ELEMENT = 'script';\r\nconst NG_NON_BINDABLE_ATTR = 'ngNonBindable';\r\nconst NG_PROJECT_AS = 'ngProjectAs';\r\n/**\r\n * @param {?} ast\r\n * @return {?}\r\n */\r\nfunction preparseElement(ast) {\r\n    let /** @type {?} */ selectAttr = /** @type {?} */ ((null));\r\n    let /** @type {?} */ hrefAttr = /** @type {?} */ ((null));\r\n    let /** @type {?} */ relAttr = /** @type {?} */ ((null));\r\n    let /** @type {?} */ nonBindable = false;\r\n    let /** @type {?} */ projectAs = /** @type {?} */ ((null));\r\n    ast.attrs.forEach(attr => {\r\n        const /** @type {?} */ lcAttrName = attr.name.toLowerCase();\r\n        if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\r\n            selectAttr = attr.value;\r\n        }\r\n        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\r\n            hrefAttr = attr.value;\r\n        }\r\n        else if (lcAttrName == LINK_STYLE_REL_ATTR) {\r\n            relAttr = attr.value;\r\n        }\r\n        else if (attr.name == NG_NON_BINDABLE_ATTR) {\r\n            nonBindable = true;\r\n        }\r\n        else if (attr.name == NG_PROJECT_AS) {\r\n            if (attr.value.length > 0) {\r\n                projectAs = attr.value;\r\n            }\r\n        }\r\n    });\r\n    selectAttr = normalizeNgContentSelect(selectAttr);\r\n    const /** @type {?} */ nodeName = ast.name.toLowerCase();\r\n    let /** @type {?} */ type = PreparsedElementType.OTHER;\r\n    if (isNgContent(nodeName)) {\r\n        type = PreparsedElementType.NG_CONTENT;\r\n    }\r\n    else if (nodeName == STYLE_ELEMENT) {\r\n        type = PreparsedElementType.STYLE;\r\n    }\r\n    else if (nodeName == SCRIPT_ELEMENT) {\r\n        type = PreparsedElementType.SCRIPT;\r\n    }\r\n    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\r\n        type = PreparsedElementType.STYLESHEET;\r\n    }\r\n    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\r\n}\r\n/** @enum {number} */\r\nconst PreparsedElementType = {\r\n    NG_CONTENT: 0,\r\n    STYLE: 1,\r\n    STYLESHEET: 2,\r\n    SCRIPT: 3,\r\n    OTHER: 4,\r\n};\r\nPreparsedElementType[PreparsedElementType.NG_CONTENT] = \"NG_CONTENT\";\r\nPreparsedElementType[PreparsedElementType.STYLE] = \"STYLE\";\r\nPreparsedElementType[PreparsedElementType.STYLESHEET] = \"STYLESHEET\";\r\nPreparsedElementType[PreparsedElementType.SCRIPT] = \"SCRIPT\";\r\nPreparsedElementType[PreparsedElementType.OTHER] = \"OTHER\";\r\nclass PreparsedElement {\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} selectAttr\r\n     * @param {?} hrefAttr\r\n     * @param {?} nonBindable\r\n     * @param {?} projectAs\r\n     */\r\n    constructor(type, selectAttr, hrefAttr, nonBindable, projectAs) {\r\n        this.type = type;\r\n        this.selectAttr = selectAttr;\r\n        this.hrefAttr = hrefAttr;\r\n        this.nonBindable = nonBindable;\r\n        this.projectAs = projectAs;\r\n    }\r\n}\r\n/**\r\n * @param {?} selectAttr\r\n * @return {?}\r\n */\r\nfunction normalizeNgContentSelect(selectAttr) {\r\n    if (selectAttr === null || selectAttr.length === 0) {\r\n        return '*';\r\n    }\r\n    return selectAttr;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\nclass DirectiveNormalizer {\r\n    /**\r\n     * @param {?} _resourceLoader\r\n     * @param {?} _urlResolver\r\n     * @param {?} _htmlParser\r\n     * @param {?} _config\r\n     */\r\n    constructor(_resourceLoader, _urlResolver, _htmlParser, _config) {\r\n        this._resourceLoader = _resourceLoader;\r\n        this._urlResolver = _urlResolver;\r\n        this._htmlParser = _htmlParser;\r\n        this._config = _config;\r\n        this._resourceLoaderCache = new Map();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearCache() { this._resourceLoaderCache.clear(); }\r\n    /**\r\n     * @param {?} normalizedDirective\r\n     * @return {?}\r\n     */\r\n    clearCacheFor(normalizedDirective) {\r\n        if (!normalizedDirective.isComponent) {\r\n            return;\r\n        }\r\n        const /** @type {?} */ template = /** @type {?} */ ((normalizedDirective.template));\r\n        this._resourceLoaderCache.delete(/** @type {?} */ ((template.templateUrl)));\r\n        template.externalStylesheets.forEach((stylesheet) => { this._resourceLoaderCache.delete(/** @type {?} */ ((stylesheet.moduleUrl))); });\r\n    }\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    _fetch(url) {\r\n        let /** @type {?} */ result = this._resourceLoaderCache.get(url);\r\n        if (!result) {\r\n            result = this._resourceLoader.get(url);\r\n            this._resourceLoaderCache.set(url, result);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} prenormData\r\n     * @return {?}\r\n     */\r\n    normalizeTemplate(prenormData) {\r\n        if (isDefined(prenormData.template)) {\r\n            if (isDefined(prenormData.templateUrl)) {\r\n                throw syntaxError(`'${stringify(prenormData.componentType)}' component cannot define both template and templateUrl`);\r\n            }\r\n            if (typeof prenormData.template !== 'string') {\r\n                throw syntaxError(`The template specified for component ${stringify(prenormData.componentType)} is not a string`);\r\n            }\r\n        }\r\n        else if (isDefined(prenormData.templateUrl)) {\r\n            if (typeof prenormData.templateUrl !== 'string') {\r\n                throw syntaxError(`The templateUrl specified for component ${stringify(prenormData.componentType)} is not a string`);\r\n            }\r\n        }\r\n        else {\r\n            throw syntaxError(`No template specified for component ${stringify(prenormData.componentType)}`);\r\n        }\r\n        if (isDefined(prenormData.preserveWhitespaces) &&\r\n            typeof prenormData.preserveWhitespaces !== 'boolean') {\r\n            throw syntaxError(`The preserveWhitespaces option for component ${stringify(prenormData.componentType)} must be a boolean`);\r\n        }\r\n        return SyncAsync.then(this._preParseTemplate(prenormData), (preparsedTemplate) => this._normalizeTemplateMetadata(prenormData, preparsedTemplate));\r\n    }\r\n    /**\r\n     * @param {?} prenomData\r\n     * @return {?}\r\n     */\r\n    _preParseTemplate(prenomData) {\r\n        let /** @type {?} */ template;\r\n        let /** @type {?} */ templateUrl;\r\n        if (prenomData.template != null) {\r\n            template = prenomData.template;\r\n            templateUrl = prenomData.moduleUrl;\r\n        }\r\n        else {\r\n            templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, /** @type {?} */ ((prenomData.templateUrl)));\r\n            template = this._fetch(templateUrl);\r\n        }\r\n        return SyncAsync.then(template, (template) => this._preparseLoadedTemplate(prenomData, template, templateUrl));\r\n    }\r\n    /**\r\n     * @param {?} prenormData\r\n     * @param {?} template\r\n     * @param {?} templateAbsUrl\r\n     * @return {?}\r\n     */\r\n    _preparseLoadedTemplate(prenormData, template, templateAbsUrl) {\r\n        const /** @type {?} */ isInline = !!prenormData.template;\r\n        const /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((prenormData.interpolation)));\r\n        const /** @type {?} */ rootNodesAndErrors = this._htmlParser.parse(template, templateSourceUrl({ reference: prenormData.ngModuleType }, { type: { reference: prenormData.componentType } }, { isInline, templateUrl: templateAbsUrl }), true, interpolationConfig);\r\n        if (rootNodesAndErrors.errors.length > 0) {\r\n            const /** @type {?} */ errorString = rootNodesAndErrors.errors.join('\\n');\r\n            throw syntaxError(`Template parse errors:\\n${errorString}`);\r\n        }\r\n        const /** @type {?} */ templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: prenormData.styles, moduleUrl: prenormData.moduleUrl }));\r\n        const /** @type {?} */ visitor = new TemplatePreparseVisitor();\r\n        visitAll(visitor, rootNodesAndErrors.rootNodes);\r\n        const /** @type {?} */ templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));\r\n        const /** @type {?} */ styles = templateMetadataStyles.styles.concat(templateStyles.styles);\r\n        const /** @type {?} */ inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\r\n        const /** @type {?} */ styleUrls = this\r\n            ._normalizeStylesheet(new CompileStylesheetMetadata({ styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl }))\r\n            .styleUrls;\r\n        return {\r\n            template,\r\n            templateUrl: templateAbsUrl, isInline,\r\n            htmlAst: rootNodesAndErrors, styles, inlineStyleUrls, styleUrls,\r\n            ngContentSelectors: visitor.ngContentSelectors,\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} prenormData\r\n     * @param {?} preparsedTemplate\r\n     * @return {?}\r\n     */\r\n    _normalizeTemplateMetadata(prenormData, preparsedTemplate) {\r\n        return SyncAsync.then(this._loadMissingExternalStylesheets(preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)), (externalStylesheets) => this._normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, externalStylesheets));\r\n    }\r\n    /**\r\n     * @param {?} prenormData\r\n     * @param {?} preparsedTemplate\r\n     * @param {?} stylesheets\r\n     * @return {?}\r\n     */\r\n    _normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, stylesheets) {\r\n        // Algorithm:\r\n        // - produce exactly 1 entry per original styleUrl in\r\n        // CompileTemplateMetadata.externalStylesheets whith all styles inlined\r\n        // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\r\n        // Reason: be able to determine how many stylesheets there are even without loading\r\n        // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\r\n        // (as resouce loading may be async)\r\n        const /** @type {?} */ styles = [...preparsedTemplate.styles];\r\n        this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\r\n        const /** @type {?} */ styleUrls = preparsedTemplate.styleUrls;\r\n        const /** @type {?} */ externalStylesheets = styleUrls.map(styleUrl => {\r\n            const /** @type {?} */ stylesheet = /** @type {?} */ ((stylesheets.get(styleUrl)));\r\n            const /** @type {?} */ styles = [...stylesheet.styles];\r\n            this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\r\n            return new CompileStylesheetMetadata({ moduleUrl: styleUrl, styles: styles });\r\n        });\r\n        let /** @type {?} */ encapsulation = prenormData.encapsulation;\r\n        if (encapsulation == null) {\r\n            encapsulation = this._config.defaultEncapsulation;\r\n        }\r\n        if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 &&\r\n            styleUrls.length === 0) {\r\n            encapsulation = ViewEncapsulation.None;\r\n        }\r\n        return new CompileTemplateMetadata({\r\n            encapsulation,\r\n            template: preparsedTemplate.template,\r\n            templateUrl: preparsedTemplate.templateUrl,\r\n            htmlAst: preparsedTemplate.htmlAst, styles, styleUrls,\r\n            ngContentSelectors: preparsedTemplate.ngContentSelectors,\r\n            animations: prenormData.animations,\r\n            interpolation: prenormData.interpolation,\r\n            isInline: preparsedTemplate.isInline, externalStylesheets,\r\n            preserveWhitespaces: preserveWhitespacesDefault(prenormData.preserveWhitespaces, this._config.preserveWhitespaces),\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} styleUrls\r\n     * @param {?} stylesheets\r\n     * @param {?} targetStyles\r\n     * @return {?}\r\n     */\r\n    _inlineStyles(styleUrls, stylesheets, targetStyles) {\r\n        styleUrls.forEach(styleUrl => {\r\n            const /** @type {?} */ stylesheet = /** @type {?} */ ((stylesheets.get(styleUrl)));\r\n            stylesheet.styles.forEach(style => targetStyles.push(style));\r\n            this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} styleUrls\r\n     * @param {?=} loadedStylesheets\r\n     * @return {?}\r\n     */\r\n    _loadMissingExternalStylesheets(styleUrls, loadedStylesheets = new Map()) {\r\n        return SyncAsync.then(SyncAsync.all(styleUrls.filter((styleUrl) => !loadedStylesheets.has(styleUrl))\r\n            .map(styleUrl => SyncAsync.then(this._fetch(styleUrl), (loadedStyle) => {\r\n            const /** @type {?} */ stylesheet = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));\r\n            loadedStylesheets.set(styleUrl, stylesheet);\r\n            return this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);\r\n        }))), (_) => loadedStylesheets);\r\n    }\r\n    /**\r\n     * @param {?} stylesheet\r\n     * @return {?}\r\n     */\r\n    _normalizeStylesheet(stylesheet) {\r\n        const /** @type {?} */ moduleUrl = /** @type {?} */ ((stylesheet.moduleUrl));\r\n        const /** @type {?} */ allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)\r\n            .map(url => this._urlResolver.resolve(moduleUrl, url));\r\n        const /** @type {?} */ allStyles = stylesheet.styles.map(style => {\r\n            const /** @type {?} */ styleWithImports = extractStyleUrls(this._urlResolver, moduleUrl, style);\r\n            allStyleUrls.push(...styleWithImports.styleUrls);\r\n            return styleWithImports.style;\r\n        });\r\n        return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl });\r\n    }\r\n}\r\nclass TemplatePreparseVisitor {\r\n    constructor() {\r\n        this.ngContentSelectors = [];\r\n        this.styles = [];\r\n        this.styleUrls = [];\r\n        this.ngNonBindableStackCount = 0;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(ast, context) {\r\n        const /** @type {?} */ preparsedElement = preparseElement(ast);\r\n        switch (preparsedElement.type) {\r\n            case PreparsedElementType.NG_CONTENT:\r\n                if (this.ngNonBindableStackCount === 0) {\r\n                    this.ngContentSelectors.push(preparsedElement.selectAttr);\r\n                }\r\n                break;\r\n            case PreparsedElementType.STYLE:\r\n                let /** @type {?} */ textContent = '';\r\n                ast.children.forEach(child => {\r\n                    if (child instanceof Text) {\r\n                        textContent += child.value;\r\n                    }\r\n                });\r\n                this.styles.push(textContent);\r\n                break;\r\n            case PreparsedElementType.STYLESHEET:\r\n                this.styleUrls.push(preparsedElement.hrefAttr);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (preparsedElement.nonBindable) {\r\n            this.ngNonBindableStackCount++;\r\n        }\r\n        visitAll(this, ast.children);\r\n        if (preparsedElement.nonBindable) {\r\n            this.ngNonBindableStackCount--;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(ast, context) { visitAll(this, ast.cases); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(ast, context) {\r\n        visitAll(this, ast.expression);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(ast, context) { return null; }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(ast, context) { return null; }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(ast, context) { return null; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst QUERY_METADATA_IDENTIFIERS = [\r\n    createViewChild,\r\n    createViewChildren,\r\n    createContentChild,\r\n    createContentChildren,\r\n];\r\nclass DirectiveResolver {\r\n    /**\r\n     * @param {?} _reflector\r\n     */\r\n    constructor(_reflector) {\r\n        this._reflector = _reflector;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    isDirective(type) {\r\n        const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\r\n        return typeMetadata && typeMetadata.some(isDirectiveMetadata);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?=} throwIfNotFound\r\n     * @return {?}\r\n     */\r\n    resolve(type, throwIfNotFound = true) {\r\n        const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\r\n        if (typeMetadata) {\r\n            const /** @type {?} */ metadata = findLast(typeMetadata, isDirectiveMetadata);\r\n            if (metadata) {\r\n                const /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);\r\n                return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);\r\n            }\r\n        }\r\n        if (throwIfNotFound) {\r\n            throw new Error(`No Directive annotation found on ${stringify(type)}`);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} dm\r\n     * @param {?} propertyMetadata\r\n     * @param {?} directiveType\r\n     * @return {?}\r\n     */\r\n    _mergeWithPropertyMetadata(dm, propertyMetadata, directiveType) {\r\n        const /** @type {?} */ inputs = [];\r\n        const /** @type {?} */ outputs = [];\r\n        const /** @type {?} */ host = {};\r\n        const /** @type {?} */ queries = {};\r\n        Object.keys(propertyMetadata).forEach((propName) => {\r\n            const /** @type {?} */ input = findLast(propertyMetadata[propName], (a) => createInput.isTypeOf(a));\r\n            if (input) {\r\n                if (input.bindingPropertyName) {\r\n                    inputs.push(`${propName}: ${input.bindingPropertyName}`);\r\n                }\r\n                else {\r\n                    inputs.push(propName);\r\n                }\r\n            }\r\n            const /** @type {?} */ output = findLast(propertyMetadata[propName], (a) => createOutput.isTypeOf(a));\r\n            if (output) {\r\n                if (output.bindingPropertyName) {\r\n                    outputs.push(`${propName}: ${output.bindingPropertyName}`);\r\n                }\r\n                else {\r\n                    outputs.push(propName);\r\n                }\r\n            }\r\n            const /** @type {?} */ hostBindings = propertyMetadata[propName].filter(a => createHostBinding.isTypeOf(a));\r\n            hostBindings.forEach(hostBinding => {\r\n                if (hostBinding.hostPropertyName) {\r\n                    const /** @type {?} */ startWith = hostBinding.hostPropertyName[0];\r\n                    if (startWith === '(') {\r\n                        throw new Error(`@HostBinding can not bind to events. Use @HostListener instead.`);\r\n                    }\r\n                    else if (startWith === '[') {\r\n                        throw new Error(`@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.`);\r\n                    }\r\n                    host[`[${hostBinding.hostPropertyName}]`] = propName;\r\n                }\r\n                else {\r\n                    host[`[${propName}]`] = propName;\r\n                }\r\n            });\r\n            const /** @type {?} */ hostListeners = propertyMetadata[propName].filter(a => createHostListener.isTypeOf(a));\r\n            hostListeners.forEach(hostListener => {\r\n                const /** @type {?} */ args = hostListener.args || [];\r\n                host[`(${hostListener.eventName})`] = `${propName}(${args.join(',')})`;\r\n            });\r\n            const /** @type {?} */ query = findLast(propertyMetadata[propName], (a) => QUERY_METADATA_IDENTIFIERS.some(i => i.isTypeOf(a)));\r\n            if (query) {\r\n                queries[propName] = query;\r\n            }\r\n        });\r\n        return this._merge(dm, inputs, outputs, host, queries, directiveType);\r\n    }\r\n    /**\r\n     * @param {?} def\r\n     * @return {?}\r\n     */\r\n    _extractPublicName(def) { return splitAtColon(def, [/** @type {?} */ ((null)), def])[1].trim(); }\r\n    /**\r\n     * @param {?} bindings\r\n     * @return {?}\r\n     */\r\n    _dedupeBindings(bindings) {\r\n        const /** @type {?} */ names = new Set();\r\n        const /** @type {?} */ reversedResult = [];\r\n        // go last to first to allow later entries to overwrite previous entries\r\n        for (let /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {\r\n            const /** @type {?} */ binding = bindings[i];\r\n            const /** @type {?} */ name = this._extractPublicName(binding);\r\n            if (!names.has(name)) {\r\n                names.add(name);\r\n                reversedResult.push(binding);\r\n            }\r\n        }\r\n        return reversedResult.reverse();\r\n    }\r\n    /**\r\n     * @param {?} directive\r\n     * @param {?} inputs\r\n     * @param {?} outputs\r\n     * @param {?} host\r\n     * @param {?} queries\r\n     * @param {?} directiveType\r\n     * @return {?}\r\n     */\r\n    _merge(directive, inputs, outputs, host, queries, directiveType) {\r\n        const /** @type {?} */ mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);\r\n        const /** @type {?} */ mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);\r\n        const /** @type {?} */ mergedHost = directive.host ? Object.assign({}, directive.host, host) : host;\r\n        const /** @type {?} */ mergedQueries = directive.queries ? Object.assign({}, directive.queries, queries) : queries;\r\n        if (createComponent.isTypeOf(directive)) {\r\n            const /** @type {?} */ comp = /** @type {?} */ (directive);\r\n            return createComponent({\r\n                selector: comp.selector,\r\n                inputs: mergedInputs,\r\n                outputs: mergedOutputs,\r\n                host: mergedHost,\r\n                exportAs: comp.exportAs,\r\n                moduleId: comp.moduleId,\r\n                queries: mergedQueries,\r\n                changeDetection: comp.changeDetection,\r\n                providers: comp.providers,\r\n                viewProviders: comp.viewProviders,\r\n                entryComponents: comp.entryComponents,\r\n                template: comp.template,\r\n                templateUrl: comp.templateUrl,\r\n                styles: comp.styles,\r\n                styleUrls: comp.styleUrls,\r\n                encapsulation: comp.encapsulation,\r\n                animations: comp.animations,\r\n                interpolation: comp.interpolation,\r\n                preserveWhitespaces: directive.preserveWhitespaces,\r\n            });\r\n        }\r\n        else {\r\n            return createDirective({\r\n                selector: directive.selector,\r\n                inputs: mergedInputs,\r\n                outputs: mergedOutputs,\r\n                host: mergedHost,\r\n                exportAs: directive.exportAs,\r\n                queries: mergedQueries,\r\n                providers: directive.providers\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction isDirectiveMetadata(type) {\r\n    return createDirective.isTypeOf(type) || createComponent.isTypeOf(type);\r\n}\r\n/**\r\n * @template T\r\n * @param {?} arr\r\n * @param {?} condition\r\n * @return {?}\r\n */\r\nfunction findLast(arr, condition) {\r\n    for (let /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\r\n        if (condition(arr[i])) {\r\n            return arr[i];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst $EOF = 0;\r\nconst $TAB = 9;\r\nconst $LF = 10;\r\nconst $VTAB = 11;\r\nconst $FF = 12;\r\nconst $CR = 13;\r\nconst $SPACE = 32;\r\nconst $BANG = 33;\r\nconst $DQ = 34;\r\nconst $HASH = 35;\r\nconst $$ = 36;\r\nconst $PERCENT = 37;\r\nconst $AMPERSAND = 38;\r\nconst $SQ = 39;\r\nconst $LPAREN = 40;\r\nconst $RPAREN = 41;\r\nconst $STAR = 42;\r\nconst $PLUS = 43;\r\nconst $COMMA = 44;\r\nconst $MINUS = 45;\r\nconst $PERIOD = 46;\r\nconst $SLASH = 47;\r\nconst $COLON = 58;\r\nconst $SEMICOLON = 59;\r\nconst $LT = 60;\r\nconst $EQ = 61;\r\nconst $GT = 62;\r\nconst $QUESTION = 63;\r\nconst $0 = 48;\r\nconst $9 = 57;\r\nconst $A = 65;\r\nconst $E = 69;\r\nconst $F = 70;\r\nconst $X = 88;\r\nconst $Z = 90;\r\nconst $LBRACKET = 91;\r\nconst $BACKSLASH = 92;\r\nconst $RBRACKET = 93;\r\nconst $CARET = 94;\r\nconst $_ = 95;\r\nconst $a = 97;\r\nconst $e = 101;\r\nconst $f = 102;\r\nconst $n = 110;\r\nconst $r = 114;\r\nconst $t = 116;\r\nconst $u = 117;\r\nconst $v = 118;\r\nconst $x = 120;\r\nconst $z = 122;\r\nconst $LBRACE = 123;\r\nconst $BAR = 124;\r\nconst $RBRACE = 125;\r\nconst $NBSP = 160;\r\n\r\n\r\n\r\nconst $BT = 96;\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isWhitespace(code) {\r\n    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isDigit(code) {\r\n    return $0 <= code && code <= $9;\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isAsciiLetter(code) {\r\n    return code >= $a && code <= $z || code >= $A && code <= $Z;\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isAsciiHexDigit(code) {\r\n    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst TokenType = {\r\n    Character: 0,\r\n    Identifier: 1,\r\n    Keyword: 2,\r\n    String: 3,\r\n    Operator: 4,\r\n    Number: 5,\r\n    Error: 6,\r\n};\r\nTokenType[TokenType.Character] = \"Character\";\r\nTokenType[TokenType.Identifier] = \"Identifier\";\r\nTokenType[TokenType.Keyword] = \"Keyword\";\r\nTokenType[TokenType.String] = \"String\";\r\nTokenType[TokenType.Operator] = \"Operator\";\r\nTokenType[TokenType.Number] = \"Number\";\r\nTokenType[TokenType.Error] = \"Error\";\r\nconst KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\r\nclass Lexer {\r\n    /**\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    tokenize(text) {\r\n        const /** @type {?} */ scanner = new _Scanner(text);\r\n        const /** @type {?} */ tokens = [];\r\n        let /** @type {?} */ token = scanner.scanToken();\r\n        while (token != null) {\r\n            tokens.push(token);\r\n            token = scanner.scanToken();\r\n        }\r\n        return tokens;\r\n    }\r\n}\r\nclass Token {\r\n    /**\r\n     * @param {?} index\r\n     * @param {?} type\r\n     * @param {?} numValue\r\n     * @param {?} strValue\r\n     */\r\n    constructor(index, type, numValue, strValue) {\r\n        this.index = index;\r\n        this.type = type;\r\n        this.numValue = numValue;\r\n        this.strValue = strValue;\r\n    }\r\n    /**\r\n     * @param {?} code\r\n     * @return {?}\r\n     */\r\n    isCharacter(code) {\r\n        return this.type == TokenType.Character && this.numValue == code;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isNumber() { return this.type == TokenType.Number; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isString() { return this.type == TokenType.String; }\r\n    /**\r\n     * @param {?} operater\r\n     * @return {?}\r\n     */\r\n    isOperator(operater) {\r\n        return this.type == TokenType.Operator && this.strValue == operater;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isIdentifier() { return this.type == TokenType.Identifier; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isKeyword() { return this.type == TokenType.Keyword; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isKeywordLet() { return this.type == TokenType.Keyword && this.strValue == 'let'; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isKeywordAs() { return this.type == TokenType.Keyword && this.strValue == 'as'; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isKeywordNull() { return this.type == TokenType.Keyword && this.strValue == 'null'; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isKeywordUndefined() {\r\n        return this.type == TokenType.Keyword && this.strValue == 'undefined';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isKeywordTrue() { return this.type == TokenType.Keyword && this.strValue == 'true'; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isKeywordFalse() { return this.type == TokenType.Keyword && this.strValue == 'false'; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isKeywordThis() { return this.type == TokenType.Keyword && this.strValue == 'this'; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isError() { return this.type == TokenType.Error; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toNumber() { return this.type == TokenType.Number ? this.numValue : -1; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        switch (this.type) {\r\n            case TokenType.Character:\r\n            case TokenType.Identifier:\r\n            case TokenType.Keyword:\r\n            case TokenType.Operator:\r\n            case TokenType.String:\r\n            case TokenType.Error:\r\n                return this.strValue;\r\n            case TokenType.Number:\r\n                return this.numValue.toString();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction newCharacterToken(index, code) {\r\n    return new Token(index, TokenType.Character, code, String.fromCharCode(code));\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction newIdentifierToken(index, text) {\r\n    return new Token(index, TokenType.Identifier, 0, text);\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction newKeywordToken(index, text) {\r\n    return new Token(index, TokenType.Keyword, 0, text);\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction newOperatorToken(index, text) {\r\n    return new Token(index, TokenType.Operator, 0, text);\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction newStringToken(index, text) {\r\n    return new Token(index, TokenType.String, 0, text);\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?} n\r\n * @return {?}\r\n */\r\nfunction newNumberToken(index, n) {\r\n    return new Token(index, TokenType.Number, n, '');\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?} message\r\n * @return {?}\r\n */\r\nfunction newErrorToken(index, message) {\r\n    return new Token(index, TokenType.Error, 0, message);\r\n}\r\nconst EOF = new Token(-1, TokenType.Character, 0, '');\r\nclass _Scanner {\r\n    /**\r\n     * @param {?} input\r\n     */\r\n    constructor(input) {\r\n        this.input = input;\r\n        this.peek = 0;\r\n        this.index = -1;\r\n        this.length = input.length;\r\n        this.advance();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    advance() {\r\n        this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    scanToken() {\r\n        const /** @type {?} */ input = this.input, /** @type {?} */ length = this.length;\r\n        let /** @type {?} */ peek = this.peek, /** @type {?} */ index = this.index;\r\n        // Skip whitespace.\r\n        while (peek <= $SPACE) {\r\n            if (++index >= length) {\r\n                peek = $EOF;\r\n                break;\r\n            }\r\n            else {\r\n                peek = input.charCodeAt(index);\r\n            }\r\n        }\r\n        this.peek = peek;\r\n        this.index = index;\r\n        if (index >= length) {\r\n            return null;\r\n        }\r\n        // Handle identifiers and numbers.\r\n        if (isIdentifierStart(peek))\r\n            return this.scanIdentifier();\r\n        if (isDigit(peek))\r\n            return this.scanNumber(index);\r\n        const /** @type {?} */ start = index;\r\n        switch (peek) {\r\n            case $PERIOD:\r\n                this.advance();\r\n                return isDigit(this.peek) ? this.scanNumber(start) :\r\n                    newCharacterToken(start, $PERIOD);\r\n            case $LPAREN:\r\n            case $RPAREN:\r\n            case $LBRACE:\r\n            case $RBRACE:\r\n            case $LBRACKET:\r\n            case $RBRACKET:\r\n            case $COMMA:\r\n            case $COLON:\r\n            case $SEMICOLON:\r\n                return this.scanCharacter(start, peek);\r\n            case $SQ:\r\n            case $DQ:\r\n                return this.scanString();\r\n            case $HASH:\r\n            case $PLUS:\r\n            case $MINUS:\r\n            case $STAR:\r\n            case $SLASH:\r\n            case $PERCENT:\r\n            case $CARET:\r\n                return this.scanOperator(start, String.fromCharCode(peek));\r\n            case $QUESTION:\r\n                return this.scanComplexOperator(start, '?', $PERIOD, '.');\r\n            case $LT:\r\n            case $GT:\r\n                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');\r\n            case $BANG:\r\n            case $EQ:\r\n                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');\r\n            case $AMPERSAND:\r\n                return this.scanComplexOperator(start, '&', $AMPERSAND, '&');\r\n            case $BAR:\r\n                return this.scanComplexOperator(start, '|', $BAR, '|');\r\n            case $NBSP:\r\n                while (isWhitespace(this.peek))\r\n                    this.advance();\r\n                return this.scanToken();\r\n        }\r\n        this.advance();\r\n        return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @param {?} code\r\n     * @return {?}\r\n     */\r\n    scanCharacter(start, code) {\r\n        this.advance();\r\n        return newCharacterToken(start, code);\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @param {?} str\r\n     * @return {?}\r\n     */\r\n    scanOperator(start, str) {\r\n        this.advance();\r\n        return newOperatorToken(start, str);\r\n    }\r\n    /**\r\n     * Tokenize a 2/3 char long operator\r\n     *\r\n     * @param {?} start start index in the expression\r\n     * @param {?} one first symbol (always part of the operator)\r\n     * @param {?} twoCode code point for the second symbol\r\n     * @param {?} two second symbol (part of the operator when the second code point matches)\r\n     * @param {?=} threeCode code point for the third symbol\r\n     * @param {?=} three third symbol (part of the operator when provided and matches source expression)\r\n     * @return {?}\r\n     */\r\n    scanComplexOperator(start, one, twoCode, two, threeCode, three) {\r\n        this.advance();\r\n        let /** @type {?} */ str = one;\r\n        if (this.peek == twoCode) {\r\n            this.advance();\r\n            str += two;\r\n        }\r\n        if (threeCode != null && this.peek == threeCode) {\r\n            this.advance();\r\n            str += three;\r\n        }\r\n        return newOperatorToken(start, str);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    scanIdentifier() {\r\n        const /** @type {?} */ start = this.index;\r\n        this.advance();\r\n        while (isIdentifierPart(this.peek))\r\n            this.advance();\r\n        const /** @type {?} */ str = this.input.substring(start, this.index);\r\n        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :\r\n            newIdentifierToken(start, str);\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    scanNumber(start) {\r\n        let /** @type {?} */ simple = (this.index === start);\r\n        this.advance(); // Skip initial digit.\r\n        while (true) {\r\n            if (isDigit(this.peek)) {\r\n                // Do nothing.\r\n            }\r\n            else if (this.peek == $PERIOD) {\r\n                simple = false;\r\n            }\r\n            else if (isExponentStart(this.peek)) {\r\n                this.advance();\r\n                if (isExponentSign(this.peek))\r\n                    this.advance();\r\n                if (!isDigit(this.peek))\r\n                    return this.error('Invalid exponent', -1);\r\n                simple = false;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            this.advance();\r\n        }\r\n        const /** @type {?} */ str = this.input.substring(start, this.index);\r\n        const /** @type {?} */ value = simple ? parseIntAutoRadix(str) : parseFloat(str);\r\n        return newNumberToken(start, value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    scanString() {\r\n        const /** @type {?} */ start = this.index;\r\n        const /** @type {?} */ quote = this.peek;\r\n        this.advance(); // Skip initial quote.\r\n        let /** @type {?} */ buffer = '';\r\n        let /** @type {?} */ marker = this.index;\r\n        const /** @type {?} */ input = this.input;\r\n        while (this.peek != quote) {\r\n            if (this.peek == $BACKSLASH) {\r\n                buffer += input.substring(marker, this.index);\r\n                this.advance();\r\n                let /** @type {?} */ unescapedCode;\r\n                // Workaround for TS2.1-introduced type strictness\r\n                this.peek = this.peek;\r\n                if (this.peek == $u) {\r\n                    // 4 character hex code for unicode character.\r\n                    const /** @type {?} */ hex = input.substring(this.index + 1, this.index + 5);\r\n                    if (/^[0-9a-f]+$/i.test(hex)) {\r\n                        unescapedCode = parseInt(hex, 16);\r\n                    }\r\n                    else {\r\n                        return this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\r\n                    }\r\n                    for (let /** @type {?} */ i = 0; i < 5; i++) {\r\n                        this.advance();\r\n                    }\r\n                }\r\n                else {\r\n                    unescapedCode = unescape(this.peek);\r\n                    this.advance();\r\n                }\r\n                buffer += String.fromCharCode(unescapedCode);\r\n                marker = this.index;\r\n            }\r\n            else if (this.peek == $EOF) {\r\n                return this.error('Unterminated quote', 0);\r\n            }\r\n            else {\r\n                this.advance();\r\n            }\r\n        }\r\n        const /** @type {?} */ last = input.substring(marker, this.index);\r\n        this.advance(); // Skip terminating quote.\r\n        return newStringToken(start, buffer + last);\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} offset\r\n     * @return {?}\r\n     */\r\n    error(message, offset) {\r\n        const /** @type {?} */ position = this.index + offset;\r\n        return newErrorToken(position, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\r\n    }\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isIdentifierStart(code) {\r\n    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||\r\n        (code == $_) || (code == $$);\r\n}\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\nfunction isIdentifier(input) {\r\n    if (input.length == 0)\r\n        return false;\r\n    const /** @type {?} */ scanner = new _Scanner(input);\r\n    if (!isIdentifierStart(scanner.peek))\r\n        return false;\r\n    scanner.advance();\r\n    while (scanner.peek !== $EOF) {\r\n        if (!isIdentifierPart(scanner.peek))\r\n            return false;\r\n        scanner.advance();\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isIdentifierPart(code) {\r\n    return isAsciiLetter(code) || isDigit(code) || (code == $_) ||\r\n        (code == $$);\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isExponentStart(code) {\r\n    return code == $e || code == $E;\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isExponentSign(code) {\r\n    return code == $MINUS || code == $PLUS;\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isQuote(code) {\r\n    return code === $SQ || code === $DQ || code === $BT;\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction unescape(code) {\r\n    switch (code) {\r\n        case $n:\r\n            return $LF;\r\n        case $f:\r\n            return $FF;\r\n        case $r:\r\n            return $CR;\r\n        case $t:\r\n            return $TAB;\r\n        case $v:\r\n            return $VTAB;\r\n        default:\r\n            return code;\r\n    }\r\n}\r\n/**\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction parseIntAutoRadix(text) {\r\n    const /** @type {?} */ result = parseInt(text);\r\n    if (isNaN(result)) {\r\n        throw new Error('Invalid integer literal when parsing ' + text);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass ParserError {\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} input\r\n     * @param {?} errLocation\r\n     * @param {?=} ctxLocation\r\n     */\r\n    constructor(message, input, errLocation, ctxLocation) {\r\n        this.input = input;\r\n        this.errLocation = errLocation;\r\n        this.ctxLocation = ctxLocation;\r\n        this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\r\n    }\r\n}\r\nclass ParseSpan {\r\n    /**\r\n     * @param {?} start\r\n     * @param {?} end\r\n     */\r\n    constructor(start, end) {\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n}\r\nclass AST {\r\n    /**\r\n     * @param {?} span\r\n     */\r\n    constructor(span) {\r\n        this.span = span;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) { return null; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return 'AST'; }\r\n}\r\n/**\r\n * Represents a quoted expression of the form:\r\n *\r\n * quote = prefix `:` uninterpretedExpression\r\n * prefix = identifier\r\n * uninterpretedExpression = arbitrary string\r\n *\r\n * A quoted expression is meant to be pre-processed by an AST transformer that\r\n * converts it into another AST that no longer contains quoted expressions.\r\n * It is meant to allow third-party developers to extend Angular template\r\n * expression language. The `uninterpretedExpression` part of the quote is\r\n * therefore not interpreted by the Angular's own expression parser.\r\n */\r\nclass Quote extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} prefix\r\n     * @param {?} uninterpretedExpression\r\n     * @param {?} location\r\n     */\r\n    constructor(span, prefix, uninterpretedExpression, location) {\r\n        super(span);\r\n        this.prefix = prefix;\r\n        this.uninterpretedExpression = uninterpretedExpression;\r\n        this.location = location;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) { return visitor.visitQuote(this, context); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return 'Quote'; }\r\n}\r\nclass EmptyExpr extends AST {\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        // do nothing\r\n    }\r\n}\r\nclass ImplicitReceiver extends AST {\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitImplicitReceiver(this, context);\r\n    }\r\n}\r\n/**\r\n * Multiple expressions separated by a semicolon.\r\n */\r\nclass Chain extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} expressions\r\n     */\r\n    constructor(span, expressions) {\r\n        super(span);\r\n        this.expressions = expressions;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) { return visitor.visitChain(this, context); }\r\n}\r\nclass Conditional extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} condition\r\n     * @param {?} trueExp\r\n     * @param {?} falseExp\r\n     */\r\n    constructor(span, condition, trueExp, falseExp) {\r\n        super(span);\r\n        this.condition = condition;\r\n        this.trueExp = trueExp;\r\n        this.falseExp = falseExp;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitConditional(this, context);\r\n    }\r\n}\r\nclass PropertyRead extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} receiver\r\n     * @param {?} name\r\n     */\r\n    constructor(span, receiver, name) {\r\n        super(span);\r\n        this.receiver = receiver;\r\n        this.name = name;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitPropertyRead(this, context);\r\n    }\r\n}\r\nclass PropertyWrite extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} receiver\r\n     * @param {?} name\r\n     * @param {?} value\r\n     */\r\n    constructor(span, receiver, name, value) {\r\n        super(span);\r\n        this.receiver = receiver;\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitPropertyWrite(this, context);\r\n    }\r\n}\r\nclass SafePropertyRead extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} receiver\r\n     * @param {?} name\r\n     */\r\n    constructor(span, receiver, name) {\r\n        super(span);\r\n        this.receiver = receiver;\r\n        this.name = name;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitSafePropertyRead(this, context);\r\n    }\r\n}\r\nclass KeyedRead extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} obj\r\n     * @param {?} key\r\n     */\r\n    constructor(span, obj, key) {\r\n        super(span);\r\n        this.obj = obj;\r\n        this.key = key;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitKeyedRead(this, context);\r\n    }\r\n}\r\nclass KeyedWrite extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} obj\r\n     * @param {?} key\r\n     * @param {?} value\r\n     */\r\n    constructor(span, obj, key, value) {\r\n        super(span);\r\n        this.obj = obj;\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitKeyedWrite(this, context);\r\n    }\r\n}\r\nclass BindingPipe extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} exp\r\n     * @param {?} name\r\n     * @param {?} args\r\n     */\r\n    constructor(span, exp, name, args) {\r\n        super(span);\r\n        this.exp = exp;\r\n        this.name = name;\r\n        this.args = args;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) { return visitor.visitPipe(this, context); }\r\n}\r\nclass LiteralPrimitive extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} value\r\n     */\r\n    constructor(span, value) {\r\n        super(span);\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitLiteralPrimitive(this, context);\r\n    }\r\n}\r\nclass LiteralArray extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} expressions\r\n     */\r\n    constructor(span, expressions) {\r\n        super(span);\r\n        this.expressions = expressions;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitLiteralArray(this, context);\r\n    }\r\n}\r\nclass LiteralMap extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} keys\r\n     * @param {?} values\r\n     */\r\n    constructor(span, keys, values) {\r\n        super(span);\r\n        this.keys = keys;\r\n        this.values = values;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitLiteralMap(this, context);\r\n    }\r\n}\r\nclass Interpolation extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} strings\r\n     * @param {?} expressions\r\n     */\r\n    constructor(span, strings, expressions) {\r\n        super(span);\r\n        this.strings = strings;\r\n        this.expressions = expressions;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitInterpolation(this, context);\r\n    }\r\n}\r\nclass Binary extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} operation\r\n     * @param {?} left\r\n     * @param {?} right\r\n     */\r\n    constructor(span, operation, left, right) {\r\n        super(span);\r\n        this.operation = operation;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitBinary(this, context);\r\n    }\r\n}\r\nclass PrefixNot extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} expression\r\n     */\r\n    constructor(span, expression) {\r\n        super(span);\r\n        this.expression = expression;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitPrefixNot(this, context);\r\n    }\r\n}\r\nclass NonNullAssert extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} expression\r\n     */\r\n    constructor(span, expression) {\r\n        super(span);\r\n        this.expression = expression;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitNonNullAssert(this, context);\r\n    }\r\n}\r\nclass MethodCall extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} receiver\r\n     * @param {?} name\r\n     * @param {?} args\r\n     */\r\n    constructor(span, receiver, name, args) {\r\n        super(span);\r\n        this.receiver = receiver;\r\n        this.name = name;\r\n        this.args = args;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitMethodCall(this, context);\r\n    }\r\n}\r\nclass SafeMethodCall extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} receiver\r\n     * @param {?} name\r\n     * @param {?} args\r\n     */\r\n    constructor(span, receiver, name, args) {\r\n        super(span);\r\n        this.receiver = receiver;\r\n        this.name = name;\r\n        this.args = args;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitSafeMethodCall(this, context);\r\n    }\r\n}\r\nclass FunctionCall extends AST {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} target\r\n     * @param {?} args\r\n     */\r\n    constructor(span, target, args) {\r\n        super(span);\r\n        this.target = target;\r\n        this.args = args;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) {\r\n        return visitor.visitFunctionCall(this, context);\r\n    }\r\n}\r\nclass ASTWithSource extends AST {\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} source\r\n     * @param {?} location\r\n     * @param {?} errors\r\n     */\r\n    constructor(ast, source, location, errors) {\r\n        super(new ParseSpan(0, source == null ? 0 : source.length));\r\n        this.ast = ast;\r\n        this.source = source;\r\n        this.location = location;\r\n        this.errors = errors;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context = null) { return this.ast.visit(visitor, context); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return `${this.source} in ${this.location}`; }\r\n}\r\nclass TemplateBinding {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} key\r\n     * @param {?} keyIsVar\r\n     * @param {?} name\r\n     * @param {?} expression\r\n     */\r\n    constructor(span, key, keyIsVar, name, expression) {\r\n        this.span = span;\r\n        this.key = key;\r\n        this.keyIsVar = keyIsVar;\r\n        this.name = name;\r\n        this.expression = expression;\r\n    }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\nclass NullAstVisitor {\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitBinary(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitChain(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitConditional(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitFunctionCall(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitImplicitReceiver(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitInterpolation(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitKeyedRead(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitKeyedWrite(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralArray(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralMap(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralPrimitive(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitMethodCall(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPipe(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPrefixNot(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitNonNullAssert(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPropertyRead(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPropertyWrite(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitQuote(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitSafeMethodCall(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitSafePropertyRead(ast, context) { }\r\n}\r\nclass RecursiveAstVisitor {\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitBinary(ast, context) {\r\n        ast.left.visit(this);\r\n        ast.right.visit(this);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitChain(ast, context) { return this.visitAll(ast.expressions, context); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitConditional(ast, context) {\r\n        ast.condition.visit(this);\r\n        ast.trueExp.visit(this);\r\n        ast.falseExp.visit(this);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPipe(ast, context) {\r\n        ast.exp.visit(this);\r\n        this.visitAll(ast.args, context);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitFunctionCall(ast, context) {\r\n        /** @type {?} */ ((ast.target)).visit(this);\r\n        this.visitAll(ast.args, context);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitImplicitReceiver(ast, context) { return null; }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitInterpolation(ast, context) {\r\n        return this.visitAll(ast.expressions, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitKeyedRead(ast, context) {\r\n        ast.obj.visit(this);\r\n        ast.key.visit(this);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitKeyedWrite(ast, context) {\r\n        ast.obj.visit(this);\r\n        ast.key.visit(this);\r\n        ast.value.visit(this);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralArray(ast, context) {\r\n        return this.visitAll(ast.expressions, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralMap(ast, context) { return this.visitAll(ast.values, context); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralPrimitive(ast, context) { return null; }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitMethodCall(ast, context) {\r\n        ast.receiver.visit(this);\r\n        return this.visitAll(ast.args, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPrefixNot(ast, context) {\r\n        ast.expression.visit(this);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitNonNullAssert(ast, context) {\r\n        ast.expression.visit(this);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPropertyRead(ast, context) {\r\n        ast.receiver.visit(this);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPropertyWrite(ast, context) {\r\n        ast.receiver.visit(this);\r\n        ast.value.visit(this);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitSafePropertyRead(ast, context) {\r\n        ast.receiver.visit(this);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitSafeMethodCall(ast, context) {\r\n        ast.receiver.visit(this);\r\n        return this.visitAll(ast.args, context);\r\n    }\r\n    /**\r\n     * @param {?} asts\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAll(asts, context) {\r\n        asts.forEach(ast => ast.visit(this, context));\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitQuote(ast, context) { return null; }\r\n}\r\nclass AstTransformer {\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitImplicitReceiver(ast, context) { return ast; }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitInterpolation(ast, context) {\r\n        return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralPrimitive(ast, context) {\r\n        return new LiteralPrimitive(ast.span, ast.value);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPropertyRead(ast, context) {\r\n        return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPropertyWrite(ast, context) {\r\n        return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitSafePropertyRead(ast, context) {\r\n        return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitMethodCall(ast, context) {\r\n        return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitSafeMethodCall(ast, context) {\r\n        return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitFunctionCall(ast, context) {\r\n        return new FunctionCall(ast.span, /** @type {?} */ ((ast.target)).visit(this), this.visitAll(ast.args));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralArray(ast, context) {\r\n        return new LiteralArray(ast.span, this.visitAll(ast.expressions));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralMap(ast, context) {\r\n        return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitBinary(ast, context) {\r\n        return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPrefixNot(ast, context) {\r\n        return new PrefixNot(ast.span, ast.expression.visit(this));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitNonNullAssert(ast, context) {\r\n        return new NonNullAssert(ast.span, ast.expression.visit(this));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitConditional(ast, context) {\r\n        return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPipe(ast, context) {\r\n        return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitKeyedRead(ast, context) {\r\n        return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitKeyedWrite(ast, context) {\r\n        return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\r\n    }\r\n    /**\r\n     * @param {?} asts\r\n     * @return {?}\r\n     */\r\n    visitAll(asts) {\r\n        const /** @type {?} */ res = new Array(asts.length);\r\n        for (let /** @type {?} */ i = 0; i < asts.length; ++i) {\r\n            res[i] = asts[i].visit(this);\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitChain(ast, context) {\r\n        return new Chain(ast.span, this.visitAll(ast.expressions));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitQuote(ast, context) {\r\n        return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\r\n    }\r\n}\r\n/**\r\n * @param {?} ast\r\n * @param {?} visitor\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction visitAstChildren(ast, visitor, context) {\r\n    /**\r\n     * @param {?} ast\r\n     * @return {?}\r\n     */\r\n    function visit(ast) {\r\n        visitor.visit && visitor.visit(ast, context) || ast.visit(visitor, context);\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} asts\r\n     * @return {?}\r\n     */\r\n    function visitAll(asts) { asts.forEach(visit); }\r\n    ast.visit({\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitBinary(ast) {\r\n            visit(ast.left);\r\n            visit(ast.right);\r\n        },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitChain(ast) { visitAll(ast.expressions); },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitConditional(ast) {\r\n            visit(ast.condition);\r\n            visit(ast.trueExp);\r\n            visit(ast.falseExp);\r\n        },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitFunctionCall(ast) {\r\n            if (ast.target) {\r\n                visit(ast.target);\r\n            }\r\n            visitAll(ast.args);\r\n        },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitImplicitReceiver(ast) { },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitInterpolation(ast) { visitAll(ast.expressions); },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitKeyedRead(ast) {\r\n            visit(ast.obj);\r\n            visit(ast.key);\r\n        },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitKeyedWrite(ast) {\r\n            visit(ast.obj);\r\n            visit(ast.key);\r\n            visit(ast.obj);\r\n        },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitLiteralArray(ast) { visitAll(ast.expressions); },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitLiteralMap(ast) { },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitLiteralPrimitive(ast) { },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitMethodCall(ast) {\r\n            visit(ast.receiver);\r\n            visitAll(ast.args);\r\n        },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitPipe(ast) {\r\n            visit(ast.exp);\r\n            visitAll(ast.args);\r\n        },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitPrefixNot(ast) { visit(ast.expression); },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitNonNullAssert(ast) { visit(ast.expression); },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitPropertyRead(ast) { visit(ast.receiver); },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitPropertyWrite(ast) {\r\n            visit(ast.receiver);\r\n            visit(ast.value);\r\n        },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitQuote(ast) { },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitSafeMethodCall(ast) {\r\n            visit(ast.receiver);\r\n            visitAll(ast.args);\r\n        },\r\n        /**\r\n         * @param {?} ast\r\n         * @return {?}\r\n         */\r\n        visitSafePropertyRead(ast) { visit(ast.receiver); },\r\n    });\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass SplitInterpolation {\r\n    /**\r\n     * @param {?} strings\r\n     * @param {?} expressions\r\n     * @param {?} offsets\r\n     */\r\n    constructor(strings, expressions, offsets) {\r\n        this.strings = strings;\r\n        this.expressions = expressions;\r\n        this.offsets = offsets;\r\n    }\r\n}\r\nclass TemplateBindingParseResult {\r\n    /**\r\n     * @param {?} templateBindings\r\n     * @param {?} warnings\r\n     * @param {?} errors\r\n     */\r\n    constructor(templateBindings, warnings, errors) {\r\n        this.templateBindings = templateBindings;\r\n        this.warnings = warnings;\r\n        this.errors = errors;\r\n    }\r\n}\r\n/**\r\n * @param {?} config\r\n * @return {?}\r\n */\r\nfunction _createInterpolateRegExp(config) {\r\n    const /** @type {?} */ pattern = escapeRegExp(config.start) + '([\\\\s\\\\S]*?)' + escapeRegExp(config.end);\r\n    return new RegExp(pattern, 'g');\r\n}\r\nclass Parser {\r\n    /**\r\n     * @param {?} _lexer\r\n     */\r\n    constructor(_lexer) {\r\n        this._lexer = _lexer;\r\n        this.errors = [];\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @param {?=} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    parseAction(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\r\n        this._checkNoInterpolation(input, location, interpolationConfig);\r\n        const /** @type {?} */ sourceToLex = this._stripComments(input);\r\n        const /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));\r\n        const /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)\r\n            .parseChain();\r\n        return new ASTWithSource(ast, input, location, this.errors);\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @param {?=} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    parseBinding(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\r\n        const /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);\r\n        return new ASTWithSource(ast, input, location, this.errors);\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @param {?=} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    parseSimpleBinding(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\r\n        const /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);\r\n        const /** @type {?} */ errors = SimpleExpressionChecker.check(ast);\r\n        if (errors.length > 0) {\r\n            this._reportError(`Host binding expression cannot contain ${errors.join(' ')}`, input, location);\r\n        }\r\n        return new ASTWithSource(ast, input, location, this.errors);\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} input\r\n     * @param {?} errLocation\r\n     * @param {?=} ctxLocation\r\n     * @return {?}\r\n     */\r\n    _reportError(message, input, errLocation, ctxLocation) {\r\n        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @param {?} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    _parseBindingAst(input, location, interpolationConfig) {\r\n        // Quotes expressions use 3rd-party expression language. We don't want to use\r\n        // our lexer or parser for that, so we check for that ahead of time.\r\n        const /** @type {?} */ quote = this._parseQuote(input, location);\r\n        if (quote != null) {\r\n            return quote;\r\n        }\r\n        this._checkNoInterpolation(input, location, interpolationConfig);\r\n        const /** @type {?} */ sourceToLex = this._stripComments(input);\r\n        const /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);\r\n        return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)\r\n            .parseChain();\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @return {?}\r\n     */\r\n    _parseQuote(input, location) {\r\n        if (input == null)\r\n            return null;\r\n        const /** @type {?} */ prefixSeparatorIndex = input.indexOf(':');\r\n        if (prefixSeparatorIndex == -1)\r\n            return null;\r\n        const /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();\r\n        if (!isIdentifier(prefix))\r\n            return null;\r\n        const /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\r\n        return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);\r\n    }\r\n    /**\r\n     * @param {?} prefixToken\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @return {?}\r\n     */\r\n    parseTemplateBindings(prefixToken, input, location) {\r\n        const /** @type {?} */ tokens = this._lexer.tokenize(input);\r\n        if (prefixToken) {\r\n            // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).\r\n            const /** @type {?} */ prefixTokens = this._lexer.tokenize(prefixToken).map(t => {\r\n                t.index = 0;\r\n                return t;\r\n            });\r\n            tokens.unshift(...prefixTokens);\r\n        }\r\n        return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)\r\n            .parseTemplateBindings();\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @param {?=} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    parseInterpolation(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\r\n        const /** @type {?} */ split = this.splitInterpolation(input, location, interpolationConfig);\r\n        if (split == null)\r\n            return null;\r\n        const /** @type {?} */ expressions = [];\r\n        for (let /** @type {?} */ i = 0; i < split.expressions.length; ++i) {\r\n            const /** @type {?} */ expressionText = split.expressions[i];\r\n            const /** @type {?} */ sourceToLex = this._stripComments(expressionText);\r\n            const /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);\r\n            const /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))\r\n                .parseChain();\r\n            expressions.push(ast);\r\n        }\r\n        return new ASTWithSource(new Interpolation(new ParseSpan(0, input == null ? 0 : input.length), split.strings, expressions), input, location, this.errors);\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @param {?=} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    splitInterpolation(input, location, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\r\n        const /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);\r\n        const /** @type {?} */ parts = input.split(regexp);\r\n        if (parts.length <= 1) {\r\n            return null;\r\n        }\r\n        const /** @type {?} */ strings = [];\r\n        const /** @type {?} */ expressions = [];\r\n        const /** @type {?} */ offsets = [];\r\n        let /** @type {?} */ offset = 0;\r\n        for (let /** @type {?} */ i = 0; i < parts.length; i++) {\r\n            const /** @type {?} */ part = parts[i];\r\n            if (i % 2 === 0) {\r\n                // fixed string\r\n                strings.push(part);\r\n                offset += part.length;\r\n            }\r\n            else if (part.trim().length > 0) {\r\n                offset += interpolationConfig.start.length;\r\n                expressions.push(part);\r\n                offsets.push(offset);\r\n                offset += part.length + interpolationConfig.end.length;\r\n            }\r\n            else {\r\n                this._reportError('Blank expressions are not allowed in interpolated strings', input, `at column ${this._findInterpolationErrorColumn(parts, i, interpolationConfig)} in`, location);\r\n                expressions.push('$implict');\r\n                offsets.push(offset);\r\n            }\r\n        }\r\n        return new SplitInterpolation(strings, expressions, offsets);\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @return {?}\r\n     */\r\n    wrapLiteralPrimitive(input, location) {\r\n        return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, input == null ? 0 : input.length), input), input, location, this.errors);\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @return {?}\r\n     */\r\n    _stripComments(input) {\r\n        const /** @type {?} */ i = this._commentStart(input);\r\n        return i != null ? input.substring(0, i).trim() : input;\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @return {?}\r\n     */\r\n    _commentStart(input) {\r\n        let /** @type {?} */ outerQuote = null;\r\n        for (let /** @type {?} */ i = 0; i < input.length - 1; i++) {\r\n            const /** @type {?} */ char = input.charCodeAt(i);\r\n            const /** @type {?} */ nextChar = input.charCodeAt(i + 1);\r\n            if (char === $SLASH && nextChar == $SLASH && outerQuote == null)\r\n                return i;\r\n            if (outerQuote === char) {\r\n                outerQuote = null;\r\n            }\r\n            else if (outerQuote == null && isQuote(char)) {\r\n                outerQuote = char;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @param {?} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    _checkNoInterpolation(input, location, interpolationConfig) {\r\n        const /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);\r\n        const /** @type {?} */ parts = input.split(regexp);\r\n        if (parts.length > 1) {\r\n            this._reportError(`Got interpolation (${interpolationConfig.start}${interpolationConfig.end}) where expression was expected`, input, `at column ${this._findInterpolationErrorColumn(parts, 1, interpolationConfig)} in`, location);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} parts\r\n     * @param {?} partInErrIdx\r\n     * @param {?} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    _findInterpolationErrorColumn(parts, partInErrIdx, interpolationConfig) {\r\n        let /** @type {?} */ errLocation = '';\r\n        for (let /** @type {?} */ j = 0; j < partInErrIdx; j++) {\r\n            errLocation += j % 2 === 0 ?\r\n                parts[j] :\r\n                `${interpolationConfig.start}${parts[j]}${interpolationConfig.end}`;\r\n        }\r\n        return errLocation.length;\r\n    }\r\n}\r\nclass _ParseAST {\r\n    /**\r\n     * @param {?} input\r\n     * @param {?} location\r\n     * @param {?} tokens\r\n     * @param {?} inputLength\r\n     * @param {?} parseAction\r\n     * @param {?} errors\r\n     * @param {?} offset\r\n     */\r\n    constructor(input, location, tokens, inputLength, parseAction, errors, offset) {\r\n        this.input = input;\r\n        this.location = location;\r\n        this.tokens = tokens;\r\n        this.inputLength = inputLength;\r\n        this.parseAction = parseAction;\r\n        this.errors = errors;\r\n        this.offset = offset;\r\n        this.rparensExpected = 0;\r\n        this.rbracketsExpected = 0;\r\n        this.rbracesExpected = 0;\r\n        this.index = 0;\r\n    }\r\n    /**\r\n     * @param {?} offset\r\n     * @return {?}\r\n     */\r\n    peek(offset) {\r\n        const /** @type {?} */ i = this.index + offset;\r\n        return i < this.tokens.length ? this.tokens[i] : EOF;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get next() { return this.peek(0); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get inputIndex() {\r\n        return (this.index < this.tokens.length) ? this.next.index + this.offset :\r\n            this.inputLength + this.offset;\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    span(start) { return new ParseSpan(start, this.inputIndex); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    advance() { this.index++; }\r\n    /**\r\n     * @param {?} code\r\n     * @return {?}\r\n     */\r\n    optionalCharacter(code) {\r\n        if (this.next.isCharacter(code)) {\r\n            this.advance();\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    peekKeywordLet() { return this.next.isKeywordLet(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    peekKeywordAs() { return this.next.isKeywordAs(); }\r\n    /**\r\n     * @param {?} code\r\n     * @return {?}\r\n     */\r\n    expectCharacter(code) {\r\n        if (this.optionalCharacter(code))\r\n            return;\r\n        this.error(`Missing expected ${String.fromCharCode(code)}`);\r\n    }\r\n    /**\r\n     * @param {?} op\r\n     * @return {?}\r\n     */\r\n    optionalOperator(op) {\r\n        if (this.next.isOperator(op)) {\r\n            this.advance();\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} operator\r\n     * @return {?}\r\n     */\r\n    expectOperator(operator) {\r\n        if (this.optionalOperator(operator))\r\n            return;\r\n        this.error(`Missing expected operator ${operator}`);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    expectIdentifierOrKeyword() {\r\n        const /** @type {?} */ n = this.next;\r\n        if (!n.isIdentifier() && !n.isKeyword()) {\r\n            this.error(`Unexpected token ${n}, expected identifier or keyword`);\r\n            return '';\r\n        }\r\n        this.advance();\r\n        return /** @type {?} */ (n.toString());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    expectIdentifierOrKeywordOrString() {\r\n        const /** @type {?} */ n = this.next;\r\n        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\r\n            this.error(`Unexpected token ${n}, expected identifier, keyword, or string`);\r\n            return '';\r\n        }\r\n        this.advance();\r\n        return /** @type {?} */ (n.toString());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseChain() {\r\n        const /** @type {?} */ exprs = [];\r\n        const /** @type {?} */ start = this.inputIndex;\r\n        while (this.index < this.tokens.length) {\r\n            const /** @type {?} */ expr = this.parsePipe();\r\n            exprs.push(expr);\r\n            if (this.optionalCharacter($SEMICOLON)) {\r\n                if (!this.parseAction) {\r\n                    this.error('Binding expression cannot contain chained expression');\r\n                }\r\n                while (this.optionalCharacter($SEMICOLON)) {\r\n                } // read all semicolons\r\n            }\r\n            else if (this.index < this.tokens.length) {\r\n                this.error(`Unexpected token '${this.next}'`);\r\n            }\r\n        }\r\n        if (exprs.length == 0)\r\n            return new EmptyExpr(this.span(start));\r\n        if (exprs.length == 1)\r\n            return exprs[0];\r\n        return new Chain(this.span(start), exprs);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parsePipe() {\r\n        let /** @type {?} */ result = this.parseExpression();\r\n        if (this.optionalOperator('|')) {\r\n            if (this.parseAction) {\r\n                this.error('Cannot have a pipe in an action expression');\r\n            }\r\n            do {\r\n                const /** @type {?} */ name = this.expectIdentifierOrKeyword();\r\n                const /** @type {?} */ args = [];\r\n                while (this.optionalCharacter($COLON)) {\r\n                    args.push(this.parseExpression());\r\n                }\r\n                result = new BindingPipe(this.span(result.span.start), result, name, args);\r\n            } while (this.optionalOperator('|'));\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseExpression() { return this.parseConditional(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseConditional() {\r\n        const /** @type {?} */ start = this.inputIndex;\r\n        const /** @type {?} */ result = this.parseLogicalOr();\r\n        if (this.optionalOperator('?')) {\r\n            const /** @type {?} */ yes = this.parsePipe();\r\n            let /** @type {?} */ no;\r\n            if (!this.optionalCharacter($COLON)) {\r\n                const /** @type {?} */ end = this.inputIndex;\r\n                const /** @type {?} */ expression = this.input.substring(start, end);\r\n                this.error(`Conditional expression ${expression} requires all 3 expressions`);\r\n                no = new EmptyExpr(this.span(start));\r\n            }\r\n            else {\r\n                no = this.parsePipe();\r\n            }\r\n            return new Conditional(this.span(start), result, yes, no);\r\n        }\r\n        else {\r\n            return result;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseLogicalOr() {\r\n        // '||'\r\n        let /** @type {?} */ result = this.parseLogicalAnd();\r\n        while (this.optionalOperator('||')) {\r\n            const /** @type {?} */ right = this.parseLogicalAnd();\r\n            result = new Binary(this.span(result.span.start), '||', result, right);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseLogicalAnd() {\r\n        // '&&'\r\n        let /** @type {?} */ result = this.parseEquality();\r\n        while (this.optionalOperator('&&')) {\r\n            const /** @type {?} */ right = this.parseEquality();\r\n            result = new Binary(this.span(result.span.start), '&&', result, right);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseEquality() {\r\n        // '==','!=','===','!=='\r\n        let /** @type {?} */ result = this.parseRelational();\r\n        while (this.next.type == TokenType.Operator) {\r\n            const /** @type {?} */ operator = this.next.strValue;\r\n            switch (operator) {\r\n                case '==':\r\n                case '===':\r\n                case '!=':\r\n                case '!==':\r\n                    this.advance();\r\n                    const /** @type {?} */ right = this.parseRelational();\r\n                    result = new Binary(this.span(result.span.start), operator, result, right);\r\n                    continue;\r\n            }\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseRelational() {\r\n        // '<', '>', '<=', '>='\r\n        let /** @type {?} */ result = this.parseAdditive();\r\n        while (this.next.type == TokenType.Operator) {\r\n            const /** @type {?} */ operator = this.next.strValue;\r\n            switch (operator) {\r\n                case '<':\r\n                case '>':\r\n                case '<=':\r\n                case '>=':\r\n                    this.advance();\r\n                    const /** @type {?} */ right = this.parseAdditive();\r\n                    result = new Binary(this.span(result.span.start), operator, result, right);\r\n                    continue;\r\n            }\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseAdditive() {\r\n        // '+', '-'\r\n        let /** @type {?} */ result = this.parseMultiplicative();\r\n        while (this.next.type == TokenType.Operator) {\r\n            const /** @type {?} */ operator = this.next.strValue;\r\n            switch (operator) {\r\n                case '+':\r\n                case '-':\r\n                    this.advance();\r\n                    let /** @type {?} */ right = this.parseMultiplicative();\r\n                    result = new Binary(this.span(result.span.start), operator, result, right);\r\n                    continue;\r\n            }\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseMultiplicative() {\r\n        // '*', '%', '/'\r\n        let /** @type {?} */ result = this.parsePrefix();\r\n        while (this.next.type == TokenType.Operator) {\r\n            const /** @type {?} */ operator = this.next.strValue;\r\n            switch (operator) {\r\n                case '*':\r\n                case '%':\r\n                case '/':\r\n                    this.advance();\r\n                    let /** @type {?} */ right = this.parsePrefix();\r\n                    result = new Binary(this.span(result.span.start), operator, result, right);\r\n                    continue;\r\n            }\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parsePrefix() {\r\n        if (this.next.type == TokenType.Operator) {\r\n            const /** @type {?} */ start = this.inputIndex;\r\n            const /** @type {?} */ operator = this.next.strValue;\r\n            let /** @type {?} */ result;\r\n            switch (operator) {\r\n                case '+':\r\n                    this.advance();\r\n                    return this.parsePrefix();\r\n                case '-':\r\n                    this.advance();\r\n                    result = this.parsePrefix();\r\n                    return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);\r\n                case '!':\r\n                    this.advance();\r\n                    result = this.parsePrefix();\r\n                    return new PrefixNot(this.span(start), result);\r\n            }\r\n        }\r\n        return this.parseCallChain();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseCallChain() {\r\n        let /** @type {?} */ result = this.parsePrimary();\r\n        while (true) {\r\n            if (this.optionalCharacter($PERIOD)) {\r\n                result = this.parseAccessMemberOrMethodCall(result, false);\r\n            }\r\n            else if (this.optionalOperator('?.')) {\r\n                result = this.parseAccessMemberOrMethodCall(result, true);\r\n            }\r\n            else if (this.optionalCharacter($LBRACKET)) {\r\n                this.rbracketsExpected++;\r\n                const /** @type {?} */ key = this.parsePipe();\r\n                this.rbracketsExpected--;\r\n                this.expectCharacter($RBRACKET);\r\n                if (this.optionalOperator('=')) {\r\n                    const /** @type {?} */ value = this.parseConditional();\r\n                    result = new KeyedWrite(this.span(result.span.start), result, key, value);\r\n                }\r\n                else {\r\n                    result = new KeyedRead(this.span(result.span.start), result, key);\r\n                }\r\n            }\r\n            else if (this.optionalCharacter($LPAREN)) {\r\n                this.rparensExpected++;\r\n                const /** @type {?} */ args = this.parseCallArguments();\r\n                this.rparensExpected--;\r\n                this.expectCharacter($RPAREN);\r\n                result = new FunctionCall(this.span(result.span.start), result, args);\r\n            }\r\n            else if (this.optionalOperator('!')) {\r\n                result = new NonNullAssert(this.span(result.span.start), result);\r\n            }\r\n            else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parsePrimary() {\r\n        const /** @type {?} */ start = this.inputIndex;\r\n        if (this.optionalCharacter($LPAREN)) {\r\n            this.rparensExpected++;\r\n            const /** @type {?} */ result = this.parsePipe();\r\n            this.rparensExpected--;\r\n            this.expectCharacter($RPAREN);\r\n            return result;\r\n        }\r\n        else if (this.next.isKeywordNull()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), null);\r\n        }\r\n        else if (this.next.isKeywordUndefined()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), void 0);\r\n        }\r\n        else if (this.next.isKeywordTrue()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), true);\r\n        }\r\n        else if (this.next.isKeywordFalse()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), false);\r\n        }\r\n        else if (this.next.isKeywordThis()) {\r\n            this.advance();\r\n            return new ImplicitReceiver(this.span(start));\r\n        }\r\n        else if (this.optionalCharacter($LBRACKET)) {\r\n            this.rbracketsExpected++;\r\n            const /** @type {?} */ elements = this.parseExpressionList($RBRACKET);\r\n            this.rbracketsExpected--;\r\n            this.expectCharacter($RBRACKET);\r\n            return new LiteralArray(this.span(start), elements);\r\n        }\r\n        else if (this.next.isCharacter($LBRACE)) {\r\n            return this.parseLiteralMap();\r\n        }\r\n        else if (this.next.isIdentifier()) {\r\n            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);\r\n        }\r\n        else if (this.next.isNumber()) {\r\n            const /** @type {?} */ value = this.next.toNumber();\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), value);\r\n        }\r\n        else if (this.next.isString()) {\r\n            const /** @type {?} */ literalValue = this.next.toString();\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), literalValue);\r\n        }\r\n        else if (this.index >= this.tokens.length) {\r\n            this.error(`Unexpected end of expression: ${this.input}`);\r\n            return new EmptyExpr(this.span(start));\r\n        }\r\n        else {\r\n            this.error(`Unexpected token ${this.next}`);\r\n            return new EmptyExpr(this.span(start));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} terminator\r\n     * @return {?}\r\n     */\r\n    parseExpressionList(terminator) {\r\n        const /** @type {?} */ result = [];\r\n        if (!this.next.isCharacter(terminator)) {\r\n            do {\r\n                result.push(this.parsePipe());\r\n            } while (this.optionalCharacter($COMMA));\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseLiteralMap() {\r\n        const /** @type {?} */ keys = [];\r\n        const /** @type {?} */ values = [];\r\n        const /** @type {?} */ start = this.inputIndex;\r\n        this.expectCharacter($LBRACE);\r\n        if (!this.optionalCharacter($RBRACE)) {\r\n            this.rbracesExpected++;\r\n            do {\r\n                const /** @type {?} */ quoted = this.next.isString();\r\n                const /** @type {?} */ key = this.expectIdentifierOrKeywordOrString();\r\n                keys.push({ key, quoted });\r\n                this.expectCharacter($COLON);\r\n                values.push(this.parsePipe());\r\n            } while (this.optionalCharacter($COMMA));\r\n            this.rbracesExpected--;\r\n            this.expectCharacter($RBRACE);\r\n        }\r\n        return new LiteralMap(this.span(start), keys, values);\r\n    }\r\n    /**\r\n     * @param {?} receiver\r\n     * @param {?=} isSafe\r\n     * @return {?}\r\n     */\r\n    parseAccessMemberOrMethodCall(receiver, isSafe = false) {\r\n        const /** @type {?} */ start = receiver.span.start;\r\n        const /** @type {?} */ id = this.expectIdentifierOrKeyword();\r\n        if (this.optionalCharacter($LPAREN)) {\r\n            this.rparensExpected++;\r\n            const /** @type {?} */ args = this.parseCallArguments();\r\n            this.expectCharacter($RPAREN);\r\n            this.rparensExpected--;\r\n            const /** @type {?} */ span = this.span(start);\r\n            return isSafe ? new SafeMethodCall(span, receiver, id, args) :\r\n                new MethodCall(span, receiver, id, args);\r\n        }\r\n        else {\r\n            if (isSafe) {\r\n                if (this.optionalOperator('=')) {\r\n                    this.error('The \\'?.\\' operator cannot be used in the assignment');\r\n                    return new EmptyExpr(this.span(start));\r\n                }\r\n                else {\r\n                    return new SafePropertyRead(this.span(start), receiver, id);\r\n                }\r\n            }\r\n            else {\r\n                if (this.optionalOperator('=')) {\r\n                    if (!this.parseAction) {\r\n                        this.error('Bindings cannot contain assignments');\r\n                        return new EmptyExpr(this.span(start));\r\n                    }\r\n                    const /** @type {?} */ value = this.parseConditional();\r\n                    return new PropertyWrite(this.span(start), receiver, id, value);\r\n                }\r\n                else {\r\n                    return new PropertyRead(this.span(start), receiver, id);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseCallArguments() {\r\n        if (this.next.isCharacter($RPAREN))\r\n            return [];\r\n        const /** @type {?} */ positionals = [];\r\n        do {\r\n            positionals.push(this.parsePipe());\r\n        } while (this.optionalCharacter($COMMA));\r\n        return /** @type {?} */ (positionals);\r\n    }\r\n    /**\r\n     * An identifier, a keyword, a string with an optional `-` inbetween.\r\n     * @return {?}\r\n     */\r\n    expectTemplateBindingKey() {\r\n        let /** @type {?} */ result = '';\r\n        let /** @type {?} */ operatorFound = false;\r\n        do {\r\n            result += this.expectIdentifierOrKeywordOrString();\r\n            operatorFound = this.optionalOperator('-');\r\n            if (operatorFound) {\r\n                result += '-';\r\n            }\r\n        } while (operatorFound);\r\n        return result.toString();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseTemplateBindings() {\r\n        const /** @type {?} */ bindings = [];\r\n        let /** @type {?} */ prefix = /** @type {?} */ ((null));\r\n        const /** @type {?} */ warnings = [];\r\n        while (this.index < this.tokens.length) {\r\n            const /** @type {?} */ start = this.inputIndex;\r\n            let /** @type {?} */ keyIsVar = this.peekKeywordLet();\r\n            if (keyIsVar) {\r\n                this.advance();\r\n            }\r\n            let /** @type {?} */ rawKey = this.expectTemplateBindingKey();\r\n            let /** @type {?} */ key = rawKey;\r\n            if (!keyIsVar) {\r\n                if (prefix == null) {\r\n                    prefix = key;\r\n                }\r\n                else {\r\n                    key = prefix + key[0].toUpperCase() + key.substring(1);\r\n                }\r\n            }\r\n            this.optionalCharacter($COLON);\r\n            let /** @type {?} */ name = /** @type {?} */ ((null));\r\n            let /** @type {?} */ expression = /** @type {?} */ ((null));\r\n            if (keyIsVar) {\r\n                if (this.optionalOperator('=')) {\r\n                    name = this.expectTemplateBindingKey();\r\n                }\r\n                else {\r\n                    name = '\\$implicit';\r\n                }\r\n            }\r\n            else if (this.peekKeywordAs()) {\r\n                const /** @type {?} */ letStart = this.inputIndex;\r\n                this.advance(); // consume `as`\r\n                name = rawKey;\r\n                key = this.expectTemplateBindingKey(); // read local var name\r\n                keyIsVar = true;\r\n            }\r\n            else if (this.next !== EOF && !this.peekKeywordLet()) {\r\n                const /** @type {?} */ start = this.inputIndex;\r\n                const /** @type {?} */ ast = this.parsePipe();\r\n                const /** @type {?} */ source = this.input.substring(start - this.offset, this.inputIndex - this.offset);\r\n                expression = new ASTWithSource(ast, source, this.location, this.errors);\r\n            }\r\n            bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name, expression));\r\n            if (this.peekKeywordAs() && !keyIsVar) {\r\n                const /** @type {?} */ letStart = this.inputIndex;\r\n                this.advance(); // consume `as`\r\n                const /** @type {?} */ letName = this.expectTemplateBindingKey(); // read local var name\r\n                bindings.push(new TemplateBinding(this.span(letStart), letName, true, key, /** @type {?} */ ((null))));\r\n            }\r\n            if (!this.optionalCharacter($SEMICOLON)) {\r\n                this.optionalCharacter($COMMA);\r\n            }\r\n        }\r\n        return new TemplateBindingParseResult(bindings, warnings, this.errors);\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    error(message, index = null) {\r\n        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\r\n        this.skip();\r\n    }\r\n    /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    locationText(index = null) {\r\n        if (index == null)\r\n            index = this.index;\r\n        return (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` :\r\n            `at the end of the expression`;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    skip() {\r\n        let /** @type {?} */ n = this.next;\r\n        while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&\r\n            (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&\r\n            (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&\r\n            (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {\r\n            if (this.next.isError()) {\r\n                this.errors.push(new ParserError(/** @type {?} */ ((this.next.toString())), this.input, this.locationText(), this.location));\r\n            }\r\n            this.advance();\r\n            n = this.next;\r\n        }\r\n    }\r\n}\r\nclass SimpleExpressionChecker {\r\n    constructor() {\r\n        this.errors = [];\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @return {?}\r\n     */\r\n    static check(ast) {\r\n        const /** @type {?} */ s = new SimpleExpressionChecker();\r\n        ast.visit(s);\r\n        return s.errors;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitImplicitReceiver(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitInterpolation(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralPrimitive(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPropertyRead(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPropertyWrite(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitSafePropertyRead(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitMethodCall(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitSafeMethodCall(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitFunctionCall(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralArray(ast, context) { this.visitAll(ast.expressions); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralMap(ast, context) { this.visitAll(ast.values); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitBinary(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPrefixNot(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitNonNullAssert(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitConditional(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPipe(ast, context) { this.errors.push('pipes'); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitKeyedRead(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitKeyedWrite(ast, context) { }\r\n    /**\r\n     * @param {?} asts\r\n     * @return {?}\r\n     */\r\n    visitAll(asts) { return asts.map(node => node.visit(this)); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitChain(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitQuote(ast, context) { }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass ParseLocation {\r\n    /**\r\n     * @param {?} file\r\n     * @param {?} offset\r\n     * @param {?} line\r\n     * @param {?} col\r\n     */\r\n    constructor(file, offset, line, col) {\r\n        this.file = file;\r\n        this.offset = offset;\r\n        this.line = line;\r\n        this.col = col;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;\r\n    }\r\n    /**\r\n     * @param {?} delta\r\n     * @return {?}\r\n     */\r\n    moveBy(delta) {\r\n        const /** @type {?} */ source = this.file.content;\r\n        const /** @type {?} */ len = source.length;\r\n        let /** @type {?} */ offset = this.offset;\r\n        let /** @type {?} */ line = this.line;\r\n        let /** @type {?} */ col = this.col;\r\n        while (offset > 0 && delta < 0) {\r\n            offset--;\r\n            delta++;\r\n            const /** @type {?} */ ch = source.charCodeAt(offset);\r\n            if (ch == $LF) {\r\n                line--;\r\n                const /** @type {?} */ priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));\r\n                col = priorLine > 0 ? offset - priorLine : offset;\r\n            }\r\n            else {\r\n                col--;\r\n            }\r\n        }\r\n        while (offset < len && delta > 0) {\r\n            const /** @type {?} */ ch = source.charCodeAt(offset);\r\n            offset++;\r\n            delta--;\r\n            if (ch == $LF) {\r\n                line++;\r\n                col = 0;\r\n            }\r\n            else {\r\n                col++;\r\n            }\r\n        }\r\n        return new ParseLocation(this.file, offset, line, col);\r\n    }\r\n    /**\r\n     * @param {?} maxChars\r\n     * @param {?} maxLines\r\n     * @return {?}\r\n     */\r\n    getContext(maxChars, maxLines) {\r\n        const /** @type {?} */ content = this.file.content;\r\n        let /** @type {?} */ startOffset = this.offset;\r\n        if (startOffset != null) {\r\n            if (startOffset > content.length - 1) {\r\n                startOffset = content.length - 1;\r\n            }\r\n            let /** @type {?} */ endOffset = startOffset;\r\n            let /** @type {?} */ ctxChars = 0;\r\n            let /** @type {?} */ ctxLines = 0;\r\n            while (ctxChars < maxChars && startOffset > 0) {\r\n                startOffset--;\r\n                ctxChars++;\r\n                if (content[startOffset] == '\\n') {\r\n                    if (++ctxLines == maxLines) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            ctxChars = 0;\r\n            ctxLines = 0;\r\n            while (ctxChars < maxChars && endOffset < content.length - 1) {\r\n                endOffset++;\r\n                ctxChars++;\r\n                if (content[endOffset] == '\\n') {\r\n                    if (++ctxLines == maxLines) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                before: content.substring(startOffset, this.offset),\r\n                after: content.substring(this.offset, endOffset + 1),\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}\r\nclass ParseSourceFile {\r\n    /**\r\n     * @param {?} content\r\n     * @param {?} url\r\n     */\r\n    constructor(content, url) {\r\n        this.content = content;\r\n        this.url = url;\r\n    }\r\n}\r\nclass ParseSourceSpan {\r\n    /**\r\n     * @param {?} start\r\n     * @param {?} end\r\n     * @param {?=} details\r\n     */\r\n    constructor(start, end, details = null) {\r\n        this.start = start;\r\n        this.end = end;\r\n        this.details = details;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return this.start.file.content.substring(this.start.offset, this.end.offset);\r\n    }\r\n}\r\n/** @enum {number} */\r\nconst ParseErrorLevel = {\r\n    WARNING: 0,\r\n    ERROR: 1,\r\n};\r\nParseErrorLevel[ParseErrorLevel.WARNING] = \"WARNING\";\r\nParseErrorLevel[ParseErrorLevel.ERROR] = \"ERROR\";\r\nclass ParseError {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} msg\r\n     * @param {?=} level\r\n     */\r\n    constructor(span, msg, level = ParseErrorLevel.ERROR) {\r\n        this.span = span;\r\n        this.msg = msg;\r\n        this.level = level;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    contextualMessage() {\r\n        const /** @type {?} */ ctx = this.span.start.getContext(100, 3);\r\n        return ctx ? `${this.msg} (\"${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}\")` :\r\n            this.msg;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        const /** @type {?} */ details = this.span.details ? `, ${this.span.details}` : '';\r\n        return `${this.contextualMessage()}: ${this.span.start}${details}`;\r\n    }\r\n}\r\n/**\r\n * @param {?} kind\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction typeSourceSpan(kind, type) {\r\n    const /** @type {?} */ moduleUrl = identifierModuleUrl(type);\r\n    const /** @type {?} */ sourceFileName = moduleUrl != null ? `in ${kind} ${identifierName(type)} in ${moduleUrl}` :\r\n        `in ${kind} ${identifierName(type)}`;\r\n    const /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);\r\n    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst TokenType$1 = {\r\n    TAG_OPEN_START: 0,\r\n    TAG_OPEN_END: 1,\r\n    TAG_OPEN_END_VOID: 2,\r\n    TAG_CLOSE: 3,\r\n    TEXT: 4,\r\n    ESCAPABLE_RAW_TEXT: 5,\r\n    RAW_TEXT: 6,\r\n    COMMENT_START: 7,\r\n    COMMENT_END: 8,\r\n    CDATA_START: 9,\r\n    CDATA_END: 10,\r\n    ATTR_NAME: 11,\r\n    ATTR_VALUE: 12,\r\n    DOC_TYPE: 13,\r\n    EXPANSION_FORM_START: 14,\r\n    EXPANSION_CASE_VALUE: 15,\r\n    EXPANSION_CASE_EXP_START: 16,\r\n    EXPANSION_CASE_EXP_END: 17,\r\n    EXPANSION_FORM_END: 18,\r\n    EOF: 19,\r\n};\r\nTokenType$1[TokenType$1.TAG_OPEN_START] = \"TAG_OPEN_START\";\r\nTokenType$1[TokenType$1.TAG_OPEN_END] = \"TAG_OPEN_END\";\r\nTokenType$1[TokenType$1.TAG_OPEN_END_VOID] = \"TAG_OPEN_END_VOID\";\r\nTokenType$1[TokenType$1.TAG_CLOSE] = \"TAG_CLOSE\";\r\nTokenType$1[TokenType$1.TEXT] = \"TEXT\";\r\nTokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = \"ESCAPABLE_RAW_TEXT\";\r\nTokenType$1[TokenType$1.RAW_TEXT] = \"RAW_TEXT\";\r\nTokenType$1[TokenType$1.COMMENT_START] = \"COMMENT_START\";\r\nTokenType$1[TokenType$1.COMMENT_END] = \"COMMENT_END\";\r\nTokenType$1[TokenType$1.CDATA_START] = \"CDATA_START\";\r\nTokenType$1[TokenType$1.CDATA_END] = \"CDATA_END\";\r\nTokenType$1[TokenType$1.ATTR_NAME] = \"ATTR_NAME\";\r\nTokenType$1[TokenType$1.ATTR_VALUE] = \"ATTR_VALUE\";\r\nTokenType$1[TokenType$1.DOC_TYPE] = \"DOC_TYPE\";\r\nTokenType$1[TokenType$1.EXPANSION_FORM_START] = \"EXPANSION_FORM_START\";\r\nTokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = \"EXPANSION_CASE_VALUE\";\r\nTokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = \"EXPANSION_CASE_EXP_START\";\r\nTokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = \"EXPANSION_CASE_EXP_END\";\r\nTokenType$1[TokenType$1.EXPANSION_FORM_END] = \"EXPANSION_FORM_END\";\r\nTokenType$1[TokenType$1.EOF] = \"EOF\";\r\nclass Token$1 {\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} parts\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(type, parts, sourceSpan) {\r\n        this.type = type;\r\n        this.parts = parts;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n}\r\nclass TokenError extends ParseError {\r\n    /**\r\n     * @param {?} errorMsg\r\n     * @param {?} tokenType\r\n     * @param {?} span\r\n     */\r\n    constructor(errorMsg, tokenType, span) {\r\n        super(span, errorMsg);\r\n        this.tokenType = tokenType;\r\n    }\r\n}\r\nclass TokenizeResult {\r\n    /**\r\n     * @param {?} tokens\r\n     * @param {?} errors\r\n     */\r\n    constructor(tokens, errors) {\r\n        this.tokens = tokens;\r\n        this.errors = errors;\r\n    }\r\n}\r\n/**\r\n * @param {?} source\r\n * @param {?} url\r\n * @param {?} getTagDefinition\r\n * @param {?=} tokenizeExpansionForms\r\n * @param {?=} interpolationConfig\r\n * @return {?}\r\n */\r\nfunction tokenize(source, url, getTagDefinition, tokenizeExpansionForms = false, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\r\n    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)\r\n        .tokenize();\r\n}\r\nconst _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\r\n/**\r\n * @param {?} charCode\r\n * @return {?}\r\n */\r\nfunction _unexpectedCharacterErrorMsg(charCode) {\r\n    const /** @type {?} */ char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);\r\n    return `Unexpected character \"${char}\"`;\r\n}\r\n/**\r\n * @param {?} entitySrc\r\n * @return {?}\r\n */\r\nfunction _unknownEntityErrorMsg(entitySrc) {\r\n    return `Unknown entity \"${entitySrc}\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax`;\r\n}\r\nclass _ControlFlowError {\r\n    /**\r\n     * @param {?} error\r\n     */\r\n    constructor(error) {\r\n        this.error = error;\r\n    }\r\n}\r\nclass _Tokenizer {\r\n    /**\r\n     * @param {?} _file The html source\r\n     * @param {?} _getTagDefinition\r\n     * @param {?} _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)\r\n     * @param {?=} _interpolationConfig\r\n     */\r\n    constructor(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\r\n        this._file = _file;\r\n        this._getTagDefinition = _getTagDefinition;\r\n        this._tokenizeIcu = _tokenizeIcu;\r\n        this._interpolationConfig = _interpolationConfig;\r\n        this._peek = -1;\r\n        this._nextPeek = -1;\r\n        this._index = -1;\r\n        this._line = 0;\r\n        this._column = -1;\r\n        this._expansionCaseStack = [];\r\n        this._inInterpolation = false;\r\n        this.tokens = [];\r\n        this.errors = [];\r\n        this._input = _file.content;\r\n        this._length = _file.content.length;\r\n        this._advance();\r\n    }\r\n    /**\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\r\n    _processCarriageReturns(content) {\r\n        // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream\r\n        // In order to keep the original position in the source, we can not\r\n        // pre-process it.\r\n        // Instead CRs are processed right before instantiating the tokens.\r\n        return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    tokenize() {\r\n        while (this._peek !== $EOF) {\r\n            const /** @type {?} */ start = this._getLocation();\r\n            try {\r\n                if (this._attemptCharCode($LT)) {\r\n                    if (this._attemptCharCode($BANG)) {\r\n                        if (this._attemptCharCode($LBRACKET)) {\r\n                            this._consumeCdata(start);\r\n                        }\r\n                        else if (this._attemptCharCode($MINUS)) {\r\n                            this._consumeComment(start);\r\n                        }\r\n                        else {\r\n                            this._consumeDocType(start);\r\n                        }\r\n                    }\r\n                    else if (this._attemptCharCode($SLASH)) {\r\n                        this._consumeTagClose(start);\r\n                    }\r\n                    else {\r\n                        this._consumeTagOpen(start);\r\n                    }\r\n                }\r\n                else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\r\n                    this._consumeText();\r\n                }\r\n            }\r\n            catch (/** @type {?} */ e) {\r\n                if (e instanceof _ControlFlowError) {\r\n                    this.errors.push(e.error);\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        this._beginToken(TokenType$1.EOF);\r\n        this._endToken([]);\r\n        return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?} whether an ICU token has been created\r\n     */\r\n    _tokenizeExpansionForm() {\r\n        if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\r\n            this._consumeExpansionFormStart();\r\n            return true;\r\n        }\r\n        if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {\r\n            this._consumeExpansionCaseStart();\r\n            return true;\r\n        }\r\n        if (this._peek === $RBRACE) {\r\n            if (this._isInExpansionCase()) {\r\n                this._consumeExpansionCaseEnd();\r\n                return true;\r\n            }\r\n            if (this._isInExpansionForm()) {\r\n                this._consumeExpansionFormEnd();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _getLocation() {\r\n        return new ParseLocation(this._file, this._index, this._line, this._column);\r\n    }\r\n    /**\r\n     * @param {?=} start\r\n     * @param {?=} end\r\n     * @return {?}\r\n     */\r\n    _getSpan(start = this._getLocation(), end = this._getLocation()) {\r\n        return new ParseSourceSpan(start, end);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?=} start\r\n     * @return {?}\r\n     */\r\n    _beginToken(type, start = this._getLocation()) {\r\n        this._currentTokenStart = start;\r\n        this._currentTokenType = type;\r\n    }\r\n    /**\r\n     * @param {?} parts\r\n     * @param {?=} end\r\n     * @return {?}\r\n     */\r\n    _endToken(parts, end = this._getLocation()) {\r\n        const /** @type {?} */ token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));\r\n        this.tokens.push(token);\r\n        this._currentTokenStart = /** @type {?} */ ((null));\r\n        this._currentTokenType = /** @type {?} */ ((null));\r\n        return token;\r\n    }\r\n    /**\r\n     * @param {?} msg\r\n     * @param {?} span\r\n     * @return {?}\r\n     */\r\n    _createError(msg, span) {\r\n        if (this._isInExpansionForm()) {\r\n            msg += ` (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)`;\r\n        }\r\n        const /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);\r\n        this._currentTokenStart = /** @type {?} */ ((null));\r\n        this._currentTokenType = /** @type {?} */ ((null));\r\n        return new _ControlFlowError(error);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _advance() {\r\n        if (this._index >= this._length) {\r\n            throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());\r\n        }\r\n        if (this._peek === $LF) {\r\n            this._line++;\r\n            this._column = 0;\r\n        }\r\n        else if (this._peek !== $LF && this._peek !== $CR) {\r\n            this._column++;\r\n        }\r\n        this._index++;\r\n        this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);\r\n        this._nextPeek =\r\n            this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);\r\n    }\r\n    /**\r\n     * @param {?} charCode\r\n     * @return {?}\r\n     */\r\n    _attemptCharCode(charCode) {\r\n        if (this._peek === charCode) {\r\n            this._advance();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} charCode\r\n     * @return {?}\r\n     */\r\n    _attemptCharCodeCaseInsensitive(charCode) {\r\n        if (compareCharCodeCaseInsensitive(this._peek, charCode)) {\r\n            this._advance();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} charCode\r\n     * @return {?}\r\n     */\r\n    _requireCharCode(charCode) {\r\n        const /** @type {?} */ location = this._getLocation();\r\n        if (!this._attemptCharCode(charCode)) {\r\n            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} chars\r\n     * @return {?}\r\n     */\r\n    _attemptStr(chars) {\r\n        const /** @type {?} */ len = chars.length;\r\n        if (this._index + len > this._length) {\r\n            return false;\r\n        }\r\n        const /** @type {?} */ initialPosition = this._savePosition();\r\n        for (let /** @type {?} */ i = 0; i < len; i++) {\r\n            if (!this._attemptCharCode(chars.charCodeAt(i))) {\r\n                // If attempting to parse the string fails, we want to reset the parser\r\n                // to where it was before the attempt\r\n                this._restorePosition(initialPosition);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @param {?} chars\r\n     * @return {?}\r\n     */\r\n    _attemptStrCaseInsensitive(chars) {\r\n        for (let /** @type {?} */ i = 0; i < chars.length; i++) {\r\n            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @param {?} chars\r\n     * @return {?}\r\n     */\r\n    _requireStr(chars) {\r\n        const /** @type {?} */ location = this._getLocation();\r\n        if (!this._attemptStr(chars)) {\r\n            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} predicate\r\n     * @return {?}\r\n     */\r\n    _attemptCharCodeUntilFn(predicate) {\r\n        while (!predicate(this._peek)) {\r\n            this._advance();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} predicate\r\n     * @param {?} len\r\n     * @return {?}\r\n     */\r\n    _requireCharCodeUntilFn(predicate, len) {\r\n        const /** @type {?} */ start = this._getLocation();\r\n        this._attemptCharCodeUntilFn(predicate);\r\n        if (this._index - start.offset < len) {\r\n            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} char\r\n     * @return {?}\r\n     */\r\n    _attemptUntilChar(char) {\r\n        while (this._peek !== char) {\r\n            this._advance();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} decodeEntities\r\n     * @return {?}\r\n     */\r\n    _readChar(decodeEntities) {\r\n        if (decodeEntities && this._peek === $AMPERSAND) {\r\n            return this._decodeEntity();\r\n        }\r\n        else {\r\n            const /** @type {?} */ index = this._index;\r\n            this._advance();\r\n            return this._input[index];\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _decodeEntity() {\r\n        const /** @type {?} */ start = this._getLocation();\r\n        this._advance();\r\n        if (this._attemptCharCode($HASH)) {\r\n            const /** @type {?} */ isHex = this._attemptCharCode($x) || this._attemptCharCode($X);\r\n            const /** @type {?} */ numberStart = this._getLocation().offset;\r\n            this._attemptCharCodeUntilFn(isDigitEntityEnd);\r\n            if (this._peek != $SEMICOLON) {\r\n                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\r\n            }\r\n            this._advance();\r\n            const /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);\r\n            try {\r\n                const /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);\r\n                return String.fromCharCode(charCode);\r\n            }\r\n            catch (/** @type {?} */ e) {\r\n                const /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);\r\n                throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));\r\n            }\r\n        }\r\n        else {\r\n            const /** @type {?} */ startPosition = this._savePosition();\r\n            this._attemptCharCodeUntilFn(isNamedEntityEnd);\r\n            if (this._peek != $SEMICOLON) {\r\n                this._restorePosition(startPosition);\r\n                return '&';\r\n            }\r\n            this._advance();\r\n            const /** @type {?} */ name = this._input.substring(start.offset + 1, this._index - 1);\r\n            const /** @type {?} */ char = NAMED_ENTITIES[name];\r\n            if (!char) {\r\n                throw this._createError(_unknownEntityErrorMsg(name), this._getSpan(start));\r\n            }\r\n            return char;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} decodeEntities\r\n     * @param {?} firstCharOfEnd\r\n     * @param {?} attemptEndRest\r\n     * @return {?}\r\n     */\r\n    _consumeRawText(decodeEntities, firstCharOfEnd, attemptEndRest) {\r\n        let /** @type {?} */ tagCloseStart;\r\n        const /** @type {?} */ textStart = this._getLocation();\r\n        this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);\r\n        const /** @type {?} */ parts = [];\r\n        while (true) {\r\n            tagCloseStart = this._getLocation();\r\n            if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {\r\n                break;\r\n            }\r\n            if (this._index > tagCloseStart.offset) {\r\n                // add the characters consumed by the previous if statement to the output\r\n                parts.push(this._input.substring(tagCloseStart.offset, this._index));\r\n            }\r\n            while (this._peek !== firstCharOfEnd) {\r\n                parts.push(this._readChar(decodeEntities));\r\n            }\r\n        }\r\n        return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    _consumeComment(start) {\r\n        this._beginToken(TokenType$1.COMMENT_START, start);\r\n        this._requireCharCode($MINUS);\r\n        this._endToken([]);\r\n        const /** @type {?} */ textToken = this._consumeRawText(false, $MINUS, () => this._attemptStr('->'));\r\n        this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);\r\n        this._endToken([]);\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    _consumeCdata(start) {\r\n        this._beginToken(TokenType$1.CDATA_START, start);\r\n        this._requireStr('CDATA[');\r\n        this._endToken([]);\r\n        const /** @type {?} */ textToken = this._consumeRawText(false, $RBRACKET, () => this._attemptStr(']>'));\r\n        this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);\r\n        this._endToken([]);\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    _consumeDocType(start) {\r\n        this._beginToken(TokenType$1.DOC_TYPE, start);\r\n        this._attemptUntilChar($GT);\r\n        this._advance();\r\n        this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _consumePrefixAndName() {\r\n        const /** @type {?} */ nameOrPrefixStart = this._index;\r\n        let /** @type {?} */ prefix = /** @type {?} */ ((null));\r\n        while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {\r\n            this._advance();\r\n        }\r\n        let /** @type {?} */ nameStart;\r\n        if (this._peek === $COLON) {\r\n            this._advance();\r\n            prefix = this._input.substring(nameOrPrefixStart, this._index - 1);\r\n            nameStart = this._index;\r\n        }\r\n        else {\r\n            nameStart = nameOrPrefixStart;\r\n        }\r\n        this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);\r\n        const /** @type {?} */ name = this._input.substring(nameStart, this._index);\r\n        return [prefix, name];\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    _consumeTagOpen(start) {\r\n        const /** @type {?} */ savedPos = this._savePosition();\r\n        let /** @type {?} */ tagName;\r\n        let /** @type {?} */ lowercaseTagName;\r\n        try {\r\n            if (!isAsciiLetter(this._peek)) {\r\n                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\r\n            }\r\n            const /** @type {?} */ nameStart = this._index;\r\n            this._consumeTagOpenStart(start);\r\n            tagName = this._input.substring(nameStart, this._index);\r\n            lowercaseTagName = tagName.toLowerCase();\r\n            this._attemptCharCodeUntilFn(isNotWhitespace);\r\n            while (this._peek !== $SLASH && this._peek !== $GT) {\r\n                this._consumeAttributeName();\r\n                this._attemptCharCodeUntilFn(isNotWhitespace);\r\n                if (this._attemptCharCode($EQ)) {\r\n                    this._attemptCharCodeUntilFn(isNotWhitespace);\r\n                    this._consumeAttributeValue();\r\n                }\r\n                this._attemptCharCodeUntilFn(isNotWhitespace);\r\n            }\r\n            this._consumeTagOpenEnd();\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            if (e instanceof _ControlFlowError) {\r\n                // When the start tag is invalid, assume we want a \"<\"\r\n                this._restorePosition(savedPos);\r\n                // Back to back text tokens are merged at the end\r\n                this._beginToken(TokenType$1.TEXT, start);\r\n                this._endToken(['<']);\r\n                return;\r\n            }\r\n            throw e;\r\n        }\r\n        const /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;\r\n        if (contentTokenType === TagContentType.RAW_TEXT) {\r\n            this._consumeRawTextWithTagClose(lowercaseTagName, false);\r\n        }\r\n        else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\r\n            this._consumeRawTextWithTagClose(lowercaseTagName, true);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} lowercaseTagName\r\n     * @param {?} decodeEntities\r\n     * @return {?}\r\n     */\r\n    _consumeRawTextWithTagClose(lowercaseTagName, decodeEntities) {\r\n        const /** @type {?} */ textToken = this._consumeRawText(decodeEntities, $LT, () => {\r\n            if (!this._attemptCharCode($SLASH))\r\n                return false;\r\n            this._attemptCharCodeUntilFn(isNotWhitespace);\r\n            if (!this._attemptStrCaseInsensitive(lowercaseTagName))\r\n                return false;\r\n            this._attemptCharCodeUntilFn(isNotWhitespace);\r\n            return this._attemptCharCode($GT);\r\n        });\r\n        this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);\r\n        this._endToken([/** @type {?} */ ((null)), lowercaseTagName]);\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    _consumeTagOpenStart(start) {\r\n        this._beginToken(TokenType$1.TAG_OPEN_START, start);\r\n        const /** @type {?} */ parts = this._consumePrefixAndName();\r\n        this._endToken(parts);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _consumeAttributeName() {\r\n        this._beginToken(TokenType$1.ATTR_NAME);\r\n        const /** @type {?} */ prefixAndName = this._consumePrefixAndName();\r\n        this._endToken(prefixAndName);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _consumeAttributeValue() {\r\n        this._beginToken(TokenType$1.ATTR_VALUE);\r\n        let /** @type {?} */ value;\r\n        if (this._peek === $SQ || this._peek === $DQ) {\r\n            const /** @type {?} */ quoteChar = this._peek;\r\n            this._advance();\r\n            const /** @type {?} */ parts = [];\r\n            while (this._peek !== quoteChar) {\r\n                parts.push(this._readChar(true));\r\n            }\r\n            value = parts.join('');\r\n            this._advance();\r\n        }\r\n        else {\r\n            const /** @type {?} */ valueStart = this._index;\r\n            this._requireCharCodeUntilFn(isNameEnd, 1);\r\n            value = this._input.substring(valueStart, this._index);\r\n        }\r\n        this._endToken([this._processCarriageReturns(value)]);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _consumeTagOpenEnd() {\r\n        const /** @type {?} */ tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;\r\n        this._beginToken(tokenType);\r\n        this._requireCharCode($GT);\r\n        this._endToken([]);\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    _consumeTagClose(start) {\r\n        this._beginToken(TokenType$1.TAG_CLOSE, start);\r\n        this._attemptCharCodeUntilFn(isNotWhitespace);\r\n        const /** @type {?} */ prefixAndName = this._consumePrefixAndName();\r\n        this._attemptCharCodeUntilFn(isNotWhitespace);\r\n        this._requireCharCode($GT);\r\n        this._endToken(prefixAndName);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _consumeExpansionFormStart() {\r\n        this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());\r\n        this._requireCharCode($LBRACE);\r\n        this._endToken([]);\r\n        this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);\r\n        this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());\r\n        const /** @type {?} */ condition = this._readUntil($COMMA);\r\n        this._endToken([condition], this._getLocation());\r\n        this._requireCharCode($COMMA);\r\n        this._attemptCharCodeUntilFn(isNotWhitespace);\r\n        this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());\r\n        const /** @type {?} */ type = this._readUntil($COMMA);\r\n        this._endToken([type], this._getLocation());\r\n        this._requireCharCode($COMMA);\r\n        this._attemptCharCodeUntilFn(isNotWhitespace);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _consumeExpansionCaseStart() {\r\n        this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());\r\n        const /** @type {?} */ value = this._readUntil($LBRACE).trim();\r\n        this._endToken([value], this._getLocation());\r\n        this._attemptCharCodeUntilFn(isNotWhitespace);\r\n        this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());\r\n        this._requireCharCode($LBRACE);\r\n        this._endToken([], this._getLocation());\r\n        this._attemptCharCodeUntilFn(isNotWhitespace);\r\n        this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _consumeExpansionCaseEnd() {\r\n        this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());\r\n        this._requireCharCode($RBRACE);\r\n        this._endToken([], this._getLocation());\r\n        this._attemptCharCodeUntilFn(isNotWhitespace);\r\n        this._expansionCaseStack.pop();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _consumeExpansionFormEnd() {\r\n        this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());\r\n        this._requireCharCode($RBRACE);\r\n        this._endToken([]);\r\n        this._expansionCaseStack.pop();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _consumeText() {\r\n        const /** @type {?} */ start = this._getLocation();\r\n        this._beginToken(TokenType$1.TEXT, start);\r\n        const /** @type {?} */ parts = [];\r\n        do {\r\n            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\r\n                parts.push(this._interpolationConfig.start);\r\n                this._inInterpolation = true;\r\n            }\r\n            else if (this._interpolationConfig && this._inInterpolation &&\r\n                this._attemptStr(this._interpolationConfig.end)) {\r\n                parts.push(this._interpolationConfig.end);\r\n                this._inInterpolation = false;\r\n            }\r\n            else {\r\n                parts.push(this._readChar(true));\r\n            }\r\n        } while (!this._isTextEnd());\r\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _isTextEnd() {\r\n        if (this._peek === $LT || this._peek === $EOF) {\r\n            return true;\r\n        }\r\n        if (this._tokenizeIcu && !this._inInterpolation) {\r\n            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\r\n                // start of an expansion form\r\n                return true;\r\n            }\r\n            if (this._peek === $RBRACE && this._isInExpansionCase()) {\r\n                // end of and expansion case\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _savePosition() {\r\n        return [this._peek, this._index, this._column, this._line, this.tokens.length];\r\n    }\r\n    /**\r\n     * @param {?} char\r\n     * @return {?}\r\n     */\r\n    _readUntil(char) {\r\n        const /** @type {?} */ start = this._index;\r\n        this._attemptUntilChar(char);\r\n        return this._input.substring(start, this._index);\r\n    }\r\n    /**\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    _restorePosition(position) {\r\n        this._peek = position[0];\r\n        this._index = position[1];\r\n        this._column = position[2];\r\n        this._line = position[3];\r\n        const /** @type {?} */ nbTokens = position[4];\r\n        if (nbTokens < this.tokens.length) {\r\n            // remove any extra tokens\r\n            this.tokens = this.tokens.slice(0, nbTokens);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _isInExpansionCase() {\r\n        return this._expansionCaseStack.length > 0 &&\r\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\r\n                TokenType$1.EXPANSION_CASE_EXP_START;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _isInExpansionForm() {\r\n        return this._expansionCaseStack.length > 0 &&\r\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\r\n                TokenType$1.EXPANSION_FORM_START;\r\n    }\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isNotWhitespace(code) {\r\n    return !isWhitespace(code) || code === $EOF;\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isNameEnd(code) {\r\n    return isWhitespace(code) || code === $GT || code === $SLASH ||\r\n        code === $SQ || code === $DQ || code === $EQ;\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isPrefixEnd(code) {\r\n    return (code < $a || $z < code) && (code < $A || $Z < code) &&\r\n        (code < $0 || code > $9);\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isDigitEntityEnd(code) {\r\n    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction isNamedEntityEnd(code) {\r\n    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);\r\n}\r\n/**\r\n * @param {?} input\r\n * @param {?} offset\r\n * @param {?} interpolationConfig\r\n * @return {?}\r\n */\r\nfunction isExpansionFormStart(input, offset, interpolationConfig) {\r\n    const /** @type {?} */ isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;\r\n    return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;\r\n}\r\n/**\r\n * @param {?} peek\r\n * @return {?}\r\n */\r\nfunction isExpansionCaseStart(peek) {\r\n    return peek === $EQ || isAsciiLetter(peek) || isDigit(peek);\r\n}\r\n/**\r\n * @param {?} code1\r\n * @param {?} code2\r\n * @return {?}\r\n */\r\nfunction compareCharCodeCaseInsensitive(code1, code2) {\r\n    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);\r\n}\r\n/**\r\n * @param {?} code\r\n * @return {?}\r\n */\r\nfunction toUpperCaseCharCode(code) {\r\n    return code >= $a && code <= $z ? code - $a + $A : code;\r\n}\r\n/**\r\n * @param {?} srcTokens\r\n * @return {?}\r\n */\r\nfunction mergeTextTokens(srcTokens) {\r\n    const /** @type {?} */ dstTokens = [];\r\n    let /** @type {?} */ lastDstToken = undefined;\r\n    for (let /** @type {?} */ i = 0; i < srcTokens.length; i++) {\r\n        const /** @type {?} */ token = srcTokens[i];\r\n        if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {\r\n            lastDstToken.parts[0] += token.parts[0];\r\n            lastDstToken.sourceSpan.end = token.sourceSpan.end;\r\n        }\r\n        else {\r\n            lastDstToken = token;\r\n            dstTokens.push(lastDstToken);\r\n        }\r\n    }\r\n    return dstTokens;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass TreeError extends ParseError {\r\n    /**\r\n     * @param {?} elementName\r\n     * @param {?} span\r\n     * @param {?} msg\r\n     */\r\n    constructor(elementName, span, msg) {\r\n        super(span, msg);\r\n        this.elementName = elementName;\r\n    }\r\n    /**\r\n     * @param {?} elementName\r\n     * @param {?} span\r\n     * @param {?} msg\r\n     * @return {?}\r\n     */\r\n    static create(elementName, span, msg) {\r\n        return new TreeError(elementName, span, msg);\r\n    }\r\n}\r\nclass ParseTreeResult {\r\n    /**\r\n     * @param {?} rootNodes\r\n     * @param {?} errors\r\n     */\r\n    constructor(rootNodes, errors) {\r\n        this.rootNodes = rootNodes;\r\n        this.errors = errors;\r\n    }\r\n}\r\nclass Parser$1 {\r\n    /**\r\n     * @param {?} getTagDefinition\r\n     */\r\n    constructor(getTagDefinition) {\r\n        this.getTagDefinition = getTagDefinition;\r\n    }\r\n    /**\r\n     * @param {?} source\r\n     * @param {?} url\r\n     * @param {?=} parseExpansionForms\r\n     * @param {?=} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    parse(source, url, parseExpansionForms = false, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\r\n        const /** @type {?} */ tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);\r\n        const /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();\r\n        return new ParseTreeResult(treeAndErrors.rootNodes, (/** @type {?} */ (tokensAndErrors.errors)).concat(treeAndErrors.errors));\r\n    }\r\n}\r\nclass _TreeBuilder {\r\n    /**\r\n     * @param {?} tokens\r\n     * @param {?} getTagDefinition\r\n     */\r\n    constructor(tokens, getTagDefinition) {\r\n        this.tokens = tokens;\r\n        this.getTagDefinition = getTagDefinition;\r\n        this._index = -1;\r\n        this._rootNodes = [];\r\n        this._errors = [];\r\n        this._elementStack = [];\r\n        this._advance();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    build() {\r\n        while (this._peek.type !== TokenType$1.EOF) {\r\n            if (this._peek.type === TokenType$1.TAG_OPEN_START) {\r\n                this._consumeStartTag(this._advance());\r\n            }\r\n            else if (this._peek.type === TokenType$1.TAG_CLOSE) {\r\n                this._consumeEndTag(this._advance());\r\n            }\r\n            else if (this._peek.type === TokenType$1.CDATA_START) {\r\n                this._closeVoidElement();\r\n                this._consumeCdata(this._advance());\r\n            }\r\n            else if (this._peek.type === TokenType$1.COMMENT_START) {\r\n                this._closeVoidElement();\r\n                this._consumeComment(this._advance());\r\n            }\r\n            else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||\r\n                this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {\r\n                this._closeVoidElement();\r\n                this._consumeText(this._advance());\r\n            }\r\n            else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {\r\n                this._consumeExpansion(this._advance());\r\n            }\r\n            else {\r\n                // Skip all other tokens...\r\n                this._advance();\r\n            }\r\n        }\r\n        return new ParseTreeResult(this._rootNodes, this._errors);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _advance() {\r\n        const /** @type {?} */ prev = this._peek;\r\n        if (this._index < this.tokens.length - 1) {\r\n            // Note: there is always an EOF token at the end\r\n            this._index++;\r\n        }\r\n        this._peek = this.tokens[this._index];\r\n        return prev;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    _advanceIf(type) {\r\n        if (this._peek.type === type) {\r\n            return this._advance();\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} startToken\r\n     * @return {?}\r\n     */\r\n    _consumeCdata(startToken) {\r\n        this._consumeText(this._advance());\r\n        this._advanceIf(TokenType$1.CDATA_END);\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    _consumeComment(token) {\r\n        const /** @type {?} */ text = this._advanceIf(TokenType$1.RAW_TEXT);\r\n        this._advanceIf(TokenType$1.COMMENT_END);\r\n        const /** @type {?} */ value = text != null ? text.parts[0].trim() : null;\r\n        this._addToParent(new Comment(value, token.sourceSpan));\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    _consumeExpansion(token) {\r\n        const /** @type {?} */ switchValue = this._advance();\r\n        const /** @type {?} */ type = this._advance();\r\n        const /** @type {?} */ cases = [];\r\n        // read =\r\n        while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {\r\n            const /** @type {?} */ expCase = this._parseExpansionCase();\r\n            if (!expCase)\r\n                return; // error\r\n            cases.push(expCase);\r\n        }\r\n        // read the final }\r\n        if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {\r\n            this._errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '}'.`));\r\n            return;\r\n        }\r\n        const /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);\r\n        this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\r\n        this._advance();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _parseExpansionCase() {\r\n        const /** @type {?} */ value = this._advance();\r\n        // read {\r\n        if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {\r\n            this._errors.push(TreeError.create(null, this._peek.sourceSpan, `Invalid ICU message. Missing '{'.`));\r\n            return null;\r\n        }\r\n        // read until }\r\n        const /** @type {?} */ start = this._advance();\r\n        const /** @type {?} */ exp = this._collectExpansionExpTokens(start);\r\n        if (!exp)\r\n            return null;\r\n        const /** @type {?} */ end = this._advance();\r\n        exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));\r\n        // parse everything in between { and }\r\n        const /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();\r\n        if (parsedExp.errors.length > 0) {\r\n            this._errors = this._errors.concat(/** @type {?} */ (parsedExp.errors));\r\n            return null;\r\n        }\r\n        const /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);\r\n        const /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);\r\n        return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    _collectExpansionExpTokens(start) {\r\n        const /** @type {?} */ exp = [];\r\n        const /** @type {?} */ expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];\r\n        while (true) {\r\n            if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||\r\n                this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {\r\n                expansionFormStack.push(this._peek.type);\r\n            }\r\n            if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {\r\n                if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {\r\n                    expansionFormStack.pop();\r\n                    if (expansionFormStack.length == 0)\r\n                        return exp;\r\n                }\r\n                else {\r\n                    this._errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\r\n                    return null;\r\n                }\r\n            }\r\n            if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {\r\n                if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {\r\n                    expansionFormStack.pop();\r\n                }\r\n                else {\r\n                    this._errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\r\n                    return null;\r\n                }\r\n            }\r\n            if (this._peek.type === TokenType$1.EOF) {\r\n                this._errors.push(TreeError.create(null, start.sourceSpan, `Invalid ICU message. Missing '}'.`));\r\n                return null;\r\n            }\r\n            exp.push(this._advance());\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    _consumeText(token) {\r\n        let /** @type {?} */ text = token.parts[0];\r\n        if (text.length > 0 && text[0] == '\\n') {\r\n            const /** @type {?} */ parent = this._getParentElement();\r\n            if (parent != null && parent.children.length == 0 &&\r\n                this.getTagDefinition(parent.name).ignoreFirstLf) {\r\n                text = text.substring(1);\r\n            }\r\n        }\r\n        if (text.length > 0) {\r\n            this._addToParent(new Text(text, token.sourceSpan));\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _closeVoidElement() {\r\n        const /** @type {?} */ el = this._getParentElement();\r\n        if (el && this.getTagDefinition(el.name).isVoid) {\r\n            this._elementStack.pop();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} startTagToken\r\n     * @return {?}\r\n     */\r\n    _consumeStartTag(startTagToken) {\r\n        const /** @type {?} */ prefix = startTagToken.parts[0];\r\n        const /** @type {?} */ name = startTagToken.parts[1];\r\n        const /** @type {?} */ attrs = [];\r\n        while (this._peek.type === TokenType$1.ATTR_NAME) {\r\n            attrs.push(this._consumeAttr(this._advance()));\r\n        }\r\n        const /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());\r\n        let /** @type {?} */ selfClosing = false;\r\n        // Note: There could have been a tokenizer error\r\n        // so that we don't get a token for the end tag...\r\n        if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {\r\n            this._advance();\r\n            selfClosing = true;\r\n            const /** @type {?} */ tagDef = this.getTagDefinition(fullName);\r\n            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\r\n                this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, `Only void and foreign elements can be self closed \"${startTagToken.parts[1]}\"`));\r\n            }\r\n        }\r\n        else if (this._peek.type === TokenType$1.TAG_OPEN_END) {\r\n            this._advance();\r\n            selfClosing = false;\r\n        }\r\n        const /** @type {?} */ end = this._peek.sourceSpan.start;\r\n        const /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);\r\n        const /** @type {?} */ el = new Element(fullName, attrs, [], span, span, undefined);\r\n        this._pushElement(el);\r\n        if (selfClosing) {\r\n            this._popElement(fullName);\r\n            el.endSourceSpan = span;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    _pushElement(el) {\r\n        const /** @type {?} */ parentEl = this._getParentElement();\r\n        if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\r\n            this._elementStack.pop();\r\n        }\r\n        const /** @type {?} */ tagDef = this.getTagDefinition(el.name);\r\n        const { parent, container } = this._getParentElementSkippingContainers();\r\n        if (parent && tagDef.requireExtraParent(parent.name)) {\r\n            const /** @type {?} */ newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\r\n            this._insertBeforeContainer(parent, container, newParent);\r\n        }\r\n        this._addToParent(el);\r\n        this._elementStack.push(el);\r\n    }\r\n    /**\r\n     * @param {?} endTagToken\r\n     * @return {?}\r\n     */\r\n    _consumeEndTag(endTagToken) {\r\n        const /** @type {?} */ fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\r\n        if (this._getParentElement()) {\r\n            /** @type {?} */ ((this._getParentElement())).endSourceSpan = endTagToken.sourceSpan;\r\n        }\r\n        if (this.getTagDefinition(fullName).isVoid) {\r\n            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, `Void elements do not have end tags \"${endTagToken.parts[1]}\"`));\r\n        }\r\n        else if (!this._popElement(fullName)) {\r\n            const /** @type {?} */ errMsg = `Unexpected closing tag \"${fullName}\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;\r\n            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fullName\r\n     * @return {?}\r\n     */\r\n    _popElement(fullName) {\r\n        for (let /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\r\n            const /** @type {?} */ el = this._elementStack[stackIndex];\r\n            if (el.name == fullName) {\r\n                this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\r\n                return true;\r\n            }\r\n            if (!this.getTagDefinition(el.name).closedByParent) {\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} attrName\r\n     * @return {?}\r\n     */\r\n    _consumeAttr(attrName) {\r\n        const /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\r\n        let /** @type {?} */ end = attrName.sourceSpan.end;\r\n        let /** @type {?} */ value = '';\r\n        let /** @type {?} */ valueSpan = /** @type {?} */ ((undefined));\r\n        if (this._peek.type === TokenType$1.ATTR_VALUE) {\r\n            const /** @type {?} */ valueToken = this._advance();\r\n            value = valueToken.parts[0];\r\n            end = valueToken.sourceSpan.end;\r\n            valueSpan = valueToken.sourceSpan;\r\n        }\r\n        return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _getParentElement() {\r\n        return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\r\n    }\r\n    /**\r\n     * Returns the parent in the DOM and the container.\r\n     *\r\n     * `<ng-container>` elements are skipped as they are not rendered as DOM element.\r\n     * @return {?}\r\n     */\r\n    _getParentElementSkippingContainers() {\r\n        let /** @type {?} */ container = null;\r\n        for (let /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {\r\n            if (!isNgContainer(this._elementStack[i].name)) {\r\n                return { parent: this._elementStack[i], container };\r\n            }\r\n            container = this._elementStack[i];\r\n        }\r\n        return { parent: null, container };\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    _addToParent(node) {\r\n        const /** @type {?} */ parent = this._getParentElement();\r\n        if (parent != null) {\r\n            parent.children.push(node);\r\n        }\r\n        else {\r\n            this._rootNodes.push(node);\r\n        }\r\n    }\r\n    /**\r\n     * Insert a node between the parent and the container.\r\n     * When no container is given, the node is appended as a child of the parent.\r\n     * Also updates the element stack accordingly.\r\n     *\r\n     * \\@internal\r\n     * @param {?} parent\r\n     * @param {?} container\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    _insertBeforeContainer(parent, container, node) {\r\n        if (!container) {\r\n            this._addToParent(node);\r\n            this._elementStack.push(node);\r\n        }\r\n        else {\r\n            if (parent) {\r\n                // replace the container with the new node in the children\r\n                const /** @type {?} */ index = parent.children.indexOf(container);\r\n                parent.children[index] = node;\r\n            }\r\n            else {\r\n                this._rootNodes.push(node);\r\n            }\r\n            node.children.push(container);\r\n            this._elementStack.splice(this._elementStack.indexOf(container), 0, node);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} prefix\r\n     * @param {?} localName\r\n     * @param {?} parentElement\r\n     * @return {?}\r\n     */\r\n    _getElementFullName(prefix, localName, parentElement) {\r\n        if (prefix == null) {\r\n            prefix = /** @type {?} */ ((this.getTagDefinition(localName).implicitNamespacePrefix));\r\n            if (prefix == null && parentElement != null) {\r\n                prefix = getNsPrefix(parentElement.name);\r\n            }\r\n        }\r\n        return mergeNsAndName(prefix, localName);\r\n    }\r\n}\r\n/**\r\n * @param {?} stack\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction lastOnStack(stack, element) {\r\n    return stack.length > 0 && stack[stack.length - 1] === element;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} message\r\n * @return {?}\r\n */\r\nfunction digest(message) {\r\n    return message.id || sha1(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\r\n}\r\n/**\r\n * @param {?} message\r\n * @return {?}\r\n */\r\nfunction decimalDigest(message) {\r\n    if (message.id) {\r\n        return message.id;\r\n    }\r\n    const /** @type {?} */ visitor = new _SerializerIgnoreIcuExpVisitor();\r\n    const /** @type {?} */ parts = message.nodes.map(a => a.visit(visitor, null));\r\n    return computeMsgId(parts.join(''), message.meaning);\r\n}\r\n/**\r\n * Serialize the i18n ast to something xml-like in order to generate an UID.\r\n *\r\n * The visitor is also used in the i18n parser tests\r\n *\r\n * \\@internal\r\n */\r\nclass _SerializerVisitor {\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return text.value; }\r\n    /**\r\n     * @param {?} container\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitContainer(container, context) {\r\n        return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\r\n    }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitIcu(icu, context) {\r\n        const /** @type {?} */ strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\r\n        return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitTagPlaceholder(ph, context) {\r\n        return ph.isVoid ?\r\n            `<ph tag name=\"${ph.startName}\"/>` :\r\n            `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPlaceholder(ph, context) {\r\n        return ph.value ? `<ph name=\"${ph.name}\">${ph.value}</ph>` : `<ph name=\"${ph.name}\"/>`;\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcuPlaceholder(ph, context) {\r\n        return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\r\n    }\r\n}\r\nconst serializerVisitor = new _SerializerVisitor();\r\n/**\r\n * @param {?} nodes\r\n * @return {?}\r\n */\r\nfunction serializeNodes(nodes) {\r\n    return nodes.map(a => a.visit(serializerVisitor, null));\r\n}\r\n/**\r\n * Serialize the i18n ast to something xml-like in order to generate an UID.\r\n *\r\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\r\n *\r\n * \\@internal\r\n */\r\nclass _SerializerIgnoreIcuExpVisitor extends _SerializerVisitor {\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitIcu(icu, context) {\r\n        let /** @type {?} */ strCases = Object.keys(icu.cases).map((k) => `${k} {${icu.cases[k].visit(this)}}`);\r\n        // Do not take the expression into account\r\n        return `{${icu.type}, ${strCases.join(', ')}}`;\r\n    }\r\n}\r\n/**\r\n * Compute the SHA1 of the given string\r\n *\r\n * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\r\n *\r\n * WARNING: this function has not been designed not tested with security in mind.\r\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\r\n * @param {?} str\r\n * @return {?}\r\n */\r\nfunction sha1(str) {\r\n    const /** @type {?} */ utf8 = utf8Encode(str);\r\n    const /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);\r\n    const /** @type {?} */ len = utf8.length * 8;\r\n    const /** @type {?} */ w = new Array(80);\r\n    let [a, b, c, d, e] = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\r\n    words32[len >> 5] |= 0x80 << (24 - len % 32);\r\n    words32[((len + 64 >> 9) << 4) + 15] = len;\r\n    for (let /** @type {?} */ i = 0; i < words32.length; i += 16) {\r\n        const [h0, h1, h2, h3, h4] = [a, b, c, d, e];\r\n        for (let /** @type {?} */ j = 0; j < 80; j++) {\r\n            if (j < 16) {\r\n                w[j] = words32[i + j];\r\n            }\r\n            else {\r\n                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\r\n            }\r\n            const [f, k] = fk(j, b, c, d);\r\n            const /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\r\n            [e, d, c, b, a] = [d, c, rol32(b, 30), a, temp];\r\n        }\r\n        [a, b, c, d, e] = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)];\r\n    }\r\n    return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\r\n}\r\n/**\r\n * @param {?} index\r\n * @param {?} b\r\n * @param {?} c\r\n * @param {?} d\r\n * @return {?}\r\n */\r\nfunction fk(index, b, c, d) {\r\n    if (index < 20) {\r\n        return [(b & c) | (~b & d), 0x5a827999];\r\n    }\r\n    if (index < 40) {\r\n        return [b ^ c ^ d, 0x6ed9eba1];\r\n    }\r\n    if (index < 60) {\r\n        return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\r\n    }\r\n    return [b ^ c ^ d, 0xca62c1d6];\r\n}\r\n/**\r\n * Compute the fingerprint of the given string\r\n *\r\n * The output is 64 bit number encoded as a decimal string\r\n *\r\n * based on:\r\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\r\n * @param {?} str\r\n * @return {?}\r\n */\r\nfunction fingerprint(str) {\r\n    const /** @type {?} */ utf8 = utf8Encode(str);\r\n    let [hi, lo] = [hash32(utf8, 0), hash32(utf8, 102072)];\r\n    if (hi == 0 && (lo == 0 || lo == 1)) {\r\n        hi = hi ^ 0x130f9bef;\r\n        lo = lo ^ -0x6b5f56d8;\r\n    }\r\n    return [hi, lo];\r\n}\r\n/**\r\n * @param {?} msg\r\n * @param {?} meaning\r\n * @return {?}\r\n */\r\nfunction computeMsgId(msg, meaning) {\r\n    let [hi, lo] = fingerprint(msg);\r\n    if (meaning) {\r\n        const [him, lom] = fingerprint(meaning);\r\n        [hi, lo] = add64(rol64([hi, lo], 1), [him, lom]);\r\n    }\r\n    return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));\r\n}\r\n/**\r\n * @param {?} str\r\n * @param {?} c\r\n * @return {?}\r\n */\r\nfunction hash32(str, c) {\r\n    let [a, b] = [0x9e3779b9, 0x9e3779b9];\r\n    let /** @type {?} */ i;\r\n    const /** @type {?} */ len = str.length;\r\n    for (i = 0; i + 12 <= len; i += 12) {\r\n        a = add32(a, wordAt(str, i, Endian.Little));\r\n        b = add32(b, wordAt(str, i + 4, Endian.Little));\r\n        c = add32(c, wordAt(str, i + 8, Endian.Little));\r\n        [a, b, c] = mix([a, b, c]);\r\n    }\r\n    a = add32(a, wordAt(str, i, Endian.Little));\r\n    b = add32(b, wordAt(str, i + 4, Endian.Little));\r\n    // the first byte of c is reserved for the length\r\n    c = add32(c, len);\r\n    c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);\r\n    return mix([a, b, c])[2];\r\n}\r\n/**\r\n * @param {?} __0\r\n * @return {?}\r\n */\r\nfunction mix([a, b, c]) {\r\n    a = sub32(a, b);\r\n    a = sub32(a, c);\r\n    a ^= c >>> 13;\r\n    b = sub32(b, c);\r\n    b = sub32(b, a);\r\n    b ^= a << 8;\r\n    c = sub32(c, a);\r\n    c = sub32(c, b);\r\n    c ^= b >>> 13;\r\n    a = sub32(a, b);\r\n    a = sub32(a, c);\r\n    a ^= c >>> 12;\r\n    b = sub32(b, c);\r\n    b = sub32(b, a);\r\n    b ^= a << 16;\r\n    c = sub32(c, a);\r\n    c = sub32(c, b);\r\n    c ^= b >>> 5;\r\n    a = sub32(a, b);\r\n    a = sub32(a, c);\r\n    a ^= c >>> 3;\r\n    b = sub32(b, c);\r\n    b = sub32(b, a);\r\n    b ^= a << 10;\r\n    c = sub32(c, a);\r\n    c = sub32(c, b);\r\n    c ^= b >>> 15;\r\n    return [a, b, c];\r\n}\r\n/** @enum {number} */\r\nconst Endian = {\r\n    Little: 0,\r\n    Big: 1,\r\n};\r\nEndian[Endian.Little] = \"Little\";\r\nEndian[Endian.Big] = \"Big\";\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction add32(a, b) {\r\n    return add32to64(a, b)[1];\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction add32to64(a, b) {\r\n    const /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);\r\n    const /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);\r\n    return [high >>> 16, (high << 16) | (low & 0xffff)];\r\n}\r\n/**\r\n * @param {?} __0\r\n * @param {?} __1\r\n * @return {?}\r\n */\r\nfunction add64([ah, al], [bh, bl]) {\r\n    const [carry, l] = add32to64(al, bl);\r\n    const /** @type {?} */ h = add32(add32(ah, bh), carry);\r\n    return [h, l];\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction sub32(a, b) {\r\n    const /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);\r\n    const /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);\r\n    return (high << 16) | (low & 0xffff);\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} count\r\n * @return {?}\r\n */\r\nfunction rol32(a, count) {\r\n    return (a << count) | (a >>> (32 - count));\r\n}\r\n/**\r\n * @param {?} __0\r\n * @param {?} count\r\n * @return {?}\r\n */\r\nfunction rol64([hi, lo], count) {\r\n    const /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));\r\n    const /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));\r\n    return [h, l];\r\n}\r\n/**\r\n * @param {?} str\r\n * @param {?} endian\r\n * @return {?}\r\n */\r\nfunction stringToWords32(str, endian) {\r\n    const /** @type {?} */ words32 = Array((str.length + 3) >>> 2);\r\n    for (let /** @type {?} */ i = 0; i < words32.length; i++) {\r\n        words32[i] = wordAt(str, i * 4, endian);\r\n    }\r\n    return words32;\r\n}\r\n/**\r\n * @param {?} str\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction byteAt(str, index) {\r\n    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\r\n}\r\n/**\r\n * @param {?} str\r\n * @param {?} index\r\n * @param {?} endian\r\n * @return {?}\r\n */\r\nfunction wordAt(str, index, endian) {\r\n    let /** @type {?} */ word = 0;\r\n    if (endian === Endian.Big) {\r\n        for (let /** @type {?} */ i = 0; i < 4; i++) {\r\n            word += byteAt(str, index + i) << (24 - 8 * i);\r\n        }\r\n    }\r\n    else {\r\n        for (let /** @type {?} */ i = 0; i < 4; i++) {\r\n            word += byteAt(str, index + i) << 8 * i;\r\n        }\r\n    }\r\n    return word;\r\n}\r\n/**\r\n * @param {?} words32\r\n * @return {?}\r\n */\r\nfunction words32ToByteString(words32) {\r\n    return words32.reduce((str, word) => str + word32ToByteString(word), '');\r\n}\r\n/**\r\n * @param {?} word\r\n * @return {?}\r\n */\r\nfunction word32ToByteString(word) {\r\n    let /** @type {?} */ str = '';\r\n    for (let /** @type {?} */ i = 0; i < 4; i++) {\r\n        str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);\r\n    }\r\n    return str;\r\n}\r\n/**\r\n * @param {?} str\r\n * @return {?}\r\n */\r\nfunction byteStringToHexString(str) {\r\n    let /** @type {?} */ hex = '';\r\n    for (let /** @type {?} */ i = 0; i < str.length; i++) {\r\n        const /** @type {?} */ b = byteAt(str, i);\r\n        hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\r\n    }\r\n    return hex.toLowerCase();\r\n}\r\n/**\r\n * @param {?} str\r\n * @return {?}\r\n */\r\nfunction byteStringToDecString(str) {\r\n    let /** @type {?} */ decimal = '';\r\n    let /** @type {?} */ toThePower = '1';\r\n    for (let /** @type {?} */ i = str.length - 1; i >= 0; i--) {\r\n        decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));\r\n        toThePower = numberTimesBigInt(256, toThePower);\r\n    }\r\n    return decimal.split('').reverse().join('');\r\n}\r\n/**\r\n * @param {?} x\r\n * @param {?} y\r\n * @return {?}\r\n */\r\nfunction addBigInt(x, y) {\r\n    let /** @type {?} */ sum = '';\r\n    const /** @type {?} */ len = Math.max(x.length, y.length);\r\n    for (let /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {\r\n        const /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\r\n        if (tmpSum >= 10) {\r\n            carry = 1;\r\n            sum += tmpSum - 10;\r\n        }\r\n        else {\r\n            carry = 0;\r\n            sum += tmpSum;\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n/**\r\n * @param {?} num\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction numberTimesBigInt(num, b) {\r\n    let /** @type {?} */ product = '';\r\n    let /** @type {?} */ bToThePower = b;\r\n    for (; num !== 0; num = num >>> 1) {\r\n        if (num & 1)\r\n            product = addBigInt(product, bToThePower);\r\n        bToThePower = addBigInt(bToThePower, bToThePower);\r\n    }\r\n    return product;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass Message {\r\n    /**\r\n     * @param {?} nodes message AST\r\n     * @param {?} placeholders maps placeholder names to static content\r\n     * @param {?} placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\r\n     * @param {?} meaning\r\n     * @param {?} description\r\n     * @param {?} id\r\n     */\r\n    constructor(nodes, placeholders, placeholderToMessage, meaning, description, id) {\r\n        this.nodes = nodes;\r\n        this.placeholders = placeholders;\r\n        this.placeholderToMessage = placeholderToMessage;\r\n        this.meaning = meaning;\r\n        this.description = description;\r\n        this.id = id;\r\n        if (nodes.length) {\r\n            this.sources = [{\r\n                    filePath: nodes[0].sourceSpan.start.file.url,\r\n                    startLine: nodes[0].sourceSpan.start.line + 1,\r\n                    startCol: nodes[0].sourceSpan.start.col + 1,\r\n                    endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\r\n                    endCol: nodes[0].sourceSpan.start.col + 1\r\n                }];\r\n        }\r\n        else {\r\n            this.sources = [];\r\n        }\r\n    }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\nclass Text$1 {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(value, sourceSpan) {\r\n        this.value = value;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitText(this, context); }\r\n}\r\nclass Container {\r\n    /**\r\n     * @param {?} children\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(children, sourceSpan) {\r\n        this.children = children;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitContainer(this, context); }\r\n}\r\nclass Icu {\r\n    /**\r\n     * @param {?} expression\r\n     * @param {?} type\r\n     * @param {?} cases\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(expression, type, cases, sourceSpan) {\r\n        this.expression = expression;\r\n        this.type = type;\r\n        this.cases = cases;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitIcu(this, context); }\r\n}\r\nclass TagPlaceholder {\r\n    /**\r\n     * @param {?} tag\r\n     * @param {?} attrs\r\n     * @param {?} startName\r\n     * @param {?} closeName\r\n     * @param {?} children\r\n     * @param {?} isVoid\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {\r\n        this.tag = tag;\r\n        this.attrs = attrs;\r\n        this.startName = startName;\r\n        this.closeName = closeName;\r\n        this.children = children;\r\n        this.isVoid = isVoid;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitTagPlaceholder(this, context); }\r\n}\r\nclass Placeholder {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} name\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(value, name, sourceSpan) {\r\n        this.value = value;\r\n        this.name = name;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitPlaceholder(this, context); }\r\n}\r\nclass IcuPlaceholder {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} name\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(value, name, sourceSpan) {\r\n        this.value = value;\r\n        this.name = name;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visit(visitor, context) { return visitor.visitIcuPlaceholder(this, context); }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\nclass CloneVisitor {\r\n    /**\r\n     * @param {?} text\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return new Text$1(text.value, text.sourceSpan); }\r\n    /**\r\n     * @param {?} container\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitContainer(container, context) {\r\n        const /** @type {?} */ children = container.children.map(n => n.visit(this, context));\r\n        return new Container(children, container.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcu(icu, context) {\r\n        const /** @type {?} */ cases = {};\r\n        Object.keys(icu.cases).forEach(key => cases[key] = icu.cases[key].visit(this, context));\r\n        const /** @type {?} */ msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);\r\n        msg.expressionPlaceholder = icu.expressionPlaceholder;\r\n        return msg;\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitTagPlaceholder(ph, context) {\r\n        const /** @type {?} */ children = ph.children.map(n => n.visit(this, context));\r\n        return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitPlaceholder(ph, context) {\r\n        return new Placeholder(ph.value, ph.name, ph.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcuPlaceholder(ph, context) {\r\n        return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\r\n    }\r\n}\r\nclass RecurseVisitor {\r\n    /**\r\n     * @param {?} text\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { }\r\n    /**\r\n     * @param {?} container\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitContainer(container, context) {\r\n        container.children.forEach(child => child.visit(this));\r\n    }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcu(icu, context) {\r\n        Object.keys(icu.cases).forEach(k => { icu.cases[k].visit(this); });\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitTagPlaceholder(ph, context) {\r\n        ph.children.forEach(child => child.visit(this));\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitPlaceholder(ph, context) { }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcuPlaceholder(ph, context) { }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass HtmlTagDefinition {\r\n    /**\r\n     * @param {?=} __0\r\n     */\r\n    constructor({ closedByChildren, requiredParents, implicitNamespacePrefix, contentType = TagContentType.PARSABLE_DATA, closedByParent = false, isVoid = false, ignoreFirstLf = false } = {}) {\r\n        this.closedByChildren = {};\r\n        this.closedByParent = false;\r\n        this.canSelfClose = false;\r\n        if (closedByChildren && closedByChildren.length > 0) {\r\n            closedByChildren.forEach(tagName => this.closedByChildren[tagName] = true);\r\n        }\r\n        this.isVoid = isVoid;\r\n        this.closedByParent = closedByParent || isVoid;\r\n        if (requiredParents && requiredParents.length > 0) {\r\n            this.requiredParents = {};\r\n            // The first parent is the list is automatically when none of the listed parents are present\r\n            this.parentToAdd = requiredParents[0];\r\n            requiredParents.forEach(tagName => this.requiredParents[tagName] = true);\r\n        }\r\n        this.implicitNamespacePrefix = implicitNamespacePrefix || null;\r\n        this.contentType = contentType;\r\n        this.ignoreFirstLf = ignoreFirstLf;\r\n    }\r\n    /**\r\n     * @param {?} currentParent\r\n     * @return {?}\r\n     */\r\n    requireExtraParent(currentParent) {\r\n        if (!this.requiredParents) {\r\n            return false;\r\n        }\r\n        if (!currentParent) {\r\n            return true;\r\n        }\r\n        const /** @type {?} */ lcParent = currentParent.toLowerCase();\r\n        const /** @type {?} */ isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';\r\n        return !isParentTemplate && this.requiredParents[lcParent] != true;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    isClosedByChild(name) {\r\n        return this.isVoid || name.toLowerCase() in this.closedByChildren;\r\n    }\r\n}\r\n// see http://www.w3.org/TR/html51/syntax.html#optional-tags\r\n// This implementation does not fully conform to the HTML5 spec.\r\nconst TAG_DEFINITIONS = {\r\n    'base': new HtmlTagDefinition({ isVoid: true }),\r\n    'meta': new HtmlTagDefinition({ isVoid: true }),\r\n    'area': new HtmlTagDefinition({ isVoid: true }),\r\n    'embed': new HtmlTagDefinition({ isVoid: true }),\r\n    'link': new HtmlTagDefinition({ isVoid: true }),\r\n    'img': new HtmlTagDefinition({ isVoid: true }),\r\n    'input': new HtmlTagDefinition({ isVoid: true }),\r\n    'param': new HtmlTagDefinition({ isVoid: true }),\r\n    'hr': new HtmlTagDefinition({ isVoid: true }),\r\n    'br': new HtmlTagDefinition({ isVoid: true }),\r\n    'source': new HtmlTagDefinition({ isVoid: true }),\r\n    'track': new HtmlTagDefinition({ isVoid: true }),\r\n    'wbr': new HtmlTagDefinition({ isVoid: true }),\r\n    'p': new HtmlTagDefinition({\r\n        closedByChildren: [\r\n            'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',\r\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',\r\n            'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'\r\n        ],\r\n        closedByParent: true\r\n    }),\r\n    'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),\r\n    'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),\r\n    'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),\r\n    'tr': new HtmlTagDefinition({\r\n        closedByChildren: ['tr'],\r\n        requiredParents: ['tbody', 'tfoot', 'thead'],\r\n        closedByParent: true\r\n    }),\r\n    'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\r\n    'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\r\n    'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),\r\n    'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),\r\n    'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),\r\n    'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),\r\n    'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),\r\n    'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),\r\n    'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\r\n    'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\r\n    'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),\r\n    'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\r\n    'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),\r\n    'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),\r\n    'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),\r\n    'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),\r\n    'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\r\n    'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\r\n    'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),\r\n    'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),\r\n};\r\nconst _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();\r\n/**\r\n * @param {?} tagName\r\n * @return {?}\r\n */\r\nfunction getHtmlTagDefinition(tagName) {\r\n    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst TAG_TO_PLACEHOLDER_NAMES = {\r\n    'A': 'LINK',\r\n    'B': 'BOLD_TEXT',\r\n    'BR': 'LINE_BREAK',\r\n    'EM': 'EMPHASISED_TEXT',\r\n    'H1': 'HEADING_LEVEL1',\r\n    'H2': 'HEADING_LEVEL2',\r\n    'H3': 'HEADING_LEVEL3',\r\n    'H4': 'HEADING_LEVEL4',\r\n    'H5': 'HEADING_LEVEL5',\r\n    'H6': 'HEADING_LEVEL6',\r\n    'HR': 'HORIZONTAL_RULE',\r\n    'I': 'ITALIC_TEXT',\r\n    'LI': 'LIST_ITEM',\r\n    'LINK': 'MEDIA_LINK',\r\n    'OL': 'ORDERED_LIST',\r\n    'P': 'PARAGRAPH',\r\n    'Q': 'QUOTATION',\r\n    'S': 'STRIKETHROUGH_TEXT',\r\n    'SMALL': 'SMALL_TEXT',\r\n    'SUB': 'SUBSTRIPT',\r\n    'SUP': 'SUPERSCRIPT',\r\n    'TBODY': 'TABLE_BODY',\r\n    'TD': 'TABLE_CELL',\r\n    'TFOOT': 'TABLE_FOOTER',\r\n    'TH': 'TABLE_HEADER_CELL',\r\n    'THEAD': 'TABLE_HEADER',\r\n    'TR': 'TABLE_ROW',\r\n    'TT': 'MONOSPACED_TEXT',\r\n    'U': 'UNDERLINED_TEXT',\r\n    'UL': 'UNORDERED_LIST',\r\n};\r\n/**\r\n * Creates unique names for placeholder with different content.\r\n *\r\n * Returns the same placeholder name when the content is identical.\r\n */\r\nclass PlaceholderRegistry {\r\n    constructor() {\r\n        this._placeHolderNameCounts = {};\r\n        this._signatureToName = {};\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {?} attrs\r\n     * @param {?} isVoid\r\n     * @return {?}\r\n     */\r\n    getStartTagPlaceholderName(tag, attrs, isVoid) {\r\n        const /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);\r\n        if (this._signatureToName[signature]) {\r\n            return this._signatureToName[signature];\r\n        }\r\n        const /** @type {?} */ upperTag = tag.toUpperCase();\r\n        const /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\r\n        const /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : `START_${baseName}`);\r\n        this._signatureToName[signature] = name;\r\n        return name;\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @return {?}\r\n     */\r\n    getCloseTagPlaceholderName(tag) {\r\n        const /** @type {?} */ signature = this._hashClosingTag(tag);\r\n        if (this._signatureToName[signature]) {\r\n            return this._signatureToName[signature];\r\n        }\r\n        const /** @type {?} */ upperTag = tag.toUpperCase();\r\n        const /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\r\n        const /** @type {?} */ name = this._generateUniqueName(`CLOSE_${baseName}`);\r\n        this._signatureToName[signature] = name;\r\n        return name;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\r\n    getPlaceholderName(name, content) {\r\n        const /** @type {?} */ upperName = name.toUpperCase();\r\n        const /** @type {?} */ signature = `PH: ${upperName}=${content}`;\r\n        if (this._signatureToName[signature]) {\r\n            return this._signatureToName[signature];\r\n        }\r\n        const /** @type {?} */ uniqueName = this._generateUniqueName(upperName);\r\n        this._signatureToName[signature] = uniqueName;\r\n        return uniqueName;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getUniquePlaceholder(name) {\r\n        return this._generateUniqueName(name.toUpperCase());\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {?} attrs\r\n     * @param {?} isVoid\r\n     * @return {?}\r\n     */\r\n    _hashTag(tag, attrs, isVoid) {\r\n        const /** @type {?} */ start = `<${tag}`;\r\n        const /** @type {?} */ strAttrs = Object.keys(attrs).sort().map((name) => ` ${name}=${attrs[name]}`).join('');\r\n        const /** @type {?} */ end = isVoid ? '/>' : `></${tag}>`;\r\n        return start + strAttrs + end;\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @return {?}\r\n     */\r\n    _hashClosingTag(tag) { return this._hashTag(`/${tag}`, {}, false); }\r\n    /**\r\n     * @param {?} base\r\n     * @return {?}\r\n     */\r\n    _generateUniqueName(base) {\r\n        const /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);\r\n        if (!seen) {\r\n            this._placeHolderNameCounts[base] = 1;\r\n            return base;\r\n        }\r\n        const /** @type {?} */ id = this._placeHolderNameCounts[base];\r\n        this._placeHolderNameCounts[base] = id + 1;\r\n        return `${base}_${id}`;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _expParser = new Parser(new Lexer());\r\n/**\r\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\r\n * @param {?} interpolationConfig\r\n * @return {?}\r\n */\r\nfunction createI18nMessageFactory(interpolationConfig) {\r\n    const /** @type {?} */ visitor = new _I18nVisitor(_expParser, interpolationConfig);\r\n    return (nodes, meaning, description, id) => visitor.toI18nMessage(nodes, meaning, description, id);\r\n}\r\nclass _I18nVisitor {\r\n    /**\r\n     * @param {?} _expressionParser\r\n     * @param {?} _interpolationConfig\r\n     */\r\n    constructor(_expressionParser, _interpolationConfig) {\r\n        this._expressionParser = _expressionParser;\r\n        this._interpolationConfig = _interpolationConfig;\r\n    }\r\n    /**\r\n     * @param {?} nodes\r\n     * @param {?} meaning\r\n     * @param {?} description\r\n     * @param {?} id\r\n     * @return {?}\r\n     */\r\n    toI18nMessage(nodes, meaning, description, id) {\r\n        this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;\r\n        this._icuDepth = 0;\r\n        this._placeholderRegistry = new PlaceholderRegistry();\r\n        this._placeholderToContent = {};\r\n        this._placeholderToMessage = {};\r\n        const /** @type {?} */ i18nodes = visitAll(this, nodes, {});\r\n        return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(el, context) {\r\n        const /** @type {?} */ children = visitAll(this, el.children);\r\n        const /** @type {?} */ attrs = {};\r\n        el.attrs.forEach(attr => {\r\n            // Do not visit the attributes, translatable ones are top-level ASTs\r\n            attrs[attr.name] = attr.value;\r\n        });\r\n        const /** @type {?} */ isVoid = getHtmlTagDefinition(el.name).isVoid;\r\n        const /** @type {?} */ startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\r\n        this._placeholderToContent[startPhName] = /** @type {?} */ ((el.sourceSpan)).toString();\r\n        let /** @type {?} */ closePhName = '';\r\n        if (!isVoid) {\r\n            closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\r\n            this._placeholderToContent[closePhName] = `</${el.name}>`;\r\n        }\r\n        return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, /** @type {?} */ ((el.sourceSpan)));\r\n    }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) {\r\n        return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) {\r\n        return this._visitTextWithInterpolation(text.value, /** @type {?} */ ((text.sourceSpan)));\r\n    }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { return null; }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(icu, context) {\r\n        this._icuDepth++;\r\n        const /** @type {?} */ i18nIcuCases = {};\r\n        const /** @type {?} */ i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\r\n        icu.cases.forEach((caze) => {\r\n            i18nIcuCases[caze.value] = new Container(caze.expression.map((node) => node.visit(this, {})), caze.expSourceSpan);\r\n        });\r\n        this._icuDepth--;\r\n        if (this._isIcu || this._icuDepth > 0) {\r\n            // Returns an ICU node when:\r\n            // - the message (vs a part of the message) is an ICU message, or\r\n            // - the ICU message is nested.\r\n            const /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder(`VAR_${icu.type}`);\r\n            i18nIcu.expressionPlaceholder = expPh;\r\n            this._placeholderToContent[expPh] = icu.switchValue;\r\n            return i18nIcu;\r\n        }\r\n        // Else returns a placeholder\r\n        // ICU placeholders should not be replaced with their original content but with the their\r\n        // translations. We need to create a new visitor (they are not re-entrant) to compute the\r\n        // message id.\r\n        // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\r\n        const /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\r\n        const /** @type {?} */ visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);\r\n        this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');\r\n        return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} icuCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(icuCase, context) {\r\n        throw new Error('Unreachable code');\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    _visitTextWithInterpolation(text, sourceSpan) {\r\n        const /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);\r\n        if (!splitInterpolation) {\r\n            // No expression, return a single text\r\n            return new Text$1(text, sourceSpan);\r\n        }\r\n        // Return a group of text + expressions\r\n        const /** @type {?} */ nodes = [];\r\n        const /** @type {?} */ container = new Container(nodes, sourceSpan);\r\n        const { start: sDelimiter, end: eDelimiter } = this._interpolationConfig;\r\n        for (let /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {\r\n            const /** @type {?} */ expression = splitInterpolation.expressions[i];\r\n            const /** @type {?} */ baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';\r\n            const /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\r\n            if (splitInterpolation.strings[i].length) {\r\n                // No need to add empty strings\r\n                nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));\r\n            }\r\n            nodes.push(new Placeholder(expression, phName, sourceSpan));\r\n            this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\r\n        }\r\n        // The last index contains no expression\r\n        const /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;\r\n        if (splitInterpolation.strings[lastStringIdx].length) {\r\n            nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));\r\n        }\r\n        return container;\r\n    }\r\n}\r\nconst _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\nfunction _extractPlaceholderName(input) {\r\n    return input.split(_CUSTOM_PH_EXP)[2];\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An i18n error.\r\n */\r\nclass I18nError extends ParseError {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} msg\r\n     */\r\n    constructor(span, msg) { super(span, msg); }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _I18N_ATTR = 'i18n';\r\nconst _I18N_ATTR_PREFIX = 'i18n-';\r\nconst _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\r\nconst MEANING_SEPARATOR = '|';\r\nconst ID_SEPARATOR = '@@';\r\nlet i18nCommentsWarned = false;\r\n/**\r\n * Extract translatable messages from an html AST\r\n * @param {?} nodes\r\n * @param {?} interpolationConfig\r\n * @param {?} implicitTags\r\n * @param {?} implicitAttrs\r\n * @return {?}\r\n */\r\nfunction extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\r\n    const /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);\r\n    return visitor.extract(nodes, interpolationConfig);\r\n}\r\n/**\r\n * @param {?} nodes\r\n * @param {?} translations\r\n * @param {?} interpolationConfig\r\n * @param {?} implicitTags\r\n * @param {?} implicitAttrs\r\n * @return {?}\r\n */\r\nfunction mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\r\n    const /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);\r\n    return visitor.merge(nodes, translations, interpolationConfig);\r\n}\r\nclass ExtractionResult {\r\n    /**\r\n     * @param {?} messages\r\n     * @param {?} errors\r\n     */\r\n    constructor(messages, errors) {\r\n        this.messages = messages;\r\n        this.errors = errors;\r\n    }\r\n}\r\n/** @enum {number} */\r\nconst _VisitorMode = {\r\n    Extract: 0,\r\n    Merge: 1,\r\n};\r\n_VisitorMode[_VisitorMode.Extract] = \"Extract\";\r\n_VisitorMode[_VisitorMode.Merge] = \"Merge\";\r\n/**\r\n * This Visitor is used:\r\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\r\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\r\n *\r\n * \\@internal\r\n */\r\nclass _Visitor {\r\n    /**\r\n     * @param {?} _implicitTags\r\n     * @param {?} _implicitAttrs\r\n     */\r\n    constructor(_implicitTags, _implicitAttrs) {\r\n        this._implicitTags = _implicitTags;\r\n        this._implicitAttrs = _implicitAttrs;\r\n    }\r\n    /**\r\n     * Extracts the messages from the tree\r\n     * @param {?} nodes\r\n     * @param {?} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    extract(nodes, interpolationConfig) {\r\n        this._init(_VisitorMode.Extract, interpolationConfig);\r\n        nodes.forEach(node => node.visit(this, null));\r\n        if (this._inI18nBlock) {\r\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\r\n        }\r\n        return new ExtractionResult(this._messages, this._errors);\r\n    }\r\n    /**\r\n     * Returns a tree where all translatable nodes are translated\r\n     * @param {?} nodes\r\n     * @param {?} translations\r\n     * @param {?} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    merge(nodes, translations, interpolationConfig) {\r\n        this._init(_VisitorMode.Merge, interpolationConfig);\r\n        this._translations = translations;\r\n        // Construct a single fake root element\r\n        const /** @type {?} */ wrapper = new Element('wrapper', [], nodes, /** @type {?} */ ((undefined)), undefined, undefined);\r\n        const /** @type {?} */ translatedNode = wrapper.visit(this, null);\r\n        if (this._inI18nBlock) {\r\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\r\n        }\r\n        return new ParseTreeResult(translatedNode.children, this._errors);\r\n    }\r\n    /**\r\n     * @param {?} icuCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(icuCase, context) {\r\n        // Parse cases for translatable html attributes\r\n        const /** @type {?} */ expression = visitAll(this, icuCase.expression, context);\r\n        if (this._mode === _VisitorMode.Merge) {\r\n            return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(icu, context) {\r\n        this._mayBeAddBlockChildren(icu);\r\n        const /** @type {?} */ wasInIcu = this._inIcu;\r\n        if (!this._inIcu) {\r\n            // nested ICU messages should not be extracted but top-level translated as a whole\r\n            if (this._isInTranslatableSection) {\r\n                this._addMessage([icu]);\r\n            }\r\n            this._inIcu = true;\r\n        }\r\n        const /** @type {?} */ cases = visitAll(this, icu.cases, context);\r\n        if (this._mode === _VisitorMode.Merge) {\r\n            icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\r\n        }\r\n        this._inIcu = wasInIcu;\r\n        return icu;\r\n    }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) {\r\n        const /** @type {?} */ isOpening = _isOpeningComment(comment);\r\n        if (isOpening && this._isInTranslatableSection) {\r\n            this._reportError(comment, 'Could not start a block inside a translatable section');\r\n            return;\r\n        }\r\n        const /** @type {?} */ isClosing = _isClosingComment(comment);\r\n        if (isClosing && !this._inI18nBlock) {\r\n            this._reportError(comment, 'Trying to close an unopened block');\r\n            return;\r\n        }\r\n        if (!this._inI18nNode && !this._inIcu) {\r\n            if (!this._inI18nBlock) {\r\n                if (isOpening) {\r\n                    // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\r\n                    if (!i18nCommentsWarned && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\r\n                        i18nCommentsWarned = true;\r\n                        const /** @type {?} */ details = comment.sourceSpan.details ? `, ${comment.sourceSpan.details}` : '';\r\n                        // TODO(ocombe): use a log service once there is a public one available\r\n                        console.warn(`I18n comments are deprecated, use an <ng-container> element instead (${comment.sourceSpan.start}${details})`);\r\n                    }\r\n                    this._inI18nBlock = true;\r\n                    this._blockStartDepth = this._depth;\r\n                    this._blockChildren = [];\r\n                    this._blockMeaningAndDesc = /** @type {?} */ ((comment.value)).replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\r\n                    this._openTranslatableSection(comment);\r\n                }\r\n            }\r\n            else {\r\n                if (isClosing) {\r\n                    if (this._depth == this._blockStartDepth) {\r\n                        this._closeTranslatableSection(comment, this._blockChildren);\r\n                        this._inI18nBlock = false;\r\n                        const /** @type {?} */ message = /** @type {?} */ ((this._addMessage(this._blockChildren, this._blockMeaningAndDesc)));\r\n                        // merge attributes in sections\r\n                        const /** @type {?} */ nodes = this._translateMessage(comment, message);\r\n                        return visitAll(this, nodes);\r\n                    }\r\n                    else {\r\n                        this._reportError(comment, 'I18N blocks should not cross element boundaries');\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) {\r\n        if (this._isInTranslatableSection) {\r\n            this._mayBeAddBlockChildren(text);\r\n        }\r\n        return text;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(el, context) {\r\n        this._mayBeAddBlockChildren(el);\r\n        this._depth++;\r\n        const /** @type {?} */ wasInI18nNode = this._inI18nNode;\r\n        const /** @type {?} */ wasInImplicitNode = this._inImplicitNode;\r\n        let /** @type {?} */ childNodes = [];\r\n        let /** @type {?} */ translatedChildNodes = /** @type {?} */ ((undefined));\r\n        // Extract:\r\n        // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\r\n        // - ICU messages\r\n        const /** @type {?} */ i18nAttr = _getI18nAttr(el);\r\n        const /** @type {?} */ i18nMeta = i18nAttr ? i18nAttr.value : '';\r\n        const /** @type {?} */ isImplicit = this._implicitTags.some(tag => el.name === tag) && !this._inIcu &&\r\n            !this._isInTranslatableSection;\r\n        const /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;\r\n        this._inImplicitNode = wasInImplicitNode || isImplicit;\r\n        if (!this._isInTranslatableSection && !this._inIcu) {\r\n            if (i18nAttr || isTopLevelImplicit) {\r\n                this._inI18nNode = true;\r\n                const /** @type {?} */ message = /** @type {?} */ ((this._addMessage(el.children, i18nMeta)));\r\n                translatedChildNodes = this._translateMessage(el, message);\r\n            }\r\n            if (this._mode == _VisitorMode.Extract) {\r\n                const /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;\r\n                if (isTranslatable)\r\n                    this._openTranslatableSection(el);\r\n                visitAll(this, el.children);\r\n                if (isTranslatable)\r\n                    this._closeTranslatableSection(el, el.children);\r\n            }\r\n        }\r\n        else {\r\n            if (i18nAttr || isTopLevelImplicit) {\r\n                this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\r\n            }\r\n            if (this._mode == _VisitorMode.Extract) {\r\n                // Descend into child nodes for extraction\r\n                visitAll(this, el.children);\r\n            }\r\n        }\r\n        if (this._mode === _VisitorMode.Merge) {\r\n            const /** @type {?} */ visitNodes = translatedChildNodes || el.children;\r\n            visitNodes.forEach(child => {\r\n                const /** @type {?} */ visited = child.visit(this, context);\r\n                if (visited && !this._isInTranslatableSection) {\r\n                    // Do not add the children from translatable sections (= i18n blocks here)\r\n                    // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\r\n                    childNodes = childNodes.concat(visited);\r\n                }\r\n            });\r\n        }\r\n        this._visitAttributesOf(el);\r\n        this._depth--;\r\n        this._inI18nNode = wasInI18nNode;\r\n        this._inImplicitNode = wasInImplicitNode;\r\n        if (this._mode === _VisitorMode.Merge) {\r\n            const /** @type {?} */ translatedAttrs = this._translateAttributes(el);\r\n            return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) {\r\n        throw new Error('unreachable code');\r\n    }\r\n    /**\r\n     * @param {?} mode\r\n     * @param {?} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    _init(mode, interpolationConfig) {\r\n        this._mode = mode;\r\n        this._inI18nBlock = false;\r\n        this._inI18nNode = false;\r\n        this._depth = 0;\r\n        this._inIcu = false;\r\n        this._msgCountAtSectionStart = undefined;\r\n        this._errors = [];\r\n        this._messages = [];\r\n        this._inImplicitNode = false;\r\n        this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    _visitAttributesOf(el) {\r\n        const /** @type {?} */ explicitAttrNameToValue = {};\r\n        const /** @type {?} */ implicitAttrNames = this._implicitAttrs[el.name] || [];\r\n        el.attrs.filter(attr => attr.name.startsWith(_I18N_ATTR_PREFIX))\r\n            .forEach(attr => explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\r\n            attr.value);\r\n        el.attrs.forEach(attr => {\r\n            if (attr.name in explicitAttrNameToValue) {\r\n                this._addMessage([attr], explicitAttrNameToValue[attr.name]);\r\n            }\r\n            else if (implicitAttrNames.some(name => attr.name === name)) {\r\n                this._addMessage([attr]);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?=} msgMeta\r\n     * @return {?}\r\n     */\r\n    _addMessage(ast, msgMeta) {\r\n        if (ast.length == 0 ||\r\n            ast.length == 1 && ast[0] instanceof Attribute$1 && !(/** @type {?} */ (ast[0])).value) {\r\n            // Do not create empty messages\r\n            return null;\r\n        }\r\n        const { meaning, description, id } = _parseMessageMeta(msgMeta);\r\n        const /** @type {?} */ message = this._createI18nMessage(ast, meaning, description, id);\r\n        this._messages.push(message);\r\n        return message;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    _translateMessage(el, message) {\r\n        if (message && this._mode === _VisitorMode.Merge) {\r\n            const /** @type {?} */ nodes = this._translations.get(message);\r\n            if (nodes) {\r\n                return nodes;\r\n            }\r\n            this._reportError(el, `Translation unavailable for message id=\"${this._translations.digest(message)}\"`);\r\n        }\r\n        return [];\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    _translateAttributes(el) {\r\n        const /** @type {?} */ attributes = el.attrs;\r\n        const /** @type {?} */ i18nParsedMessageMeta = {};\r\n        attributes.forEach(attr => {\r\n            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\r\n                i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\r\n                    _parseMessageMeta(attr.value);\r\n            }\r\n        });\r\n        const /** @type {?} */ translatedAttributes = [];\r\n        attributes.forEach((attr) => {\r\n            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\r\n                // strip i18n specific attributes\r\n                return;\r\n            }\r\n            if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\r\n                const { meaning, description, id } = i18nParsedMessageMeta[attr.name];\r\n                const /** @type {?} */ message = this._createI18nMessage([attr], meaning, description, id);\r\n                const /** @type {?} */ nodes = this._translations.get(message);\r\n                if (nodes) {\r\n                    if (nodes.length == 0) {\r\n                        translatedAttributes.push(new Attribute$1(attr.name, '', attr.sourceSpan));\r\n                    }\r\n                    else if (nodes[0] instanceof Text) {\r\n                        const /** @type {?} */ value = (/** @type {?} */ (nodes[0])).value;\r\n                        translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));\r\n                    }\r\n                    else {\r\n                        this._reportError(el, `Unexpected translation for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\r\n                    }\r\n                }\r\n                else {\r\n                    this._reportError(el, `Translation unavailable for attribute \"${attr.name}\" (id=\"${id || this._translations.digest(message)}\")`);\r\n                }\r\n            }\r\n            else {\r\n                translatedAttributes.push(attr);\r\n            }\r\n        });\r\n        return translatedAttributes;\r\n    }\r\n    /**\r\n     * Add the node as a child of the block when:\r\n     * - we are in a block,\r\n     * - we are not inside a ICU message (those are handled separately),\r\n     * - the node is a \"direct child\" of the block\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    _mayBeAddBlockChildren(node) {\r\n        if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\r\n            this._blockChildren.push(node);\r\n        }\r\n    }\r\n    /**\r\n     * Marks the start of a section, see `_closeTranslatableSection`\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    _openTranslatableSection(node) {\r\n        if (this._isInTranslatableSection) {\r\n            this._reportError(node, 'Unexpected section start');\r\n        }\r\n        else {\r\n            this._msgCountAtSectionStart = this._messages.length;\r\n        }\r\n    }\r\n    /**\r\n     * A translatable section could be:\r\n     * - the content of translatable element,\r\n     * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\r\n     * @return {?}\r\n     */\r\n    get _isInTranslatableSection() {\r\n        return this._msgCountAtSectionStart !== void 0;\r\n    }\r\n    /**\r\n     * Terminates a section.\r\n     *\r\n     * If a section has only one significant children (comments not significant) then we should not\r\n     * keep the message from this children:\r\n     *\r\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\r\n     * - one for the <p> content with meaning and description,\r\n     * - another one for the ICU message.\r\n     *\r\n     * In this case the last message is discarded as it contains less information (the AST is\r\n     * otherwise identical).\r\n     *\r\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\r\n     * ICU message here)\r\n     * @param {?} node\r\n     * @param {?} directChildren\r\n     * @return {?}\r\n     */\r\n    _closeTranslatableSection(node, directChildren) {\r\n        if (!this._isInTranslatableSection) {\r\n            this._reportError(node, 'Unexpected section end');\r\n            return;\r\n        }\r\n        const /** @type {?} */ startIndex = this._msgCountAtSectionStart;\r\n        const /** @type {?} */ significantChildren = directChildren.reduce((count, node) => count + (node instanceof Comment ? 0 : 1), 0);\r\n        if (significantChildren == 1) {\r\n            for (let /** @type {?} */ i = this._messages.length - 1; i >= /** @type {?} */ ((startIndex)); i--) {\r\n                const /** @type {?} */ ast = this._messages[i].nodes;\r\n                if (!(ast.length == 1 && ast[0] instanceof Text$1)) {\r\n                    this._messages.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this._msgCountAtSectionStart = undefined;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} msg\r\n     * @return {?}\r\n     */\r\n    _reportError(node, msg) {\r\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), msg));\r\n    }\r\n}\r\n/**\r\n * @param {?} n\r\n * @return {?}\r\n */\r\nfunction _isOpeningComment(n) {\r\n    return !!(n instanceof Comment && n.value && n.value.startsWith('i18n'));\r\n}\r\n/**\r\n * @param {?} n\r\n * @return {?}\r\n */\r\nfunction _isClosingComment(n) {\r\n    return !!(n instanceof Comment && n.value && n.value === '/i18n');\r\n}\r\n/**\r\n * @param {?} p\r\n * @return {?}\r\n */\r\nfunction _getI18nAttr(p) {\r\n    return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;\r\n}\r\n/**\r\n * @param {?=} i18n\r\n * @return {?}\r\n */\r\nfunction _parseMessageMeta(i18n) {\r\n    if (!i18n)\r\n        return { meaning: '', description: '', id: '' };\r\n    const /** @type {?} */ idIndex = i18n.indexOf(ID_SEPARATOR);\r\n    const /** @type {?} */ descIndex = i18n.indexOf(MEANING_SEPARATOR);\r\n    const [meaningAndDesc, id] = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''];\r\n    const [meaning, description] = (descIndex > -1) ?\r\n        [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\r\n        ['', meaningAndDesc];\r\n    return { meaning, description, id };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass XmlTagDefinition {\r\n    constructor() {\r\n        this.closedByParent = false;\r\n        this.contentType = TagContentType.PARSABLE_DATA;\r\n        this.isVoid = false;\r\n        this.ignoreFirstLf = false;\r\n        this.canSelfClose = true;\r\n    }\r\n    /**\r\n     * @param {?} currentParent\r\n     * @return {?}\r\n     */\r\n    requireExtraParent(currentParent) { return false; }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    isClosedByChild(name) { return false; }\r\n}\r\nconst _TAG_DEFINITION = new XmlTagDefinition();\r\n/**\r\n * @param {?} tagName\r\n * @return {?}\r\n */\r\nfunction getXmlTagDefinition(tagName) {\r\n    return _TAG_DEFINITION;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass XmlParser extends Parser$1 {\r\n    constructor() { super(getXmlTagDefinition); }\r\n    /**\r\n     * @param {?} source\r\n     * @param {?} url\r\n     * @param {?=} parseExpansionForms\r\n     * @return {?}\r\n     */\r\n    parse(source, url, parseExpansionForms = false) {\r\n        return super.parse(source, url, parseExpansionForms);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass Serializer {\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    createNameMapper(message) { return null; }\r\n}\r\n/**\r\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\r\n * back.\r\n *\r\n * It should be used for serialization format that put constraints on the placeholder names.\r\n * @record\r\n */\r\n\r\n/**\r\n * A simple mapper that take a function to transform an internal name to a public name\r\n */\r\nclass SimplePlaceholderMapper extends RecurseVisitor {\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} mapName\r\n     */\r\n    constructor(message, mapName) {\r\n        super();\r\n        this.mapName = mapName;\r\n        this.internalToPublic = {};\r\n        this.publicToNextId = {};\r\n        this.publicToInternal = {};\r\n        message.nodes.forEach(node => node.visit(this));\r\n    }\r\n    /**\r\n     * @param {?} internalName\r\n     * @return {?}\r\n     */\r\n    toPublicName(internalName) {\r\n        return this.internalToPublic.hasOwnProperty(internalName) ?\r\n            this.internalToPublic[internalName] :\r\n            null;\r\n    }\r\n    /**\r\n     * @param {?} publicName\r\n     * @return {?}\r\n     */\r\n    toInternalName(publicName) {\r\n        return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\r\n            null;\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return null; }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitTagPlaceholder(ph, context) {\r\n        this.visitPlaceholderName(ph.startName);\r\n        super.visitTagPlaceholder(ph, context);\r\n        this.visitPlaceholderName(ph.closeName);\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitPlaceholder(ph, context) { this.visitPlaceholderName(ph.name); }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcuPlaceholder(ph, context) {\r\n        this.visitPlaceholderName(ph.name);\r\n    }\r\n    /**\r\n     * @param {?} internalName\r\n     * @return {?}\r\n     */\r\n    visitPlaceholderName(internalName) {\r\n        if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\r\n            return;\r\n        }\r\n        let /** @type {?} */ publicName = this.mapName(internalName);\r\n        if (this.publicToInternal.hasOwnProperty(publicName)) {\r\n            // Create a new XMB when it has already been used\r\n            const /** @type {?} */ nextId = this.publicToNextId[publicName];\r\n            this.publicToNextId[publicName] = nextId + 1;\r\n            publicName = `${publicName}_${nextId}`;\r\n        }\r\n        else {\r\n            this.publicToNextId[publicName] = 1;\r\n        }\r\n        this.internalToPublic[internalName] = publicName;\r\n        this.publicToInternal[publicName] = internalName;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\nclass _Visitor$1 {\r\n    /**\r\n     * @param {?} tag\r\n     * @return {?}\r\n     */\r\n    visitTag(tag) {\r\n        const /** @type {?} */ strAttrs = this._serializeAttributes(tag.attrs);\r\n        if (tag.children.length == 0) {\r\n            return `<${tag.name}${strAttrs}/>`;\r\n        }\r\n        const /** @type {?} */ strChildren = tag.children.map(node => node.visit(this));\r\n        return `<${tag.name}${strAttrs}>${strChildren.join('')}</${tag.name}>`;\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    visitText(text) { return text.value; }\r\n    /**\r\n     * @param {?} decl\r\n     * @return {?}\r\n     */\r\n    visitDeclaration(decl) {\r\n        return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;\r\n    }\r\n    /**\r\n     * @param {?} attrs\r\n     * @return {?}\r\n     */\r\n    _serializeAttributes(attrs) {\r\n        const /** @type {?} */ strAttrs = Object.keys(attrs).map((name) => `${name}=\"${attrs[name]}\"`).join(' ');\r\n        return strAttrs.length > 0 ? ' ' + strAttrs : '';\r\n    }\r\n    /**\r\n     * @param {?} doctype\r\n     * @return {?}\r\n     */\r\n    visitDoctype(doctype) {\r\n        return `<!DOCTYPE ${doctype.rootTag} [\\n${doctype.dtd}\\n]>`;\r\n    }\r\n}\r\nconst _visitor = new _Visitor$1();\r\n/**\r\n * @param {?} nodes\r\n * @return {?}\r\n */\r\nfunction serialize(nodes) {\r\n    return nodes.map((node) => node.visit(_visitor)).join('');\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\nclass Declaration {\r\n    /**\r\n     * @param {?} unescapedAttrs\r\n     */\r\n    constructor(unescapedAttrs) {\r\n        this.attrs = {};\r\n        Object.keys(unescapedAttrs).forEach((k) => {\r\n            this.attrs[k] = _escapeXml(unescapedAttrs[k]);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @return {?}\r\n     */\r\n    visit(visitor) { return visitor.visitDeclaration(this); }\r\n}\r\nclass Doctype {\r\n    /**\r\n     * @param {?} rootTag\r\n     * @param {?} dtd\r\n     */\r\n    constructor(rootTag, dtd) {\r\n        this.rootTag = rootTag;\r\n        this.dtd = dtd;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @return {?}\r\n     */\r\n    visit(visitor) { return visitor.visitDoctype(this); }\r\n}\r\nclass Tag {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} unescapedAttrs\r\n     * @param {?=} children\r\n     */\r\n    constructor(name, unescapedAttrs = {}, children = []) {\r\n        this.name = name;\r\n        this.children = children;\r\n        this.attrs = {};\r\n        Object.keys(unescapedAttrs).forEach((k) => {\r\n            this.attrs[k] = _escapeXml(unescapedAttrs[k]);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @return {?}\r\n     */\r\n    visit(visitor) { return visitor.visitTag(this); }\r\n}\r\nclass Text$2 {\r\n    /**\r\n     * @param {?} unescapedValue\r\n     */\r\n    constructor(unescapedValue) { this.value = _escapeXml(unescapedValue); }\r\n    /**\r\n     * @param {?} visitor\r\n     * @return {?}\r\n     */\r\n    visit(visitor) { return visitor.visitText(this); }\r\n}\r\nclass CR extends Text$2 {\r\n    /**\r\n     * @param {?=} ws\r\n     */\r\n    constructor(ws = 0) { super(`\\n${new Array(ws + 1).join(' ')}`); }\r\n}\r\nconst _ESCAPED_CHARS = [\r\n    [/&/g, '&amp;'],\r\n    [/\"/g, '&quot;'],\r\n    [/'/g, '&apos;'],\r\n    [/</g, '&lt;'],\r\n    [/>/g, '&gt;'],\r\n];\r\n/**\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction _escapeXml(text) {\r\n    return _ESCAPED_CHARS.reduce((text, entry) => text.replace(entry[0], entry[1]), text);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _VERSION = '1.2';\r\nconst _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';\r\n// TODO(vicb): make this a param (s/_/-/)\r\nconst _DEFAULT_SOURCE_LANG = 'en';\r\nconst _PLACEHOLDER_TAG = 'x';\r\nconst _FILE_TAG = 'file';\r\nconst _SOURCE_TAG = 'source';\r\nconst _TARGET_TAG = 'target';\r\nconst _UNIT_TAG = 'trans-unit';\r\nconst _CONTEXT_GROUP_TAG = 'context-group';\r\nconst _CONTEXT_TAG = 'context';\r\nclass Xliff extends Serializer {\r\n    /**\r\n     * @param {?} messages\r\n     * @param {?} locale\r\n     * @return {?}\r\n     */\r\n    write(messages, locale) {\r\n        const /** @type {?} */ visitor = new _WriteVisitor();\r\n        const /** @type {?} */ transUnits = [];\r\n        messages.forEach(message => {\r\n            let /** @type {?} */ contextTags = [];\r\n            message.sources.forEach((source) => {\r\n                let /** @type {?} */ contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, { purpose: 'location' });\r\n                contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'sourcefile' }, [new Text$2(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'linenumber' }, [new Text$2(`${source.startLine}`)]), new CR(8));\r\n                contextTags.push(new CR(8), contextGroupTag);\r\n            });\r\n            const /** @type {?} */ transUnit = new Tag(_UNIT_TAG, { id: message.id, datatype: 'html' });\r\n            transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), ...contextTags);\r\n            if (message.description) {\r\n                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));\r\n            }\r\n            if (message.meaning) {\r\n                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));\r\n            }\r\n            transUnit.children.push(new CR(6));\r\n            transUnits.push(new CR(6), transUnit);\r\n        });\r\n        const /** @type {?} */ body = new Tag('body', {}, [...transUnits, new CR(4)]);\r\n        const /** @type {?} */ file = new Tag('file', {\r\n            'source-language': locale || _DEFAULT_SOURCE_LANG,\r\n            datatype: 'plaintext',\r\n            original: 'ng2.template',\r\n        }, [new CR(4), body, new CR(2)]);\r\n        const /** @type {?} */ xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);\r\n        return serialize([\r\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()\r\n        ]);\r\n    }\r\n    /**\r\n     * @param {?} content\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    load(content, url) {\r\n        // xliff to xml nodes\r\n        const /** @type {?} */ xliffParser = new XliffParser();\r\n        const { locale, msgIdToHtml, errors } = xliffParser.parse(content, url);\r\n        // xml nodes to i18n nodes\r\n        const /** @type {?} */ i18nNodesByMsgId = {};\r\n        const /** @type {?} */ converter = new XmlToI18n();\r\n        Object.keys(msgIdToHtml).forEach(msgId => {\r\n            const { i18nNodes, errors: e } = converter.convert(msgIdToHtml[msgId], url);\r\n            errors.push(...e);\r\n            i18nNodesByMsgId[msgId] = i18nNodes;\r\n        });\r\n        if (errors.length) {\r\n            throw new Error(`xliff parse errors:\\n${errors.join('\\n')}`);\r\n        }\r\n        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId };\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    digest(message) { return digest(message); }\r\n}\r\nclass _WriteVisitor {\r\n    /**\r\n     * @param {?} text\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return [new Text$2(text.value)]; }\r\n    /**\r\n     * @param {?} container\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitContainer(container, context) {\r\n        const /** @type {?} */ nodes = [];\r\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\r\n        return nodes;\r\n    }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcu(icu, context) {\r\n        const /** @type {?} */ nodes = [new Text$2(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\r\n        Object.keys(icu.cases).forEach((c) => {\r\n            nodes.push(new Text$2(`${c} {`), ...icu.cases[c].visit(this), new Text$2(`} `));\r\n        });\r\n        nodes.push(new Text$2(`}`));\r\n        return nodes;\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitTagPlaceholder(ph, context) {\r\n        const /** @type {?} */ ctype = getCtypeForTag(ph.tag);\r\n        if (ph.isVoid) {\r\n            // void tags have no children nor closing tags\r\n            return [new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype, 'equiv-text': `<${ph.tag}/>` })];\r\n        }\r\n        const /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype, 'equiv-text': `<${ph.tag}>` });\r\n        const /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype, 'equiv-text': `</${ph.tag}>` });\r\n        return [startTagPh, ...this.serialize(ph.children), closeTagPh];\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitPlaceholder(ph, context) {\r\n        return [new Tag(_PLACEHOLDER_TAG, { id: ph.name, 'equiv-text': `{{${ph.value}}}` })];\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcuPlaceholder(ph, context) {\r\n        const /** @type {?} */ equivText = `{${ph.value.expression}, ${ph.value.type}, ${Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ')}}`;\r\n        return [new Tag(_PLACEHOLDER_TAG, { id: ph.name, 'equiv-text': equivText })];\r\n    }\r\n    /**\r\n     * @param {?} nodes\r\n     * @return {?}\r\n     */\r\n    serialize(nodes) {\r\n        return [].concat(...nodes.map(node => node.visit(this)));\r\n    }\r\n}\r\nclass XliffParser {\r\n    constructor() {\r\n        this._locale = null;\r\n    }\r\n    /**\r\n     * @param {?} xliff\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    parse(xliff, url) {\r\n        this._unitMlString = null;\r\n        this._msgIdToHtml = {};\r\n        const /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);\r\n        this._errors = xml.errors;\r\n        visitAll(this, xml.rootNodes, null);\r\n        return {\r\n            msgIdToHtml: this._msgIdToHtml,\r\n            errors: this._errors,\r\n            locale: this._locale,\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(element, context) {\r\n        switch (element.name) {\r\n            case _UNIT_TAG:\r\n                this._unitMlString = /** @type {?} */ ((null));\r\n                const /** @type {?} */ idAttr = element.attrs.find((attr) => attr.name === 'id');\r\n                if (!idAttr) {\r\n                    this._addError(element, `<${_UNIT_TAG}> misses the \"id\" attribute`);\r\n                }\r\n                else {\r\n                    const /** @type {?} */ id = idAttr.value;\r\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\r\n                        this._addError(element, `Duplicated translations for msg ${id}`);\r\n                    }\r\n                    else {\r\n                        visitAll(this, element.children, null);\r\n                        if (typeof this._unitMlString === 'string') {\r\n                            this._msgIdToHtml[id] = this._unitMlString;\r\n                        }\r\n                        else {\r\n                            this._addError(element, `Message ${id} misses a translation`);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case _SOURCE_TAG:\r\n                // ignore source message\r\n                break;\r\n            case _TARGET_TAG:\r\n                const /** @type {?} */ innerTextStart = /** @type {?} */ ((element.startSourceSpan)).end.offset;\r\n                const /** @type {?} */ innerTextEnd = /** @type {?} */ ((element.endSourceSpan)).start.offset;\r\n                const /** @type {?} */ content = /** @type {?} */ ((element.startSourceSpan)).start.file.content;\r\n                const /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);\r\n                this._unitMlString = innerText;\r\n                break;\r\n            case _FILE_TAG:\r\n                const /** @type {?} */ localeAttr = element.attrs.find((attr) => attr.name === 'target-language');\r\n                if (localeAttr) {\r\n                    this._locale = localeAttr.value;\r\n                }\r\n                visitAll(this, element.children, null);\r\n                break;\r\n            default:\r\n                // TODO(vicb): assert file structure, xliff version\r\n                // For now only recurse on unhandled nodes\r\n                visitAll(this, element.children, null);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) { }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { }\r\n    /**\r\n     * @param {?} expansion\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(expansion, context) { }\r\n    /**\r\n     * @param {?} expansionCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(expansionCase, context) { }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    _addError(node, message) {\r\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\r\n    }\r\n}\r\nclass XmlToI18n {\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    convert(message, url) {\r\n        const /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);\r\n        this._errors = xmlIcu.errors;\r\n        const /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\r\n            [] :\r\n            visitAll(this, xmlIcu.rootNodes);\r\n        return {\r\n            i18nNodes: i18nNodes,\r\n            errors: this._errors,\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return new Text$1(text.value, /** @type {?} */ ((text.sourceSpan))); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(el, context) {\r\n        if (el.name === _PLACEHOLDER_TAG) {\r\n            const /** @type {?} */ nameAttr = el.attrs.find((attr) => attr.name === 'id');\r\n            if (nameAttr) {\r\n                return new Placeholder('', nameAttr.value, /** @type {?} */ ((el.sourceSpan)));\r\n            }\r\n            this._addError(el, `<${_PLACEHOLDER_TAG}> misses the \"id\" attribute`);\r\n        }\r\n        else {\r\n            this._addError(el, `Unexpected tag`);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(icu, context) {\r\n        const /** @type {?} */ caseMap = {};\r\n        visitAll(this, icu.cases).forEach((c) => {\r\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\r\n        });\r\n        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} icuCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(icuCase, context) {\r\n        return {\r\n            value: icuCase.value,\r\n            nodes: visitAll(this, icuCase.expression),\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) { }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    _addError(node, message) {\r\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\r\n    }\r\n}\r\n/**\r\n * @param {?} tag\r\n * @return {?}\r\n */\r\nfunction getCtypeForTag(tag) {\r\n    switch (tag.toLowerCase()) {\r\n        case 'br':\r\n            return 'lb';\r\n        case 'img':\r\n            return 'image';\r\n        default:\r\n            return `x-${tag}`;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _VERSION$1 = '2.0';\r\nconst _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:2.0';\r\n// TODO(vicb): make this a param (s/_/-/)\r\nconst _DEFAULT_SOURCE_LANG$1 = 'en';\r\nconst _PLACEHOLDER_TAG$1 = 'ph';\r\nconst _PLACEHOLDER_SPANNING_TAG = 'pc';\r\nconst _XLIFF_TAG = 'xliff';\r\nconst _SOURCE_TAG$1 = 'source';\r\nconst _TARGET_TAG$1 = 'target';\r\nconst _UNIT_TAG$1 = 'unit';\r\nclass Xliff2 extends Serializer {\r\n    /**\r\n     * @param {?} messages\r\n     * @param {?} locale\r\n     * @return {?}\r\n     */\r\n    write(messages, locale) {\r\n        const /** @type {?} */ visitor = new _WriteVisitor$1();\r\n        const /** @type {?} */ units = [];\r\n        messages.forEach(message => {\r\n            const /** @type {?} */ unit = new Tag(_UNIT_TAG$1, { id: message.id });\r\n            const /** @type {?} */ notes = new Tag('notes');\r\n            if (message.description || message.meaning) {\r\n                if (message.description) {\r\n                    notes.children.push(new CR(8), new Tag('note', { category: 'description' }, [new Text$2(message.description)]));\r\n                }\r\n                if (message.meaning) {\r\n                    notes.children.push(new CR(8), new Tag('note', { category: 'meaning' }, [new Text$2(message.meaning)]));\r\n                }\r\n            }\r\n            message.sources.forEach((source) => {\r\n                notes.children.push(new CR(8), new Tag('note', { category: 'location' }, [\r\n                    new Text$2(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)\r\n                ]));\r\n            });\r\n            notes.children.push(new CR(6));\r\n            unit.children.push(new CR(6), notes);\r\n            const /** @type {?} */ segment = new Tag('segment');\r\n            segment.children.push(new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes)), new CR(6));\r\n            unit.children.push(new CR(6), segment, new CR(4));\r\n            units.push(new CR(4), unit);\r\n        });\r\n        const /** @type {?} */ file = new Tag('file', { 'original': 'ng.template', id: 'ngi18n' }, [...units, new CR(2)]);\r\n        const /** @type {?} */ xliff = new Tag(_XLIFF_TAG, { version: _VERSION$1, xmlns: _XMLNS$1, srcLang: locale || _DEFAULT_SOURCE_LANG$1 }, [new CR(2), file, new CR()]);\r\n        return serialize([\r\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()\r\n        ]);\r\n    }\r\n    /**\r\n     * @param {?} content\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    load(content, url) {\r\n        // xliff to xml nodes\r\n        const /** @type {?} */ xliff2Parser = new Xliff2Parser();\r\n        const { locale, msgIdToHtml, errors } = xliff2Parser.parse(content, url);\r\n        // xml nodes to i18n nodes\r\n        const /** @type {?} */ i18nNodesByMsgId = {};\r\n        const /** @type {?} */ converter = new XmlToI18n$1();\r\n        Object.keys(msgIdToHtml).forEach(msgId => {\r\n            const { i18nNodes, errors: e } = converter.convert(msgIdToHtml[msgId], url);\r\n            errors.push(...e);\r\n            i18nNodesByMsgId[msgId] = i18nNodes;\r\n        });\r\n        if (errors.length) {\r\n            throw new Error(`xliff2 parse errors:\\n${errors.join('\\n')}`);\r\n        }\r\n        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId };\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    digest(message) { return decimalDigest(message); }\r\n}\r\nclass _WriteVisitor$1 {\r\n    /**\r\n     * @param {?} text\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return [new Text$2(text.value)]; }\r\n    /**\r\n     * @param {?} container\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitContainer(container, context) {\r\n        const /** @type {?} */ nodes = [];\r\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\r\n        return nodes;\r\n    }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcu(icu, context) {\r\n        const /** @type {?} */ nodes = [new Text$2(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\r\n        Object.keys(icu.cases).forEach((c) => {\r\n            nodes.push(new Text$2(`${c} {`), ...icu.cases[c].visit(this), new Text$2(`} `));\r\n        });\r\n        nodes.push(new Text$2(`}`));\r\n        return nodes;\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitTagPlaceholder(ph, context) {\r\n        const /** @type {?} */ type = getTypeForTag(ph.tag);\r\n        if (ph.isVoid) {\r\n            const /** @type {?} */ tagPh = new Tag(_PLACEHOLDER_TAG$1, {\r\n                id: (this._nextPlaceholderId++).toString(),\r\n                equiv: ph.startName,\r\n                type: type,\r\n                disp: `<${ph.tag}/>`,\r\n            });\r\n            return [tagPh];\r\n        }\r\n        const /** @type {?} */ tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {\r\n            id: (this._nextPlaceholderId++).toString(),\r\n            equivStart: ph.startName,\r\n            equivEnd: ph.closeName,\r\n            type: type,\r\n            dispStart: `<${ph.tag}>`,\r\n            dispEnd: `</${ph.tag}>`,\r\n        });\r\n        const /** @type {?} */ nodes = [].concat(...ph.children.map(node => node.visit(this)));\r\n        if (nodes.length) {\r\n            nodes.forEach((node) => tagPc.children.push(node));\r\n        }\r\n        else {\r\n            tagPc.children.push(new Text$2(''));\r\n        }\r\n        return [tagPc];\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitPlaceholder(ph, context) {\r\n        const /** @type {?} */ idStr = (this._nextPlaceholderId++).toString();\r\n        return [new Tag(_PLACEHOLDER_TAG$1, {\r\n                id: idStr,\r\n                equiv: ph.name,\r\n                disp: `{{${ph.value}}}`,\r\n            })];\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcuPlaceholder(ph, context) {\r\n        const /** @type {?} */ cases = Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ');\r\n        const /** @type {?} */ idStr = (this._nextPlaceholderId++).toString();\r\n        return [new Tag(_PLACEHOLDER_TAG$1, { id: idStr, equiv: ph.name, disp: `{${ph.value.expression}, ${ph.value.type}, ${cases}}` })];\r\n    }\r\n    /**\r\n     * @param {?} nodes\r\n     * @return {?}\r\n     */\r\n    serialize(nodes) {\r\n        this._nextPlaceholderId = 0;\r\n        return [].concat(...nodes.map(node => node.visit(this)));\r\n    }\r\n}\r\nclass Xliff2Parser {\r\n    constructor() {\r\n        this._locale = null;\r\n    }\r\n    /**\r\n     * @param {?} xliff\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    parse(xliff, url) {\r\n        this._unitMlString = null;\r\n        this._msgIdToHtml = {};\r\n        const /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);\r\n        this._errors = xml.errors;\r\n        visitAll(this, xml.rootNodes, null);\r\n        return {\r\n            msgIdToHtml: this._msgIdToHtml,\r\n            errors: this._errors,\r\n            locale: this._locale,\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(element, context) {\r\n        switch (element.name) {\r\n            case _UNIT_TAG$1:\r\n                this._unitMlString = null;\r\n                const /** @type {?} */ idAttr = element.attrs.find((attr) => attr.name === 'id');\r\n                if (!idAttr) {\r\n                    this._addError(element, `<${_UNIT_TAG$1}> misses the \"id\" attribute`);\r\n                }\r\n                else {\r\n                    const /** @type {?} */ id = idAttr.value;\r\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\r\n                        this._addError(element, `Duplicated translations for msg ${id}`);\r\n                    }\r\n                    else {\r\n                        visitAll(this, element.children, null);\r\n                        if (typeof this._unitMlString === 'string') {\r\n                            this._msgIdToHtml[id] = this._unitMlString;\r\n                        }\r\n                        else {\r\n                            this._addError(element, `Message ${id} misses a translation`);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case _SOURCE_TAG$1:\r\n                // ignore source message\r\n                break;\r\n            case _TARGET_TAG$1:\r\n                const /** @type {?} */ innerTextStart = /** @type {?} */ ((element.startSourceSpan)).end.offset;\r\n                const /** @type {?} */ innerTextEnd = /** @type {?} */ ((element.endSourceSpan)).start.offset;\r\n                const /** @type {?} */ content = /** @type {?} */ ((element.startSourceSpan)).start.file.content;\r\n                const /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);\r\n                this._unitMlString = innerText;\r\n                break;\r\n            case _XLIFF_TAG:\r\n                const /** @type {?} */ localeAttr = element.attrs.find((attr) => attr.name === 'trgLang');\r\n                if (localeAttr) {\r\n                    this._locale = localeAttr.value;\r\n                }\r\n                const /** @type {?} */ versionAttr = element.attrs.find((attr) => attr.name === 'version');\r\n                if (versionAttr) {\r\n                    const /** @type {?} */ version = versionAttr.value;\r\n                    if (version !== '2.0') {\r\n                        this._addError(element, `The XLIFF file version ${version} is not compatible with XLIFF 2.0 serializer`);\r\n                    }\r\n                    else {\r\n                        visitAll(this, element.children, null);\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                visitAll(this, element.children, null);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) { }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { }\r\n    /**\r\n     * @param {?} expansion\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(expansion, context) { }\r\n    /**\r\n     * @param {?} expansionCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(expansionCase, context) { }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    _addError(node, message) {\r\n        this._errors.push(new I18nError(node.sourceSpan, message));\r\n    }\r\n}\r\nclass XmlToI18n$1 {\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    convert(message, url) {\r\n        const /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);\r\n        this._errors = xmlIcu.errors;\r\n        const /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\r\n            [] :\r\n            [].concat(...visitAll(this, xmlIcu.rootNodes));\r\n        return {\r\n            i18nNodes,\r\n            errors: this._errors,\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return new Text$1(text.value, text.sourceSpan); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(el, context) {\r\n        switch (el.name) {\r\n            case _PLACEHOLDER_TAG$1:\r\n                const /** @type {?} */ nameAttr = el.attrs.find((attr) => attr.name === 'equiv');\r\n                if (nameAttr) {\r\n                    return [new Placeholder('', nameAttr.value, el.sourceSpan)];\r\n                }\r\n                this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equiv\" attribute`);\r\n                break;\r\n            case _PLACEHOLDER_SPANNING_TAG:\r\n                const /** @type {?} */ startAttr = el.attrs.find((attr) => attr.name === 'equivStart');\r\n                const /** @type {?} */ endAttr = el.attrs.find((attr) => attr.name === 'equivEnd');\r\n                if (!startAttr) {\r\n                    this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equivStart\" attribute`);\r\n                }\r\n                else if (!endAttr) {\r\n                    this._addError(el, `<${_PLACEHOLDER_TAG$1}> misses the \"equivEnd\" attribute`);\r\n                }\r\n                else {\r\n                    const /** @type {?} */ startId = startAttr.value;\r\n                    const /** @type {?} */ endId = endAttr.value;\r\n                    const /** @type {?} */ nodes = [];\r\n                    return nodes.concat(new Placeholder('', startId, el.sourceSpan), ...el.children.map(node => node.visit(this, null)), new Placeholder('', endId, el.sourceSpan));\r\n                }\r\n                break;\r\n            default:\r\n                this._addError(el, `Unexpected tag`);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(icu, context) {\r\n        const /** @type {?} */ caseMap = {};\r\n        visitAll(this, icu.cases).forEach((c) => {\r\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\r\n        });\r\n        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} icuCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(icuCase, context) {\r\n        return {\r\n            value: icuCase.value,\r\n            nodes: [].concat(...visitAll(this, icuCase.expression)),\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) { }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    _addError(node, message) {\r\n        this._errors.push(new I18nError(node.sourceSpan, message));\r\n    }\r\n}\r\n/**\r\n * @param {?} tag\r\n * @return {?}\r\n */\r\nfunction getTypeForTag(tag) {\r\n    switch (tag.toLowerCase()) {\r\n        case 'br':\r\n        case 'b':\r\n        case 'i':\r\n        case 'u':\r\n            return 'fmt';\r\n        case 'img':\r\n            return 'image';\r\n        case 'a':\r\n            return 'link';\r\n        default:\r\n            return 'other';\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _MESSAGES_TAG = 'messagebundle';\r\nconst _MESSAGE_TAG = 'msg';\r\nconst _PLACEHOLDER_TAG$2 = 'ph';\r\nconst _EXEMPLE_TAG = 'ex';\r\nconst _SOURCE_TAG$2 = 'source';\r\nconst _DOCTYPE = `<!ELEMENT messagebundle (msg)*>\r\n<!ATTLIST messagebundle class CDATA #IMPLIED>\r\n\r\n<!ELEMENT msg (#PCDATA|ph|source)*>\r\n<!ATTLIST msg id CDATA #IMPLIED>\r\n<!ATTLIST msg seq CDATA #IMPLIED>\r\n<!ATTLIST msg name CDATA #IMPLIED>\r\n<!ATTLIST msg desc CDATA #IMPLIED>\r\n<!ATTLIST msg meaning CDATA #IMPLIED>\r\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\r\n<!ATTLIST msg xml:space (default|preserve) \"default\">\r\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\r\n\r\n<!ELEMENT source (#PCDATA)>\r\n\r\n<!ELEMENT ph (#PCDATA|ex)*>\r\n<!ATTLIST ph name CDATA #REQUIRED>\r\n\r\n<!ELEMENT ex (#PCDATA)>`;\r\nclass Xmb extends Serializer {\r\n    /**\r\n     * @param {?} messages\r\n     * @param {?} locale\r\n     * @return {?}\r\n     */\r\n    write(messages, locale) {\r\n        const /** @type {?} */ exampleVisitor = new ExampleVisitor();\r\n        const /** @type {?} */ visitor = new _Visitor$2();\r\n        let /** @type {?} */ rootNode = new Tag(_MESSAGES_TAG);\r\n        messages.forEach(message => {\r\n            const /** @type {?} */ attrs = { id: message.id };\r\n            if (message.description) {\r\n                attrs['desc'] = message.description;\r\n            }\r\n            if (message.meaning) {\r\n                attrs['meaning'] = message.meaning;\r\n            }\r\n            let /** @type {?} */ sourceTags = [];\r\n            message.sources.forEach((source) => {\r\n                sourceTags.push(new Tag(_SOURCE_TAG$2, {}, [\r\n                    new Text$2(`${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? ',' + source.endLine : ''}`)\r\n                ]));\r\n            });\r\n            rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, [...sourceTags, ...visitor.serialize(message.nodes)]));\r\n        });\r\n        rootNode.children.push(new CR());\r\n        return serialize([\r\n            new Declaration({ version: '1.0', encoding: 'UTF-8' }),\r\n            new CR(),\r\n            new Doctype(_MESSAGES_TAG, _DOCTYPE),\r\n            new CR(),\r\n            exampleVisitor.addDefaultExamples(rootNode),\r\n            new CR(),\r\n        ]);\r\n    }\r\n    /**\r\n     * @param {?} content\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    load(content, url) {\r\n        throw new Error('Unsupported');\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    digest(message) { return digest$1(message); }\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    createNameMapper(message) {\r\n        return new SimplePlaceholderMapper(message, toPublicName);\r\n    }\r\n}\r\nclass _Visitor$2 {\r\n    /**\r\n     * @param {?} text\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return [new Text$2(text.value)]; }\r\n    /**\r\n     * @param {?} container\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitContainer(container, context) {\r\n        const /** @type {?} */ nodes = [];\r\n        container.children.forEach((node) => nodes.push(...node.visit(this)));\r\n        return nodes;\r\n    }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcu(icu, context) {\r\n        const /** @type {?} */ nodes = [new Text$2(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\r\n        Object.keys(icu.cases).forEach((c) => {\r\n            nodes.push(new Text$2(`${c} {`), ...icu.cases[c].visit(this), new Text$2(`} `));\r\n        });\r\n        nodes.push(new Text$2(`}`));\r\n        return nodes;\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitTagPlaceholder(ph, context) {\r\n        const /** @type {?} */ startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2(`<${ph.tag}>`)]);\r\n        const /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG$2, { name: ph.startName }, [startEx]);\r\n        if (ph.isVoid) {\r\n            // void tags have no children nor closing tags\r\n            return [startTagPh];\r\n        }\r\n        const /** @type {?} */ closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2(`</${ph.tag}>`)]);\r\n        const /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG$2, { name: ph.closeName }, [closeEx]);\r\n        return [startTagPh, ...this.serialize(ph.children), closeTagPh];\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitPlaceholder(ph, context) {\r\n        const /** @type {?} */ exTag = new Tag(_EXEMPLE_TAG, {}, [new Text$2(`{{${ph.value}}}`)]);\r\n        return [new Tag(_PLACEHOLDER_TAG$2, { name: ph.name }, [exTag])];\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcuPlaceholder(ph, context) {\r\n        const /** @type {?} */ exTag = new Tag(_EXEMPLE_TAG, {}, [\r\n            new Text$2(`{${ph.value.expression}, ${ph.value.type}, ${Object.keys(ph.value.cases).map((value) => value + ' {...}').join(' ')}}`)\r\n        ]);\r\n        return [new Tag(_PLACEHOLDER_TAG$2, { name: ph.name }, [exTag])];\r\n    }\r\n    /**\r\n     * @param {?} nodes\r\n     * @return {?}\r\n     */\r\n    serialize(nodes) {\r\n        return [].concat(...nodes.map(node => node.visit(this)));\r\n    }\r\n}\r\n/**\r\n * @param {?} message\r\n * @return {?}\r\n */\r\nfunction digest$1(message) {\r\n    return decimalDigest(message);\r\n}\r\nclass ExampleVisitor {\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    addDefaultExamples(node) {\r\n        node.visit(this);\r\n        return node;\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @return {?}\r\n     */\r\n    visitTag(tag) {\r\n        if (tag.name === _PLACEHOLDER_TAG$2) {\r\n            if (!tag.children || tag.children.length == 0) {\r\n                const /** @type {?} */ exText = new Text$2(tag.attrs['name'] || '...');\r\n                tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])];\r\n            }\r\n        }\r\n        else if (tag.children) {\r\n            tag.children.forEach(node => node.visit(this));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    visitText(text) { }\r\n    /**\r\n     * @param {?} decl\r\n     * @return {?}\r\n     */\r\n    visitDeclaration(decl) { }\r\n    /**\r\n     * @param {?} doctype\r\n     * @return {?}\r\n     */\r\n    visitDoctype(doctype) { }\r\n}\r\n/**\r\n * @param {?} internalName\r\n * @return {?}\r\n */\r\nfunction toPublicName(internalName) {\r\n    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _TRANSLATIONS_TAG = 'translationbundle';\r\nconst _TRANSLATION_TAG = 'translation';\r\nconst _PLACEHOLDER_TAG$3 = 'ph';\r\nclass Xtb extends Serializer {\r\n    /**\r\n     * @param {?} messages\r\n     * @param {?} locale\r\n     * @return {?}\r\n     */\r\n    write(messages, locale) { throw new Error('Unsupported'); }\r\n    /**\r\n     * @param {?} content\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    load(content, url) {\r\n        // xtb to xml nodes\r\n        const /** @type {?} */ xtbParser = new XtbParser();\r\n        const { locale, msgIdToHtml, errors } = xtbParser.parse(content, url);\r\n        // xml nodes to i18n nodes\r\n        const /** @type {?} */ i18nNodesByMsgId = {};\r\n        const /** @type {?} */ converter = new XmlToI18n$2();\r\n        // Because we should be able to load xtb files that rely on features not supported by angular,\r\n        // we need to delay the conversion of html to i18n nodes so that non angular messages are not\r\n        // converted\r\n        Object.keys(msgIdToHtml).forEach(msgId => {\r\n            const /** @type {?} */ valueFn = function () {\r\n                const { i18nNodes, errors } = converter.convert(msgIdToHtml[msgId], url);\r\n                if (errors.length) {\r\n                    throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\r\n                }\r\n                return i18nNodes;\r\n            };\r\n            createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\r\n        });\r\n        if (errors.length) {\r\n            throw new Error(`xtb parse errors:\\n${errors.join('\\n')}`);\r\n        }\r\n        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId };\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    digest(message) { return digest$1(message); }\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    createNameMapper(message) {\r\n        return new SimplePlaceholderMapper(message, toPublicName);\r\n    }\r\n}\r\n/**\r\n * @param {?} messages\r\n * @param {?} id\r\n * @param {?} valueFn\r\n * @return {?}\r\n */\r\nfunction createLazyProperty(messages, id, valueFn) {\r\n    Object.defineProperty(messages, id, {\r\n        configurable: true,\r\n        enumerable: true,\r\n        get: function () {\r\n            const /** @type {?} */ value = valueFn();\r\n            Object.defineProperty(messages, id, { enumerable: true, value });\r\n            return value;\r\n        },\r\n        set: _ => { throw new Error('Could not overwrite an XTB translation'); },\r\n    });\r\n}\r\nclass XtbParser {\r\n    constructor() {\r\n        this._locale = null;\r\n    }\r\n    /**\r\n     * @param {?} xtb\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    parse(xtb, url) {\r\n        this._bundleDepth = 0;\r\n        this._msgIdToHtml = {};\r\n        // We can not parse the ICU messages at this point as some messages might not originate\r\n        // from Angular that could not be lex'd.\r\n        const /** @type {?} */ xml = new XmlParser().parse(xtb, url, false);\r\n        this._errors = xml.errors;\r\n        visitAll(this, xml.rootNodes);\r\n        return {\r\n            msgIdToHtml: this._msgIdToHtml,\r\n            errors: this._errors,\r\n            locale: this._locale,\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(element, context) {\r\n        switch (element.name) {\r\n            case _TRANSLATIONS_TAG:\r\n                this._bundleDepth++;\r\n                if (this._bundleDepth > 1) {\r\n                    this._addError(element, `<${_TRANSLATIONS_TAG}> elements can not be nested`);\r\n                }\r\n                const /** @type {?} */ langAttr = element.attrs.find((attr) => attr.name === 'lang');\r\n                if (langAttr) {\r\n                    this._locale = langAttr.value;\r\n                }\r\n                visitAll(this, element.children, null);\r\n                this._bundleDepth--;\r\n                break;\r\n            case _TRANSLATION_TAG:\r\n                const /** @type {?} */ idAttr = element.attrs.find((attr) => attr.name === 'id');\r\n                if (!idAttr) {\r\n                    this._addError(element, `<${_TRANSLATION_TAG}> misses the \"id\" attribute`);\r\n                }\r\n                else {\r\n                    const /** @type {?} */ id = idAttr.value;\r\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\r\n                        this._addError(element, `Duplicated translations for msg ${id}`);\r\n                    }\r\n                    else {\r\n                        const /** @type {?} */ innerTextStart = /** @type {?} */ ((element.startSourceSpan)).end.offset;\r\n                        const /** @type {?} */ innerTextEnd = /** @type {?} */ ((element.endSourceSpan)).start.offset;\r\n                        const /** @type {?} */ content = /** @type {?} */ ((element.startSourceSpan)).start.file.content;\r\n                        const /** @type {?} */ innerText = content.slice(/** @type {?} */ ((innerTextStart)), /** @type {?} */ ((innerTextEnd)));\r\n                        this._msgIdToHtml[id] = innerText;\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                this._addError(element, 'Unexpected tag');\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) { }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { }\r\n    /**\r\n     * @param {?} expansion\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(expansion, context) { }\r\n    /**\r\n     * @param {?} expansionCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(expansionCase, context) { }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    _addError(node, message) {\r\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\r\n    }\r\n}\r\nclass XmlToI18n$2 {\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    convert(message, url) {\r\n        const /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);\r\n        this._errors = xmlIcu.errors;\r\n        const /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\r\n            [] :\r\n            visitAll(this, xmlIcu.rootNodes);\r\n        return {\r\n            i18nNodes,\r\n            errors: this._errors,\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return new Text$1(text.value, /** @type {?} */ ((text.sourceSpan))); }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(icu, context) {\r\n        const /** @type {?} */ caseMap = {};\r\n        visitAll(this, icu.cases).forEach(c => {\r\n            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);\r\n        });\r\n        return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} icuCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(icuCase, context) {\r\n        return {\r\n            value: icuCase.value,\r\n            nodes: visitAll(this, icuCase.expression),\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(el, context) {\r\n        if (el.name === _PLACEHOLDER_TAG$3) {\r\n            const /** @type {?} */ nameAttr = el.attrs.find((attr) => attr.name === 'name');\r\n            if (nameAttr) {\r\n                return new Placeholder('', nameAttr.value, /** @type {?} */ ((el.sourceSpan)));\r\n            }\r\n            this._addError(el, `<${_PLACEHOLDER_TAG$3}> misses the \"name\" attribute`);\r\n        }\r\n        else {\r\n            this._addError(el, `Unexpected tag`);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) { }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    _addError(node, message) {\r\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass HtmlParser extends Parser$1 {\r\n    constructor() { super(getHtmlTagDefinition); }\r\n    /**\r\n     * @param {?} source\r\n     * @param {?} url\r\n     * @param {?=} parseExpansionForms\r\n     * @param {?=} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    parse(source, url, parseExpansionForms = false, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\r\n        return super.parse(source, url, parseExpansionForms, interpolationConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A container for translated messages\r\n */\r\nclass TranslationBundle {\r\n    /**\r\n     * @param {?=} _i18nNodesByMsgId\r\n     * @param {?=} locale\r\n     * @param {?=} digest\r\n     * @param {?=} mapperFactory\r\n     * @param {?=} missingTranslationStrategy\r\n     * @param {?=} console\r\n     */\r\n    constructor(_i18nNodesByMsgId = {}, locale, digest, mapperFactory, missingTranslationStrategy = MissingTranslationStrategy.Warning, console) {\r\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\r\n        this.digest = digest;\r\n        this.mapperFactory = mapperFactory;\r\n        this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, /** @type {?} */ ((mapperFactory)), missingTranslationStrategy, console);\r\n    }\r\n    /**\r\n     * @param {?} content\r\n     * @param {?} url\r\n     * @param {?} serializer\r\n     * @param {?} missingTranslationStrategy\r\n     * @param {?=} console\r\n     * @return {?}\r\n     */\r\n    static load(content, url, serializer, missingTranslationStrategy, console) {\r\n        const { locale, i18nNodesByMsgId } = serializer.load(content, url);\r\n        const /** @type {?} */ digestFn = (m) => serializer.digest(m);\r\n        const /** @type {?} */ mapperFactory = (m) => /** @type {?} */ ((serializer.createNameMapper(m)));\r\n        return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\r\n    }\r\n    /**\r\n     * @param {?} srcMsg\r\n     * @return {?}\r\n     */\r\n    get(srcMsg) {\r\n        const /** @type {?} */ html = this._i18nToHtml.convert(srcMsg);\r\n        if (html.errors.length) {\r\n            throw new Error(html.errors.join('\\n'));\r\n        }\r\n        return html.nodes;\r\n    }\r\n    /**\r\n     * @param {?} srcMsg\r\n     * @return {?}\r\n     */\r\n    has(srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; }\r\n}\r\nclass I18nToHtmlVisitor {\r\n    /**\r\n     * @param {?=} _i18nNodesByMsgId\r\n     * @param {?=} _locale\r\n     * @param {?=} _digest\r\n     * @param {?=} _mapperFactory\r\n     * @param {?=} _missingTranslationStrategy\r\n     * @param {?=} _console\r\n     */\r\n    constructor(_i18nNodesByMsgId = {}, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {\r\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\r\n        this._locale = _locale;\r\n        this._digest = _digest;\r\n        this._mapperFactory = _mapperFactory;\r\n        this._missingTranslationStrategy = _missingTranslationStrategy;\r\n        this._console = _console;\r\n        this._contextStack = [];\r\n        this._errors = [];\r\n    }\r\n    /**\r\n     * @param {?} srcMsg\r\n     * @return {?}\r\n     */\r\n    convert(srcMsg) {\r\n        this._contextStack.length = 0;\r\n        this._errors.length = 0;\r\n        // i18n to text\r\n        const /** @type {?} */ text = this._convertToText(srcMsg);\r\n        // text to html\r\n        const /** @type {?} */ url = srcMsg.nodes[0].sourceSpan.start.file.url;\r\n        const /** @type {?} */ html = new HtmlParser().parse(text, url, true);\r\n        return {\r\n            nodes: html.rootNodes,\r\n            errors: [...this._errors, ...html.errors],\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return text.value; }\r\n    /**\r\n     * @param {?} container\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitContainer(container, context) {\r\n        return container.children.map(n => n.visit(this)).join('');\r\n    }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcu(icu, context) {\r\n        const /** @type {?} */ cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\r\n        // TODO(vicb): Once all format switch to using expression placeholders\r\n        // we should throw when the placeholder is not in the source message\r\n        const /** @type {?} */ exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\r\n            this._srcMsg.placeholders[icu.expression] :\r\n            icu.expression;\r\n        return `{${exp}, ${icu.type}, ${cases.join(' ')}}`;\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitPlaceholder(ph, context) {\r\n        const /** @type {?} */ phName = this._mapper(ph.name);\r\n        if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\r\n            return this._srcMsg.placeholders[phName];\r\n        }\r\n        if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\r\n            return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\r\n        }\r\n        this._addError(ph, `Unknown placeholder \"${ph.name}\"`);\r\n        return '';\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitTagPlaceholder(ph, context) {\r\n        const /** @type {?} */ tag = `${ph.tag}`;\r\n        const /** @type {?} */ attrs = Object.keys(ph.attrs).map(name => `${name}=\"${ph.attrs[name]}\"`).join(' ');\r\n        if (ph.isVoid) {\r\n            return `<${tag} ${attrs}/>`;\r\n        }\r\n        const /** @type {?} */ children = ph.children.map((c) => c.visit(this)).join('');\r\n        return `<${tag} ${attrs}>${children}</${tag}>`;\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitIcuPlaceholder(ph, context) {\r\n        // An ICU placeholder references the source message to be serialized\r\n        return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\r\n    }\r\n    /**\r\n     * Convert a source message to a translated text string:\r\n     * - text nodes are replaced with their translation,\r\n     * - placeholders are replaced with their content,\r\n     * - ICU nodes are converted to ICU expressions.\r\n     * @param {?} srcMsg\r\n     * @return {?}\r\n     */\r\n    _convertToText(srcMsg) {\r\n        const /** @type {?} */ id = this._digest(srcMsg);\r\n        const /** @type {?} */ mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\r\n        let /** @type {?} */ nodes;\r\n        this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });\r\n        this._srcMsg = srcMsg;\r\n        if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\r\n            // When there is a translation use its nodes as the source\r\n            // And create a mapper to convert serialized placeholder names to internal names\r\n            nodes = this._i18nNodesByMsgId[id];\r\n            this._mapper = (name) => mapper ? /** @type {?} */ ((mapper.toInternalName(name))) : name;\r\n        }\r\n        else {\r\n            // When no translation has been found\r\n            // - report an error / a warning / nothing,\r\n            // - use the nodes from the original message\r\n            // - placeholders are already internal and need no mapper\r\n            if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\r\n                const /** @type {?} */ ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\r\n                this._addError(srcMsg.nodes[0], `Missing translation for message \"${id}\"${ctx}`);\r\n            }\r\n            else if (this._console &&\r\n                this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\r\n                const /** @type {?} */ ctx = this._locale ? ` for locale \"${this._locale}\"` : '';\r\n                this._console.warn(`Missing translation for message \"${id}\"${ctx}`);\r\n            }\r\n            nodes = srcMsg.nodes;\r\n            this._mapper = (name) => name;\r\n        }\r\n        const /** @type {?} */ text = nodes.map(node => node.visit(this)).join('');\r\n        const /** @type {?} */ context = /** @type {?} */ ((this._contextStack.pop()));\r\n        this._srcMsg = context.msg;\r\n        this._mapper = context.mapper;\r\n        return text;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} msg\r\n     * @return {?}\r\n     */\r\n    _addError(el, msg) {\r\n        this._errors.push(new I18nError(el.sourceSpan, msg));\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass I18NHtmlParser {\r\n    /**\r\n     * @param {?} _htmlParser\r\n     * @param {?=} translations\r\n     * @param {?=} translationsFormat\r\n     * @param {?=} missingTranslation\r\n     * @param {?=} console\r\n     */\r\n    constructor(_htmlParser, translations, translationsFormat, missingTranslation = MissingTranslationStrategy.Warning, console) {\r\n        this._htmlParser = _htmlParser;\r\n        if (translations) {\r\n            const /** @type {?} */ serializer = createSerializer(translationsFormat);\r\n            this._translationBundle =\r\n                TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\r\n        }\r\n        else {\r\n            this._translationBundle =\r\n                new TranslationBundle({}, null, digest, undefined, missingTranslation, console);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} source\r\n     * @param {?} url\r\n     * @param {?=} parseExpansionForms\r\n     * @param {?=} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    parse(source, url, parseExpansionForms = false, interpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\r\n        const /** @type {?} */ parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);\r\n        if (parseResult.errors.length) {\r\n            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\r\n        }\r\n        return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\r\n    }\r\n}\r\n/**\r\n * @param {?=} format\r\n * @return {?}\r\n */\r\nfunction createSerializer(format) {\r\n    format = (format || 'xlf').toLowerCase();\r\n    switch (format) {\r\n        case 'xmb':\r\n            return new Xmb();\r\n        case 'xtb':\r\n            return new Xtb();\r\n        case 'xliff2':\r\n        case 'xlf2':\r\n            return new Xliff2();\r\n        case 'xliff':\r\n        case 'xlf':\r\n        default:\r\n            return new Xliff();\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\r\nconst GENERATED_FILE = /\\.ngfactory\\.|\\.ngsummary\\./;\r\nconst JIT_SUMMARY_FILE = /\\.ngsummary\\./;\r\nconst JIT_SUMMARY_NAME = /NgSummary$/;\r\n/**\r\n * @param {?} filePath\r\n * @param {?=} forceSourceFile\r\n * @return {?}\r\n */\r\nfunction ngfactoryFilePath(filePath, forceSourceFile = false) {\r\n    const /** @type {?} */ urlWithSuffix = splitTypescriptSuffix(filePath, forceSourceFile);\r\n    return `${urlWithSuffix[0]}.ngfactory${normalizeGenFileSuffix(urlWithSuffix[1])}`;\r\n}\r\n/**\r\n * @param {?} filePath\r\n * @return {?}\r\n */\r\nfunction stripGeneratedFileSuffix(filePath) {\r\n    return filePath.replace(GENERATED_FILE, '.');\r\n}\r\n/**\r\n * @param {?} filePath\r\n * @return {?}\r\n */\r\nfunction isGeneratedFile(filePath) {\r\n    return GENERATED_FILE.test(filePath);\r\n}\r\n/**\r\n * @param {?} path\r\n * @param {?=} forceSourceFile\r\n * @return {?}\r\n */\r\nfunction splitTypescriptSuffix(path, forceSourceFile = false) {\r\n    if (path.endsWith('.d.ts')) {\r\n        return [path.slice(0, -5), forceSourceFile ? '.ts' : '.d.ts'];\r\n    }\r\n    const /** @type {?} */ lastDot = path.lastIndexOf('.');\r\n    if (lastDot !== -1) {\r\n        return [path.substring(0, lastDot), path.substring(lastDot)];\r\n    }\r\n    return [path, ''];\r\n}\r\n/**\r\n * @param {?} srcFileSuffix\r\n * @return {?}\r\n */\r\nfunction normalizeGenFileSuffix(srcFileSuffix) {\r\n    return srcFileSuffix === '.tsx' ? '.ts' : srcFileSuffix;\r\n}\r\n/**\r\n * @param {?} fileName\r\n * @return {?}\r\n */\r\nfunction summaryFileName(fileName) {\r\n    const /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\r\n    return `${fileNameWithoutSuffix}.ngsummary.json`;\r\n}\r\n/**\r\n * @param {?} fileName\r\n * @param {?=} forceSourceFile\r\n * @return {?}\r\n */\r\nfunction summaryForJitFileName(fileName, forceSourceFile = false) {\r\n    const /** @type {?} */ urlWithSuffix = splitTypescriptSuffix(stripGeneratedFileSuffix(fileName), forceSourceFile);\r\n    return `${urlWithSuffix[0]}.ngsummary${urlWithSuffix[1]}`;\r\n}\r\n/**\r\n * @param {?} filePath\r\n * @return {?}\r\n */\r\nfunction stripSummaryForJitFileSuffix(filePath) {\r\n    return filePath.replace(JIT_SUMMARY_FILE, '.');\r\n}\r\n/**\r\n * @param {?} symbolName\r\n * @return {?}\r\n */\r\nfunction summaryForJitName(symbolName) {\r\n    return `${symbolName}NgSummary`;\r\n}\r\n/**\r\n * @param {?} symbolName\r\n * @return {?}\r\n */\r\nfunction stripSummaryForJitNameSuffix(symbolName) {\r\n    return symbolName.replace(JIT_SUMMARY_NAME, '');\r\n}\r\nconst LOWERED_SYMBOL = /\\u0275\\d+/;\r\n/**\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction isLoweredSymbol(name) {\r\n    return LOWERED_SYMBOL.test(name);\r\n}\r\n/**\r\n * @param {?} id\r\n * @return {?}\r\n */\r\nfunction createLoweredSymbol(id) {\r\n    return `\\u0275${id}`;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst CORE = '@angular/core';\r\nclass Identifiers {\r\n}\r\nIdentifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {\r\n    name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.ElementRef = { name: 'ElementRef', moduleName: CORE };\r\nIdentifiers.NgModuleRef = { name: 'NgModuleRef', moduleName: CORE };\r\nIdentifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleName: CORE };\r\nIdentifiers.ChangeDetectorRef = {\r\n    name: 'ChangeDetectorRef',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.QueryList = { name: 'QueryList', moduleName: CORE };\r\nIdentifiers.TemplateRef = { name: 'TemplateRef', moduleName: CORE };\r\nIdentifiers.CodegenComponentFactoryResolver = {\r\n    name: 'ɵCodegenComponentFactoryResolver',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.ComponentFactoryResolver = {\r\n    name: 'ComponentFactoryResolver',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.ComponentFactory = { name: 'ComponentFactory', moduleName: CORE };\r\nIdentifiers.ComponentRef = { name: 'ComponentRef', moduleName: CORE };\r\nIdentifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleName: CORE };\r\nIdentifiers.createModuleFactory = {\r\n    name: 'ɵcmf',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.moduleDef = {\r\n    name: 'ɵmod',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.moduleProviderDef = {\r\n    name: 'ɵmpd',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.RegisterModuleFactoryFn = {\r\n    name: 'ɵregisterModuleFactory',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.Injector = { name: 'Injector', moduleName: CORE };\r\nIdentifiers.ViewEncapsulation = {\r\n    name: 'ViewEncapsulation',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.ChangeDetectionStrategy = {\r\n    name: 'ChangeDetectionStrategy',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.SecurityContext = {\r\n    name: 'SecurityContext',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleName: CORE };\r\nIdentifiers.TRANSLATIONS_FORMAT = {\r\n    name: 'TRANSLATIONS_FORMAT',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.inlineInterpolate = {\r\n    name: 'ɵinlineInterpolate',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.interpolate = { name: 'ɵinterpolate', moduleName: CORE };\r\nIdentifiers.EMPTY_ARRAY = { name: 'ɵEMPTY_ARRAY', moduleName: CORE };\r\nIdentifiers.EMPTY_MAP = { name: 'ɵEMPTY_MAP', moduleName: CORE };\r\nIdentifiers.Renderer = { name: 'Renderer', moduleName: CORE };\r\nIdentifiers.viewDef = { name: 'ɵvid', moduleName: CORE };\r\nIdentifiers.elementDef = { name: 'ɵeld', moduleName: CORE };\r\nIdentifiers.anchorDef = { name: 'ɵand', moduleName: CORE };\r\nIdentifiers.textDef = { name: 'ɵted', moduleName: CORE };\r\nIdentifiers.directiveDef = { name: 'ɵdid', moduleName: CORE };\r\nIdentifiers.providerDef = { name: 'ɵprd', moduleName: CORE };\r\nIdentifiers.queryDef = { name: 'ɵqud', moduleName: CORE };\r\nIdentifiers.pureArrayDef = { name: 'ɵpad', moduleName: CORE };\r\nIdentifiers.pureObjectDef = { name: 'ɵpod', moduleName: CORE };\r\nIdentifiers.purePipeDef = { name: 'ɵppd', moduleName: CORE };\r\nIdentifiers.pipeDef = { name: 'ɵpid', moduleName: CORE };\r\nIdentifiers.nodeValue = { name: 'ɵnov', moduleName: CORE };\r\nIdentifiers.ngContentDef = { name: 'ɵncd', moduleName: CORE };\r\nIdentifiers.unwrapValue = { name: 'ɵunv', moduleName: CORE };\r\nIdentifiers.createRendererType2 = { name: 'ɵcrt', moduleName: CORE };\r\n// type only\r\nIdentifiers.RendererType2 = {\r\n    name: 'RendererType2',\r\n    moduleName: CORE,\r\n};\r\n// type only\r\nIdentifiers.ViewDefinition = {\r\n    name: 'ɵViewDefinition',\r\n    moduleName: CORE,\r\n};\r\nIdentifiers.createComponentFactory = { name: 'ɵccf', moduleName: CORE };\r\n/**\r\n * @param {?} reference\r\n * @return {?}\r\n */\r\nfunction createTokenForReference(reference) {\r\n    return { identifier: { reference: reference } };\r\n}\r\n/**\r\n * @param {?} reflector\r\n * @param {?} reference\r\n * @return {?}\r\n */\r\nfunction createTokenForExternalReference(reflector, reference) {\r\n    return createTokenForReference(reflector.resolveExternalReference(reference));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst LifecycleHooks = {\r\n    OnInit: 0,\r\n    OnDestroy: 1,\r\n    DoCheck: 2,\r\n    OnChanges: 3,\r\n    AfterContentInit: 4,\r\n    AfterContentChecked: 5,\r\n    AfterViewInit: 6,\r\n    AfterViewChecked: 7,\r\n};\r\nLifecycleHooks[LifecycleHooks.OnInit] = \"OnInit\";\r\nLifecycleHooks[LifecycleHooks.OnDestroy] = \"OnDestroy\";\r\nLifecycleHooks[LifecycleHooks.DoCheck] = \"DoCheck\";\r\nLifecycleHooks[LifecycleHooks.OnChanges] = \"OnChanges\";\r\nLifecycleHooks[LifecycleHooks.AfterContentInit] = \"AfterContentInit\";\r\nLifecycleHooks[LifecycleHooks.AfterContentChecked] = \"AfterContentChecked\";\r\nLifecycleHooks[LifecycleHooks.AfterViewInit] = \"AfterViewInit\";\r\nLifecycleHooks[LifecycleHooks.AfterViewChecked] = \"AfterViewChecked\";\r\nconst LIFECYCLE_HOOKS_VALUES = [\r\n    LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,\r\n    LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,\r\n    LifecycleHooks.AfterViewChecked\r\n];\r\n/**\r\n * @param {?} reflector\r\n * @param {?} hook\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction hasLifecycleHook(reflector, hook, token) {\r\n    return reflector.hasLifecycleHook(token, getHookName(hook));\r\n}\r\n/**\r\n * @param {?} reflector\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction getAllLifecycleHooks(reflector, token) {\r\n    return LIFECYCLE_HOOKS_VALUES.filter(hook => hasLifecycleHook(reflector, hook, token));\r\n}\r\n/**\r\n * @param {?} hook\r\n * @return {?}\r\n */\r\nfunction getHookName(hook) {\r\n    switch (hook) {\r\n        case LifecycleHooks.OnInit:\r\n            return 'ngOnInit';\r\n        case LifecycleHooks.OnDestroy:\r\n            return 'ngOnDestroy';\r\n        case LifecycleHooks.DoCheck:\r\n            return 'ngDoCheck';\r\n        case LifecycleHooks.OnChanges:\r\n            return 'ngOnChanges';\r\n        case LifecycleHooks.AfterContentInit:\r\n            return 'ngAfterContentInit';\r\n        case LifecycleHooks.AfterContentChecked:\r\n            return 'ngAfterContentChecked';\r\n        case LifecycleHooks.AfterViewInit:\r\n            return 'ngAfterViewInit';\r\n        case LifecycleHooks.AfterViewChecked:\r\n            return 'ngAfterViewChecked';\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _SELECTOR_REGEXP = new RegExp('(\\\\:not\\\\()|' + //\":not(\"\r\n    '([-\\\\w]+)|' + // \"tag\"\r\n    '(?:\\\\.([-\\\\w]+))|' + // \".class\"\r\n    '(?:\\\\[([-.\\\\w*]+)(?:=([\\\"\\']?)([^\\\\]\\\"\\']*)\\\\5)?\\\\])|' + // \"[name]\", \"[name=value]\",\r\n    '(\\\\))|' + // \")\"\r\n    '(\\\\s*,\\\\s*)', // \",\"\r\n'g');\r\n/**\r\n * A css selector contains an element name,\r\n * css classes and attribute/value pairs with the purpose\r\n * of selecting subsets out of them.\r\n */\r\nclass CssSelector {\r\n    constructor() {\r\n        this.element = null;\r\n        this.classNames = [];\r\n        this.attrs = [];\r\n        this.notSelectors = [];\r\n    }\r\n    /**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    static parse(selector) {\r\n        const /** @type {?} */ results = [];\r\n        const /** @type {?} */ _addResult = (res, cssSel) => {\r\n            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&\r\n                cssSel.attrs.length == 0) {\r\n                cssSel.element = '*';\r\n            }\r\n            res.push(cssSel);\r\n        };\r\n        let /** @type {?} */ cssSelector = new CssSelector();\r\n        let /** @type {?} */ match;\r\n        let /** @type {?} */ current = cssSelector;\r\n        let /** @type {?} */ inNot = false;\r\n        _SELECTOR_REGEXP.lastIndex = 0;\r\n        while (match = _SELECTOR_REGEXP.exec(selector)) {\r\n            if (match[1]) {\r\n                if (inNot) {\r\n                    throw new Error('Nesting :not is not allowed in a selector');\r\n                }\r\n                inNot = true;\r\n                current = new CssSelector();\r\n                cssSelector.notSelectors.push(current);\r\n            }\r\n            if (match[2]) {\r\n                current.setElement(match[2]);\r\n            }\r\n            if (match[3]) {\r\n                current.addClassName(match[3]);\r\n            }\r\n            if (match[4]) {\r\n                current.addAttribute(match[4], match[6]);\r\n            }\r\n            if (match[7]) {\r\n                inNot = false;\r\n                current = cssSelector;\r\n            }\r\n            if (match[8]) {\r\n                if (inNot) {\r\n                    throw new Error('Multiple selectors in :not are not supported');\r\n                }\r\n                _addResult(results, cssSelector);\r\n                cssSelector = current = new CssSelector();\r\n            }\r\n        }\r\n        _addResult(results, cssSelector);\r\n        return results;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isElementSelector() {\r\n        return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&\r\n            this.notSelectors.length === 0;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasElementSelector() { return !!this.element; }\r\n    /**\r\n     * @param {?=} element\r\n     * @return {?}\r\n     */\r\n    setElement(element = null) { this.element = element; }\r\n    /**\r\n     * Gets a template string for an element that matches the selector.\r\n     * @return {?}\r\n     */\r\n    getMatchingElementTemplate() {\r\n        const /** @type {?} */ tagName = this.element || 'div';\r\n        const /** @type {?} */ classAttr = this.classNames.length > 0 ? ` class=\"${this.classNames.join(' ')}\"` : '';\r\n        let /** @type {?} */ attrs = '';\r\n        for (let /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {\r\n            const /** @type {?} */ attrName = this.attrs[i];\r\n            const /** @type {?} */ attrValue = this.attrs[i + 1] !== '' ? `=\"${this.attrs[i + 1]}\"` : '';\r\n            attrs += ` ${attrName}${attrValue}`;\r\n        }\r\n        return getHtmlTagDefinition(tagName).isVoid ? `<${tagName}${classAttr}${attrs}/>` :\r\n            `<${tagName}${classAttr}${attrs}></${tagName}>`;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    addAttribute(name, value = '') {\r\n        this.attrs.push(name, value && value.toLowerCase() || '');\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    addClassName(name) { this.classNames.push(name.toLowerCase()); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        let /** @type {?} */ res = this.element || '';\r\n        if (this.classNames) {\r\n            this.classNames.forEach(klass => res += `.${klass}`);\r\n        }\r\n        if (this.attrs) {\r\n            for (let /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {\r\n                const /** @type {?} */ name = this.attrs[i];\r\n                const /** @type {?} */ value = this.attrs[i + 1];\r\n                res += `[${name}${value ? '=' + value : ''}]`;\r\n            }\r\n        }\r\n        this.notSelectors.forEach(notSelector => res += `:not(${notSelector})`);\r\n        return res;\r\n    }\r\n}\r\n/**\r\n * Reads a list of CssSelectors and allows to calculate which ones\r\n * are contained in a given CssSelector.\r\n */\r\nclass SelectorMatcher {\r\n    constructor() {\r\n        this._elementMap = new Map();\r\n        this._elementPartialMap = new Map();\r\n        this._classMap = new Map();\r\n        this._classPartialMap = new Map();\r\n        this._attrValueMap = new Map();\r\n        this._attrValuePartialMap = new Map();\r\n        this._listContexts = [];\r\n    }\r\n    /**\r\n     * @param {?} notSelectors\r\n     * @return {?}\r\n     */\r\n    static createNotMatcher(notSelectors) {\r\n        const /** @type {?} */ notMatcher = new SelectorMatcher();\r\n        notMatcher.addSelectables(notSelectors, null);\r\n        return notMatcher;\r\n    }\r\n    /**\r\n     * @param {?} cssSelectors\r\n     * @param {?=} callbackCtxt\r\n     * @return {?}\r\n     */\r\n    addSelectables(cssSelectors, callbackCtxt) {\r\n        let /** @type {?} */ listContext = /** @type {?} */ ((null));\r\n        if (cssSelectors.length > 1) {\r\n            listContext = new SelectorListContext(cssSelectors);\r\n            this._listContexts.push(listContext);\r\n        }\r\n        for (let /** @type {?} */ i = 0; i < cssSelectors.length; i++) {\r\n            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\r\n        }\r\n    }\r\n    /**\r\n     * Add an object that can be found later on by calling `match`.\r\n     * @param {?} cssSelector A css selector\r\n     * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function\r\n     * @param {?} listContext\r\n     * @return {?}\r\n     */\r\n    _addSelectable(cssSelector, callbackCtxt, listContext) {\r\n        let /** @type {?} */ matcher = this;\r\n        const /** @type {?} */ element = cssSelector.element;\r\n        const /** @type {?} */ classNames = cssSelector.classNames;\r\n        const /** @type {?} */ attrs = cssSelector.attrs;\r\n        const /** @type {?} */ selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\r\n        if (element) {\r\n            const /** @type {?} */ isTerminal = attrs.length === 0 && classNames.length === 0;\r\n            if (isTerminal) {\r\n                this._addTerminal(matcher._elementMap, element, selectable);\r\n            }\r\n            else {\r\n                matcher = this._addPartial(matcher._elementPartialMap, element);\r\n            }\r\n        }\r\n        if (classNames) {\r\n            for (let /** @type {?} */ i = 0; i < classNames.length; i++) {\r\n                const /** @type {?} */ isTerminal = attrs.length === 0 && i === classNames.length - 1;\r\n                const /** @type {?} */ className = classNames[i];\r\n                if (isTerminal) {\r\n                    this._addTerminal(matcher._classMap, className, selectable);\r\n                }\r\n                else {\r\n                    matcher = this._addPartial(matcher._classPartialMap, className);\r\n                }\r\n            }\r\n        }\r\n        if (attrs) {\r\n            for (let /** @type {?} */ i = 0; i < attrs.length; i += 2) {\r\n                const /** @type {?} */ isTerminal = i === attrs.length - 2;\r\n                const /** @type {?} */ name = attrs[i];\r\n                const /** @type {?} */ value = attrs[i + 1];\r\n                if (isTerminal) {\r\n                    const /** @type {?} */ terminalMap = matcher._attrValueMap;\r\n                    let /** @type {?} */ terminalValuesMap = terminalMap.get(name);\r\n                    if (!terminalValuesMap) {\r\n                        terminalValuesMap = new Map();\r\n                        terminalMap.set(name, terminalValuesMap);\r\n                    }\r\n                    this._addTerminal(terminalValuesMap, value, selectable);\r\n                }\r\n                else {\r\n                    const /** @type {?} */ partialMap = matcher._attrValuePartialMap;\r\n                    let /** @type {?} */ partialValuesMap = partialMap.get(name);\r\n                    if (!partialValuesMap) {\r\n                        partialValuesMap = new Map();\r\n                        partialMap.set(name, partialValuesMap);\r\n                    }\r\n                    matcher = this._addPartial(partialValuesMap, value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} map\r\n     * @param {?} name\r\n     * @param {?} selectable\r\n     * @return {?}\r\n     */\r\n    _addTerminal(map, name, selectable) {\r\n        let /** @type {?} */ terminalList = map.get(name);\r\n        if (!terminalList) {\r\n            terminalList = [];\r\n            map.set(name, terminalList);\r\n        }\r\n        terminalList.push(selectable);\r\n    }\r\n    /**\r\n     * @param {?} map\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    _addPartial(map, name) {\r\n        let /** @type {?} */ matcher = map.get(name);\r\n        if (!matcher) {\r\n            matcher = new SelectorMatcher();\r\n            map.set(name, matcher);\r\n        }\r\n        return matcher;\r\n    }\r\n    /**\r\n     * Find the objects that have been added via `addSelectable`\r\n     * whose css selector is contained in the given css selector.\r\n     * @param {?} cssSelector A css selector\r\n     * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`\r\n     * @return {?} boolean true if a match was found\r\n     */\r\n    match(cssSelector, matchedCallback) {\r\n        let /** @type {?} */ result = false;\r\n        const /** @type {?} */ element = /** @type {?} */ ((cssSelector.element));\r\n        const /** @type {?} */ classNames = cssSelector.classNames;\r\n        const /** @type {?} */ attrs = cssSelector.attrs;\r\n        for (let /** @type {?} */ i = 0; i < this._listContexts.length; i++) {\r\n            this._listContexts[i].alreadyMatched = false;\r\n        }\r\n        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\r\n        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||\r\n            result;\r\n        if (classNames) {\r\n            for (let /** @type {?} */ i = 0; i < classNames.length; i++) {\r\n                const /** @type {?} */ className = classNames[i];\r\n                result =\r\n                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\r\n                result =\r\n                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||\r\n                        result;\r\n            }\r\n        }\r\n        if (attrs) {\r\n            for (let /** @type {?} */ i = 0; i < attrs.length; i += 2) {\r\n                const /** @type {?} */ name = attrs[i];\r\n                const /** @type {?} */ value = attrs[i + 1];\r\n                const /** @type {?} */ terminalValuesMap = /** @type {?} */ ((this._attrValueMap.get(name)));\r\n                if (value) {\r\n                    result =\r\n                        this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\r\n                }\r\n                result =\r\n                    this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\r\n                const /** @type {?} */ partialValuesMap = /** @type {?} */ ((this._attrValuePartialMap.get(name)));\r\n                if (value) {\r\n                    result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\r\n                }\r\n                result =\r\n                    this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} map\r\n     * @param {?} name\r\n     * @param {?} cssSelector\r\n     * @param {?} matchedCallback\r\n     * @return {?}\r\n     */\r\n    _matchTerminal(map, name, cssSelector, matchedCallback) {\r\n        if (!map || typeof name !== 'string') {\r\n            return false;\r\n        }\r\n        let /** @type {?} */ selectables = map.get(name) || [];\r\n        const /** @type {?} */ starSelectables = /** @type {?} */ ((map.get('*')));\r\n        if (starSelectables) {\r\n            selectables = selectables.concat(starSelectables);\r\n        }\r\n        if (selectables.length === 0) {\r\n            return false;\r\n        }\r\n        let /** @type {?} */ selectable;\r\n        let /** @type {?} */ result = false;\r\n        for (let /** @type {?} */ i = 0; i < selectables.length; i++) {\r\n            selectable = selectables[i];\r\n            result = selectable.finalize(cssSelector, matchedCallback) || result;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} map\r\n     * @param {?} name\r\n     * @param {?} cssSelector\r\n     * @param {?} matchedCallback\r\n     * @return {?}\r\n     */\r\n    _matchPartial(map, name, cssSelector, matchedCallback) {\r\n        if (!map || typeof name !== 'string') {\r\n            return false;\r\n        }\r\n        const /** @type {?} */ nestedSelector = map.get(name);\r\n        if (!nestedSelector) {\r\n            return false;\r\n        }\r\n        // TODO(perf): get rid of recursion and measure again\r\n        // TODO(perf): don't pass the whole selector into the recursion,\r\n        // but only the not processed parts\r\n        return nestedSelector.match(cssSelector, matchedCallback);\r\n    }\r\n}\r\nclass SelectorListContext {\r\n    /**\r\n     * @param {?} selectors\r\n     */\r\n    constructor(selectors) {\r\n        this.selectors = selectors;\r\n        this.alreadyMatched = false;\r\n    }\r\n}\r\nclass SelectorContext {\r\n    /**\r\n     * @param {?} selector\r\n     * @param {?} cbContext\r\n     * @param {?} listContext\r\n     */\r\n    constructor(selector, cbContext, listContext) {\r\n        this.selector = selector;\r\n        this.cbContext = cbContext;\r\n        this.listContext = listContext;\r\n        this.notSelectors = selector.notSelectors;\r\n    }\r\n    /**\r\n     * @param {?} cssSelector\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    finalize(cssSelector, callback) {\r\n        let /** @type {?} */ result = true;\r\n        if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\r\n            const /** @type {?} */ notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\r\n            result = !notMatcher.match(cssSelector, null);\r\n        }\r\n        if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\r\n            if (this.listContext) {\r\n                this.listContext.alreadyMatched = true;\r\n            }\r\n            callback(this.selector, this.cbContext);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst ERROR_COMPONENT_TYPE = 'ngComponentType';\r\nclass CompileMetadataResolver {\r\n    /**\r\n     * @param {?} _config\r\n     * @param {?} _htmlParser\r\n     * @param {?} _ngModuleResolver\r\n     * @param {?} _directiveResolver\r\n     * @param {?} _pipeResolver\r\n     * @param {?} _summaryResolver\r\n     * @param {?} _schemaRegistry\r\n     * @param {?} _directiveNormalizer\r\n     * @param {?} _console\r\n     * @param {?} _staticSymbolCache\r\n     * @param {?} _reflector\r\n     * @param {?=} _errorCollector\r\n     */\r\n    constructor(_config, _htmlParser, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {\r\n        this._config = _config;\r\n        this._htmlParser = _htmlParser;\r\n        this._ngModuleResolver = _ngModuleResolver;\r\n        this._directiveResolver = _directiveResolver;\r\n        this._pipeResolver = _pipeResolver;\r\n        this._summaryResolver = _summaryResolver;\r\n        this._schemaRegistry = _schemaRegistry;\r\n        this._directiveNormalizer = _directiveNormalizer;\r\n        this._console = _console;\r\n        this._staticSymbolCache = _staticSymbolCache;\r\n        this._reflector = _reflector;\r\n        this._errorCollector = _errorCollector;\r\n        this._nonNormalizedDirectiveCache = new Map();\r\n        this._directiveCache = new Map();\r\n        this._summaryCache = new Map();\r\n        this._pipeCache = new Map();\r\n        this._ngModuleCache = new Map();\r\n        this._ngModuleOfTypes = new Map();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getReflector() { return this._reflector; }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    clearCacheFor(type) {\r\n        const /** @type {?} */ dirMeta = this._directiveCache.get(type);\r\n        this._directiveCache.delete(type);\r\n        this._nonNormalizedDirectiveCache.delete(type);\r\n        this._summaryCache.delete(type);\r\n        this._pipeCache.delete(type);\r\n        this._ngModuleOfTypes.delete(type);\r\n        // Clear all of the NgModule as they contain transitive information!\r\n        this._ngModuleCache.clear();\r\n        if (dirMeta) {\r\n            this._directiveNormalizer.clearCacheFor(dirMeta);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearCache() {\r\n        this._directiveCache.clear();\r\n        this._nonNormalizedDirectiveCache.clear();\r\n        this._summaryCache.clear();\r\n        this._pipeCache.clear();\r\n        this._ngModuleCache.clear();\r\n        this._ngModuleOfTypes.clear();\r\n        this._directiveNormalizer.clearCache();\r\n    }\r\n    /**\r\n     * @param {?} baseType\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    _createProxyClass(baseType, name) {\r\n        let /** @type {?} */ delegate = null;\r\n        const /** @type {?} */ proxyClass = /** @type {?} */ (function () {\r\n            if (!delegate) {\r\n                throw new Error(`Illegal state: Class ${name} for type ${stringify(baseType)} is not compiled yet!`);\r\n            }\r\n            return delegate.apply(this, arguments);\r\n        });\r\n        proxyClass.setDelegate = (d) => {\r\n            delegate = d;\r\n            (/** @type {?} */ (proxyClass)).prototype = d.prototype;\r\n        };\r\n        // Make stringify work correctly\r\n        (/** @type {?} */ (proxyClass)).overriddenName = name;\r\n        return proxyClass;\r\n    }\r\n    /**\r\n     * @param {?} dirType\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getGeneratedClass(dirType, name) {\r\n        if (dirType instanceof StaticSymbol) {\r\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);\r\n        }\r\n        else {\r\n            return this._createProxyClass(dirType, name);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} dirType\r\n     * @return {?}\r\n     */\r\n    getComponentViewClass(dirType) {\r\n        return this.getGeneratedClass(dirType, viewClassName(dirType, 0));\r\n    }\r\n    /**\r\n     * @param {?} dirType\r\n     * @return {?}\r\n     */\r\n    getHostComponentViewClass(dirType) {\r\n        return this.getGeneratedClass(dirType, hostViewClassName(dirType));\r\n    }\r\n    /**\r\n     * @param {?} dirType\r\n     * @return {?}\r\n     */\r\n    getHostComponentType(dirType) {\r\n        const /** @type {?} */ name = `${identifierName({ reference: dirType })}_Host`;\r\n        if (dirType instanceof StaticSymbol) {\r\n            return this._staticSymbolCache.get(dirType.filePath, name);\r\n        }\r\n        else {\r\n            const /** @type {?} */ HostClass = /** @type {?} */ (function HostClass() { });\r\n            HostClass.overriddenName = name;\r\n            return HostClass;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} dirType\r\n     * @return {?}\r\n     */\r\n    getRendererType(dirType) {\r\n        if (dirType instanceof StaticSymbol) {\r\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));\r\n        }\r\n        else {\r\n            // returning an object as proxy,\r\n            // that we fill later during runtime compilation.\r\n            return /** @type {?} */ ({});\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} selector\r\n     * @param {?} dirType\r\n     * @param {?} inputs\r\n     * @param {?} outputs\r\n     * @return {?}\r\n     */\r\n    getComponentFactory(selector, dirType, inputs, outputs) {\r\n        if (dirType instanceof StaticSymbol) {\r\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));\r\n        }\r\n        else {\r\n            const /** @type {?} */ hostView = this.getHostComponentViewClass(dirType);\r\n            // Note: ngContentSelectors will be filled later once the template is\r\n            // loaded.\r\n            const /** @type {?} */ createComponentFactory = this._reflector.resolveExternalReference(Identifiers.createComponentFactory);\r\n            return createComponentFactory(selector, dirType, /** @type {?} */ (hostView), inputs, outputs, []);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} factory\r\n     * @param {?} ngContentSelectors\r\n     * @return {?}\r\n     */\r\n    initComponentFactory(factory, ngContentSelectors) {\r\n        if (!(factory instanceof StaticSymbol)) {\r\n            (/** @type {?} */ (factory)).ngContentSelectors.push(...ngContentSelectors);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} kind\r\n     * @return {?}\r\n     */\r\n    _loadSummary(type, kind) {\r\n        let /** @type {?} */ typeSummary = this._summaryCache.get(type);\r\n        if (!typeSummary) {\r\n            const /** @type {?} */ summary = this._summaryResolver.resolveSummary(type);\r\n            typeSummary = summary ? summary.type : null;\r\n            this._summaryCache.set(type, typeSummary || null);\r\n        }\r\n        return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;\r\n    }\r\n    /**\r\n     * @param {?} compMeta\r\n     * @param {?=} hostViewType\r\n     * @return {?}\r\n     */\r\n    getHostComponentMetadata(compMeta, hostViewType) {\r\n        const /** @type {?} */ hostType = this.getHostComponentType(compMeta.type.reference);\r\n        if (!hostViewType) {\r\n            hostViewType = this.getHostComponentViewClass(hostType);\r\n        }\r\n        // Note: ! is ok here as this method should only be called with normalized directive\r\n        // metadata, which always fills in the selector.\r\n        const /** @type {?} */ template = CssSelector.parse(/** @type {?} */ ((compMeta.selector)))[0].getMatchingElementTemplate();\r\n        const /** @type {?} */ templateUrl = '';\r\n        const /** @type {?} */ htmlAst = this._htmlParser.parse(template, templateUrl);\r\n        return CompileDirectiveMetadata.create({\r\n            isHost: true,\r\n            type: { reference: hostType, diDeps: [], lifecycleHooks: [] },\r\n            template: new CompileTemplateMetadata({\r\n                encapsulation: ViewEncapsulation.None,\r\n                template,\r\n                templateUrl,\r\n                htmlAst,\r\n                styles: [],\r\n                styleUrls: [],\r\n                ngContentSelectors: [],\r\n                animations: [],\r\n                isInline: true,\r\n                externalStylesheets: [],\r\n                interpolation: null,\r\n                preserveWhitespaces: false,\r\n            }),\r\n            exportAs: null,\r\n            changeDetection: ChangeDetectionStrategy.Default,\r\n            inputs: [],\r\n            outputs: [],\r\n            host: {},\r\n            isComponent: true,\r\n            selector: '*',\r\n            providers: [],\r\n            viewProviders: [],\r\n            queries: [],\r\n            viewQueries: [],\r\n            componentViewType: hostViewType,\r\n            rendererType: /** @type {?} */ ({ id: '__Host__', encapsulation: ViewEncapsulation.None, styles: [], data: {} }),\r\n            entryComponents: [],\r\n            componentFactory: null\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ngModuleType\r\n     * @param {?} directiveType\r\n     * @param {?} isSync\r\n     * @return {?}\r\n     */\r\n    loadDirectiveMetadata(ngModuleType, directiveType, isSync) {\r\n        if (this._directiveCache.has(directiveType)) {\r\n            return null;\r\n        }\r\n        directiveType = resolveForwardRef(directiveType);\r\n        const { annotation, metadata } = /** @type {?} */ ((this.getNonNormalizedDirectiveMetadata(directiveType)));\r\n        const /** @type {?} */ createDirectiveMetadata = (templateMetadata) => {\r\n            const /** @type {?} */ normalizedDirMeta = new CompileDirectiveMetadata({\r\n                isHost: false,\r\n                type: metadata.type,\r\n                isComponent: metadata.isComponent,\r\n                selector: metadata.selector,\r\n                exportAs: metadata.exportAs,\r\n                changeDetection: metadata.changeDetection,\r\n                inputs: metadata.inputs,\r\n                outputs: metadata.outputs,\r\n                hostListeners: metadata.hostListeners,\r\n                hostProperties: metadata.hostProperties,\r\n                hostAttributes: metadata.hostAttributes,\r\n                providers: metadata.providers,\r\n                viewProviders: metadata.viewProviders,\r\n                queries: metadata.queries,\r\n                viewQueries: metadata.viewQueries,\r\n                entryComponents: metadata.entryComponents,\r\n                componentViewType: metadata.componentViewType,\r\n                rendererType: metadata.rendererType,\r\n                componentFactory: metadata.componentFactory,\r\n                template: templateMetadata\r\n            });\r\n            if (templateMetadata) {\r\n                this.initComponentFactory(/** @type {?} */ ((metadata.componentFactory)), templateMetadata.ngContentSelectors);\r\n            }\r\n            this._directiveCache.set(directiveType, normalizedDirMeta);\r\n            this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());\r\n            return null;\r\n        };\r\n        if (metadata.isComponent) {\r\n            const /** @type {?} */ template = /** @type {?} */ ((metadata.template));\r\n            const /** @type {?} */ templateMeta = this._directiveNormalizer.normalizeTemplate({\r\n                ngModuleType,\r\n                componentType: directiveType,\r\n                moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),\r\n                encapsulation: template.encapsulation,\r\n                template: template.template,\r\n                templateUrl: template.templateUrl,\r\n                styles: template.styles,\r\n                styleUrls: template.styleUrls,\r\n                animations: template.animations,\r\n                interpolation: template.interpolation,\r\n                preserveWhitespaces: template.preserveWhitespaces\r\n            });\r\n            if (isPromise(templateMeta) && isSync) {\r\n                this._reportError(componentStillLoadingError(directiveType), directiveType);\r\n                return null;\r\n            }\r\n            return SyncAsync.then(templateMeta, createDirectiveMetadata);\r\n        }\r\n        else {\r\n            // directive\r\n            createDirectiveMetadata(null);\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} directiveType\r\n     * @return {?}\r\n     */\r\n    getNonNormalizedDirectiveMetadata(directiveType) {\r\n        directiveType = resolveForwardRef(directiveType);\r\n        if (!directiveType) {\r\n            return null;\r\n        }\r\n        let /** @type {?} */ cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);\r\n        if (cacheEntry) {\r\n            return cacheEntry;\r\n        }\r\n        const /** @type {?} */ dirMeta = this._directiveResolver.resolve(directiveType, false);\r\n        if (!dirMeta) {\r\n            return null;\r\n        }\r\n        let /** @type {?} */ nonNormalizedTemplateMetadata = /** @type {?} */ ((undefined));\r\n        if (createComponent.isTypeOf(dirMeta)) {\r\n            // component\r\n            const /** @type {?} */ compMeta = /** @type {?} */ (dirMeta);\r\n            assertArrayOfStrings('styles', compMeta.styles);\r\n            assertArrayOfStrings('styleUrls', compMeta.styleUrls);\r\n            assertInterpolationSymbols('interpolation', compMeta.interpolation);\r\n            const /** @type {?} */ animations = compMeta.animations;\r\n            nonNormalizedTemplateMetadata = new CompileTemplateMetadata({\r\n                encapsulation: noUndefined(compMeta.encapsulation),\r\n                template: noUndefined(compMeta.template),\r\n                templateUrl: noUndefined(compMeta.templateUrl),\r\n                htmlAst: null,\r\n                styles: compMeta.styles || [],\r\n                styleUrls: compMeta.styleUrls || [],\r\n                animations: animations || [],\r\n                interpolation: noUndefined(compMeta.interpolation),\r\n                isInline: !!compMeta.template,\r\n                externalStylesheets: [],\r\n                ngContentSelectors: [],\r\n                preserveWhitespaces: noUndefined(dirMeta.preserveWhitespaces),\r\n            });\r\n        }\r\n        let /** @type {?} */ changeDetectionStrategy = /** @type {?} */ ((null));\r\n        let /** @type {?} */ viewProviders = [];\r\n        let /** @type {?} */ entryComponentMetadata = [];\r\n        let /** @type {?} */ selector = dirMeta.selector;\r\n        if (createComponent.isTypeOf(dirMeta)) {\r\n            // Component\r\n            const /** @type {?} */ compMeta = /** @type {?} */ (dirMeta);\r\n            changeDetectionStrategy = /** @type {?} */ ((compMeta.changeDetection));\r\n            if (compMeta.viewProviders) {\r\n                viewProviders = this._getProvidersMetadata(compMeta.viewProviders, entryComponentMetadata, `viewProviders for \"${stringifyType(directiveType)}\"`, [], directiveType);\r\n            }\r\n            if (compMeta.entryComponents) {\r\n                entryComponentMetadata = flattenAndDedupeArray(compMeta.entryComponents)\r\n                    .map((type) => /** @type {?} */ ((this._getEntryComponentMetadata(type))))\r\n                    .concat(entryComponentMetadata);\r\n            }\r\n            if (!selector) {\r\n                selector = this._schemaRegistry.getDefaultComponentElementName();\r\n            }\r\n        }\r\n        else {\r\n            // Directive\r\n            if (!selector) {\r\n                this._reportError(syntaxError(`Directive ${stringifyType(directiveType)} has no selector, please add it!`), directiveType);\r\n                selector = 'error';\r\n            }\r\n        }\r\n        let /** @type {?} */ providers = [];\r\n        if (dirMeta.providers != null) {\r\n            providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, `providers for \"${stringifyType(directiveType)}\"`, [], directiveType);\r\n        }\r\n        let /** @type {?} */ queries = [];\r\n        let /** @type {?} */ viewQueries = [];\r\n        if (dirMeta.queries != null) {\r\n            queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);\r\n            viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);\r\n        }\r\n        const /** @type {?} */ metadata = CompileDirectiveMetadata.create({\r\n            isHost: false,\r\n            selector: selector,\r\n            exportAs: noUndefined(dirMeta.exportAs),\r\n            isComponent: !!nonNormalizedTemplateMetadata,\r\n            type: this._getTypeMetadata(directiveType),\r\n            template: nonNormalizedTemplateMetadata,\r\n            changeDetection: changeDetectionStrategy,\r\n            inputs: dirMeta.inputs || [],\r\n            outputs: dirMeta.outputs || [],\r\n            host: dirMeta.host || {},\r\n            providers: providers || [],\r\n            viewProviders: viewProviders || [],\r\n            queries: queries || [],\r\n            viewQueries: viewQueries || [],\r\n            entryComponents: entryComponentMetadata,\r\n            componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :\r\n                null,\r\n            rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,\r\n            componentFactory: null\r\n        });\r\n        if (nonNormalizedTemplateMetadata) {\r\n            metadata.componentFactory =\r\n                this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);\r\n        }\r\n        cacheEntry = { metadata, annotation: dirMeta };\r\n        this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);\r\n        return cacheEntry;\r\n    }\r\n    /**\r\n     * Gets the metadata for the given directive.\r\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\r\n     * @param {?} directiveType\r\n     * @return {?}\r\n     */\r\n    getDirectiveMetadata(directiveType) {\r\n        const /** @type {?} */ dirMeta = /** @type {?} */ ((this._directiveCache.get(directiveType)));\r\n        if (!dirMeta) {\r\n            this._reportError(syntaxError(`Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive ${stringifyType(directiveType)}.`), directiveType);\r\n        }\r\n        return dirMeta;\r\n    }\r\n    /**\r\n     * @param {?} dirType\r\n     * @return {?}\r\n     */\r\n    getDirectiveSummary(dirType) {\r\n        const /** @type {?} */ dirSummary = /** @type {?} */ (this._loadSummary(dirType, CompileSummaryKind.Directive));\r\n        if (!dirSummary) {\r\n            this._reportError(syntaxError(`Illegal state: Could not load the summary for directive ${stringifyType(dirType)}.`), dirType);\r\n        }\r\n        return dirSummary;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    isDirective(type) {\r\n        return !!this._loadSummary(type, CompileSummaryKind.Directive) ||\r\n            this._directiveResolver.isDirective(type);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    isPipe(type) {\r\n        return !!this._loadSummary(type, CompileSummaryKind.Pipe) ||\r\n            this._pipeResolver.isPipe(type);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    isNgModule(type) {\r\n        return !!this._loadSummary(type, CompileSummaryKind.NgModule) ||\r\n            this._ngModuleResolver.isNgModule(type);\r\n    }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @param {?=} alreadyCollecting\r\n     * @return {?}\r\n     */\r\n    getNgModuleSummary(moduleType, alreadyCollecting = null) {\r\n        let /** @type {?} */ moduleSummary = /** @type {?} */ (this._loadSummary(moduleType, CompileSummaryKind.NgModule));\r\n        if (!moduleSummary) {\r\n            const /** @type {?} */ moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);\r\n            moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;\r\n            if (moduleSummary) {\r\n                this._summaryCache.set(moduleType, moduleSummary);\r\n            }\r\n        }\r\n        return moduleSummary;\r\n    }\r\n    /**\r\n     * Loads the declared directives and pipes of an NgModule.\r\n     * @param {?} moduleType\r\n     * @param {?} isSync\r\n     * @param {?=} throwIfNotFound\r\n     * @return {?}\r\n     */\r\n    loadNgModuleDirectiveAndPipeMetadata(moduleType, isSync, throwIfNotFound = true) {\r\n        const /** @type {?} */ ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);\r\n        const /** @type {?} */ loading = [];\r\n        if (ngModule) {\r\n            ngModule.declaredDirectives.forEach((id) => {\r\n                const /** @type {?} */ promise = this.loadDirectiveMetadata(moduleType, id.reference, isSync);\r\n                if (promise) {\r\n                    loading.push(promise);\r\n                }\r\n            });\r\n            ngModule.declaredPipes.forEach((id) => this._loadPipeMetadata(id.reference));\r\n        }\r\n        return Promise.all(loading);\r\n    }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @param {?=} throwIfNotFound\r\n     * @param {?=} alreadyCollecting\r\n     * @return {?}\r\n     */\r\n    getNgModuleMetadata(moduleType, throwIfNotFound = true, alreadyCollecting = null) {\r\n        moduleType = resolveForwardRef(moduleType);\r\n        let /** @type {?} */ compileMeta = this._ngModuleCache.get(moduleType);\r\n        if (compileMeta) {\r\n            return compileMeta;\r\n        }\r\n        const /** @type {?} */ meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\r\n        if (!meta) {\r\n            return null;\r\n        }\r\n        const /** @type {?} */ declaredDirectives = [];\r\n        const /** @type {?} */ exportedNonModuleIdentifiers = [];\r\n        const /** @type {?} */ declaredPipes = [];\r\n        const /** @type {?} */ importedModules = [];\r\n        const /** @type {?} */ exportedModules = [];\r\n        const /** @type {?} */ providers = [];\r\n        const /** @type {?} */ entryComponents = [];\r\n        const /** @type {?} */ bootstrapComponents = [];\r\n        const /** @type {?} */ schemas = [];\r\n        if (meta.imports) {\r\n            flattenAndDedupeArray(meta.imports).forEach((importedType) => {\r\n                let /** @type {?} */ importedModuleType = /** @type {?} */ ((undefined));\r\n                if (isValidType(importedType)) {\r\n                    importedModuleType = importedType;\r\n                }\r\n                else if (importedType && importedType.ngModule) {\r\n                    const /** @type {?} */ moduleWithProviders = importedType;\r\n                    importedModuleType = moduleWithProviders.ngModule;\r\n                    if (moduleWithProviders.providers) {\r\n                        providers.push(...this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, `provider for the NgModule '${stringifyType(importedModuleType)}'`, [], importedType));\r\n                    }\r\n                }\r\n                if (importedModuleType) {\r\n                    if (this._checkSelfImport(moduleType, importedModuleType))\r\n                        return;\r\n                    if (!alreadyCollecting)\r\n                        alreadyCollecting = new Set();\r\n                    if (alreadyCollecting.has(importedModuleType)) {\r\n                        this._reportError(syntaxError(`${this._getTypeDescriptor(importedModuleType)} '${stringifyType(importedType)}' is imported recursively by the module '${stringifyType(moduleType)}'.`), moduleType);\r\n                        return;\r\n                    }\r\n                    alreadyCollecting.add(importedModuleType);\r\n                    const /** @type {?} */ importedModuleSummary = this.getNgModuleSummary(importedModuleType, alreadyCollecting);\r\n                    alreadyCollecting.delete(importedModuleType);\r\n                    if (!importedModuleSummary) {\r\n                        this._reportError(syntaxError(`Unexpected ${this._getTypeDescriptor(importedType)} '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'. Please add a @NgModule annotation.`), moduleType);\r\n                        return;\r\n                    }\r\n                    importedModules.push(importedModuleSummary);\r\n                }\r\n                else {\r\n                    this._reportError(syntaxError(`Unexpected value '${stringifyType(importedType)}' imported by the module '${stringifyType(moduleType)}'`), moduleType);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        if (meta.exports) {\r\n            flattenAndDedupeArray(meta.exports).forEach((exportedType) => {\r\n                if (!isValidType(exportedType)) {\r\n                    this._reportError(syntaxError(`Unexpected value '${stringifyType(exportedType)}' exported by the module '${stringifyType(moduleType)}'`), moduleType);\r\n                    return;\r\n                }\r\n                if (!alreadyCollecting)\r\n                    alreadyCollecting = new Set();\r\n                if (alreadyCollecting.has(exportedType)) {\r\n                    this._reportError(syntaxError(`${this._getTypeDescriptor(exportedType)} '${stringify(exportedType)}' is exported recursively by the module '${stringifyType(moduleType)}'`), moduleType);\r\n                    return;\r\n                }\r\n                alreadyCollecting.add(exportedType);\r\n                const /** @type {?} */ exportedModuleSummary = this.getNgModuleSummary(exportedType, alreadyCollecting);\r\n                alreadyCollecting.delete(exportedType);\r\n                if (exportedModuleSummary) {\r\n                    exportedModules.push(exportedModuleSummary);\r\n                }\r\n                else {\r\n                    exportedNonModuleIdentifiers.push(this._getIdentifierMetadata(exportedType));\r\n                }\r\n            });\r\n        }\r\n        // Note: This will be modified later, so we rely on\r\n        // getting a new instance every time!\r\n        const /** @type {?} */ transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\r\n        if (meta.declarations) {\r\n            flattenAndDedupeArray(meta.declarations).forEach((declaredType) => {\r\n                if (!isValidType(declaredType)) {\r\n                    this._reportError(syntaxError(`Unexpected value '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'`), moduleType);\r\n                    return;\r\n                }\r\n                const /** @type {?} */ declaredIdentifier = this._getIdentifierMetadata(declaredType);\r\n                if (this.isDirective(declaredType)) {\r\n                    transitiveModule.addDirective(declaredIdentifier);\r\n                    declaredDirectives.push(declaredIdentifier);\r\n                    this._addTypeToModule(declaredType, moduleType);\r\n                }\r\n                else if (this.isPipe(declaredType)) {\r\n                    transitiveModule.addPipe(declaredIdentifier);\r\n                    transitiveModule.pipes.push(declaredIdentifier);\r\n                    declaredPipes.push(declaredIdentifier);\r\n                    this._addTypeToModule(declaredType, moduleType);\r\n                }\r\n                else {\r\n                    this._reportError(syntaxError(`Unexpected ${this._getTypeDescriptor(declaredType)} '${stringifyType(declaredType)}' declared by the module '${stringifyType(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`), moduleType);\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n        const /** @type {?} */ exportedDirectives = [];\r\n        const /** @type {?} */ exportedPipes = [];\r\n        exportedNonModuleIdentifiers.forEach((exportedId) => {\r\n            if (transitiveModule.directivesSet.has(exportedId.reference)) {\r\n                exportedDirectives.push(exportedId);\r\n                transitiveModule.addExportedDirective(exportedId);\r\n            }\r\n            else if (transitiveModule.pipesSet.has(exportedId.reference)) {\r\n                exportedPipes.push(exportedId);\r\n                transitiveModule.addExportedPipe(exportedId);\r\n            }\r\n            else {\r\n                this._reportError(syntaxError(`Can't export ${this._getTypeDescriptor(exportedId.reference)} ${stringifyType(exportedId.reference)} from ${stringifyType(moduleType)} as it was neither declared nor imported!`), moduleType);\r\n                return;\r\n            }\r\n        });\r\n        // The providers of the module have to go last\r\n        // so that they overwrite any other provider we already added.\r\n        if (meta.providers) {\r\n            providers.push(...this._getProvidersMetadata(meta.providers, entryComponents, `provider for the NgModule '${stringifyType(moduleType)}'`, [], moduleType));\r\n        }\r\n        if (meta.entryComponents) {\r\n            entryComponents.push(...flattenAndDedupeArray(meta.entryComponents)\r\n                .map(type => /** @type {?} */ ((this._getEntryComponentMetadata(type)))));\r\n        }\r\n        if (meta.bootstrap) {\r\n            flattenAndDedupeArray(meta.bootstrap).forEach(type => {\r\n                if (!isValidType(type)) {\r\n                    this._reportError(syntaxError(`Unexpected value '${stringifyType(type)}' used in the bootstrap property of module '${stringifyType(moduleType)}'`), moduleType);\r\n                    return;\r\n                }\r\n                bootstrapComponents.push(this._getIdentifierMetadata(type));\r\n            });\r\n        }\r\n        entryComponents.push(...bootstrapComponents.map(type => /** @type {?} */ ((this._getEntryComponentMetadata(type.reference)))));\r\n        if (meta.schemas) {\r\n            schemas.push(...flattenAndDedupeArray(meta.schemas));\r\n        }\r\n        compileMeta = new CompileNgModuleMetadata({\r\n            type: this._getTypeMetadata(moduleType),\r\n            providers,\r\n            entryComponents,\r\n            bootstrapComponents,\r\n            schemas,\r\n            declaredDirectives,\r\n            exportedDirectives,\r\n            declaredPipes,\r\n            exportedPipes,\r\n            importedModules,\r\n            exportedModules,\r\n            transitiveModule,\r\n            id: meta.id || null,\r\n        });\r\n        entryComponents.forEach((id) => transitiveModule.addEntryComponent(id));\r\n        providers.forEach((provider) => transitiveModule.addProvider(provider, /** @type {?} */ ((compileMeta)).type));\r\n        transitiveModule.addModule(compileMeta.type);\r\n        this._ngModuleCache.set(moduleType, compileMeta);\r\n        return compileMeta;\r\n    }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @param {?} importedModuleType\r\n     * @return {?}\r\n     */\r\n    _checkSelfImport(moduleType, importedModuleType) {\r\n        if (moduleType === importedModuleType) {\r\n            this._reportError(syntaxError(`'${stringifyType(moduleType)}' module can't import itself`), moduleType);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    _getTypeDescriptor(type) {\r\n        if (isValidType(type)) {\r\n            if (this.isDirective(type)) {\r\n                return 'directive';\r\n            }\r\n            if (this.isPipe(type)) {\r\n                return 'pipe';\r\n            }\r\n            if (this.isNgModule(type)) {\r\n                return 'module';\r\n            }\r\n        }\r\n        if ((/** @type {?} */ (type)).provide) {\r\n            return 'provider';\r\n        }\r\n        return 'value';\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    _addTypeToModule(type, moduleType) {\r\n        const /** @type {?} */ oldModule = this._ngModuleOfTypes.get(type);\r\n        if (oldModule && oldModule !== moduleType) {\r\n            this._reportError(syntaxError(`Type ${stringifyType(type)} is part of the declarations of 2 modules: ${stringifyType(oldModule)} and ${stringifyType(moduleType)}! ` +\r\n                `Please consider moving ${stringifyType(type)} to a higher module that imports ${stringifyType(oldModule)} and ${stringifyType(moduleType)}. ` +\r\n                `You can also create a new NgModule that exports and includes ${stringifyType(type)} then import that NgModule in ${stringifyType(oldModule)} and ${stringifyType(moduleType)}.`), moduleType);\r\n            return;\r\n        }\r\n        this._ngModuleOfTypes.set(type, moduleType);\r\n    }\r\n    /**\r\n     * @param {?} importedModules\r\n     * @param {?} exportedModules\r\n     * @return {?}\r\n     */\r\n    _getTransitiveNgModuleMetadata(importedModules, exportedModules) {\r\n        // collect `providers` / `entryComponents` from all imported and all exported modules\r\n        const /** @type {?} */ result = new TransitiveCompileNgModuleMetadata();\r\n        const /** @type {?} */ modulesByToken = new Map();\r\n        importedModules.concat(exportedModules).forEach((modSummary) => {\r\n            modSummary.modules.forEach((mod) => result.addModule(mod));\r\n            modSummary.entryComponents.forEach((comp) => result.addEntryComponent(comp));\r\n            const /** @type {?} */ addedTokens = new Set();\r\n            modSummary.providers.forEach((entry) => {\r\n                const /** @type {?} */ tokenRef = tokenReference(entry.provider.token);\r\n                let /** @type {?} */ prevModules = modulesByToken.get(tokenRef);\r\n                if (!prevModules) {\r\n                    prevModules = new Set();\r\n                    modulesByToken.set(tokenRef, prevModules);\r\n                }\r\n                const /** @type {?} */ moduleRef = entry.module.reference;\r\n                // Note: the providers of one module may still contain multiple providers\r\n                // per token (e.g. for multi providers), and we need to preserve these.\r\n                if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {\r\n                    prevModules.add(moduleRef);\r\n                    addedTokens.add(tokenRef);\r\n                    result.addProvider(entry.provider, entry.module);\r\n                }\r\n            });\r\n        });\r\n        exportedModules.forEach((modSummary) => {\r\n            modSummary.exportedDirectives.forEach((id) => result.addExportedDirective(id));\r\n            modSummary.exportedPipes.forEach((id) => result.addExportedPipe(id));\r\n        });\r\n        importedModules.forEach((modSummary) => {\r\n            modSummary.exportedDirectives.forEach((id) => result.addDirective(id));\r\n            modSummary.exportedPipes.forEach((id) => result.addPipe(id));\r\n        });\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    _getIdentifierMetadata(type) {\r\n        type = resolveForwardRef(type);\r\n        return { reference: type };\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    isInjectable(type) {\r\n        const /** @type {?} */ annotations = this._reflector.annotations(type);\r\n        return annotations.some(ann => createInjectable.isTypeOf(ann));\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    getInjectableSummary(type) {\r\n        return {\r\n            summaryKind: CompileSummaryKind.Injectable,\r\n            type: this._getTypeMetadata(type, null, false)\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?=} dependencies\r\n     * @return {?}\r\n     */\r\n    _getInjectableMetadata(type, dependencies = null) {\r\n        const /** @type {?} */ typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);\r\n        if (typeSummary) {\r\n            return typeSummary.type;\r\n        }\r\n        return this._getTypeMetadata(type, dependencies);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?=} dependencies\r\n     * @param {?=} throwOnUnknownDeps\r\n     * @return {?}\r\n     */\r\n    _getTypeMetadata(type, dependencies = null, throwOnUnknownDeps = true) {\r\n        const /** @type {?} */ identifier = this._getIdentifierMetadata(type);\r\n        return {\r\n            reference: identifier.reference,\r\n            diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),\r\n            lifecycleHooks: getAllLifecycleHooks(this._reflector, identifier.reference),\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} factory\r\n     * @param {?=} dependencies\r\n     * @return {?}\r\n     */\r\n    _getFactoryMetadata(factory, dependencies = null) {\r\n        factory = resolveForwardRef(factory);\r\n        return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };\r\n    }\r\n    /**\r\n     * Gets the metadata for the given pipe.\r\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\r\n     * @param {?} pipeType\r\n     * @return {?}\r\n     */\r\n    getPipeMetadata(pipeType) {\r\n        const /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);\r\n        if (!pipeMeta) {\r\n            this._reportError(syntaxError(`Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe ${stringifyType(pipeType)}.`), pipeType);\r\n        }\r\n        return pipeMeta || null;\r\n    }\r\n    /**\r\n     * @param {?} pipeType\r\n     * @return {?}\r\n     */\r\n    getPipeSummary(pipeType) {\r\n        const /** @type {?} */ pipeSummary = /** @type {?} */ (this._loadSummary(pipeType, CompileSummaryKind.Pipe));\r\n        if (!pipeSummary) {\r\n            this._reportError(syntaxError(`Illegal state: Could not load the summary for pipe ${stringifyType(pipeType)}.`), pipeType);\r\n        }\r\n        return pipeSummary;\r\n    }\r\n    /**\r\n     * @param {?} pipeType\r\n     * @return {?}\r\n     */\r\n    getOrLoadPipeMetadata(pipeType) {\r\n        let /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);\r\n        if (!pipeMeta) {\r\n            pipeMeta = this._loadPipeMetadata(pipeType);\r\n        }\r\n        return pipeMeta;\r\n    }\r\n    /**\r\n     * @param {?} pipeType\r\n     * @return {?}\r\n     */\r\n    _loadPipeMetadata(pipeType) {\r\n        pipeType = resolveForwardRef(pipeType);\r\n        const /** @type {?} */ pipeAnnotation = /** @type {?} */ ((this._pipeResolver.resolve(pipeType)));\r\n        const /** @type {?} */ pipeMeta = new CompilePipeMetadata({\r\n            type: this._getTypeMetadata(pipeType),\r\n            name: pipeAnnotation.name,\r\n            pure: !!pipeAnnotation.pure\r\n        });\r\n        this._pipeCache.set(pipeType, pipeMeta);\r\n        this._summaryCache.set(pipeType, pipeMeta.toSummary());\r\n        return pipeMeta;\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @param {?} dependencies\r\n     * @param {?=} throwOnUnknownDeps\r\n     * @return {?}\r\n     */\r\n    _getDependenciesMetadata(typeOrFunc, dependencies, throwOnUnknownDeps = true) {\r\n        let /** @type {?} */ hasUnknownDeps = false;\r\n        const /** @type {?} */ params = dependencies || this._reflector.parameters(typeOrFunc) || [];\r\n        const /** @type {?} */ dependenciesMetadata = params.map((param) => {\r\n            let /** @type {?} */ isAttribute = false;\r\n            let /** @type {?} */ isHost = false;\r\n            let /** @type {?} */ isSelf = false;\r\n            let /** @type {?} */ isSkipSelf = false;\r\n            let /** @type {?} */ isOptional = false;\r\n            let /** @type {?} */ token = null;\r\n            if (Array.isArray(param)) {\r\n                param.forEach((paramEntry) => {\r\n                    if (createHost.isTypeOf(paramEntry)) {\r\n                        isHost = true;\r\n                    }\r\n                    else if (createSelf.isTypeOf(paramEntry)) {\r\n                        isSelf = true;\r\n                    }\r\n                    else if (createSkipSelf.isTypeOf(paramEntry)) {\r\n                        isSkipSelf = true;\r\n                    }\r\n                    else if (createOptional.isTypeOf(paramEntry)) {\r\n                        isOptional = true;\r\n                    }\r\n                    else if (createAttribute.isTypeOf(paramEntry)) {\r\n                        isAttribute = true;\r\n                        token = paramEntry.attributeName;\r\n                    }\r\n                    else if (createInject.isTypeOf(paramEntry)) {\r\n                        token = paramEntry.token;\r\n                    }\r\n                    else if (createInjectionToken.isTypeOf(paramEntry) || paramEntry instanceof StaticSymbol) {\r\n                        token = paramEntry;\r\n                    }\r\n                    else if (isValidType(paramEntry) && token == null) {\r\n                        token = paramEntry;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                token = param;\r\n            }\r\n            if (token == null) {\r\n                hasUnknownDeps = true;\r\n                return /** @type {?} */ ((null));\r\n            }\r\n            return {\r\n                isAttribute,\r\n                isHost,\r\n                isSelf,\r\n                isSkipSelf,\r\n                isOptional,\r\n                token: this._getTokenMetadata(token)\r\n            };\r\n        });\r\n        if (hasUnknownDeps) {\r\n            const /** @type {?} */ depsTokens = dependenciesMetadata.map((dep) => dep ? stringifyType(dep.token) : '?').join(', ');\r\n            const /** @type {?} */ message = `Can't resolve all parameters for ${stringifyType(typeOrFunc)}: (${depsTokens}).`;\r\n            if (throwOnUnknownDeps || this._config.strictInjectionParameters) {\r\n                this._reportError(syntaxError(message), typeOrFunc);\r\n            }\r\n            else {\r\n                this._console.warn(`Warning: ${message} This will become an error in Angular v6.x`);\r\n            }\r\n        }\r\n        return dependenciesMetadata;\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    _getTokenMetadata(token) {\r\n        token = resolveForwardRef(token);\r\n        let /** @type {?} */ compileToken;\r\n        if (typeof token === 'string') {\r\n            compileToken = { value: token };\r\n        }\r\n        else {\r\n            compileToken = { identifier: { reference: token } };\r\n        }\r\n        return compileToken;\r\n    }\r\n    /**\r\n     * @param {?} providers\r\n     * @param {?} targetEntryComponents\r\n     * @param {?=} debugInfo\r\n     * @param {?=} compileProviders\r\n     * @param {?=} type\r\n     * @return {?}\r\n     */\r\n    _getProvidersMetadata(providers, targetEntryComponents, debugInfo, compileProviders = [], type) {\r\n        providers.forEach((provider, providerIdx) => {\r\n            if (Array.isArray(provider)) {\r\n                this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);\r\n            }\r\n            else {\r\n                provider = resolveForwardRef(provider);\r\n                let /** @type {?} */ providerMeta = /** @type {?} */ ((undefined));\r\n                if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {\r\n                    this._validateProvider(provider);\r\n                    providerMeta = new ProviderMeta(provider.provide, provider);\r\n                }\r\n                else if (isValidType(provider)) {\r\n                    providerMeta = new ProviderMeta(provider, { useClass: provider });\r\n                }\r\n                else if (provider === void 0) {\r\n                    this._reportError(syntaxError(`Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using 'barrel' index.ts files.`));\r\n                    return;\r\n                }\r\n                else {\r\n                    const /** @type {?} */ providersInfo = (/** @type {?} */ (providers.reduce((soFar, seenProvider, seenProviderIdx) => {\r\n                        if (seenProviderIdx < providerIdx) {\r\n                            soFar.push(`${stringifyType(seenProvider)}`);\r\n                        }\r\n                        else if (seenProviderIdx == providerIdx) {\r\n                            soFar.push(`?${stringifyType(seenProvider)}?`);\r\n                        }\r\n                        else if (seenProviderIdx == providerIdx + 1) {\r\n                            soFar.push('...');\r\n                        }\r\n                        return soFar;\r\n                    }, [])))\r\n                        .join(', ');\r\n                    this._reportError(syntaxError(`Invalid ${debugInfo ? debugInfo : 'provider'} - only instances of Provider and Type are allowed, got: [${providersInfo}]`), type);\r\n                    return;\r\n                }\r\n                if (providerMeta.token ===\r\n                    this._reflector.resolveExternalReference(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {\r\n                    targetEntryComponents.push(...this._getEntryComponentsFromProvider(providerMeta, type));\r\n                }\r\n                else {\r\n                    compileProviders.push(this.getProviderMetadata(providerMeta));\r\n                }\r\n            }\r\n        });\r\n        return compileProviders;\r\n    }\r\n    /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    _validateProvider(provider) {\r\n        if (provider.hasOwnProperty('useClass') && provider.useClass == null) {\r\n            this._reportError(syntaxError(`Invalid provider for ${stringifyType(provider.provide)}. useClass cannot be ${provider.useClass}.\r\n           Usually it happens when:\r\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\r\n           2. Class was used before it was declared. Use forwardRef in this case.`));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} provider\r\n     * @param {?=} type\r\n     * @return {?}\r\n     */\r\n    _getEntryComponentsFromProvider(provider, type) {\r\n        const /** @type {?} */ components = [];\r\n        const /** @type {?} */ collectedIdentifiers = [];\r\n        if (provider.useFactory || provider.useExisting || provider.useClass) {\r\n            this._reportError(syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!`), type);\r\n            return [];\r\n        }\r\n        if (!provider.multi) {\r\n            this._reportError(syntaxError(`The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!`), type);\r\n            return [];\r\n        }\r\n        extractIdentifiers(provider.useValue, collectedIdentifiers);\r\n        collectedIdentifiers.forEach((identifier) => {\r\n            const /** @type {?} */ entry = this._getEntryComponentMetadata(identifier.reference, false);\r\n            if (entry) {\r\n                components.push(entry);\r\n            }\r\n        });\r\n        return components;\r\n    }\r\n    /**\r\n     * @param {?} dirType\r\n     * @param {?=} throwIfNotFound\r\n     * @return {?}\r\n     */\r\n    _getEntryComponentMetadata(dirType, throwIfNotFound = true) {\r\n        const /** @type {?} */ dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);\r\n        if (dirMeta && dirMeta.metadata.isComponent) {\r\n            return { componentType: dirType, componentFactory: /** @type {?} */ ((dirMeta.metadata.componentFactory)) };\r\n        }\r\n        const /** @type {?} */ dirSummary = /** @type {?} */ (this._loadSummary(dirType, CompileSummaryKind.Directive));\r\n        if (dirSummary && dirSummary.isComponent) {\r\n            return { componentType: dirType, componentFactory: /** @type {?} */ ((dirSummary.componentFactory)) };\r\n        }\r\n        if (throwIfNotFound) {\r\n            throw syntaxError(`${dirType.name} cannot be used as an entry component.`);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    getProviderMetadata(provider) {\r\n        let /** @type {?} */ compileDeps = /** @type {?} */ ((undefined));\r\n        let /** @type {?} */ compileTypeMetadata = /** @type {?} */ ((null));\r\n        let /** @type {?} */ compileFactoryMetadata = /** @type {?} */ ((null));\r\n        let /** @type {?} */ token = this._getTokenMetadata(provider.token);\r\n        if (provider.useClass) {\r\n            compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies);\r\n            compileDeps = compileTypeMetadata.diDeps;\r\n            if (provider.token === provider.useClass) {\r\n                // use the compileTypeMetadata as it contains information about lifecycleHooks...\r\n                token = { identifier: compileTypeMetadata };\r\n            }\r\n        }\r\n        else if (provider.useFactory) {\r\n            compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);\r\n            compileDeps = compileFactoryMetadata.diDeps;\r\n        }\r\n        return {\r\n            token: token,\r\n            useClass: compileTypeMetadata,\r\n            useValue: provider.useValue,\r\n            useFactory: compileFactoryMetadata,\r\n            useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,\r\n            deps: compileDeps,\r\n            multi: provider.multi\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} queries\r\n     * @param {?} isViewQuery\r\n     * @param {?} directiveType\r\n     * @return {?}\r\n     */\r\n    _getQueriesMetadata(queries, isViewQuery, directiveType) {\r\n        const /** @type {?} */ res = [];\r\n        Object.keys(queries).forEach((propertyName) => {\r\n            const /** @type {?} */ query = queries[propertyName];\r\n            if (query.isViewQuery === isViewQuery) {\r\n                res.push(this._getQueryMetadata(query, propertyName, directiveType));\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n    /**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    _queryVarBindings(selector) { return selector.split(/\\s*,\\s*/); }\r\n    /**\r\n     * @param {?} q\r\n     * @param {?} propertyName\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    _getQueryMetadata(q, propertyName, typeOrFunc) {\r\n        let /** @type {?} */ selectors;\r\n        if (typeof q.selector === 'string') {\r\n            selectors =\r\n                this._queryVarBindings(q.selector).map(varName => this._getTokenMetadata(varName));\r\n        }\r\n        else {\r\n            if (!q.selector) {\r\n                this._reportError(syntaxError(`Can't construct a query for the property \"${propertyName}\" of \"${stringifyType(typeOrFunc)}\" since the query selector wasn't defined.`), typeOrFunc);\r\n                selectors = [];\r\n            }\r\n            else {\r\n                selectors = [this._getTokenMetadata(q.selector)];\r\n            }\r\n        }\r\n        return {\r\n            selectors,\r\n            first: q.first,\r\n            descendants: q.descendants, propertyName,\r\n            read: q.read ? this._getTokenMetadata(q.read) : /** @type {?} */ ((null))\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} error\r\n     * @param {?=} type\r\n     * @param {?=} otherType\r\n     * @return {?}\r\n     */\r\n    _reportError(error, type, otherType) {\r\n        if (this._errorCollector) {\r\n            this._errorCollector(error, type);\r\n            if (otherType) {\r\n                this._errorCollector(error, otherType);\r\n            }\r\n        }\r\n        else {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} tree\r\n * @param {?=} out\r\n * @return {?}\r\n */\r\nfunction flattenArray(tree, out = []) {\r\n    if (tree) {\r\n        for (let /** @type {?} */ i = 0; i < tree.length; i++) {\r\n            const /** @type {?} */ item = resolveForwardRef(tree[i]);\r\n            if (Array.isArray(item)) {\r\n                flattenArray(item, out);\r\n            }\r\n            else {\r\n                out.push(item);\r\n            }\r\n        }\r\n    }\r\n    return out;\r\n}\r\n/**\r\n * @param {?} array\r\n * @return {?}\r\n */\r\nfunction dedupeArray(array) {\r\n    if (array) {\r\n        return Array.from(new Set(array));\r\n    }\r\n    return [];\r\n}\r\n/**\r\n * @param {?} tree\r\n * @return {?}\r\n */\r\nfunction flattenAndDedupeArray(tree) {\r\n    return dedupeArray(flattenArray(tree));\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isValidType(value) {\r\n    return (value instanceof StaticSymbol) || (value instanceof Type);\r\n}\r\n/**\r\n * @param {?} value\r\n * @param {?} targetIdentifiers\r\n * @return {?}\r\n */\r\nfunction extractIdentifiers(value, targetIdentifiers) {\r\n    visitValue(value, new _CompileValueConverter(), targetIdentifiers);\r\n}\r\nclass _CompileValueConverter extends ValueTransformer {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} targetIdentifiers\r\n     * @return {?}\r\n     */\r\n    visitOther(value, targetIdentifiers) {\r\n        targetIdentifiers.push({ reference: value });\r\n    }\r\n}\r\n/**\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction stringifyType(type) {\r\n    if (type instanceof StaticSymbol) {\r\n        return `${type.name} in ${type.filePath}`;\r\n    }\r\n    else {\r\n        return stringify(type);\r\n    }\r\n}\r\n/**\r\n * Indicates that a component is still being loaded in a synchronous compile.\r\n * @param {?} compType\r\n * @return {?}\r\n */\r\nfunction componentStillLoadingError(compType) {\r\n    const /** @type {?} */ error = Error(`Can't compile synchronously as ${stringify(compType)} is still being loaded!`);\r\n    (/** @type {?} */ (error))[ERROR_COMPONENT_TYPE] = compType;\r\n    return error;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst TypeModifier = {\r\n    Const: 0,\r\n};\r\nTypeModifier[TypeModifier.Const] = \"Const\";\r\n/**\r\n * @abstract\r\n */\r\nclass Type$1 {\r\n    /**\r\n     * @param {?=} modifiers\r\n     */\r\n    constructor(modifiers = null) {\r\n        this.modifiers = modifiers;\r\n        if (!modifiers) {\r\n            this.modifiers = [];\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} modifier\r\n     * @return {?}\r\n     */\r\n    hasModifier(modifier) { return /** @type {?} */ ((this.modifiers)).indexOf(modifier) !== -1; }\r\n}\r\n/** @enum {number} */\r\nconst BuiltinTypeName = {\r\n    Dynamic: 0,\r\n    Bool: 1,\r\n    String: 2,\r\n    Int: 3,\r\n    Number: 4,\r\n    Function: 5,\r\n    Inferred: 6,\r\n};\r\nBuiltinTypeName[BuiltinTypeName.Dynamic] = \"Dynamic\";\r\nBuiltinTypeName[BuiltinTypeName.Bool] = \"Bool\";\r\nBuiltinTypeName[BuiltinTypeName.String] = \"String\";\r\nBuiltinTypeName[BuiltinTypeName.Int] = \"Int\";\r\nBuiltinTypeName[BuiltinTypeName.Number] = \"Number\";\r\nBuiltinTypeName[BuiltinTypeName.Function] = \"Function\";\r\nBuiltinTypeName[BuiltinTypeName.Inferred] = \"Inferred\";\r\nclass BuiltinType extends Type$1 {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} modifiers\r\n     */\r\n    constructor(name, modifiers = null) {\r\n        super(modifiers);\r\n        this.name = name;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitType(visitor, context) {\r\n        return visitor.visitBuiltintType(this, context);\r\n    }\r\n}\r\nclass ExpressionType extends Type$1 {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} modifiers\r\n     */\r\n    constructor(value, modifiers = null) {\r\n        super(modifiers);\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitType(visitor, context) {\r\n        return visitor.visitExpressionType(this, context);\r\n    }\r\n}\r\nclass ArrayType extends Type$1 {\r\n    /**\r\n     * @param {?} of\r\n     * @param {?=} modifiers\r\n     */\r\n    constructor(of, modifiers = null) {\r\n        super(modifiers);\r\n        this.of = of;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitType(visitor, context) {\r\n        return visitor.visitArrayType(this, context);\r\n    }\r\n}\r\nclass MapType extends Type$1 {\r\n    /**\r\n     * @param {?} valueType\r\n     * @param {?=} modifiers\r\n     */\r\n    constructor(valueType, modifiers = null) {\r\n        super(modifiers);\r\n        this.valueType = valueType || null;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitType(visitor, context) { return visitor.visitMapType(this, context); }\r\n}\r\nconst DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\r\nconst INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);\r\nconst BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\r\nconst INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\r\nconst NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\r\nconst STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\r\nconst FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\r\n/**\r\n * @record\r\n */\r\n\r\n/** @enum {number} */\r\nconst BinaryOperator = {\r\n    Equals: 0,\r\n    NotEquals: 1,\r\n    Identical: 2,\r\n    NotIdentical: 3,\r\n    Minus: 4,\r\n    Plus: 5,\r\n    Divide: 6,\r\n    Multiply: 7,\r\n    Modulo: 8,\r\n    And: 9,\r\n    Or: 10,\r\n    Lower: 11,\r\n    LowerEquals: 12,\r\n    Bigger: 13,\r\n    BiggerEquals: 14,\r\n};\r\nBinaryOperator[BinaryOperator.Equals] = \"Equals\";\r\nBinaryOperator[BinaryOperator.NotEquals] = \"NotEquals\";\r\nBinaryOperator[BinaryOperator.Identical] = \"Identical\";\r\nBinaryOperator[BinaryOperator.NotIdentical] = \"NotIdentical\";\r\nBinaryOperator[BinaryOperator.Minus] = \"Minus\";\r\nBinaryOperator[BinaryOperator.Plus] = \"Plus\";\r\nBinaryOperator[BinaryOperator.Divide] = \"Divide\";\r\nBinaryOperator[BinaryOperator.Multiply] = \"Multiply\";\r\nBinaryOperator[BinaryOperator.Modulo] = \"Modulo\";\r\nBinaryOperator[BinaryOperator.And] = \"And\";\r\nBinaryOperator[BinaryOperator.Or] = \"Or\";\r\nBinaryOperator[BinaryOperator.Lower] = \"Lower\";\r\nBinaryOperator[BinaryOperator.LowerEquals] = \"LowerEquals\";\r\nBinaryOperator[BinaryOperator.Bigger] = \"Bigger\";\r\nBinaryOperator[BinaryOperator.BiggerEquals] = \"BiggerEquals\";\r\n/**\r\n * @template T\r\n * @param {?} base\r\n * @param {?} other\r\n * @return {?}\r\n */\r\nfunction nullSafeIsEquivalent(base, other) {\r\n    if (base == null || other == null) {\r\n        return base == other;\r\n    }\r\n    return base.isEquivalent(other);\r\n}\r\n/**\r\n * @template T\r\n * @param {?} base\r\n * @param {?} other\r\n * @return {?}\r\n */\r\nfunction areAllEquivalent(base, other) {\r\n    const /** @type {?} */ len = base.length;\r\n    if (len !== other.length) {\r\n        return false;\r\n    }\r\n    for (let /** @type {?} */ i = 0; i < len; i++) {\r\n        if (!base[i].isEquivalent(other[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @abstract\r\n */\r\nclass Expression {\r\n    /**\r\n     * @param {?} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(type, sourceSpan) {\r\n        this.type = type || null;\r\n        this.sourceSpan = sourceSpan || null;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    prop(name, sourceSpan) {\r\n        return new ReadPropExpr(this, name, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} index\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    key(index, type, sourceSpan) {\r\n        return new ReadKeyExpr(this, index, type, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} params\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    callMethod(name, params, sourceSpan) {\r\n        return new InvokeMethodExpr(this, name, params, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} params\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    callFn(params, sourceSpan) {\r\n        return new InvokeFunctionExpr(this, params, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} params\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    instantiate(params, type, sourceSpan) {\r\n        return new InstantiateExpr(this, params, type, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} trueCase\r\n     * @param {?=} falseCase\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    conditional(trueCase, falseCase = null, sourceSpan) {\r\n        return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    equals(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    notEquals(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    identical(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    notIdentical(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    minus(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    plus(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    divide(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    multiply(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    modulo(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    and(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    or(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    lower(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    lowerEquals(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    bigger(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} rhs\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    biggerEquals(rhs, sourceSpan) {\r\n        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    isBlank(sourceSpan) {\r\n        // Note: We use equals by purpose here to compare to null and undefined in JS.\r\n        // We use the typed null to allow strictNullChecks to narrow types.\r\n        return this.equals(TYPED_NULL_EXPR, sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?=} sourceSpan\r\n     * @return {?}\r\n     */\r\n    cast(type, sourceSpan) {\r\n        return new CastExpr(this, type, sourceSpan);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toStmt() { return new ExpressionStatement(this, null); }\r\n}\r\n/** @enum {number} */\r\nconst BuiltinVar = {\r\n    This: 0,\r\n    Super: 1,\r\n    CatchError: 2,\r\n    CatchStack: 3,\r\n};\r\nBuiltinVar[BuiltinVar.This] = \"This\";\r\nBuiltinVar[BuiltinVar.Super] = \"Super\";\r\nBuiltinVar[BuiltinVar.CatchError] = \"CatchError\";\r\nBuiltinVar[BuiltinVar.CatchStack] = \"CatchStack\";\r\nclass ReadVarExpr extends Expression {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(name, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        if (typeof name === 'string') {\r\n            this.name = name;\r\n            this.builtin = null;\r\n        }\r\n        else {\r\n            this.name = null;\r\n            this.builtin = /** @type {?} */ (name);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof ReadVarExpr && this.name === e.name && this.builtin === e.builtin;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitReadVarExpr(this, context);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set(value) {\r\n        if (!this.name) {\r\n            throw new Error(`Built in variable ${this.builtin} can not be assigned to.`);\r\n        }\r\n        return new WriteVarExpr(this.name, value, null, this.sourceSpan);\r\n    }\r\n}\r\nclass WriteVarExpr extends Expression {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(name, value, type, sourceSpan) {\r\n        super(type || value.type, sourceSpan);\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitWriteVarExpr(this, context);\r\n    }\r\n    /**\r\n     * @param {?=} type\r\n     * @param {?=} modifiers\r\n     * @return {?}\r\n     */\r\n    toDeclStmt(type, modifiers) {\r\n        return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\r\n    }\r\n}\r\nclass WriteKeyExpr extends Expression {\r\n    /**\r\n     * @param {?} receiver\r\n     * @param {?} index\r\n     * @param {?} value\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(receiver, index, value, type, sourceSpan) {\r\n        super(type || value.type, sourceSpan);\r\n        this.receiver = receiver;\r\n        this.index = index;\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) &&\r\n            this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitWriteKeyExpr(this, context);\r\n    }\r\n}\r\nclass WritePropExpr extends Expression {\r\n    /**\r\n     * @param {?} receiver\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(receiver, name, value, type, sourceSpan) {\r\n        super(type || value.type, sourceSpan);\r\n        this.receiver = receiver;\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) &&\r\n            this.name === e.name && this.value.isEquivalent(e.value);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitWritePropExpr(this, context);\r\n    }\r\n}\r\n/** @enum {number} */\r\nconst BuiltinMethod = {\r\n    ConcatArray: 0,\r\n    SubscribeObservable: 1,\r\n    Bind: 2,\r\n};\r\nBuiltinMethod[BuiltinMethod.ConcatArray] = \"ConcatArray\";\r\nBuiltinMethod[BuiltinMethod.SubscribeObservable] = \"SubscribeObservable\";\r\nBuiltinMethod[BuiltinMethod.Bind] = \"Bind\";\r\nclass InvokeMethodExpr extends Expression {\r\n    /**\r\n     * @param {?} receiver\r\n     * @param {?} method\r\n     * @param {?} args\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(receiver, method, args, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.receiver = receiver;\r\n        this.args = args;\r\n        if (typeof method === 'string') {\r\n            this.name = method;\r\n            this.builtin = null;\r\n        }\r\n        else {\r\n            this.name = null;\r\n            this.builtin = /** @type {?} */ (method);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof InvokeMethodExpr && this.receiver.isEquivalent(e.receiver) &&\r\n            this.name === e.name && this.builtin === e.builtin && areAllEquivalent(this.args, e.args);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitInvokeMethodExpr(this, context);\r\n    }\r\n}\r\nclass InvokeFunctionExpr extends Expression {\r\n    /**\r\n     * @param {?} fn\r\n     * @param {?} args\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(fn, args, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.fn = fn;\r\n        this.args = args;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) &&\r\n            areAllEquivalent(this.args, e.args);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitInvokeFunctionExpr(this, context);\r\n    }\r\n}\r\nclass InstantiateExpr extends Expression {\r\n    /**\r\n     * @param {?} classExpr\r\n     * @param {?} args\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(classExpr, args, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.classExpr = classExpr;\r\n        this.args = args;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) &&\r\n            areAllEquivalent(this.args, e.args);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitInstantiateExpr(this, context);\r\n    }\r\n}\r\nclass LiteralExpr extends Expression {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(value, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof LiteralExpr && this.value === e.value;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitLiteralExpr(this, context);\r\n    }\r\n}\r\nclass ExternalExpr extends Expression {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} type\r\n     * @param {?=} typeParams\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(value, type, typeParams = null, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.value = value;\r\n        this.typeParams = typeParams;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof ExternalExpr && this.value.name === e.value.name &&\r\n            this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitExternalExpr(this, context);\r\n    }\r\n}\r\nclass ExternalReference {\r\n    /**\r\n     * @param {?} moduleName\r\n     * @param {?} name\r\n     * @param {?=} runtime\r\n     */\r\n    constructor(moduleName, name, runtime) {\r\n        this.moduleName = moduleName;\r\n        this.name = name;\r\n        this.runtime = runtime;\r\n    }\r\n}\r\nclass ConditionalExpr extends Expression {\r\n    /**\r\n     * @param {?} condition\r\n     * @param {?} trueCase\r\n     * @param {?=} falseCase\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(condition, trueCase, falseCase = null, type, sourceSpan) {\r\n        super(type || trueCase.type, sourceSpan);\r\n        this.condition = condition;\r\n        this.falseCase = falseCase;\r\n        this.trueCase = trueCase;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) &&\r\n            this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitConditionalExpr(this, context);\r\n    }\r\n}\r\nclass NotExpr extends Expression {\r\n    /**\r\n     * @param {?} condition\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(condition, sourceSpan) {\r\n        super(BOOL_TYPE, sourceSpan);\r\n        this.condition = condition;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof NotExpr && this.condition.isEquivalent(e.condition);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitNotExpr(this, context);\r\n    }\r\n}\r\nclass AssertNotNull extends Expression {\r\n    /**\r\n     * @param {?} condition\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(condition, sourceSpan) {\r\n        super(condition.type, sourceSpan);\r\n        this.condition = condition;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof AssertNotNull && this.condition.isEquivalent(e.condition);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitAssertNotNullExpr(this, context);\r\n    }\r\n}\r\nclass CastExpr extends Expression {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(value, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof CastExpr && this.value.isEquivalent(e.value);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitCastExpr(this, context);\r\n    }\r\n}\r\nclass FnParam {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} type\r\n     */\r\n    constructor(name, type = null) {\r\n        this.name = name;\r\n        this.type = type;\r\n    }\r\n    /**\r\n     * @param {?} param\r\n     * @return {?}\r\n     */\r\n    isEquivalent(param) { return this.name === param.name; }\r\n}\r\nclass FunctionExpr extends Expression {\r\n    /**\r\n     * @param {?} params\r\n     * @param {?} statements\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(params, statements, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.params = params;\r\n        this.statements = statements;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) &&\r\n            areAllEquivalent(this.statements, e.statements);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitFunctionExpr(this, context);\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} modifiers\r\n     * @return {?}\r\n     */\r\n    toDeclStmt(name, modifiers = null) {\r\n        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\r\n    }\r\n}\r\nclass BinaryOperatorExpr extends Expression {\r\n    /**\r\n     * @param {?} operator\r\n     * @param {?} lhs\r\n     * @param {?} rhs\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(operator, lhs, rhs, type, sourceSpan) {\r\n        super(type || lhs.type, sourceSpan);\r\n        this.operator = operator;\r\n        this.rhs = rhs;\r\n        this.lhs = lhs;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof BinaryOperatorExpr && this.operator === e.operator &&\r\n            this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitBinaryOperatorExpr(this, context);\r\n    }\r\n}\r\nclass ReadPropExpr extends Expression {\r\n    /**\r\n     * @param {?} receiver\r\n     * @param {?} name\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(receiver, name, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.receiver = receiver;\r\n        this.name = name;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) &&\r\n            this.name === e.name;\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitReadPropExpr(this, context);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set(value) {\r\n        return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\r\n    }\r\n}\r\nclass ReadKeyExpr extends Expression {\r\n    /**\r\n     * @param {?} receiver\r\n     * @param {?} index\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(receiver, index, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.receiver = receiver;\r\n        this.index = index;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) &&\r\n            this.index.isEquivalent(e.index);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitReadKeyExpr(this, context);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set(value) {\r\n        return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\r\n    }\r\n}\r\nclass LiteralArrayExpr extends Expression {\r\n    /**\r\n     * @param {?} entries\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(entries, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.entries = entries;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitLiteralArrayExpr(this, context);\r\n    }\r\n}\r\nclass LiteralMapEntry {\r\n    /**\r\n     * @param {?} key\r\n     * @param {?} value\r\n     * @param {?} quoted\r\n     */\r\n    constructor(key, value, quoted) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.quoted = quoted;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return this.key === e.key && this.value.isEquivalent(e.value);\r\n    }\r\n}\r\nclass LiteralMapExpr extends Expression {\r\n    /**\r\n     * @param {?} entries\r\n     * @param {?=} type\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(entries, type, sourceSpan) {\r\n        super(type, sourceSpan);\r\n        this.entries = entries;\r\n        this.valueType = null;\r\n        if (type) {\r\n            this.valueType = type.valueType;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitLiteralMapExpr(this, context);\r\n    }\r\n}\r\nclass CommaExpr extends Expression {\r\n    /**\r\n     * @param {?} parts\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(parts, sourceSpan) {\r\n        super(parts[parts.length - 1].type, sourceSpan);\r\n        this.parts = parts;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    isEquivalent(e) {\r\n        return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(visitor, context) {\r\n        return visitor.visitCommaExpr(this, context);\r\n    }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\nconst THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);\r\nconst SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);\r\nconst CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError, null, null);\r\nconst CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack, null, null);\r\nconst NULL_EXPR = new LiteralExpr(null, null, null);\r\nconst TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);\r\n/** @enum {number} */\r\nconst StmtModifier = {\r\n    Final: 0,\r\n    Private: 1,\r\n    Exported: 2,\r\n};\r\nStmtModifier[StmtModifier.Final] = \"Final\";\r\nStmtModifier[StmtModifier.Private] = \"Private\";\r\nStmtModifier[StmtModifier.Exported] = \"Exported\";\r\n/**\r\n * @abstract\r\n */\r\nclass Statement {\r\n    /**\r\n     * @param {?=} modifiers\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(modifiers, sourceSpan) {\r\n        this.modifiers = modifiers || [];\r\n        this.sourceSpan = sourceSpan || null;\r\n    }\r\n    /**\r\n     * @param {?} modifier\r\n     * @return {?}\r\n     */\r\n    hasModifier(modifier) { return /** @type {?} */ ((this.modifiers)).indexOf(modifier) !== -1; }\r\n}\r\nclass DeclareVarStmt extends Statement {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?=} type\r\n     * @param {?=} modifiers\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(name, value, type, modifiers = null, sourceSpan) {\r\n        super(modifiers, sourceSpan);\r\n        this.name = name;\r\n        this.value = value;\r\n        this.type = type || value.type;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @return {?}\r\n     */\r\n    isEquivalent(stmt) {\r\n        return stmt instanceof DeclareVarStmt && this.name === stmt.name &&\r\n            this.value.isEquivalent(stmt.value);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStatement(visitor, context) {\r\n        return visitor.visitDeclareVarStmt(this, context);\r\n    }\r\n}\r\nclass DeclareFunctionStmt extends Statement {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} params\r\n     * @param {?} statements\r\n     * @param {?=} type\r\n     * @param {?=} modifiers\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(name, params, statements, type, modifiers = null, sourceSpan) {\r\n        super(modifiers, sourceSpan);\r\n        this.name = name;\r\n        this.params = params;\r\n        this.statements = statements;\r\n        this.type = type || null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @return {?}\r\n     */\r\n    isEquivalent(stmt) {\r\n        return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) &&\r\n            areAllEquivalent(this.statements, stmt.statements);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStatement(visitor, context) {\r\n        return visitor.visitDeclareFunctionStmt(this, context);\r\n    }\r\n}\r\nclass ExpressionStatement extends Statement {\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(expr, sourceSpan) {\r\n        super(null, sourceSpan);\r\n        this.expr = expr;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @return {?}\r\n     */\r\n    isEquivalent(stmt) {\r\n        return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStatement(visitor, context) {\r\n        return visitor.visitExpressionStmt(this, context);\r\n    }\r\n}\r\nclass ReturnStatement extends Statement {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(value, sourceSpan) {\r\n        super(null, sourceSpan);\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @return {?}\r\n     */\r\n    isEquivalent(stmt) {\r\n        return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStatement(visitor, context) {\r\n        return visitor.visitReturnStmt(this, context);\r\n    }\r\n}\r\nclass AbstractClassPart {\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} modifiers\r\n     */\r\n    constructor(type, modifiers) {\r\n        this.modifiers = modifiers;\r\n        if (!modifiers) {\r\n            this.modifiers = [];\r\n        }\r\n        this.type = type || null;\r\n    }\r\n    /**\r\n     * @param {?} modifier\r\n     * @return {?}\r\n     */\r\n    hasModifier(modifier) { return /** @type {?} */ ((this.modifiers)).indexOf(modifier) !== -1; }\r\n}\r\n\r\nclass ClassMethod extends AbstractClassPart {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} params\r\n     * @param {?} body\r\n     * @param {?=} type\r\n     * @param {?=} modifiers\r\n     */\r\n    constructor(name, params, body, type, modifiers = null) {\r\n        super(type, modifiers);\r\n        this.name = name;\r\n        this.params = params;\r\n        this.body = body;\r\n    }\r\n    /**\r\n     * @param {?} m\r\n     * @return {?}\r\n     */\r\n    isEquivalent(m) {\r\n        return this.name === m.name && areAllEquivalent(this.body, m.body);\r\n    }\r\n}\r\nclass ClassGetter extends AbstractClassPart {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} body\r\n     * @param {?=} type\r\n     * @param {?=} modifiers\r\n     */\r\n    constructor(name, body, type, modifiers = null) {\r\n        super(type, modifiers);\r\n        this.name = name;\r\n        this.body = body;\r\n    }\r\n    /**\r\n     * @param {?} m\r\n     * @return {?}\r\n     */\r\n    isEquivalent(m) {\r\n        return this.name === m.name && areAllEquivalent(this.body, m.body);\r\n    }\r\n}\r\nclass ClassStmt extends Statement {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} parent\r\n     * @param {?} fields\r\n     * @param {?} getters\r\n     * @param {?} constructorMethod\r\n     * @param {?} methods\r\n     * @param {?=} modifiers\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(name, parent, fields, getters, constructorMethod, methods, modifiers = null, sourceSpan) {\r\n        super(modifiers, sourceSpan);\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.fields = fields;\r\n        this.getters = getters;\r\n        this.constructorMethod = constructorMethod;\r\n        this.methods = methods;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @return {?}\r\n     */\r\n    isEquivalent(stmt) {\r\n        return stmt instanceof ClassStmt && this.name === stmt.name &&\r\n            nullSafeIsEquivalent(this.parent, stmt.parent) &&\r\n            areAllEquivalent(this.fields, stmt.fields) &&\r\n            areAllEquivalent(this.getters, stmt.getters) &&\r\n            this.constructorMethod.isEquivalent(stmt.constructorMethod) &&\r\n            areAllEquivalent(this.methods, stmt.methods);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStatement(visitor, context) {\r\n        return visitor.visitDeclareClassStmt(this, context);\r\n    }\r\n}\r\nclass IfStmt extends Statement {\r\n    /**\r\n     * @param {?} condition\r\n     * @param {?} trueCase\r\n     * @param {?=} falseCase\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(condition, trueCase, falseCase = [], sourceSpan) {\r\n        super(null, sourceSpan);\r\n        this.condition = condition;\r\n        this.trueCase = trueCase;\r\n        this.falseCase = falseCase;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @return {?}\r\n     */\r\n    isEquivalent(stmt) {\r\n        return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) &&\r\n            areAllEquivalent(this.trueCase, stmt.trueCase) &&\r\n            areAllEquivalent(this.falseCase, stmt.falseCase);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStatement(visitor, context) {\r\n        return visitor.visitIfStmt(this, context);\r\n    }\r\n}\r\nclass CommentStmt extends Statement {\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(comment, sourceSpan) {\r\n        super(null, sourceSpan);\r\n        this.comment = comment;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @return {?}\r\n     */\r\n    isEquivalent(stmt) { return stmt instanceof CommentStmt; }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStatement(visitor, context) {\r\n        return visitor.visitCommentStmt(this, context);\r\n    }\r\n}\r\nclass TryCatchStmt extends Statement {\r\n    /**\r\n     * @param {?} bodyStmts\r\n     * @param {?} catchStmts\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(bodyStmts, catchStmts, sourceSpan) {\r\n        super(null, sourceSpan);\r\n        this.bodyStmts = bodyStmts;\r\n        this.catchStmts = catchStmts;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @return {?}\r\n     */\r\n    isEquivalent(stmt) {\r\n        return stmt instanceof TryCatchStmt && areAllEquivalent(this.bodyStmts, stmt.bodyStmts) &&\r\n            areAllEquivalent(this.catchStmts, stmt.catchStmts);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStatement(visitor, context) {\r\n        return visitor.visitTryCatchStmt(this, context);\r\n    }\r\n}\r\nclass ThrowStmt extends Statement {\r\n    /**\r\n     * @param {?} error\r\n     * @param {?=} sourceSpan\r\n     */\r\n    constructor(error, sourceSpan) {\r\n        super(null, sourceSpan);\r\n        this.error = error;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @return {?}\r\n     */\r\n    isEquivalent(stmt) {\r\n        return stmt instanceof TryCatchStmt && this.error.isEquivalent(stmt.error);\r\n    }\r\n    /**\r\n     * @param {?} visitor\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStatement(visitor, context) {\r\n        return visitor.visitThrowStmt(this, context);\r\n    }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\nclass AstTransformer$1 {\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    transformExpr(expr, context) { return expr; }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    transformStmt(stmt, context) { return stmt; }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReadVarExpr(ast, context) { return this.transformExpr(ast, context); }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitWriteVarExpr(expr, context) {\r\n        return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitWriteKeyExpr(expr, context) {\r\n        return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitWritePropExpr(expr, context) {\r\n        return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitInvokeMethodExpr(ast, context) {\r\n        const /** @type {?} */ method = ast.builtin || ast.name;\r\n        return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), /** @type {?} */ ((method)), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitInvokeFunctionExpr(ast, context) {\r\n        return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitInstantiateExpr(ast, context) {\r\n        return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralExpr(ast, context) { return this.transformExpr(ast, context); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExternalExpr(ast, context) {\r\n        return this.transformExpr(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitConditionalExpr(ast, context) {\r\n        return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), /** @type {?} */ ((ast.falseCase)).visitExpression(this, context), ast.type, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitNotExpr(ast, context) {\r\n        return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAssertNotNullExpr(ast, context) {\r\n        return this.transformExpr(new AssertNotNull(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitCastExpr(ast, context) {\r\n        return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitFunctionExpr(ast, context) {\r\n        return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitBinaryOperatorExpr(ast, context) {\r\n        return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReadPropExpr(ast, context) {\r\n        return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReadKeyExpr(ast, context) {\r\n        return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralArrayExpr(ast, context) {\r\n        return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralMapExpr(ast, context) {\r\n        const /** @type {?} */ entries = ast.entries.map((entry) => new LiteralMapEntry(entry.key, entry.value.visitExpression(this, context), entry.quoted));\r\n        const /** @type {?} */ mapType = new MapType(ast.valueType, null);\r\n        return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitCommaExpr(ast, context) {\r\n        return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} exprs\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAllExpressions(exprs, context) {\r\n        return exprs.map(expr => expr.visitExpression(this, context));\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDeclareVarStmt(stmt, context) {\r\n        return this.transformStmt(new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDeclareFunctionStmt(stmt, context) {\r\n        return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpressionStmt(stmt, context) {\r\n        return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReturnStmt(stmt, context) {\r\n        return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDeclareClassStmt(stmt, context) {\r\n        const /** @type {?} */ parent = /** @type {?} */ ((stmt.parent)).visitExpression(this, context);\r\n        const /** @type {?} */ getters = stmt.getters.map(getter => new ClassGetter(getter.name, this.visitAllStatements(getter.body, context), getter.type, getter.modifiers));\r\n        const /** @type {?} */ ctorMethod = stmt.constructorMethod &&\r\n            new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);\r\n        const /** @type {?} */ methods = stmt.methods.map(method => new ClassMethod(method.name, method.params, this.visitAllStatements(method.body, context), method.type, method.modifiers));\r\n        return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitIfStmt(stmt, context) {\r\n        return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitTryCatchStmt(stmt, context) {\r\n        return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitThrowStmt(stmt, context) {\r\n        return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan), context);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitCommentStmt(stmt, context) {\r\n        return this.transformStmt(stmt, context);\r\n    }\r\n    /**\r\n     * @param {?} stmts\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAllStatements(stmts, context) {\r\n        return stmts.map(stmt => stmt.visitStatement(this, context));\r\n    }\r\n}\r\nclass RecursiveAstVisitor$1 {\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitType(ast, context) { return ast; }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpression(ast, context) {\r\n        if (ast.type) {\r\n            ast.type.visitType(this, context);\r\n        }\r\n        return ast;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitBuiltintType(type, context) { return this.visitType(type, context); }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpressionType(type, context) {\r\n        type.value.visitExpression(this, context);\r\n        return this.visitType(type, context);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitArrayType(type, context) { return this.visitType(type, context); }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitMapType(type, context) { return this.visitType(type, context); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReadVarExpr(ast, context) {\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitWriteVarExpr(ast, context) {\r\n        ast.value.visitExpression(this, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitWriteKeyExpr(ast, context) {\r\n        ast.receiver.visitExpression(this, context);\r\n        ast.index.visitExpression(this, context);\r\n        ast.value.visitExpression(this, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitWritePropExpr(ast, context) {\r\n        ast.receiver.visitExpression(this, context);\r\n        ast.value.visitExpression(this, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitInvokeMethodExpr(ast, context) {\r\n        ast.receiver.visitExpression(this, context);\r\n        this.visitAllExpressions(ast.args, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitInvokeFunctionExpr(ast, context) {\r\n        ast.fn.visitExpression(this, context);\r\n        this.visitAllExpressions(ast.args, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitInstantiateExpr(ast, context) {\r\n        ast.classExpr.visitExpression(this, context);\r\n        this.visitAllExpressions(ast.args, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralExpr(ast, context) {\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExternalExpr(ast, context) {\r\n        if (ast.typeParams) {\r\n            ast.typeParams.forEach(type => type.visitType(this, context));\r\n        }\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitConditionalExpr(ast, context) {\r\n        ast.condition.visitExpression(this, context);\r\n        ast.trueCase.visitExpression(this, context); /** @type {?} */\r\n        ((ast.falseCase)).visitExpression(this, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitNotExpr(ast, context) {\r\n        ast.condition.visitExpression(this, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAssertNotNullExpr(ast, context) {\r\n        ast.condition.visitExpression(this, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitCastExpr(ast, context) {\r\n        ast.value.visitExpression(this, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitFunctionExpr(ast, context) {\r\n        this.visitAllStatements(ast.statements, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitBinaryOperatorExpr(ast, context) {\r\n        ast.lhs.visitExpression(this, context);\r\n        ast.rhs.visitExpression(this, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReadPropExpr(ast, context) {\r\n        ast.receiver.visitExpression(this, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReadKeyExpr(ast, context) {\r\n        ast.receiver.visitExpression(this, context);\r\n        ast.index.visitExpression(this, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralArrayExpr(ast, context) {\r\n        this.visitAllExpressions(ast.entries, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralMapExpr(ast, context) {\r\n        ast.entries.forEach((entry) => entry.value.visitExpression(this, context));\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitCommaExpr(ast, context) {\r\n        this.visitAllExpressions(ast.parts, context);\r\n        return this.visitExpression(ast, context);\r\n    }\r\n    /**\r\n     * @param {?} exprs\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAllExpressions(exprs, context) {\r\n        exprs.forEach(expr => expr.visitExpression(this, context));\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDeclareVarStmt(stmt, context) {\r\n        stmt.value.visitExpression(this, context);\r\n        if (stmt.type) {\r\n            stmt.type.visitType(this, context);\r\n        }\r\n        return stmt;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDeclareFunctionStmt(stmt, context) {\r\n        this.visitAllStatements(stmt.statements, context);\r\n        if (stmt.type) {\r\n            stmt.type.visitType(this, context);\r\n        }\r\n        return stmt;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpressionStmt(stmt, context) {\r\n        stmt.expr.visitExpression(this, context);\r\n        return stmt;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReturnStmt(stmt, context) {\r\n        stmt.value.visitExpression(this, context);\r\n        return stmt;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDeclareClassStmt(stmt, context) {\r\n        /** @type {?} */ ((stmt.parent)).visitExpression(this, context);\r\n        stmt.getters.forEach(getter => this.visitAllStatements(getter.body, context));\r\n        if (stmt.constructorMethod) {\r\n            this.visitAllStatements(stmt.constructorMethod.body, context);\r\n        }\r\n        stmt.methods.forEach(method => this.visitAllStatements(method.body, context));\r\n        return stmt;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitIfStmt(stmt, context) {\r\n        stmt.condition.visitExpression(this, context);\r\n        this.visitAllStatements(stmt.trueCase, context);\r\n        this.visitAllStatements(stmt.falseCase, context);\r\n        return stmt;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitTryCatchStmt(stmt, context) {\r\n        this.visitAllStatements(stmt.bodyStmts, context);\r\n        this.visitAllStatements(stmt.catchStmts, context);\r\n        return stmt;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitThrowStmt(stmt, context) {\r\n        stmt.error.visitExpression(this, context);\r\n        return stmt;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitCommentStmt(stmt, context) { return stmt; }\r\n    /**\r\n     * @param {?} stmts\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAllStatements(stmts, context) {\r\n        stmts.forEach(stmt => stmt.visitStatement(this, context));\r\n    }\r\n}\r\n/**\r\n * @param {?} stmts\r\n * @return {?}\r\n */\r\nfunction findReadVarNames(stmts) {\r\n    const /** @type {?} */ visitor = new _ReadVarVisitor();\r\n    visitor.visitAllStatements(stmts, null);\r\n    return visitor.varNames;\r\n}\r\nclass _ReadVarVisitor extends RecursiveAstVisitor$1 {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.varNames = new Set();\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDeclareFunctionStmt(stmt, context) {\r\n        // Don't descend into nested functions\r\n        return stmt;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDeclareClassStmt(stmt, context) {\r\n        // Don't descend into nested classes\r\n        return stmt;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReadVarExpr(ast, context) {\r\n        if (ast.name) {\r\n            this.varNames.add(ast.name);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @param {?} stmts\r\n * @return {?}\r\n */\r\nfunction collectExternalReferences(stmts) {\r\n    const /** @type {?} */ visitor = new _FindExternalReferencesVisitor();\r\n    visitor.visitAllStatements(stmts, null);\r\n    return visitor.externalReferences;\r\n}\r\nclass _FindExternalReferencesVisitor extends RecursiveAstVisitor$1 {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.externalReferences = [];\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExternalExpr(e, context) {\r\n        this.externalReferences.push(e.value);\r\n        return super.visitExternalExpr(e, context);\r\n    }\r\n}\r\n/**\r\n * @param {?} stmt\r\n * @param {?} sourceSpan\r\n * @return {?}\r\n */\r\nfunction applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {\r\n    if (!sourceSpan) {\r\n        return stmt;\r\n    }\r\n    const /** @type {?} */ transformer = new _ApplySourceSpanTransformer(sourceSpan);\r\n    return stmt.visitStatement(transformer, null);\r\n}\r\n/**\r\n * @param {?} expr\r\n * @param {?} sourceSpan\r\n * @return {?}\r\n */\r\nfunction applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {\r\n    if (!sourceSpan) {\r\n        return expr;\r\n    }\r\n    const /** @type {?} */ transformer = new _ApplySourceSpanTransformer(sourceSpan);\r\n    return expr.visitExpression(transformer, null);\r\n}\r\nclass _ApplySourceSpanTransformer extends AstTransformer$1 {\r\n    /**\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(sourceSpan) {\r\n        super();\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    _clone(obj) {\r\n        const /** @type {?} */ clone = Object.create(obj.constructor.prototype);\r\n        for (let /** @type {?} */ prop in obj) {\r\n            clone[prop] = obj[prop];\r\n        }\r\n        return clone;\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    transformExpr(expr, context) {\r\n        if (!expr.sourceSpan) {\r\n            expr = this._clone(expr);\r\n            expr.sourceSpan = this.sourceSpan;\r\n        }\r\n        return expr;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    transformStmt(stmt, context) {\r\n        if (!stmt.sourceSpan) {\r\n            stmt = this._clone(stmt);\r\n            stmt.sourceSpan = this.sourceSpan;\r\n        }\r\n        return stmt;\r\n    }\r\n}\r\n/**\r\n * @param {?} name\r\n * @param {?=} type\r\n * @param {?=} sourceSpan\r\n * @return {?}\r\n */\r\nfunction variable(name, type, sourceSpan) {\r\n    return new ReadVarExpr(name, type, sourceSpan);\r\n}\r\n/**\r\n * @param {?} id\r\n * @param {?=} typeParams\r\n * @param {?=} sourceSpan\r\n * @return {?}\r\n */\r\nfunction importExpr(id, typeParams = null, sourceSpan) {\r\n    return new ExternalExpr(id, null, typeParams, sourceSpan);\r\n}\r\n/**\r\n * @param {?} id\r\n * @param {?=} typeParams\r\n * @param {?=} typeModifiers\r\n * @return {?}\r\n */\r\nfunction importType(id, typeParams = null, typeModifiers = null) {\r\n    return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;\r\n}\r\n/**\r\n * @param {?} expr\r\n * @param {?=} typeModifiers\r\n * @return {?}\r\n */\r\nfunction expressionType(expr, typeModifiers = null) {\r\n    return new ExpressionType(expr, typeModifiers);\r\n}\r\n/**\r\n * @param {?} values\r\n * @param {?=} type\r\n * @param {?=} sourceSpan\r\n * @return {?}\r\n */\r\nfunction literalArr(values, type, sourceSpan) {\r\n    return new LiteralArrayExpr(values, type, sourceSpan);\r\n}\r\n/**\r\n * @param {?} values\r\n * @param {?=} type\r\n * @return {?}\r\n */\r\nfunction literalMap(values, type = null) {\r\n    return new LiteralMapExpr(values.map(e => new LiteralMapEntry(e.key, e.value, e.quoted)), type, null);\r\n}\r\n/**\r\n * @param {?} expr\r\n * @param {?=} sourceSpan\r\n * @return {?}\r\n */\r\nfunction not(expr, sourceSpan) {\r\n    return new NotExpr(expr, sourceSpan);\r\n}\r\n/**\r\n * @param {?} expr\r\n * @param {?=} sourceSpan\r\n * @return {?}\r\n */\r\nfunction assertNotNull(expr, sourceSpan) {\r\n    return new AssertNotNull(expr, sourceSpan);\r\n}\r\n/**\r\n * @param {?} params\r\n * @param {?} body\r\n * @param {?=} type\r\n * @param {?=} sourceSpan\r\n * @return {?}\r\n */\r\nfunction fn(params, body, type, sourceSpan) {\r\n    return new FunctionExpr(params, body, type, sourceSpan);\r\n}\r\n/**\r\n * @param {?} value\r\n * @param {?=} type\r\n * @param {?=} sourceSpan\r\n * @return {?}\r\n */\r\nfunction literal(value, type, sourceSpan) {\r\n    return new LiteralExpr(value, type, sourceSpan);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass ProviderError extends ParseError {\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} span\r\n     */\r\n    constructor(message, span) { super(span, message); }\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\nclass ProviderViewContext {\r\n    /**\r\n     * @param {?} reflector\r\n     * @param {?} component\r\n     */\r\n    constructor(reflector, component) {\r\n        this.reflector = reflector;\r\n        this.component = component;\r\n        this.errors = [];\r\n        this.viewQueries = _getViewQueries(component);\r\n        this.viewProviders = new Map();\r\n        component.viewProviders.forEach((provider) => {\r\n            if (this.viewProviders.get(tokenReference(provider.token)) == null) {\r\n                this.viewProviders.set(tokenReference(provider.token), true);\r\n            }\r\n        });\r\n    }\r\n}\r\nclass ProviderElementContext {\r\n    /**\r\n     * @param {?} viewContext\r\n     * @param {?} _parent\r\n     * @param {?} _isViewRoot\r\n     * @param {?} _directiveAsts\r\n     * @param {?} attrs\r\n     * @param {?} refs\r\n     * @param {?} isTemplate\r\n     * @param {?} contentQueryStartId\r\n     * @param {?} _sourceSpan\r\n     */\r\n    constructor(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {\r\n        this.viewContext = viewContext;\r\n        this._parent = _parent;\r\n        this._isViewRoot = _isViewRoot;\r\n        this._directiveAsts = _directiveAsts;\r\n        this._sourceSpan = _sourceSpan;\r\n        this._transformedProviders = new Map();\r\n        this._seenProviders = new Map();\r\n        this._queriedTokens = new Map();\r\n        this.transformedHasViewContainer = false;\r\n        this._attrs = {};\r\n        attrs.forEach((attrAst) => this._attrs[attrAst.name] = attrAst.value);\r\n        const /** @type {?} */ directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);\r\n        this._allProviders =\r\n            _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\r\n        this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);\r\n        Array.from(this._allProviders.values()).forEach((provider) => {\r\n            this._addQueryReadsTo(provider.token, provider.token, this._queriedTokens);\r\n        });\r\n        if (isTemplate) {\r\n            const /** @type {?} */ templateRefId = createTokenForExternalReference(this.viewContext.reflector, Identifiers.TemplateRef);\r\n            this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);\r\n        }\r\n        refs.forEach((refAst) => {\r\n            let /** @type {?} */ defaultQueryValue = refAst.value ||\r\n                createTokenForExternalReference(this.viewContext.reflector, Identifiers.ElementRef);\r\n            this._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, this._queriedTokens);\r\n        });\r\n        if (this._queriedTokens.get(this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef))) {\r\n            this.transformedHasViewContainer = true;\r\n        }\r\n        // create the providers that we know are eager first\r\n        Array.from(this._allProviders.values()).forEach((provider) => {\r\n            const /** @type {?} */ eager = provider.eager || this._queriedTokens.get(tokenReference(provider.token));\r\n            if (eager) {\r\n                this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    afterElement() {\r\n        // collect lazy providers\r\n        Array.from(this._allProviders.values()).forEach((provider) => {\r\n            this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get transformProviders() {\r\n        // Note: Maps keep their insertion order.\r\n        const /** @type {?} */ lazyProviders = [];\r\n        const /** @type {?} */ eagerProviders = [];\r\n        this._transformedProviders.forEach(provider => {\r\n            if (provider.eager) {\r\n                eagerProviders.push(provider);\r\n            }\r\n            else {\r\n                lazyProviders.push(provider);\r\n            }\r\n        });\r\n        return lazyProviders.concat(eagerProviders);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get transformedDirectiveAsts() {\r\n        const /** @type {?} */ sortedProviderTypes = this.transformProviders.map(provider => provider.token.identifier);\r\n        const /** @type {?} */ sortedDirectives = this._directiveAsts.slice();\r\n        sortedDirectives.sort((dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) -\r\n            sortedProviderTypes.indexOf(dir2.directive.type));\r\n        return sortedDirectives;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get queryMatches() {\r\n        const /** @type {?} */ allMatches = [];\r\n        this._queriedTokens.forEach((matches) => { allMatches.push(...matches); });\r\n        return allMatches;\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?} defaultValue\r\n     * @param {?} queryReadTokens\r\n     * @return {?}\r\n     */\r\n    _addQueryReadsTo(token, defaultValue, queryReadTokens) {\r\n        this._getQueriesFor(token).forEach((query) => {\r\n            const /** @type {?} */ queryValue = query.meta.read || defaultValue;\r\n            const /** @type {?} */ tokenRef = tokenReference(queryValue);\r\n            let /** @type {?} */ queryMatches = queryReadTokens.get(tokenRef);\r\n            if (!queryMatches) {\r\n                queryMatches = [];\r\n                queryReadTokens.set(tokenRef, queryMatches);\r\n            }\r\n            queryMatches.push({ queryId: query.queryId, value: queryValue });\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    _getQueriesFor(token) {\r\n        const /** @type {?} */ result = [];\r\n        let /** @type {?} */ currentEl = this;\r\n        let /** @type {?} */ distance = 0;\r\n        let /** @type {?} */ queries;\r\n        while (currentEl !== null) {\r\n            queries = currentEl._contentQueries.get(tokenReference(token));\r\n            if (queries) {\r\n                result.push(...queries.filter((query) => query.meta.descendants || distance <= 1));\r\n            }\r\n            if (currentEl._directiveAsts.length > 0) {\r\n                distance++;\r\n            }\r\n            currentEl = currentEl._parent;\r\n        }\r\n        queries = this.viewContext.viewQueries.get(tokenReference(token));\r\n        if (queries) {\r\n            result.push(...queries);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} requestingProviderType\r\n     * @param {?} token\r\n     * @param {?} eager\r\n     * @return {?}\r\n     */\r\n    _getOrCreateLocalProvider(requestingProviderType, token, eager) {\r\n        const /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\r\n        if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||\r\n            requestingProviderType === ProviderAstType.PublicService) &&\r\n            resolvedProvider.providerType === ProviderAstType.PrivateService) ||\r\n            ((requestingProviderType === ProviderAstType.PrivateService ||\r\n                requestingProviderType === ProviderAstType.PublicService) &&\r\n                resolvedProvider.providerType === ProviderAstType.Builtin)) {\r\n            return null;\r\n        }\r\n        let /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\r\n        if (transformedProviderAst) {\r\n            return transformedProviderAst;\r\n        }\r\n        if (this._seenProviders.get(tokenReference(token)) != null) {\r\n            this.viewContext.errors.push(new ProviderError(`Cannot instantiate cyclic dependency! ${tokenName(token)}`, this._sourceSpan));\r\n            return null;\r\n        }\r\n        this._seenProviders.set(tokenReference(token), true);\r\n        const /** @type {?} */ transformedProviders = resolvedProvider.providers.map((provider) => {\r\n            let /** @type {?} */ transformedUseValue = provider.useValue;\r\n            let /** @type {?} */ transformedUseExisting = /** @type {?} */ ((provider.useExisting));\r\n            let /** @type {?} */ transformedDeps = /** @type {?} */ ((undefined));\r\n            if (provider.useExisting != null) {\r\n                const /** @type {?} */ existingDiDep = /** @type {?} */ ((this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager)));\r\n                if (existingDiDep.token != null) {\r\n                    transformedUseExisting = existingDiDep.token;\r\n                }\r\n                else {\r\n                    transformedUseExisting = /** @type {?} */ ((null));\r\n                    transformedUseValue = existingDiDep.value;\r\n                }\r\n            }\r\n            else if (provider.useFactory) {\r\n                const /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\r\n                transformedDeps =\r\n                    deps.map((dep) => /** @type {?} */ ((this._getDependency(resolvedProvider.providerType, dep, eager))));\r\n            }\r\n            else if (provider.useClass) {\r\n                const /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\r\n                transformedDeps =\r\n                    deps.map((dep) => /** @type {?} */ ((this._getDependency(resolvedProvider.providerType, dep, eager))));\r\n            }\r\n            return _transformProvider(provider, {\r\n                useExisting: transformedUseExisting,\r\n                useValue: transformedUseValue,\r\n                deps: transformedDeps\r\n            });\r\n        });\r\n        transformedProviderAst =\r\n            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\r\n        this._transformedProviders.set(tokenReference(token), transformedProviderAst);\r\n        return transformedProviderAst;\r\n    }\r\n    /**\r\n     * @param {?} requestingProviderType\r\n     * @param {?} dep\r\n     * @param {?=} eager\r\n     * @return {?}\r\n     */\r\n    _getLocalDependency(requestingProviderType, dep, eager = false) {\r\n        if (dep.isAttribute) {\r\n            const /** @type {?} */ attrValue = this._attrs[/** @type {?} */ ((dep.token)).value];\r\n            return { isValue: true, value: attrValue == null ? null : attrValue };\r\n        }\r\n        if (dep.token != null) {\r\n            // access builtints\r\n            if ((requestingProviderType === ProviderAstType.Directive ||\r\n                requestingProviderType === ProviderAstType.Component)) {\r\n                if (tokenReference(dep.token) ===\r\n                    this.viewContext.reflector.resolveExternalReference(Identifiers.Renderer) ||\r\n                    tokenReference(dep.token) ===\r\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.ElementRef) ||\r\n                    tokenReference(dep.token) ===\r\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.ChangeDetectorRef) ||\r\n                    tokenReference(dep.token) ===\r\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\r\n                    return dep;\r\n                }\r\n                if (tokenReference(dep.token) ===\r\n                    this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\r\n                    (/** @type {?} */ (this)).transformedHasViewContainer = true;\r\n                }\r\n            }\r\n            // access the injector\r\n            if (tokenReference(dep.token) ===\r\n                this.viewContext.reflector.resolveExternalReference(Identifiers.Injector)) {\r\n                return dep;\r\n            }\r\n            // access providers\r\n            if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {\r\n                return dep;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} requestingProviderType\r\n     * @param {?} dep\r\n     * @param {?=} eager\r\n     * @return {?}\r\n     */\r\n    _getDependency(requestingProviderType, dep, eager = false) {\r\n        let /** @type {?} */ currElement = this;\r\n        let /** @type {?} */ currEager = eager;\r\n        let /** @type {?} */ result = null;\r\n        if (!dep.isSkipSelf) {\r\n            result = this._getLocalDependency(requestingProviderType, dep, eager);\r\n        }\r\n        if (dep.isSelf) {\r\n            if (!result && dep.isOptional) {\r\n                result = { isValue: true, value: null };\r\n            }\r\n        }\r\n        else {\r\n            // check parent elements\r\n            while (!result && currElement._parent) {\r\n                const /** @type {?} */ prevElement = currElement;\r\n                currElement = currElement._parent;\r\n                if (prevElement._isViewRoot) {\r\n                    currEager = false;\r\n                }\r\n                result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\r\n            }\r\n            // check @Host restriction\r\n            if (!result) {\r\n                if (!dep.isHost || this.viewContext.component.isHost ||\r\n                    this.viewContext.component.type.reference === tokenReference(/** @type {?} */ ((dep.token))) ||\r\n                    this.viewContext.viewProviders.get(tokenReference(/** @type {?} */ ((dep.token)))) != null) {\r\n                    result = dep;\r\n                }\r\n                else {\r\n                    result = dep.isOptional ? result = { isValue: true, value: null } : null;\r\n                }\r\n            }\r\n        }\r\n        if (!result) {\r\n            this.viewContext.errors.push(new ProviderError(`No provider for ${tokenName((/** @type {?} */ ((dep.token))))}`, this._sourceSpan));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nclass NgModuleProviderAnalyzer {\r\n    /**\r\n     * @param {?} reflector\r\n     * @param {?} ngModule\r\n     * @param {?} extraProviders\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(reflector, ngModule, extraProviders, sourceSpan) {\r\n        this.reflector = reflector;\r\n        this._transformedProviders = new Map();\r\n        this._seenProviders = new Map();\r\n        this._errors = [];\r\n        this._allProviders = new Map();\r\n        ngModule.transitiveModule.modules.forEach((ngModuleType) => {\r\n            const /** @type {?} */ ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };\r\n            _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, this._errors, this._allProviders);\r\n        });\r\n        _resolveProviders(ngModule.transitiveModule.providers.map(entry => entry.provider).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parse() {\r\n        Array.from(this._allProviders.values()).forEach((provider) => {\r\n            this._getOrCreateLocalProvider(provider.token, provider.eager);\r\n        });\r\n        if (this._errors.length > 0) {\r\n            const /** @type {?} */ errorString = this._errors.join('\\n');\r\n            throw new Error(`Provider parse errors:\\n${errorString}`);\r\n        }\r\n        // Note: Maps keep their insertion order.\r\n        const /** @type {?} */ lazyProviders = [];\r\n        const /** @type {?} */ eagerProviders = [];\r\n        this._transformedProviders.forEach(provider => {\r\n            if (provider.eager) {\r\n                eagerProviders.push(provider);\r\n            }\r\n            else {\r\n                lazyProviders.push(provider);\r\n            }\r\n        });\r\n        return lazyProviders.concat(eagerProviders);\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?} eager\r\n     * @return {?}\r\n     */\r\n    _getOrCreateLocalProvider(token, eager) {\r\n        const /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\r\n        if (!resolvedProvider) {\r\n            return null;\r\n        }\r\n        let /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\r\n        if (transformedProviderAst) {\r\n            return transformedProviderAst;\r\n        }\r\n        if (this._seenProviders.get(tokenReference(token)) != null) {\r\n            this._errors.push(new ProviderError(`Cannot instantiate cyclic dependency! ${tokenName(token)}`, resolvedProvider.sourceSpan));\r\n            return null;\r\n        }\r\n        this._seenProviders.set(tokenReference(token), true);\r\n        const /** @type {?} */ transformedProviders = resolvedProvider.providers.map((provider) => {\r\n            let /** @type {?} */ transformedUseValue = provider.useValue;\r\n            let /** @type {?} */ transformedUseExisting = /** @type {?} */ ((provider.useExisting));\r\n            let /** @type {?} */ transformedDeps = /** @type {?} */ ((undefined));\r\n            if (provider.useExisting != null) {\r\n                const /** @type {?} */ existingDiDep = this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);\r\n                if (existingDiDep.token != null) {\r\n                    transformedUseExisting = existingDiDep.token;\r\n                }\r\n                else {\r\n                    transformedUseExisting = /** @type {?} */ ((null));\r\n                    transformedUseValue = existingDiDep.value;\r\n                }\r\n            }\r\n            else if (provider.useFactory) {\r\n                const /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\r\n                transformedDeps =\r\n                    deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\r\n            }\r\n            else if (provider.useClass) {\r\n                const /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\r\n                transformedDeps =\r\n                    deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\r\n            }\r\n            return _transformProvider(provider, {\r\n                useExisting: transformedUseExisting,\r\n                useValue: transformedUseValue,\r\n                deps: transformedDeps\r\n            });\r\n        });\r\n        transformedProviderAst =\r\n            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\r\n        this._transformedProviders.set(tokenReference(token), transformedProviderAst);\r\n        return transformedProviderAst;\r\n    }\r\n    /**\r\n     * @param {?} dep\r\n     * @param {?=} eager\r\n     * @param {?=} requestorSourceSpan\r\n     * @return {?}\r\n     */\r\n    _getDependency(dep, eager = false, requestorSourceSpan) {\r\n        let /** @type {?} */ foundLocal = false;\r\n        if (!dep.isSkipSelf && dep.token != null) {\r\n            // access the injector\r\n            if (tokenReference(dep.token) ===\r\n                this.reflector.resolveExternalReference(Identifiers.Injector) ||\r\n                tokenReference(dep.token) ===\r\n                    this.reflector.resolveExternalReference(Identifiers.ComponentFactoryResolver)) {\r\n                foundLocal = true;\r\n                // access providers\r\n            }\r\n            else if (this._getOrCreateLocalProvider(dep.token, eager) != null) {\r\n                foundLocal = true;\r\n            }\r\n        }\r\n        let /** @type {?} */ result = dep;\r\n        if (dep.isSelf && !foundLocal) {\r\n            if (dep.isOptional) {\r\n                result = { isValue: true, value: null };\r\n            }\r\n            else {\r\n                this._errors.push(new ProviderError(`No provider for ${tokenName((/** @type {?} */ ((dep.token))))}`, requestorSourceSpan));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * @param {?} provider\r\n * @param {?} __1\r\n * @return {?}\r\n */\r\nfunction _transformProvider(provider, { useExisting, useValue, deps }) {\r\n    return {\r\n        token: provider.token,\r\n        useClass: provider.useClass,\r\n        useExisting: useExisting,\r\n        useFactory: provider.useFactory,\r\n        useValue: useValue,\r\n        deps: deps,\r\n        multi: provider.multi\r\n    };\r\n}\r\n/**\r\n * @param {?} provider\r\n * @param {?} __1\r\n * @return {?}\r\n */\r\nfunction _transformProviderAst(provider, { eager, providers }) {\r\n    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);\r\n}\r\n/**\r\n * @param {?} directives\r\n * @param {?} sourceSpan\r\n * @param {?} targetErrors\r\n * @return {?}\r\n */\r\nfunction _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {\r\n    const /** @type {?} */ providersByToken = new Map();\r\n    directives.forEach((directive) => {\r\n        const /** @type {?} */ dirProvider = { token: { identifier: directive.type }, useClass: directive.type };\r\n        _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);\r\n    });\r\n    // Note: directives need to be able to overwrite providers of a component!\r\n    const /** @type {?} */ directivesWithComponentFirst = directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));\r\n    directivesWithComponentFirst.forEach((directive) => {\r\n        _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);\r\n        _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);\r\n    });\r\n    return providersByToken;\r\n}\r\n/**\r\n * @param {?} providers\r\n * @param {?} providerType\r\n * @param {?} eager\r\n * @param {?} sourceSpan\r\n * @param {?} targetErrors\r\n * @param {?} targetProvidersByToken\r\n * @return {?}\r\n */\r\nfunction _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {\r\n    providers.forEach((provider) => {\r\n        let /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));\r\n        if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {\r\n            targetErrors.push(new ProviderError(`Mixing multi and non multi provider is not possible for token ${tokenName(resolvedProvider.token)}`, sourceSpan));\r\n        }\r\n        if (!resolvedProvider) {\r\n            const /** @type {?} */ lifecycleHooks = provider.token.identifier &&\r\n                (/** @type {?} */ (provider.token.identifier)).lifecycleHooks ?\r\n                (/** @type {?} */ (provider.token.identifier)).lifecycleHooks :\r\n                [];\r\n            const /** @type {?} */ isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);\r\n            resolvedProvider = new ProviderAst(provider.token, !!provider.multi, eager || isUseValue, [provider], providerType, lifecycleHooks, sourceSpan);\r\n            targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);\r\n        }\r\n        else {\r\n            if (!provider.multi) {\r\n                resolvedProvider.providers.length = 0;\r\n            }\r\n            resolvedProvider.providers.push(provider);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @param {?} component\r\n * @return {?}\r\n */\r\nfunction _getViewQueries(component) {\r\n    // Note: queries start with id 1 so we can use the number in a Bloom filter!\r\n    let /** @type {?} */ viewQueryId = 1;\r\n    const /** @type {?} */ viewQueries = new Map();\r\n    if (component.viewQueries) {\r\n        component.viewQueries.forEach((query) => _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ }));\r\n    }\r\n    return viewQueries;\r\n}\r\n/**\r\n * @param {?} contentQueryStartId\r\n * @param {?} directives\r\n * @return {?}\r\n */\r\nfunction _getContentQueries(contentQueryStartId, directives) {\r\n    let /** @type {?} */ contentQueryId = contentQueryStartId;\r\n    const /** @type {?} */ contentQueries = new Map();\r\n    directives.forEach((directive, directiveIndex) => {\r\n        if (directive.queries) {\r\n            directive.queries.forEach((query) => _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ }));\r\n        }\r\n    });\r\n    return contentQueries;\r\n}\r\n/**\r\n * @param {?} map\r\n * @param {?} query\r\n * @return {?}\r\n */\r\nfunction _addQueryToTokenMap(map, query) {\r\n    query.meta.selectors.forEach((token) => {\r\n        let /** @type {?} */ entry = map.get(tokenReference(token));\r\n        if (!entry) {\r\n            entry = [];\r\n            map.set(tokenReference(token), entry);\r\n        }\r\n        entry.push(query);\r\n    });\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst QUOTED_KEYS = '$quoted$';\r\n/**\r\n * @param {?} ctx\r\n * @param {?} value\r\n * @param {?=} type\r\n * @return {?}\r\n */\r\nfunction convertValueToOutputAst(ctx, value, type = null) {\r\n    return visitValue(value, new _ValueOutputAstTransformer(ctx), type);\r\n}\r\nclass _ValueOutputAstTransformer {\r\n    /**\r\n     * @param {?} ctx\r\n     */\r\n    constructor(ctx) {\r\n        this.ctx = ctx;\r\n    }\r\n    /**\r\n     * @param {?} arr\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    visitArray(arr, type) {\r\n        return literalArr(arr.map(value => visitValue(value, this, null)), type);\r\n    }\r\n    /**\r\n     * @param {?} map\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    visitStringMap(map, type) {\r\n        const /** @type {?} */ entries = [];\r\n        const /** @type {?} */ quotedSet = new Set(map && map[QUOTED_KEYS]);\r\n        Object.keys(map).forEach(key => {\r\n            entries.push(new LiteralMapEntry(key, visitValue(map[key], this, null), quotedSet.has(key)));\r\n        });\r\n        return new LiteralMapExpr(entries, type);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    visitPrimitive(value, type) { return literal(value, type); }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    visitOther(value, type) {\r\n        if (value instanceof Expression) {\r\n            return value;\r\n        }\r\n        else {\r\n            return this.ctx.importExpr(value);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} ctx\r\n * @param {?} providerAst\r\n * @return {?}\r\n */\r\nfunction providerDef(ctx, providerAst) {\r\n    let /** @type {?} */ flags = 0;\r\n    if (!providerAst.eager) {\r\n        flags |= 4096 /* LazyProvider */;\r\n    }\r\n    if (providerAst.providerType === ProviderAstType.PrivateService) {\r\n        flags |= 8192 /* PrivateProvider */;\r\n    }\r\n    providerAst.lifecycleHooks.forEach((lifecycleHook) => {\r\n        // for regular providers, we only support ngOnDestroy\r\n        if (lifecycleHook === LifecycleHooks.OnDestroy ||\r\n            providerAst.providerType === ProviderAstType.Directive ||\r\n            providerAst.providerType === ProviderAstType.Component) {\r\n            flags |= lifecycleHookToNodeFlag(lifecycleHook);\r\n        }\r\n    });\r\n    const { providerExpr, flags: providerFlags, depsExpr } = providerAst.multiProvider ?\r\n        multiProviderDef(ctx, flags, providerAst.providers) :\r\n        singleProviderDef(ctx, flags, providerAst.providerType, providerAst.providers[0]);\r\n    return {\r\n        providerExpr,\r\n        flags: providerFlags, depsExpr,\r\n        tokenExpr: tokenExpr(ctx, providerAst.token),\r\n    };\r\n}\r\n/**\r\n * @param {?} ctx\r\n * @param {?} flags\r\n * @param {?} providers\r\n * @return {?}\r\n */\r\nfunction multiProviderDef(ctx, flags, providers) {\r\n    const /** @type {?} */ allDepDefs = [];\r\n    const /** @type {?} */ allParams = [];\r\n    const /** @type {?} */ exprs = providers.map((provider, providerIndex) => {\r\n        let /** @type {?} */ expr;\r\n        if (provider.useClass) {\r\n            const /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);\r\n            expr = ctx.importExpr(provider.useClass.reference).instantiate(depExprs);\r\n        }\r\n        else if (provider.useFactory) {\r\n            const /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);\r\n            expr = ctx.importExpr(provider.useFactory.reference).callFn(depExprs);\r\n        }\r\n        else if (provider.useExisting) {\r\n            const /** @type {?} */ depExprs = convertDeps(providerIndex, [{ token: provider.useExisting }]);\r\n            expr = depExprs[0];\r\n        }\r\n        else {\r\n            expr = convertValueToOutputAst(ctx, provider.useValue);\r\n        }\r\n        return expr;\r\n    });\r\n    const /** @type {?} */ providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);\r\n    return {\r\n        providerExpr,\r\n        flags: flags | 1024 /* TypeFactoryProvider */,\r\n        depsExpr: literalArr(allDepDefs)\r\n    };\r\n    /**\r\n     * @param {?} providerIndex\r\n     * @param {?} deps\r\n     * @return {?}\r\n     */\r\n    function convertDeps(providerIndex, deps) {\r\n        return deps.map((dep, depIndex) => {\r\n            const /** @type {?} */ paramName = `p${providerIndex}_${depIndex}`;\r\n            allParams.push(new FnParam(paramName, DYNAMIC_TYPE));\r\n            allDepDefs.push(depDef(ctx, dep));\r\n            return variable(paramName);\r\n        });\r\n    }\r\n}\r\n/**\r\n * @param {?} ctx\r\n * @param {?} flags\r\n * @param {?} providerType\r\n * @param {?} providerMeta\r\n * @return {?}\r\n */\r\nfunction singleProviderDef(ctx, flags, providerType, providerMeta) {\r\n    let /** @type {?} */ providerExpr;\r\n    let /** @type {?} */ deps;\r\n    if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {\r\n        providerExpr = ctx.importExpr(/** @type {?} */ ((providerMeta.useClass)).reference);\r\n        flags |= 16384 /* TypeDirective */;\r\n        deps = providerMeta.deps || /** @type {?} */ ((providerMeta.useClass)).diDeps;\r\n    }\r\n    else {\r\n        if (providerMeta.useClass) {\r\n            providerExpr = ctx.importExpr(providerMeta.useClass.reference);\r\n            flags |= 512 /* TypeClassProvider */;\r\n            deps = providerMeta.deps || providerMeta.useClass.diDeps;\r\n        }\r\n        else if (providerMeta.useFactory) {\r\n            providerExpr = ctx.importExpr(providerMeta.useFactory.reference);\r\n            flags |= 1024 /* TypeFactoryProvider */;\r\n            deps = providerMeta.deps || providerMeta.useFactory.diDeps;\r\n        }\r\n        else if (providerMeta.useExisting) {\r\n            providerExpr = NULL_EXPR;\r\n            flags |= 2048 /* TypeUseExistingProvider */;\r\n            deps = [{ token: providerMeta.useExisting }];\r\n        }\r\n        else {\r\n            providerExpr = convertValueToOutputAst(ctx, providerMeta.useValue);\r\n            flags |= 256 /* TypeValueProvider */;\r\n            deps = [];\r\n        }\r\n    }\r\n    const /** @type {?} */ depsExpr = literalArr(deps.map(dep => depDef(ctx, dep)));\r\n    return { providerExpr, flags, depsExpr };\r\n}\r\n/**\r\n * @param {?} ctx\r\n * @param {?} tokenMeta\r\n * @return {?}\r\n */\r\nfunction tokenExpr(ctx, tokenMeta) {\r\n    return tokenMeta.identifier ? ctx.importExpr(tokenMeta.identifier.reference) :\r\n        literal(tokenMeta.value);\r\n}\r\n/**\r\n * @param {?} ctx\r\n * @param {?} dep\r\n * @return {?}\r\n */\r\nfunction depDef(ctx, dep) {\r\n    // Note: the following fields have already been normalized out by provider_analyzer:\r\n    // - isAttribute, isSelf, isHost\r\n    const /** @type {?} */ expr = dep.isValue ? convertValueToOutputAst(ctx, dep.value) : tokenExpr(ctx, /** @type {?} */ ((dep.token)));\r\n    let /** @type {?} */ flags = 0;\r\n    if (dep.isSkipSelf) {\r\n        flags |= 1 /* SkipSelf */;\r\n    }\r\n    if (dep.isOptional) {\r\n        flags |= 2 /* Optional */;\r\n    }\r\n    if (dep.isValue) {\r\n        flags |= 8 /* Value */;\r\n    }\r\n    return flags === 0 /* None */ ? expr : literalArr([literal(flags), expr]);\r\n}\r\n/**\r\n * @param {?} lifecycleHook\r\n * @return {?}\r\n */\r\nfunction lifecycleHookToNodeFlag(lifecycleHook) {\r\n    let /** @type {?} */ nodeFlag = 0;\r\n    switch (lifecycleHook) {\r\n        case LifecycleHooks.AfterContentChecked:\r\n            nodeFlag = 2097152 /* AfterContentChecked */;\r\n            break;\r\n        case LifecycleHooks.AfterContentInit:\r\n            nodeFlag = 1048576 /* AfterContentInit */;\r\n            break;\r\n        case LifecycleHooks.AfterViewChecked:\r\n            nodeFlag = 8388608 /* AfterViewChecked */;\r\n            break;\r\n        case LifecycleHooks.AfterViewInit:\r\n            nodeFlag = 4194304 /* AfterViewInit */;\r\n            break;\r\n        case LifecycleHooks.DoCheck:\r\n            nodeFlag = 262144 /* DoCheck */;\r\n            break;\r\n        case LifecycleHooks.OnChanges:\r\n            nodeFlag = 524288 /* OnChanges */;\r\n            break;\r\n        case LifecycleHooks.OnDestroy:\r\n            nodeFlag = 131072 /* OnDestroy */;\r\n            break;\r\n        case LifecycleHooks.OnInit:\r\n            nodeFlag = 65536 /* OnInit */;\r\n            break;\r\n    }\r\n    return nodeFlag;\r\n}\r\n/**\r\n * @param {?} reflector\r\n * @param {?} ctx\r\n * @param {?} flags\r\n * @param {?} entryComponents\r\n * @return {?}\r\n */\r\nfunction componentFactoryResolverProviderDef(reflector, ctx, flags, entryComponents) {\r\n    const /** @type {?} */ entryComponentFactories = entryComponents.map((entryComponent) => ctx.importExpr(entryComponent.componentFactory));\r\n    const /** @type {?} */ token = createTokenForExternalReference(reflector, Identifiers.ComponentFactoryResolver);\r\n    const /** @type {?} */ classMeta = {\r\n        diDeps: [\r\n            { isValue: true, value: literalArr(entryComponentFactories) },\r\n            { token: token, isSkipSelf: true, isOptional: true },\r\n            { token: createTokenForExternalReference(reflector, Identifiers.NgModuleRef) },\r\n        ],\r\n        lifecycleHooks: [],\r\n        reference: reflector.resolveExternalReference(Identifiers.CodegenComponentFactoryResolver)\r\n    };\r\n    const { providerExpr, flags: providerFlags, depsExpr } = singleProviderDef(ctx, flags, ProviderAstType.PrivateService, {\r\n        token,\r\n        multi: false,\r\n        useClass: classMeta,\r\n    });\r\n    return { providerExpr, flags: providerFlags, depsExpr, tokenExpr: tokenExpr(ctx, token) };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass NgModuleCompileResult {\r\n    /**\r\n     * @param {?} ngModuleFactoryVar\r\n     */\r\n    constructor(ngModuleFactoryVar) {\r\n        this.ngModuleFactoryVar = ngModuleFactoryVar;\r\n    }\r\n}\r\nconst LOG_VAR = variable('_l');\r\nclass NgModuleCompiler {\r\n    /**\r\n     * @param {?} reflector\r\n     */\r\n    constructor(reflector) {\r\n        this.reflector = reflector;\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} ngModuleMeta\r\n     * @param {?} extraProviders\r\n     * @return {?}\r\n     */\r\n    compile(ctx, ngModuleMeta, extraProviders) {\r\n        const /** @type {?} */ sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);\r\n        const /** @type {?} */ entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;\r\n        const /** @type {?} */ bootstrapComponents = ngModuleMeta.bootstrapComponents;\r\n        const /** @type {?} */ providerParser = new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);\r\n        const /** @type {?} */ providerDefs = [componentFactoryResolverProviderDef(this.reflector, ctx, 0 /* None */, entryComponentFactories)]\r\n            .concat(providerParser.parse().map((provider) => providerDef(ctx, provider)))\r\n            .map(({ providerExpr, depsExpr, flags, tokenExpr }) => {\r\n            return importExpr(Identifiers.moduleProviderDef).callFn([\r\n                literal(flags), tokenExpr, providerExpr, depsExpr\r\n            ]);\r\n        });\r\n        const /** @type {?} */ ngModuleDef = importExpr(Identifiers.moduleDef).callFn([literalArr(providerDefs)]);\r\n        const /** @type {?} */ ngModuleDefFactory = fn([new FnParam(/** @type {?} */ ((LOG_VAR.name)))], [new ReturnStatement(ngModuleDef)], INFERRED_TYPE);\r\n        const /** @type {?} */ ngModuleFactoryVar = `${identifierName(ngModuleMeta.type)}NgFactory`;\r\n        this._createNgModuleFactory(ctx, ngModuleMeta.type.reference, importExpr(Identifiers.createModuleFactory).callFn([\r\n            ctx.importExpr(ngModuleMeta.type.reference),\r\n            literalArr(bootstrapComponents.map(id => ctx.importExpr(id.reference))),\r\n            ngModuleDefFactory\r\n        ]));\r\n        if (ngModuleMeta.id) {\r\n            const /** @type {?} */ registerFactoryStmt = importExpr(Identifiers.RegisterModuleFactoryFn)\r\n                .callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)])\r\n                .toStmt();\r\n            ctx.statements.push(registerFactoryStmt);\r\n        }\r\n        return new NgModuleCompileResult(ngModuleFactoryVar);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} ngModuleReference\r\n     * @return {?}\r\n     */\r\n    createStub(ctx, ngModuleReference) {\r\n        this._createNgModuleFactory(ctx, ngModuleReference, NULL_EXPR);\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} reference\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _createNgModuleFactory(ctx, reference, value) {\r\n        const /** @type {?} */ ngModuleFactoryVar = `${identifierName({ reference: reference })}NgFactory`;\r\n        const /** @type {?} */ ngModuleFactoryStmt = variable(ngModuleFactoryVar)\r\n            .set(value)\r\n            .toDeclStmt(importType(Identifiers.NgModuleFactory, [/** @type {?} */ ((expressionType(ctx.importExpr(reference))))], [TypeModifier.Const]), [StmtModifier.Final, StmtModifier.Exported]);\r\n        ctx.statements.push(ngModuleFactoryStmt);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Resolves types to {\\@link NgModule}.\r\n */\r\nclass NgModuleResolver {\r\n    /**\r\n     * @param {?} _reflector\r\n     */\r\n    constructor(_reflector) {\r\n        this._reflector = _reflector;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    isNgModule(type) { return this._reflector.annotations(type).some(createNgModule.isTypeOf); }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?=} throwIfNotFound\r\n     * @return {?}\r\n     */\r\n    resolve(type, throwIfNotFound = true) {\r\n        const /** @type {?} */ ngModuleMeta = findLast(this._reflector.annotations(type), createNgModule.isTypeOf);\r\n        if (ngModuleMeta) {\r\n            return ngModuleMeta;\r\n        }\r\n        else {\r\n            if (throwIfNotFound) {\r\n                throw new Error(`No NgModule metadata found for '${stringify(type)}'.`);\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\r\nconst VERSION$1 = 3;\r\nconst JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\r\nclass SourceMapGenerator {\r\n    /**\r\n     * @param {?=} file\r\n     */\r\n    constructor(file = null) {\r\n        this.file = file;\r\n        this.sourcesContent = new Map();\r\n        this.lines = [];\r\n        this.lastCol0 = 0;\r\n        this.hasMappings = false;\r\n    }\r\n    /**\r\n     * @param {?} url\r\n     * @param {?=} content\r\n     * @return {?}\r\n     */\r\n    addSource(url, content = null) {\r\n        if (!this.sourcesContent.has(url)) {\r\n            this.sourcesContent.set(url, content);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    addLine() {\r\n        this.lines.push([]);\r\n        this.lastCol0 = 0;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {?} col0\r\n     * @param {?=} sourceUrl\r\n     * @param {?=} sourceLine0\r\n     * @param {?=} sourceCol0\r\n     * @return {?}\r\n     */\r\n    addMapping(col0, sourceUrl, sourceLine0, sourceCol0) {\r\n        if (!this.currentLine) {\r\n            throw new Error(`A line must be added before mappings can be added`);\r\n        }\r\n        if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\r\n            throw new Error(`Unknown source file \"${sourceUrl}\"`);\r\n        }\r\n        if (col0 == null) {\r\n            throw new Error(`The column in the generated code must be provided`);\r\n        }\r\n        if (col0 < this.lastCol0) {\r\n            throw new Error(`Mapping should be added in output order`);\r\n        }\r\n        if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\r\n            throw new Error(`The source location must be provided when a source url is provided`);\r\n        }\r\n        this.hasMappings = true;\r\n        this.lastCol0 = col0;\r\n        this.currentLine.push({ col0, sourceUrl, sourceLine0, sourceCol0 });\r\n        return this;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get currentLine() { return this.lines.slice(-1)[0]; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toJSON() {\r\n        if (!this.hasMappings) {\r\n            return null;\r\n        }\r\n        const /** @type {?} */ sourcesIndex = new Map();\r\n        const /** @type {?} */ sources = [];\r\n        const /** @type {?} */ sourcesContent = [];\r\n        Array.from(this.sourcesContent.keys()).forEach((url, i) => {\r\n            sourcesIndex.set(url, i);\r\n            sources.push(url);\r\n            sourcesContent.push(this.sourcesContent.get(url) || null);\r\n        });\r\n        let /** @type {?} */ mappings = '';\r\n        let /** @type {?} */ lastCol0 = 0;\r\n        let /** @type {?} */ lastSourceIndex = 0;\r\n        let /** @type {?} */ lastSourceLine0 = 0;\r\n        let /** @type {?} */ lastSourceCol0 = 0;\r\n        this.lines.forEach(segments => {\r\n            lastCol0 = 0;\r\n            mappings += segments\r\n                .map(segment => {\r\n                // zero-based starting column of the line in the generated code\r\n                let /** @type {?} */ segAsStr = toBase64VLQ(segment.col0 - lastCol0);\r\n                lastCol0 = segment.col0;\r\n                if (segment.sourceUrl != null) {\r\n                    // zero-based index into the “sources” list\r\n                    segAsStr +=\r\n                        toBase64VLQ(/** @type {?} */ ((sourcesIndex.get(segment.sourceUrl))) - lastSourceIndex);\r\n                    lastSourceIndex = /** @type {?} */ ((sourcesIndex.get(segment.sourceUrl)));\r\n                    // the zero-based starting line in the original source\r\n                    segAsStr += toBase64VLQ(/** @type {?} */ ((segment.sourceLine0)) - lastSourceLine0);\r\n                    lastSourceLine0 = /** @type {?} */ ((segment.sourceLine0));\r\n                    // the zero-based starting column in the original source\r\n                    segAsStr += toBase64VLQ(/** @type {?} */ ((segment.sourceCol0)) - lastSourceCol0);\r\n                    lastSourceCol0 = /** @type {?} */ ((segment.sourceCol0));\r\n                }\r\n                return segAsStr;\r\n            })\r\n                .join(',');\r\n            mappings += ';';\r\n        });\r\n        mappings = mappings.slice(0, -1);\r\n        return {\r\n            'file': this.file || '',\r\n            'version': VERSION$1,\r\n            'sourceRoot': '',\r\n            'sources': sources,\r\n            'sourcesContent': sourcesContent,\r\n            'mappings': mappings,\r\n        };\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toJsComment() {\r\n        return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :\r\n            '';\r\n    }\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction toBase64String(value) {\r\n    let /** @type {?} */ b64 = '';\r\n    value = utf8Encode(value);\r\n    for (let /** @type {?} */ i = 0; i < value.length;) {\r\n        const /** @type {?} */ i1 = value.charCodeAt(i++);\r\n        const /** @type {?} */ i2 = value.charCodeAt(i++);\r\n        const /** @type {?} */ i3 = value.charCodeAt(i++);\r\n        b64 += toBase64Digit(i1 >> 2);\r\n        b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));\r\n        b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));\r\n        b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);\r\n    }\r\n    return b64;\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction toBase64VLQ(value) {\r\n    value = value < 0 ? ((-value) << 1) + 1 : value << 1;\r\n    let /** @type {?} */ out = '';\r\n    do {\r\n        let /** @type {?} */ digit = value & 31;\r\n        value = value >> 5;\r\n        if (value > 0) {\r\n            digit = digit | 32;\r\n        }\r\n        out += toBase64Digit(digit);\r\n    } while (value > 0);\r\n    return out;\r\n}\r\nconst B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction toBase64Digit(value) {\r\n    if (value < 0 || value >= 64) {\r\n        throw new Error(`Can only encode value in the range [0, 63]`);\r\n    }\r\n    return B64_DIGITS[value];\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\r\nconst _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\r\nconst _INDENT_WITH = '  ';\r\nconst CATCH_ERROR_VAR$1 = variable('error', null, null);\r\nconst CATCH_STACK_VAR$1 = variable('stack', null, null);\r\n/**\r\n * @record\r\n */\r\n\r\nclass _EmittedLine {\r\n    /**\r\n     * @param {?} indent\r\n     */\r\n    constructor(indent) {\r\n        this.indent = indent;\r\n        this.partsLength = 0;\r\n        this.parts = [];\r\n        this.srcSpans = [];\r\n    }\r\n}\r\nclass EmitterVisitorContext {\r\n    /**\r\n     * @param {?} _indent\r\n     */\r\n    constructor(_indent) {\r\n        this._indent = _indent;\r\n        this._classes = [];\r\n        this._preambleLineCount = 0;\r\n        this._lines = [new _EmittedLine(_indent)];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static createRoot() { return new EmitterVisitorContext(0); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get _currentLine() { return this._lines[this._lines.length - 1]; }\r\n    /**\r\n     * @param {?=} from\r\n     * @param {?=} lastPart\r\n     * @return {?}\r\n     */\r\n    println(from, lastPart = '') {\r\n        this.print(from || null, lastPart, true);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    lineIsEmpty() { return this._currentLine.parts.length === 0; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    lineLength() {\r\n        return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;\r\n    }\r\n    /**\r\n     * @param {?} from\r\n     * @param {?} part\r\n     * @param {?=} newLine\r\n     * @return {?}\r\n     */\r\n    print(from, part, newLine = false) {\r\n        if (part.length > 0) {\r\n            this._currentLine.parts.push(part);\r\n            this._currentLine.partsLength += part.length;\r\n            this._currentLine.srcSpans.push(from && from.sourceSpan || null);\r\n        }\r\n        if (newLine) {\r\n            this._lines.push(new _EmittedLine(this._indent));\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    removeEmptyLastLine() {\r\n        if (this.lineIsEmpty()) {\r\n            this._lines.pop();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    incIndent() {\r\n        this._indent++;\r\n        if (this.lineIsEmpty()) {\r\n            this._currentLine.indent = this._indent;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    decIndent() {\r\n        this._indent--;\r\n        if (this.lineIsEmpty()) {\r\n            this._currentLine.indent = this._indent;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} clazz\r\n     * @return {?}\r\n     */\r\n    pushClass(clazz) { this._classes.push(clazz); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    popClass() { return /** @type {?} */ ((this._classes.pop())); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get currentClass() {\r\n        return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toSource() {\r\n        return this.sourceLines\r\n            .map(l => l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : '')\r\n            .join('\\n');\r\n    }\r\n    /**\r\n     * @param {?} genFilePath\r\n     * @param {?=} startsAtLine\r\n     * @return {?}\r\n     */\r\n    toSourceMapGenerator(genFilePath, startsAtLine = 0) {\r\n        const /** @type {?} */ map = new SourceMapGenerator(genFilePath);\r\n        let /** @type {?} */ firstOffsetMapped = false;\r\n        const /** @type {?} */ mapFirstOffsetIfNeeded = () => {\r\n            if (!firstOffsetMapped) {\r\n                // Add a single space so that tools won't try to load the file from disk.\r\n                // Note: We are using virtual urls like `ng:///`, so we have to\r\n                // provide a content here.\r\n                map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);\r\n                firstOffsetMapped = true;\r\n            }\r\n        };\r\n        for (let /** @type {?} */ i = 0; i < startsAtLine; i++) {\r\n            map.addLine();\r\n            mapFirstOffsetIfNeeded();\r\n        }\r\n        this.sourceLines.forEach((line, lineIdx) => {\r\n            map.addLine();\r\n            const /** @type {?} */ spans = line.srcSpans;\r\n            const /** @type {?} */ parts = line.parts;\r\n            let /** @type {?} */ col0 = line.indent * _INDENT_WITH.length;\r\n            let /** @type {?} */ spanIdx = 0;\r\n            // skip leading parts without source spans\r\n            while (spanIdx < spans.length && !spans[spanIdx]) {\r\n                col0 += parts[spanIdx].length;\r\n                spanIdx++;\r\n            }\r\n            if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {\r\n                firstOffsetMapped = true;\r\n            }\r\n            else {\r\n                mapFirstOffsetIfNeeded();\r\n            }\r\n            while (spanIdx < spans.length) {\r\n                const /** @type {?} */ span = /** @type {?} */ ((spans[spanIdx]));\r\n                const /** @type {?} */ source = span.start.file;\r\n                const /** @type {?} */ sourceLine = span.start.line;\r\n                const /** @type {?} */ sourceCol = span.start.col;\r\n                map.addSource(source.url, source.content)\r\n                    .addMapping(col0, source.url, sourceLine, sourceCol);\r\n                col0 += parts[spanIdx].length;\r\n                spanIdx++;\r\n                // assign parts without span or the same span to the previous segment\r\n                while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\r\n                    col0 += parts[spanIdx].length;\r\n                    spanIdx++;\r\n                }\r\n            }\r\n        });\r\n        return map;\r\n    }\r\n    /**\r\n     * @param {?} count\r\n     * @return {?}\r\n     */\r\n    setPreambleLineCount(count) { return this._preambleLineCount = count; }\r\n    /**\r\n     * @param {?} line\r\n     * @param {?} column\r\n     * @return {?}\r\n     */\r\n    spanOf(line, column) {\r\n        const /** @type {?} */ emittedLine = this._lines[line - this._preambleLineCount];\r\n        if (emittedLine) {\r\n            let /** @type {?} */ columnsLeft = column - _createIndent(emittedLine.indent).length;\r\n            for (let /** @type {?} */ partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {\r\n                const /** @type {?} */ part = emittedLine.parts[partIndex];\r\n                if (part.length > columnsLeft) {\r\n                    return emittedLine.srcSpans[partIndex];\r\n                }\r\n                columnsLeft -= part.length;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get sourceLines() {\r\n        if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\r\n            return this._lines.slice(0, -1);\r\n        }\r\n        return this._lines;\r\n    }\r\n}\r\n/**\r\n * @abstract\r\n */\r\nclass AbstractEmitterVisitor {\r\n    /**\r\n     * @param {?} _escapeDollarInStrings\r\n     */\r\n    constructor(_escapeDollarInStrings) {\r\n        this._escapeDollarInStrings = _escapeDollarInStrings;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitExpressionStmt(stmt, ctx) {\r\n        stmt.expr.visitExpression(this, ctx);\r\n        ctx.println(stmt, ';');\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitReturnStmt(stmt, ctx) {\r\n        ctx.print(stmt, `return `);\r\n        stmt.value.visitExpression(this, ctx);\r\n        ctx.println(stmt, ';');\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitIfStmt(stmt, ctx) {\r\n        ctx.print(stmt, `if (`);\r\n        stmt.condition.visitExpression(this, ctx);\r\n        ctx.print(stmt, `) {`);\r\n        const /** @type {?} */ hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;\r\n        if (stmt.trueCase.length <= 1 && !hasElseCase) {\r\n            ctx.print(stmt, ` `);\r\n            this.visitAllStatements(stmt.trueCase, ctx);\r\n            ctx.removeEmptyLastLine();\r\n            ctx.print(stmt, ` `);\r\n        }\r\n        else {\r\n            ctx.println();\r\n            ctx.incIndent();\r\n            this.visitAllStatements(stmt.trueCase, ctx);\r\n            ctx.decIndent();\r\n            if (hasElseCase) {\r\n                ctx.println(stmt, `} else {`);\r\n                ctx.incIndent();\r\n                this.visitAllStatements(stmt.falseCase, ctx);\r\n                ctx.decIndent();\r\n            }\r\n        }\r\n        ctx.println(stmt, `}`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitThrowStmt(stmt, ctx) {\r\n        ctx.print(stmt, `throw `);\r\n        stmt.error.visitExpression(this, ctx);\r\n        ctx.println(stmt, `;`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitCommentStmt(stmt, ctx) {\r\n        const /** @type {?} */ lines = stmt.comment.split('\\n');\r\n        lines.forEach((line) => { ctx.println(stmt, `// ${line}`); });\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitWriteVarExpr(expr, ctx) {\r\n        const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\r\n        if (!lineWasEmpty) {\r\n            ctx.print(expr, '(');\r\n        }\r\n        ctx.print(expr, `${expr.name} = `);\r\n        expr.value.visitExpression(this, ctx);\r\n        if (!lineWasEmpty) {\r\n            ctx.print(expr, ')');\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitWriteKeyExpr(expr, ctx) {\r\n        const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\r\n        if (!lineWasEmpty) {\r\n            ctx.print(expr, '(');\r\n        }\r\n        expr.receiver.visitExpression(this, ctx);\r\n        ctx.print(expr, `[`);\r\n        expr.index.visitExpression(this, ctx);\r\n        ctx.print(expr, `] = `);\r\n        expr.value.visitExpression(this, ctx);\r\n        if (!lineWasEmpty) {\r\n            ctx.print(expr, ')');\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitWritePropExpr(expr, ctx) {\r\n        const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\r\n        if (!lineWasEmpty) {\r\n            ctx.print(expr, '(');\r\n        }\r\n        expr.receiver.visitExpression(this, ctx);\r\n        ctx.print(expr, `.${expr.name} = `);\r\n        expr.value.visitExpression(this, ctx);\r\n        if (!lineWasEmpty) {\r\n            ctx.print(expr, ')');\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitInvokeMethodExpr(expr, ctx) {\r\n        expr.receiver.visitExpression(this, ctx);\r\n        let /** @type {?} */ name = expr.name;\r\n        if (expr.builtin != null) {\r\n            name = this.getBuiltinMethodName(expr.builtin);\r\n            if (name == null) {\r\n                // some builtins just mean to skip the call.\r\n                return null;\r\n            }\r\n        }\r\n        ctx.print(expr, `.${name}(`);\r\n        this.visitAllExpressions(expr.args, ctx, `,`);\r\n        ctx.print(expr, `)`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitInvokeFunctionExpr(expr, ctx) {\r\n        expr.fn.visitExpression(this, ctx);\r\n        ctx.print(expr, `(`);\r\n        this.visitAllExpressions(expr.args, ctx, ',');\r\n        ctx.print(expr, `)`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitReadVarExpr(ast, ctx) {\r\n        let /** @type {?} */ varName = /** @type {?} */ ((ast.name));\r\n        if (ast.builtin != null) {\r\n            switch (ast.builtin) {\r\n                case BuiltinVar.Super:\r\n                    varName = 'super';\r\n                    break;\r\n                case BuiltinVar.This:\r\n                    varName = 'this';\r\n                    break;\r\n                case BuiltinVar.CatchError:\r\n                    varName = /** @type {?} */ ((CATCH_ERROR_VAR$1.name));\r\n                    break;\r\n                case BuiltinVar.CatchStack:\r\n                    varName = /** @type {?} */ ((CATCH_STACK_VAR$1.name));\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unknown builtin variable ${ast.builtin}`);\r\n            }\r\n        }\r\n        ctx.print(ast, varName);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitInstantiateExpr(ast, ctx) {\r\n        ctx.print(ast, `new `);\r\n        ast.classExpr.visitExpression(this, ctx);\r\n        ctx.print(ast, `(`);\r\n        this.visitAllExpressions(ast.args, ctx, ',');\r\n        ctx.print(ast, `)`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitLiteralExpr(ast, ctx) {\r\n        const /** @type {?} */ value = ast.value;\r\n        if (typeof value === 'string') {\r\n            ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\r\n        }\r\n        else {\r\n            ctx.print(ast, `${value}`);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitConditionalExpr(ast, ctx) {\r\n        ctx.print(ast, `(`);\r\n        ast.condition.visitExpression(this, ctx);\r\n        ctx.print(ast, '? ');\r\n        ast.trueCase.visitExpression(this, ctx);\r\n        ctx.print(ast, ': '); /** @type {?} */\r\n        ((ast.falseCase)).visitExpression(this, ctx);\r\n        ctx.print(ast, `)`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitNotExpr(ast, ctx) {\r\n        ctx.print(ast, '!');\r\n        ast.condition.visitExpression(this, ctx);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitAssertNotNullExpr(ast, ctx) {\r\n        ast.condition.visitExpression(this, ctx);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitBinaryOperatorExpr(ast, ctx) {\r\n        let /** @type {?} */ opStr;\r\n        switch (ast.operator) {\r\n            case BinaryOperator.Equals:\r\n                opStr = '==';\r\n                break;\r\n            case BinaryOperator.Identical:\r\n                opStr = '===';\r\n                break;\r\n            case BinaryOperator.NotEquals:\r\n                opStr = '!=';\r\n                break;\r\n            case BinaryOperator.NotIdentical:\r\n                opStr = '!==';\r\n                break;\r\n            case BinaryOperator.And:\r\n                opStr = '&&';\r\n                break;\r\n            case BinaryOperator.Or:\r\n                opStr = '||';\r\n                break;\r\n            case BinaryOperator.Plus:\r\n                opStr = '+';\r\n                break;\r\n            case BinaryOperator.Minus:\r\n                opStr = '-';\r\n                break;\r\n            case BinaryOperator.Divide:\r\n                opStr = '/';\r\n                break;\r\n            case BinaryOperator.Multiply:\r\n                opStr = '*';\r\n                break;\r\n            case BinaryOperator.Modulo:\r\n                opStr = '%';\r\n                break;\r\n            case BinaryOperator.Lower:\r\n                opStr = '<';\r\n                break;\r\n            case BinaryOperator.LowerEquals:\r\n                opStr = '<=';\r\n                break;\r\n            case BinaryOperator.Bigger:\r\n                opStr = '>';\r\n                break;\r\n            case BinaryOperator.BiggerEquals:\r\n                opStr = '>=';\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown operator ${ast.operator}`);\r\n        }\r\n        ctx.print(ast, `(`);\r\n        ast.lhs.visitExpression(this, ctx);\r\n        ctx.print(ast, ` ${opStr} `);\r\n        ast.rhs.visitExpression(this, ctx);\r\n        ctx.print(ast, `)`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitReadPropExpr(ast, ctx) {\r\n        ast.receiver.visitExpression(this, ctx);\r\n        ctx.print(ast, `.`);\r\n        ctx.print(ast, ast.name);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitReadKeyExpr(ast, ctx) {\r\n        ast.receiver.visitExpression(this, ctx);\r\n        ctx.print(ast, `[`);\r\n        ast.index.visitExpression(this, ctx);\r\n        ctx.print(ast, `]`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitLiteralArrayExpr(ast, ctx) {\r\n        ctx.print(ast, `[`);\r\n        this.visitAllExpressions(ast.entries, ctx, ',');\r\n        ctx.print(ast, `]`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitLiteralMapExpr(ast, ctx) {\r\n        ctx.print(ast, `{`);\r\n        this.visitAllObjects(entry => {\r\n            ctx.print(ast, `${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}:`);\r\n            entry.value.visitExpression(this, ctx);\r\n        }, ast.entries, ctx, ',');\r\n        ctx.print(ast, `}`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitCommaExpr(ast, ctx) {\r\n        ctx.print(ast, '(');\r\n        this.visitAllExpressions(ast.parts, ctx, ',');\r\n        ctx.print(ast, ')');\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} expressions\r\n     * @param {?} ctx\r\n     * @param {?} separator\r\n     * @return {?}\r\n     */\r\n    visitAllExpressions(expressions, ctx, separator) {\r\n        this.visitAllObjects(expr => expr.visitExpression(this, ctx), expressions, ctx, separator);\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} handler\r\n     * @param {?} expressions\r\n     * @param {?} ctx\r\n     * @param {?} separator\r\n     * @return {?}\r\n     */\r\n    visitAllObjects(handler, expressions, ctx, separator) {\r\n        let /** @type {?} */ incrementedIndent = false;\r\n        for (let /** @type {?} */ i = 0; i < expressions.length; i++) {\r\n            if (i > 0) {\r\n                if (ctx.lineLength() > 80) {\r\n                    ctx.print(null, separator, true);\r\n                    if (!incrementedIndent) {\r\n                        // continuation are marked with double indent.\r\n                        ctx.incIndent();\r\n                        ctx.incIndent();\r\n                        incrementedIndent = true;\r\n                    }\r\n                }\r\n                else {\r\n                    ctx.print(null, separator, false);\r\n                }\r\n            }\r\n            handler(expressions[i]);\r\n        }\r\n        if (incrementedIndent) {\r\n            // continuation are marked with double indent.\r\n            ctx.decIndent();\r\n            ctx.decIndent();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} statements\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitAllStatements(statements, ctx) {\r\n        statements.forEach((stmt) => stmt.visitStatement(this, ctx));\r\n    }\r\n}\r\n/**\r\n * @param {?} input\r\n * @param {?} escapeDollar\r\n * @param {?=} alwaysQuote\r\n * @return {?}\r\n */\r\nfunction escapeIdentifier(input, escapeDollar, alwaysQuote = true) {\r\n    if (input == null) {\r\n        return null;\r\n    }\r\n    const /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match) => {\r\n        if (match[0] == '$') {\r\n            return escapeDollar ? '\\\\$' : '$';\r\n        }\r\n        else if (match[0] == '\\n') {\r\n            return '\\\\n';\r\n        }\r\n        else if (match[0] == '\\r') {\r\n            return '\\\\r';\r\n        }\r\n        else {\r\n            return `\\\\${match[0]}`;\r\n        }\r\n    });\r\n    const /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\r\n    return requiresQuotes ? `'${body}'` : body;\r\n}\r\n/**\r\n * @param {?} count\r\n * @return {?}\r\n */\r\nfunction _createIndent(count) {\r\n    let /** @type {?} */ res = '';\r\n    for (let /** @type {?} */ i = 0; i < count; i++) {\r\n        res += _INDENT_WITH;\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} ast\r\n * @return {?}\r\n */\r\nfunction debugOutputAstAsTypeScript(ast) {\r\n    const /** @type {?} */ converter = new _TsEmitterVisitor();\r\n    const /** @type {?} */ ctx = EmitterVisitorContext.createRoot();\r\n    const /** @type {?} */ asts = Array.isArray(ast) ? ast : [ast];\r\n    asts.forEach((ast) => {\r\n        if (ast instanceof Statement) {\r\n            ast.visitStatement(converter, ctx);\r\n        }\r\n        else if (ast instanceof Expression) {\r\n            ast.visitExpression(converter, ctx);\r\n        }\r\n        else if (ast instanceof Type$1) {\r\n            ast.visitType(converter, ctx);\r\n        }\r\n        else {\r\n            throw new Error(`Don't know how to print debug info for ${ast}`);\r\n        }\r\n    });\r\n    return ctx.toSource();\r\n}\r\nclass TypeScriptEmitter {\r\n    /**\r\n     * @param {?} genFilePath\r\n     * @param {?} stmts\r\n     * @param {?=} preamble\r\n     * @param {?=} emitSourceMaps\r\n     * @param {?=} referenceFilter\r\n     * @return {?}\r\n     */\r\n    emitStatementsAndContext(genFilePath, stmts, preamble = '', emitSourceMaps = true, referenceFilter) {\r\n        const /** @type {?} */ converter = new _TsEmitterVisitor(referenceFilter);\r\n        const /** @type {?} */ ctx = EmitterVisitorContext.createRoot();\r\n        converter.visitAllStatements(stmts, ctx);\r\n        const /** @type {?} */ preambleLines = preamble ? preamble.split('\\n') : [];\r\n        converter.reexports.forEach((reexports, exportedModuleName) => {\r\n            const /** @type {?} */ reexportsCode = reexports.map(reexport => `${reexport.name} as ${reexport.as}`).join(',');\r\n            preambleLines.push(`export {${reexportsCode}} from '${exportedModuleName}';`);\r\n        });\r\n        converter.importsWithPrefixes.forEach((prefix, importedModuleName) => {\r\n            // Note: can't write the real word for import as it screws up system.js auto detection...\r\n            preambleLines.push(`imp` +\r\n                `ort * as ${prefix} from '${importedModuleName}';`);\r\n        });\r\n        const /** @type {?} */ sm = emitSourceMaps ?\r\n            ctx.toSourceMapGenerator(genFilePath, preambleLines.length).toJsComment() :\r\n            '';\r\n        const /** @type {?} */ lines = [...preambleLines, ctx.toSource(), sm];\r\n        if (sm) {\r\n            // always add a newline at the end, as some tools have bugs without it.\r\n            lines.push('');\r\n        }\r\n        ctx.setPreambleLineCount(preambleLines.length);\r\n        return { sourceText: lines.join('\\n'), context: ctx };\r\n    }\r\n    /**\r\n     * @param {?} genFilePath\r\n     * @param {?} stmts\r\n     * @param {?=} preamble\r\n     * @return {?}\r\n     */\r\n    emitStatements(genFilePath, stmts, preamble = '') {\r\n        return this.emitStatementsAndContext(genFilePath, stmts, preamble).sourceText;\r\n    }\r\n}\r\nclass _TsEmitterVisitor extends AbstractEmitterVisitor {\r\n    /**\r\n     * @param {?=} referenceFilter\r\n     */\r\n    constructor(referenceFilter) {\r\n        super(false);\r\n        this.referenceFilter = referenceFilter;\r\n        this.typeExpression = 0;\r\n        this.importsWithPrefixes = new Map();\r\n        this.reexports = new Map();\r\n    }\r\n    /**\r\n     * @param {?} t\r\n     * @param {?} ctx\r\n     * @param {?=} defaultType\r\n     * @return {?}\r\n     */\r\n    visitType(t, ctx, defaultType = 'any') {\r\n        if (t) {\r\n            this.typeExpression++;\r\n            t.visitType(this, ctx);\r\n            this.typeExpression--;\r\n        }\r\n        else {\r\n            ctx.print(null, defaultType);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitLiteralExpr(ast, ctx) {\r\n        const /** @type {?} */ value = ast.value;\r\n        if (value == null && ast.type != INFERRED_TYPE) {\r\n            ctx.print(ast, `(${value} as any)`);\r\n            return null;\r\n        }\r\n        return super.visitLiteralExpr(ast, ctx);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitLiteralArrayExpr(ast, ctx) {\r\n        if (ast.entries.length === 0) {\r\n            ctx.print(ast, '(');\r\n        }\r\n        const /** @type {?} */ result = super.visitLiteralArrayExpr(ast, ctx);\r\n        if (ast.entries.length === 0) {\r\n            ctx.print(ast, ' as any[])');\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitExternalExpr(ast, ctx) {\r\n        this._visitIdentifier(ast.value, ast.typeParams, ctx);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitAssertNotNullExpr(ast, ctx) {\r\n        const /** @type {?} */ result = super.visitAssertNotNullExpr(ast, ctx);\r\n        ctx.print(ast, '!');\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareVarStmt(stmt, ctx) {\r\n        if (stmt.hasModifier(StmtModifier.Exported) && stmt.value instanceof ExternalExpr &&\r\n            !stmt.type) {\r\n            // check for a reexport\r\n            const { name, moduleName } = stmt.value.value;\r\n            if (moduleName) {\r\n                let /** @type {?} */ reexports = this.reexports.get(moduleName);\r\n                if (!reexports) {\r\n                    reexports = [];\r\n                    this.reexports.set(moduleName, reexports);\r\n                }\r\n                reexports.push({ name: /** @type {?} */ ((name)), as: stmt.name });\r\n                return null;\r\n            }\r\n        }\r\n        if (stmt.hasModifier(StmtModifier.Exported)) {\r\n            ctx.print(stmt, `export `);\r\n        }\r\n        if (stmt.hasModifier(StmtModifier.Final)) {\r\n            ctx.print(stmt, `const`);\r\n        }\r\n        else {\r\n            ctx.print(stmt, `var`);\r\n        }\r\n        ctx.print(stmt, ` ${stmt.name}`);\r\n        this._printColonType(stmt.type, ctx);\r\n        ctx.print(stmt, ` = `);\r\n        stmt.value.visitExpression(this, ctx);\r\n        ctx.println(stmt, `;`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitCastExpr(ast, ctx) {\r\n        ctx.print(ast, `(<`); /** @type {?} */\r\n        ((ast.type)).visitType(this, ctx);\r\n        ctx.print(ast, `>`);\r\n        ast.value.visitExpression(this, ctx);\r\n        ctx.print(ast, `)`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitInstantiateExpr(ast, ctx) {\r\n        ctx.print(ast, `new `);\r\n        this.typeExpression++;\r\n        ast.classExpr.visitExpression(this, ctx);\r\n        this.typeExpression--;\r\n        ctx.print(ast, `(`);\r\n        this.visitAllExpressions(ast.args, ctx, ',');\r\n        ctx.print(ast, `)`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareClassStmt(stmt, ctx) {\r\n        ctx.pushClass(stmt);\r\n        if (stmt.hasModifier(StmtModifier.Exported)) {\r\n            ctx.print(stmt, `export `);\r\n        }\r\n        ctx.print(stmt, `class ${stmt.name}`);\r\n        if (stmt.parent != null) {\r\n            ctx.print(stmt, ` extends `);\r\n            this.typeExpression++;\r\n            stmt.parent.visitExpression(this, ctx);\r\n            this.typeExpression--;\r\n        }\r\n        ctx.println(stmt, ` {`);\r\n        ctx.incIndent();\r\n        stmt.fields.forEach((field) => this._visitClassField(field, ctx));\r\n        if (stmt.constructorMethod != null) {\r\n            this._visitClassConstructor(stmt, ctx);\r\n        }\r\n        stmt.getters.forEach((getter) => this._visitClassGetter(getter, ctx));\r\n        stmt.methods.forEach((method) => this._visitClassMethod(method, ctx));\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `}`);\r\n        ctx.popClass();\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} field\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _visitClassField(field, ctx) {\r\n        if (field.hasModifier(StmtModifier.Private)) {\r\n            // comment out as a workaround for #10967\r\n            ctx.print(null, `/*private*/ `);\r\n        }\r\n        ctx.print(null, field.name);\r\n        this._printColonType(field.type, ctx);\r\n        ctx.println(null, `;`);\r\n    }\r\n    /**\r\n     * @param {?} getter\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _visitClassGetter(getter, ctx) {\r\n        if (getter.hasModifier(StmtModifier.Private)) {\r\n            ctx.print(null, `private `);\r\n        }\r\n        ctx.print(null, `get ${getter.name}()`);\r\n        this._printColonType(getter.type, ctx);\r\n        ctx.println(null, ` {`);\r\n        ctx.incIndent();\r\n        this.visitAllStatements(getter.body, ctx);\r\n        ctx.decIndent();\r\n        ctx.println(null, `}`);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _visitClassConstructor(stmt, ctx) {\r\n        ctx.print(stmt, `constructor(`);\r\n        this._visitParams(stmt.constructorMethod.params, ctx);\r\n        ctx.println(stmt, `) {`);\r\n        ctx.incIndent();\r\n        this.visitAllStatements(stmt.constructorMethod.body, ctx);\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `}`);\r\n    }\r\n    /**\r\n     * @param {?} method\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _visitClassMethod(method, ctx) {\r\n        if (method.hasModifier(StmtModifier.Private)) {\r\n            ctx.print(null, `private `);\r\n        }\r\n        ctx.print(null, `${method.name}(`);\r\n        this._visitParams(method.params, ctx);\r\n        ctx.print(null, `)`);\r\n        this._printColonType(method.type, ctx, 'void');\r\n        ctx.println(null, ` {`);\r\n        ctx.incIndent();\r\n        this.visitAllStatements(method.body, ctx);\r\n        ctx.decIndent();\r\n        ctx.println(null, `}`);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitFunctionExpr(ast, ctx) {\r\n        ctx.print(ast, `(`);\r\n        this._visitParams(ast.params, ctx);\r\n        ctx.print(ast, `)`);\r\n        this._printColonType(ast.type, ctx, 'void');\r\n        ctx.println(ast, ` => {`);\r\n        ctx.incIndent();\r\n        this.visitAllStatements(ast.statements, ctx);\r\n        ctx.decIndent();\r\n        ctx.print(ast, `}`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareFunctionStmt(stmt, ctx) {\r\n        if (stmt.hasModifier(StmtModifier.Exported)) {\r\n            ctx.print(stmt, `export `);\r\n        }\r\n        ctx.print(stmt, `function ${stmt.name}(`);\r\n        this._visitParams(stmt.params, ctx);\r\n        ctx.print(stmt, `)`);\r\n        this._printColonType(stmt.type, ctx, 'void');\r\n        ctx.println(stmt, ` {`);\r\n        ctx.incIndent();\r\n        this.visitAllStatements(stmt.statements, ctx);\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `}`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitTryCatchStmt(stmt, ctx) {\r\n        ctx.println(stmt, `try {`);\r\n        ctx.incIndent();\r\n        this.visitAllStatements(stmt.bodyStmts, ctx);\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `} catch (${CATCH_ERROR_VAR$1.name}) {`);\r\n        ctx.incIndent();\r\n        const /** @type {?} */ catchStmts = [/** @type {?} */ (CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack', null)).toDeclStmt(null, [\r\n                StmtModifier.Final\r\n            ]))].concat(stmt.catchStmts);\r\n        this.visitAllStatements(catchStmts, ctx);\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `}`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitBuiltintType(type, ctx) {\r\n        let /** @type {?} */ typeStr;\r\n        switch (type.name) {\r\n            case BuiltinTypeName.Bool:\r\n                typeStr = 'boolean';\r\n                break;\r\n            case BuiltinTypeName.Dynamic:\r\n                typeStr = 'any';\r\n                break;\r\n            case BuiltinTypeName.Function:\r\n                typeStr = 'Function';\r\n                break;\r\n            case BuiltinTypeName.Number:\r\n                typeStr = 'number';\r\n                break;\r\n            case BuiltinTypeName.Int:\r\n                typeStr = 'number';\r\n                break;\r\n            case BuiltinTypeName.String:\r\n                typeStr = 'string';\r\n                break;\r\n            default:\r\n                throw new Error(`Unsupported builtin type ${type.name}`);\r\n        }\r\n        ctx.print(null, typeStr);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitExpressionType(ast, ctx) {\r\n        ast.value.visitExpression(this, ctx);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitArrayType(type, ctx) {\r\n        this.visitType(type.of, ctx);\r\n        ctx.print(null, `[]`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitMapType(type, ctx) {\r\n        ctx.print(null, `{[key: string]:`);\r\n        this.visitType(type.valueType, ctx);\r\n        ctx.print(null, `}`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} method\r\n     * @return {?}\r\n     */\r\n    getBuiltinMethodName(method) {\r\n        let /** @type {?} */ name;\r\n        switch (method) {\r\n            case BuiltinMethod.ConcatArray:\r\n                name = 'concat';\r\n                break;\r\n            case BuiltinMethod.SubscribeObservable:\r\n                name = 'subscribe';\r\n                break;\r\n            case BuiltinMethod.Bind:\r\n                name = 'bind';\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown builtin method: ${method}`);\r\n        }\r\n        return name;\r\n    }\r\n    /**\r\n     * @param {?} params\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _visitParams(params, ctx) {\r\n        this.visitAllObjects(param => {\r\n            ctx.print(null, param.name);\r\n            this._printColonType(param.type, ctx);\r\n        }, params, ctx, ',');\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} typeParams\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _visitIdentifier(value, typeParams, ctx) {\r\n        const { name, moduleName } = value;\r\n        if (this.referenceFilter && this.referenceFilter(value)) {\r\n            ctx.print(null, '(null as any)');\r\n            return;\r\n        }\r\n        if (moduleName) {\r\n            let /** @type {?} */ prefix = this.importsWithPrefixes.get(moduleName);\r\n            if (prefix == null) {\r\n                prefix = `i${this.importsWithPrefixes.size}`;\r\n                this.importsWithPrefixes.set(moduleName, prefix);\r\n            }\r\n            ctx.print(null, `${prefix}.`);\r\n        }\r\n        ctx.print(null, /** @type {?} */ ((name)));\r\n        if (this.typeExpression > 0) {\r\n            // If we are in a type expression that refers to a generic type then supply\r\n            // the required type parameters. If there were not enough type parameters\r\n            // supplied, supply any as the type. Outside a type expression the reference\r\n            // should not supply type parameters and be treated as a simple value reference\r\n            // to the constructor function itself.\r\n            const /** @type {?} */ suppliedParameters = typeParams || [];\r\n            if (suppliedParameters.length > 0) {\r\n                ctx.print(null, `<`);\r\n                this.visitAllObjects(type => type.visitType(this, ctx), /** @type {?} */ ((typeParams)), ctx, ',');\r\n                ctx.print(null, `>`);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} ctx\r\n     * @param {?=} defaultType\r\n     * @return {?}\r\n     */\r\n    _printColonType(type, ctx, defaultType) {\r\n        if (type !== INFERRED_TYPE) {\r\n            ctx.print(null, ':');\r\n            this.visitType(type, ctx, defaultType);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Resolve a `Type` for {\\@link Pipe}.\r\n *\r\n * This interface can be overridden by the application developer to create custom behavior.\r\n *\r\n * See {\\@link Compiler}\r\n */\r\nclass PipeResolver {\r\n    /**\r\n     * @param {?} _reflector\r\n     */\r\n    constructor(_reflector) {\r\n        this._reflector = _reflector;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    isPipe(type) {\r\n        const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\r\n        return typeMetadata && typeMetadata.some(createPipe.isTypeOf);\r\n    }\r\n    /**\r\n     * Return {\\@link Pipe} for a given `Type`.\r\n     * @param {?} type\r\n     * @param {?=} throwIfNotFound\r\n     * @return {?}\r\n     */\r\n    resolve(type, throwIfNotFound = true) {\r\n        const /** @type {?} */ metas = this._reflector.annotations(resolveForwardRef(type));\r\n        if (metas) {\r\n            const /** @type {?} */ annotation = findLast(metas, createPipe.isTypeOf);\r\n            if (annotation) {\r\n                return annotation;\r\n            }\r\n        }\r\n        if (throwIfNotFound) {\r\n            throw new Error(`No Pipe decorator found on ${stringify(type)}`);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'.\r\n */\r\nconst SECURITY_SCHEMA = {};\r\n/**\r\n * @param {?} ctx\r\n * @param {?} specs\r\n * @return {?}\r\n */\r\nfunction registerContext(ctx, specs) {\r\n    for (const /** @type {?} */ spec of specs)\r\n        SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\r\n}\r\n// Case is insignificant below, all element and attribute names are lower-cased for lookup.\r\nregisterContext(SecurityContext.HTML, [\r\n    'iframe|srcdoc',\r\n    '*|innerHTML',\r\n    '*|outerHTML',\r\n]);\r\nregisterContext(SecurityContext.STYLE, ['*|style']);\r\n// NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\r\nregisterContext(SecurityContext.URL, [\r\n    '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',\r\n    'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',\r\n    'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',\r\n    'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',\r\n]);\r\nregisterContext(SecurityContext.RESOURCE_URL, [\r\n    'applet|code',\r\n    'applet|codebase',\r\n    'base|href',\r\n    'embed|src',\r\n    'frame|src',\r\n    'head|profile',\r\n    'html|manifest',\r\n    'iframe|src',\r\n    'link|href',\r\n    'media|src',\r\n    'object|codebase',\r\n    'object|data',\r\n    'script|src',\r\n]);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass ElementSchemaRegistry {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst BOOLEAN = 'boolean';\r\nconst NUMBER = 'number';\r\nconst STRING = 'string';\r\nconst OBJECT = 'object';\r\n/**\r\n * This array represents the DOM schema. It encodes inheritance, properties, and events.\r\n *\r\n * ## Overview\r\n *\r\n * Each line represents one kind of element. The `element_inheritance` and properties are joined\r\n * using `element_inheritance|properties` syntax.\r\n *\r\n * ## Element Inheritance\r\n *\r\n * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\r\n * Here the individual elements are separated by `,` (commas). Every element in the list\r\n * has identical properties.\r\n *\r\n * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\r\n * specified then `\"\"` (blank) element is assumed.\r\n *\r\n * NOTE: The blank element inherits from root `[Element]` element, the super element of all\r\n * elements.\r\n *\r\n * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\r\n *\r\n * ## Properties\r\n *\r\n * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\r\n * by a special character designating its type:\r\n *\r\n * - (no prefix): property is a string.\r\n * - `*`: property represents an event.\r\n * - `!`: property is a boolean.\r\n * - `#`: property is a number.\r\n * - `%`: property is an object.\r\n *\r\n * ## Query\r\n *\r\n * The class creates an internal squas representation which allows to easily answer the query of\r\n * if a given property exist on a given element.\r\n *\r\n * NOTE: We don't yet support querying for types or events.\r\n * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\r\n *       see dom_element_schema_registry_spec.ts\r\n */\r\nconst SCHEMA = [\r\n    '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +\r\n        ',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored',\r\n    '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\r\n    'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\r\n    'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume',\r\n    ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',\r\n    ':svg:graphics^:svg:|',\r\n    ':svg:animation^:svg:|*begin,*end,*repeat',\r\n    ':svg:geometry^:svg:|',\r\n    ':svg:componentTransferFunction^:svg:|',\r\n    ':svg:gradient^:svg:|',\r\n    ':svg:textContent^:svg:graphics|',\r\n    ':svg:textPositioning^:svg:textContent|',\r\n    'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',\r\n    'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username',\r\n    'audio^media|',\r\n    'br^[HTMLElement]|clear',\r\n    'base^[HTMLElement]|href,target',\r\n    'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\r\n    'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\r\n    'canvas^[HTMLElement]|#height,#width',\r\n    'content^[HTMLElement]|select',\r\n    'dl^[HTMLElement]|!compact',\r\n    'datalist^[HTMLElement]|',\r\n    'details^[HTMLElement]|!open',\r\n    'dialog^[HTMLElement]|!open,returnValue',\r\n    'dir^[HTMLElement]|!compact',\r\n    'div^[HTMLElement]|align',\r\n    'embed^[HTMLElement]|align,height,name,src,type,width',\r\n    'fieldset^[HTMLElement]|!disabled,name',\r\n    'font^[HTMLElement]|color,face,size',\r\n    'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\r\n    'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\r\n    'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\r\n    'hr^[HTMLElement]|align,color,!noShade,size,width',\r\n    'head^[HTMLElement]|',\r\n    'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',\r\n    'html^[HTMLElement]|version',\r\n    'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\r\n    'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\r\n    'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\r\n    'li^[HTMLElement]|type,#value',\r\n    'label^[HTMLElement]|htmlFor',\r\n    'legend^[HTMLElement]|align',\r\n    'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type',\r\n    'map^[HTMLElement]|name',\r\n    'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\r\n    'menu^[HTMLElement]|!compact',\r\n    'meta^[HTMLElement]|content,httpEquiv,name,scheme',\r\n    'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',\r\n    'ins,del^[HTMLElement]|cite,dateTime',\r\n    'ol^[HTMLElement]|!compact,!reversed,#start,type',\r\n    'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\r\n    'optgroup^[HTMLElement]|!disabled,label',\r\n    'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',\r\n    'output^[HTMLElement]|defaultValue,%htmlFor,name,value',\r\n    'p^[HTMLElement]|align',\r\n    'param^[HTMLElement]|name,type,value,valueType',\r\n    'picture^[HTMLElement]|',\r\n    'pre^[HTMLElement]|#width',\r\n    'progress^[HTMLElement]|#max,#value',\r\n    'q,blockquote,cite^[HTMLElement]|',\r\n    'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',\r\n    'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\r\n    'shadow^[HTMLElement]|',\r\n    'slot^[HTMLElement]|name',\r\n    'source^[HTMLElement]|media,sizes,src,srcset,type',\r\n    'span^[HTMLElement]|',\r\n    'style^[HTMLElement]|!disabled,media,type',\r\n    'caption^[HTMLElement]|align',\r\n    'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\r\n    'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',\r\n    'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\r\n    'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',\r\n    'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',\r\n    'template^[HTMLElement]|',\r\n    'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\r\n    'title^[HTMLElement]|text',\r\n    'track^[HTMLElement]|!default,kind,label,src,srclang',\r\n    'ul^[HTMLElement]|!compact,type',\r\n    'unknown^[HTMLElement]|',\r\n    'video^media|#height,poster,#width',\r\n    ':svg:a^:svg:graphics|',\r\n    ':svg:animate^:svg:animation|',\r\n    ':svg:animateMotion^:svg:animation|',\r\n    ':svg:animateTransform^:svg:animation|',\r\n    ':svg:circle^:svg:geometry|',\r\n    ':svg:clipPath^:svg:graphics|',\r\n    ':svg:defs^:svg:graphics|',\r\n    ':svg:desc^:svg:|',\r\n    ':svg:discard^:svg:|',\r\n    ':svg:ellipse^:svg:geometry|',\r\n    ':svg:feBlend^:svg:|',\r\n    ':svg:feColorMatrix^:svg:|',\r\n    ':svg:feComponentTransfer^:svg:|',\r\n    ':svg:feComposite^:svg:|',\r\n    ':svg:feConvolveMatrix^:svg:|',\r\n    ':svg:feDiffuseLighting^:svg:|',\r\n    ':svg:feDisplacementMap^:svg:|',\r\n    ':svg:feDistantLight^:svg:|',\r\n    ':svg:feDropShadow^:svg:|',\r\n    ':svg:feFlood^:svg:|',\r\n    ':svg:feFuncA^:svg:componentTransferFunction|',\r\n    ':svg:feFuncB^:svg:componentTransferFunction|',\r\n    ':svg:feFuncG^:svg:componentTransferFunction|',\r\n    ':svg:feFuncR^:svg:componentTransferFunction|',\r\n    ':svg:feGaussianBlur^:svg:|',\r\n    ':svg:feImage^:svg:|',\r\n    ':svg:feMerge^:svg:|',\r\n    ':svg:feMergeNode^:svg:|',\r\n    ':svg:feMorphology^:svg:|',\r\n    ':svg:feOffset^:svg:|',\r\n    ':svg:fePointLight^:svg:|',\r\n    ':svg:feSpecularLighting^:svg:|',\r\n    ':svg:feSpotLight^:svg:|',\r\n    ':svg:feTile^:svg:|',\r\n    ':svg:feTurbulence^:svg:|',\r\n    ':svg:filter^:svg:|',\r\n    ':svg:foreignObject^:svg:graphics|',\r\n    ':svg:g^:svg:graphics|',\r\n    ':svg:image^:svg:graphics|',\r\n    ':svg:line^:svg:geometry|',\r\n    ':svg:linearGradient^:svg:gradient|',\r\n    ':svg:mpath^:svg:|',\r\n    ':svg:marker^:svg:|',\r\n    ':svg:mask^:svg:|',\r\n    ':svg:metadata^:svg:|',\r\n    ':svg:path^:svg:geometry|',\r\n    ':svg:pattern^:svg:|',\r\n    ':svg:polygon^:svg:geometry|',\r\n    ':svg:polyline^:svg:geometry|',\r\n    ':svg:radialGradient^:svg:gradient|',\r\n    ':svg:rect^:svg:geometry|',\r\n    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\r\n    ':svg:script^:svg:|type',\r\n    ':svg:set^:svg:animation|',\r\n    ':svg:stop^:svg:|',\r\n    ':svg:style^:svg:|!disabled,media,title,type',\r\n    ':svg:switch^:svg:graphics|',\r\n    ':svg:symbol^:svg:|',\r\n    ':svg:tspan^:svg:textPositioning|',\r\n    ':svg:text^:svg:textPositioning|',\r\n    ':svg:textPath^:svg:textContent|',\r\n    ':svg:title^:svg:|',\r\n    ':svg:use^:svg:graphics|',\r\n    ':svg:view^:svg:|#zoomAndPan',\r\n    'data^[HTMLElement]|value',\r\n    'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name',\r\n    'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',\r\n    'summary^[HTMLElement]|',\r\n    'time^[HTMLElement]|dateTime',\r\n    ':svg:cursor^:svg:|',\r\n];\r\nconst _ATTR_TO_PROP = {\r\n    'class': 'className',\r\n    'for': 'htmlFor',\r\n    'formaction': 'formAction',\r\n    'innerHtml': 'innerHTML',\r\n    'readonly': 'readOnly',\r\n    'tabindex': 'tabIndex',\r\n};\r\nclass DomElementSchemaRegistry extends ElementSchemaRegistry {\r\n    constructor() {\r\n        super();\r\n        this._schema = {};\r\n        SCHEMA.forEach(encodedType => {\r\n            const /** @type {?} */ type = {};\r\n            const [strType, strProperties] = encodedType.split('|');\r\n            const /** @type {?} */ properties = strProperties.split(',');\r\n            const [typeNames, superName] = strType.split('^');\r\n            typeNames.split(',').forEach(tag => this._schema[tag.toLowerCase()] = type);\r\n            const /** @type {?} */ superType = superName && this._schema[superName.toLowerCase()];\r\n            if (superType) {\r\n                Object.keys(superType).forEach((prop) => { type[prop] = superType[prop]; });\r\n            }\r\n            properties.forEach((property) => {\r\n                if (property.length > 0) {\r\n                    switch (property[0]) {\r\n                        case '*':\r\n                            // We don't yet support events.\r\n                            // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events\r\n                            // will\r\n                            // almost certainly introduce bad XSS vulnerabilities.\r\n                            // type[property.substring(1)] = EVENT;\r\n                            break;\r\n                        case '!':\r\n                            type[property.substring(1)] = BOOLEAN;\r\n                            break;\r\n                        case '#':\r\n                            type[property.substring(1)] = NUMBER;\r\n                            break;\r\n                        case '%':\r\n                            type[property.substring(1)] = OBJECT;\r\n                            break;\r\n                        default:\r\n                            type[property] = STRING;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} tagName\r\n     * @param {?} propName\r\n     * @param {?} schemaMetas\r\n     * @return {?}\r\n     */\r\n    hasProperty(tagName, propName, schemaMetas) {\r\n        if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {\r\n            return true;\r\n        }\r\n        if (tagName.indexOf('-') > -1) {\r\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\r\n                return false;\r\n            }\r\n            if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\r\n                // Can't tell now as we don't know which properties a custom element will get\r\n                // once it is instantiated\r\n                return true;\r\n            }\r\n        }\r\n        const /** @type {?} */ elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];\r\n        return !!elementProperties[propName];\r\n    }\r\n    /**\r\n     * @param {?} tagName\r\n     * @param {?} schemaMetas\r\n     * @return {?}\r\n     */\r\n    hasElement(tagName, schemaMetas) {\r\n        if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {\r\n            return true;\r\n        }\r\n        if (tagName.indexOf('-') > -1) {\r\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\r\n                return true;\r\n            }\r\n            if (schemaMetas.some((schema) => schema.name === CUSTOM_ELEMENTS_SCHEMA.name)) {\r\n                // Allow any custom elements\r\n                return true;\r\n            }\r\n        }\r\n        return !!this._schema[tagName.toLowerCase()];\r\n    }\r\n    /**\r\n     * securityContext returns the security context for the given property on the given DOM tag.\r\n     *\r\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\r\n     * possible to bind a value into a changing attribute or tag name.\r\n     *\r\n     * The filtering is white list based. All attributes in the schema above are assumed to have the\r\n     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known\r\n     * attack vectors are assigned their appropriate context.\r\n     * @param {?} tagName\r\n     * @param {?} propName\r\n     * @param {?} isAttribute\r\n     * @return {?}\r\n     */\r\n    securityContext(tagName, propName, isAttribute) {\r\n        if (isAttribute) {\r\n            // NB: For security purposes, use the mapped property name, not the attribute name.\r\n            propName = this.getMappedPropName(propName);\r\n        }\r\n        // Make sure comparisons are case insensitive, so that case differences between attribute and\r\n        // property names do not have a security impact.\r\n        tagName = tagName.toLowerCase();\r\n        propName = propName.toLowerCase();\r\n        let /** @type {?} */ ctx = SECURITY_SCHEMA[tagName + '|' + propName];\r\n        if (ctx) {\r\n            return ctx;\r\n        }\r\n        ctx = SECURITY_SCHEMA['*|' + propName];\r\n        return ctx ? ctx : SecurityContext.NONE;\r\n    }\r\n    /**\r\n     * @param {?} propName\r\n     * @return {?}\r\n     */\r\n    getMappedPropName(propName) { return _ATTR_TO_PROP[propName] || propName; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getDefaultComponentElementName() { return 'ng-component'; }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    validateProperty(name) {\r\n        if (name.toLowerCase().startsWith('on')) {\r\n            const /** @type {?} */ msg = `Binding to event property '${name}' is disallowed for security reasons, ` +\r\n                `please use (${name.slice(2)})=...` +\r\n                `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\r\n                ` current module.`;\r\n            return { error: true, msg: msg };\r\n        }\r\n        else {\r\n            return { error: false };\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    validateAttribute(name) {\r\n        if (name.toLowerCase().startsWith('on')) {\r\n            const /** @type {?} */ msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +\r\n                `please use (${name.slice(2)})=...`;\r\n            return { error: true, msg: msg };\r\n        }\r\n        else {\r\n            return { error: false };\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    allKnownElementNames() { return Object.keys(this._schema); }\r\n    /**\r\n     * @param {?} propName\r\n     * @return {?}\r\n     */\r\n    normalizeAnimationStyleProperty(propName) {\r\n        return dashCaseToCamelCase(propName);\r\n    }\r\n    /**\r\n     * @param {?} camelCaseProp\r\n     * @param {?} userProvidedProp\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\r\n    normalizeAnimationStyleValue(camelCaseProp, userProvidedProp, val) {\r\n        let /** @type {?} */ unit = '';\r\n        const /** @type {?} */ strVal = val.toString().trim();\r\n        let /** @type {?} */ errorMsg = /** @type {?} */ ((null));\r\n        if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {\r\n            if (typeof val === 'number') {\r\n                unit = 'px';\r\n            }\r\n            else {\r\n                const /** @type {?} */ valAndSuffixMatch = val.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\r\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\r\n                    errorMsg = `Please provide a CSS unit value for ${userProvidedProp}:${val}`;\r\n                }\r\n            }\r\n        }\r\n        return { error: errorMsg, value: strVal + unit };\r\n    }\r\n}\r\n/**\r\n * @param {?} prop\r\n * @return {?}\r\n */\r\nfunction _isPixelDimensionStyle(prop) {\r\n    switch (prop) {\r\n        case 'width':\r\n        case 'height':\r\n        case 'minWidth':\r\n        case 'minHeight':\r\n        case 'maxWidth':\r\n        case 'maxHeight':\r\n        case 'left':\r\n        case 'top':\r\n        case 'bottom':\r\n        case 'right':\r\n        case 'fontSize':\r\n        case 'outlineWidth':\r\n        case 'outlineOffset':\r\n        case 'paddingTop':\r\n        case 'paddingLeft':\r\n        case 'paddingBottom':\r\n        case 'paddingRight':\r\n        case 'marginTop':\r\n        case 'marginLeft':\r\n        case 'marginBottom':\r\n        case 'marginRight':\r\n        case 'borderRadius':\r\n        case 'borderWidth':\r\n        case 'borderTopWidth':\r\n        case 'borderLeftWidth':\r\n        case 'borderRightWidth':\r\n        case 'borderBottomWidth':\r\n        case 'textIndent':\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\r\n *\r\n * Please make sure to keep to edits in sync with the source file.\r\n *\r\n * Source:\r\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\r\n *\r\n * The original file level comment is reproduced below\r\n */\r\n/*\r\n  This is a limited shim for ShadowDOM css styling.\r\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\r\n\r\n  The intention here is to support only the styling features which can be\r\n  relatively simply implemented. The goal is to allow users to avoid the\r\n  most obvious pitfalls and do so without compromising performance significantly.\r\n  For ShadowDOM styling that's not covered here, a set of best practices\r\n  can be provided that should allow users to accomplish more complex styling.\r\n\r\n  The following is a list of specific ShadowDOM styling features and a brief\r\n  discussion of the approach used to shim.\r\n\r\n  Shimmed features:\r\n\r\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\r\n  element using the :host rule. To shim this feature, the :host styles are\r\n  reformatted and prefixed with a given scope name and promoted to a\r\n  document level stylesheet.\r\n  For example, given a scope name of .foo, a rule like this:\r\n\r\n    :host {\r\n        background: red;\r\n      }\r\n    }\r\n\r\n  becomes:\r\n\r\n    .foo {\r\n      background: red;\r\n    }\r\n\r\n  * encapsulation: Styles defined within ShadowDOM, apply only to\r\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\r\n  this feature.\r\n\r\n  By default, rules are prefixed with the host element tag name\r\n  as a descendant selector. This ensures styling does not leak out of the 'top'\r\n  of the element's ShadowDOM. For example,\r\n\r\n  div {\r\n      font-weight: bold;\r\n    }\r\n\r\n  becomes:\r\n\r\n  x-foo div {\r\n      font-weight: bold;\r\n    }\r\n\r\n  becomes:\r\n\r\n\r\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\r\n  selectors are scoped by adding an attribute selector suffix to each\r\n  simple selector that contains the host element tag name. Each element\r\n  in the element's ShadowDOM template is also given the scope attribute.\r\n  Thus, these rules match only elements that have the scope attribute.\r\n  For example, given a scope name of x-foo, a rule like this:\r\n\r\n    div {\r\n      font-weight: bold;\r\n    }\r\n\r\n  becomes:\r\n\r\n    div[x-foo] {\r\n      font-weight: bold;\r\n    }\r\n\r\n  Note that elements that are dynamically added to a scope must have the scope\r\n  selector added to them manually.\r\n\r\n  * upper/lower bound encapsulation: Styles which are defined outside a\r\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\r\n  inside a shadowRoot.\r\n\r\n  This styling behavior is not emulated. Some possible ways to do this that\r\n  were rejected due to complexity and/or performance concerns include: (1) reset\r\n  every possible property for every possible selector for a given scope name;\r\n  (2) re-implement css in javascript.\r\n\r\n  As an alternative, users should make sure to use selectors\r\n  specific to the scope in which they are working.\r\n\r\n  * ::distributed: This behavior is not emulated. It's often not necessary\r\n  to style the contents of a specific insertion point and instead, descendants\r\n  of the host element can be styled selectively. Users can also create an\r\n  extra node around an insertion point and style that node's contents\r\n  via descendent selectors. For example, with a shadowRoot like this:\r\n\r\n    <style>\r\n      ::content(div) {\r\n        background: red;\r\n      }\r\n    </style>\r\n    <content></content>\r\n\r\n  could become:\r\n\r\n    <style>\r\n      / *@polyfill .content-container div * /\r\n      ::content(div) {\r\n        background: red;\r\n      }\r\n    </style>\r\n    <div class=\"content-container\">\r\n      <content></content>\r\n    </div>\r\n\r\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\r\n  declaration. This is a directive to the styling shim to use the selector\r\n  in comments in lieu of the next selector when running under polyfill.\r\n*/\r\nclass ShadowCss {\r\n    constructor() {\r\n        this.strictStyling = true;\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @param {?} selector\r\n     * @param {?=} hostSelector\r\n     * @return {?}\r\n     */\r\n    shimCssText(cssText, selector, hostSelector = '') {\r\n        const /** @type {?} */ sourceMappingUrl = extractSourceMappingUrl(cssText);\r\n        cssText = stripComments(cssText);\r\n        cssText = this._insertDirectives(cssText);\r\n        return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @return {?}\r\n     */\r\n    _insertDirectives(cssText) {\r\n        cssText = this._insertPolyfillDirectivesInCssText(cssText);\r\n        return this._insertPolyfillRulesInCssText(cssText);\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @return {?}\r\n     */\r\n    _insertPolyfillDirectivesInCssText(cssText) {\r\n        // Difference with webcomponents.js: does not handle comments\r\n        return cssText.replace(_cssContentNextSelectorRe, function (...m) { return m[2] + '{'; });\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @return {?}\r\n     */\r\n    _insertPolyfillRulesInCssText(cssText) {\r\n        // Difference with webcomponents.js: does not handle comments\r\n        return cssText.replace(_cssContentRuleRe, (...m) => {\r\n            const /** @type {?} */ rule = m[0].replace(m[1], '').replace(m[2], '');\r\n            return m[4] + rule;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @param {?} scopeSelector\r\n     * @param {?} hostSelector\r\n     * @return {?}\r\n     */\r\n    _scopeCssText(cssText, scopeSelector, hostSelector) {\r\n        const /** @type {?} */ unscopedRules = this._extractUnscopedRulesFromCssText(cssText);\r\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\r\n        cssText = this._insertPolyfillHostInCssText(cssText);\r\n        cssText = this._convertColonHost(cssText);\r\n        cssText = this._convertColonHostContext(cssText);\r\n        cssText = this._convertShadowDOMSelectors(cssText);\r\n        if (scopeSelector) {\r\n            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\r\n        }\r\n        cssText = cssText + '\\n' + unscopedRules;\r\n        return cssText.trim();\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @return {?}\r\n     */\r\n    _extractUnscopedRulesFromCssText(cssText) {\r\n        // Difference with webcomponents.js: does not handle comments\r\n        let /** @type {?} */ r = '';\r\n        let /** @type {?} */ m;\r\n        _cssContentUnscopedRuleRe.lastIndex = 0;\r\n        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\r\n            const /** @type {?} */ rule = m[0].replace(m[2], '').replace(m[1], m[4]);\r\n            r += rule + '\\n\\n';\r\n        }\r\n        return r;\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @return {?}\r\n     */\r\n    _convertColonHost(cssText) {\r\n        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @return {?}\r\n     */\r\n    _convertColonHostContext(cssText) {\r\n        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @param {?} regExp\r\n     * @param {?} partReplacer\r\n     * @return {?}\r\n     */\r\n    _convertColonRule(cssText, regExp, partReplacer) {\r\n        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\r\n        return cssText.replace(regExp, function (...m) {\r\n            if (m[2]) {\r\n                const /** @type {?} */ parts = m[2].split(',');\r\n                const /** @type {?} */ r = [];\r\n                for (let /** @type {?} */ i = 0; i < parts.length; i++) {\r\n                    const /** @type {?} */ p = parts[i].trim();\r\n                    if (!p)\r\n                        break;\r\n                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\r\n                }\r\n                return r.join(',');\r\n            }\r\n            else {\r\n                return _polyfillHostNoCombinator + m[3];\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} host\r\n     * @param {?} part\r\n     * @param {?} suffix\r\n     * @return {?}\r\n     */\r\n    _colonHostContextPartReplacer(host, part, suffix) {\r\n        if (part.indexOf(_polyfillHost) > -1) {\r\n            return this._colonHostPartReplacer(host, part, suffix);\r\n        }\r\n        else {\r\n            return host + part + suffix + ', ' + part + ' ' + host + suffix;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} host\r\n     * @param {?} part\r\n     * @param {?} suffix\r\n     * @return {?}\r\n     */\r\n    _colonHostPartReplacer(host, part, suffix) {\r\n        return host + part.replace(_polyfillHost, '') + suffix;\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @return {?}\r\n     */\r\n    _convertShadowDOMSelectors(cssText) {\r\n        return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\r\n    }\r\n    /**\r\n     * @param {?} cssText\r\n     * @param {?} scopeSelector\r\n     * @param {?} hostSelector\r\n     * @return {?}\r\n     */\r\n    _scopeSelectors(cssText, scopeSelector, hostSelector) {\r\n        return processRules(cssText, (rule) => {\r\n            let /** @type {?} */ selector = rule.selector;\r\n            let /** @type {?} */ content = rule.content;\r\n            if (rule.selector[0] != '@') {\r\n                selector =\r\n                    this._scopeSelector(rule.selector, scopeSelector, hostSelector, this.strictStyling);\r\n            }\r\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\r\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n                content = this._scopeSelectors(rule.content, scopeSelector, hostSelector);\r\n            }\r\n            return new CssRule(selector, content);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} selector\r\n     * @param {?} scopeSelector\r\n     * @param {?} hostSelector\r\n     * @param {?} strict\r\n     * @return {?}\r\n     */\r\n    _scopeSelector(selector, scopeSelector, hostSelector, strict) {\r\n        return selector.split(',')\r\n            .map(part => part.trim().split(_shadowDeepSelectors))\r\n            .map((deepParts) => {\r\n            const [shallowPart, ...otherParts] = deepParts;\r\n            const /** @type {?} */ applyScope = (shallowPart) => {\r\n                if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {\r\n                    return strict ?\r\n                        this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :\r\n                        this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\r\n                }\r\n                else {\r\n                    return shallowPart;\r\n                }\r\n            };\r\n            return [applyScope(shallowPart), ...otherParts].join(' ');\r\n        })\r\n            .join(', ');\r\n    }\r\n    /**\r\n     * @param {?} selector\r\n     * @param {?} scopeSelector\r\n     * @return {?}\r\n     */\r\n    _selectorNeedsScoping(selector, scopeSelector) {\r\n        const /** @type {?} */ re = this._makeScopeMatcher(scopeSelector);\r\n        return !re.test(selector);\r\n    }\r\n    /**\r\n     * @param {?} scopeSelector\r\n     * @return {?}\r\n     */\r\n    _makeScopeMatcher(scopeSelector) {\r\n        const /** @type {?} */ lre = /\\[/g;\r\n        const /** @type {?} */ rre = /\\]/g;\r\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\r\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\r\n    }\r\n    /**\r\n     * @param {?} selector\r\n     * @param {?} scopeSelector\r\n     * @param {?} hostSelector\r\n     * @return {?}\r\n     */\r\n    _applySelectorScope(selector, scopeSelector, hostSelector) {\r\n        // Difference from webcomponents.js: scopeSelector could not be an array\r\n        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\r\n    }\r\n    /**\r\n     * @param {?} selector\r\n     * @param {?} scopeSelector\r\n     * @param {?} hostSelector\r\n     * @return {?}\r\n     */\r\n    _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\r\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\r\n        _polyfillHostRe.lastIndex = 0;\r\n        if (_polyfillHostRe.test(selector)) {\r\n            const /** @type {?} */ replaceBy = this.strictStyling ? `[${hostSelector}]` : scopeSelector;\r\n            return selector\r\n                .replace(_polyfillHostNoCombinatorRe, (hnc, selector) => {\r\n                return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\r\n                    return before + replaceBy + colon + after;\r\n                });\r\n            })\r\n                .replace(_polyfillHostRe, replaceBy + ' ');\r\n        }\r\n        return scopeSelector + ' ' + selector;\r\n    }\r\n    /**\r\n     * @param {?} selector\r\n     * @param {?} scopeSelector\r\n     * @param {?} hostSelector\r\n     * @return {?}\r\n     */\r\n    _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\r\n        const /** @type {?} */ isRe = /\\[is=([^\\]]*)\\]/g;\r\n        scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\r\n        const /** @type {?} */ attrName = '[' + scopeSelector + ']';\r\n        const /** @type {?} */ _scopeSelectorPart = (p) => {\r\n            let /** @type {?} */ scopedP = p.trim();\r\n            if (!scopedP) {\r\n                return '';\r\n            }\r\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\r\n                scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\r\n            }\r\n            else {\r\n                // remove :host since it should be unnecessary\r\n                const /** @type {?} */ t = p.replace(_polyfillHostRe, '');\r\n                if (t.length > 0) {\r\n                    const /** @type {?} */ matches = t.match(/([^:]*)(:*)(.*)/);\r\n                    if (matches) {\r\n                        scopedP = matches[1] + attrName + matches[2] + matches[3];\r\n                    }\r\n                }\r\n            }\r\n            return scopedP;\r\n        };\r\n        const /** @type {?} */ safeContent = new SafeSelector(selector);\r\n        selector = safeContent.content();\r\n        let /** @type {?} */ scopedSelector = '';\r\n        let /** @type {?} */ startIndex = 0;\r\n        let /** @type {?} */ res;\r\n        const /** @type {?} */ sep = /( |>|\\+|~(?!=))\\s*/g;\r\n        // If a selector appears before :host it should not be shimmed as it\r\n        // matches on ancestor elements and not on elements in the host's shadow\r\n        // `:host-context(div)` is transformed to\r\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\r\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\r\n        // Historically `component-tag:host` was matching the component so we also want to preserve\r\n        // this behavior to avoid breaking legacy apps (it should not match).\r\n        // The behavior should be:\r\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\r\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\r\n        //   `:host-context(tag)`)\r\n        const /** @type {?} */ hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\r\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\r\n        let /** @type {?} */ shouldScope = !hasHost;\r\n        while ((res = sep.exec(selector)) !== null) {\r\n            const /** @type {?} */ separator = res[1];\r\n            const /** @type {?} */ part = selector.slice(startIndex, res.index).trim();\r\n            shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n            const /** @type {?} */ scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\r\n            scopedSelector += `${scopedPart} ${separator} `;\r\n            startIndex = sep.lastIndex;\r\n        }\r\n        const /** @type {?} */ part = selector.substring(startIndex);\r\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\r\n        // replace the placeholders with their original values\r\n        return safeContent.restore(scopedSelector);\r\n    }\r\n    /**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    _insertPolyfillHostInCssText(selector) {\r\n        return selector.replace(_colonHostContextRe, _polyfillHostContext)\r\n            .replace(_colonHostRe, _polyfillHost);\r\n    }\r\n}\r\nclass SafeSelector {\r\n    /**\r\n     * @param {?} selector\r\n     */\r\n    constructor(selector) {\r\n        this.placeholders = [];\r\n        this.index = 0;\r\n        // Replaces attribute selectors with placeholders.\r\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\r\n        selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\r\n            const /** @type {?} */ replaceBy = `__ph-${this.index}__`;\r\n            this.placeholders.push(keep);\r\n            this.index++;\r\n            return replaceBy;\r\n        });\r\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\r\n        // WS and \"+\" would otherwise be interpreted as selector separators.\r\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\r\n            const /** @type {?} */ replaceBy = `__ph-${this.index}__`;\r\n            this.placeholders.push(exp);\r\n            this.index++;\r\n            return pseudo + replaceBy;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\r\n    restore(content) {\r\n        return content.replace(/__ph-(\\d+)__/g, (ph, index) => this.placeholders[+index]);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    content() { return this._content; }\r\n}\r\nconst _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\r\nconst _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\r\nconst _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\r\nconst _polyfillHost = '-shadowcsshost';\r\n// note: :host-context pre-processed to -shadowcsshostcontext.\r\nconst _polyfillHostContext = '-shadowcsscontext';\r\nconst _parenSuffix = ')(?:\\\\((' +\r\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\r\n    ')\\\\))?([^,{]*)';\r\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\r\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\r\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\r\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\r\nconst _shadowDOMSelectorsRe = [\r\n    /::shadow/g,\r\n    /::content/g,\r\n    /\\/shadow-deep\\//g,\r\n    /\\/shadow\\//g,\r\n];\r\n// The deep combinator is deprecated in the CSS spec\r\n// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\r\n// see https://github.com/angular/angular/pull/17677\r\nconst _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\r\nconst _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\r\nconst _polyfillHostRe = /-shadowcsshost/gim;\r\nconst _colonHostRe = /:host/gim;\r\nconst _colonHostContextRe = /:host-context/gim;\r\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\nfunction stripComments(input) {\r\n    return input.replace(_commentRe, '');\r\n}\r\n// all comments except inline source mapping\r\nconst _sourceMappingUrlRe = /\\/\\*\\s*#\\s*sourceMappingURL=[\\s\\S]+?\\*\\//;\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\nfunction extractSourceMappingUrl(input) {\r\n    const /** @type {?} */ matcher = input.match(_sourceMappingUrlRe);\r\n    return matcher ? matcher[0] : '';\r\n}\r\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\r\nconst _curlyRe = /([{}])/g;\r\nconst OPEN_CURLY = '{';\r\nconst CLOSE_CURLY = '}';\r\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\r\nclass CssRule {\r\n    /**\r\n     * @param {?} selector\r\n     * @param {?} content\r\n     */\r\n    constructor(selector, content) {\r\n        this.selector = selector;\r\n        this.content = content;\r\n    }\r\n}\r\n/**\r\n * @param {?} input\r\n * @param {?} ruleCallback\r\n * @return {?}\r\n */\r\nfunction processRules(input, ruleCallback) {\r\n    const /** @type {?} */ inputWithEscapedBlocks = escapeBlocks(input);\r\n    let /** @type {?} */ nextBlockIndex = 0;\r\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function (...m) {\r\n        const /** @type {?} */ selector = m[2];\r\n        let /** @type {?} */ content = '';\r\n        let /** @type {?} */ suffix = m[4];\r\n        let /** @type {?} */ contentPrefix = '';\r\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\r\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\r\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\r\n            contentPrefix = '{';\r\n        }\r\n        const /** @type {?} */ rule = ruleCallback(new CssRule(selector, content));\r\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\r\n    });\r\n}\r\nclass StringWithEscapedBlocks {\r\n    /**\r\n     * @param {?} escapedString\r\n     * @param {?} blocks\r\n     */\r\n    constructor(escapedString, blocks) {\r\n        this.escapedString = escapedString;\r\n        this.blocks = blocks;\r\n    }\r\n}\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\nfunction escapeBlocks(input) {\r\n    const /** @type {?} */ inputParts = input.split(_curlyRe);\r\n    const /** @type {?} */ resultParts = [];\r\n    const /** @type {?} */ escapedBlocks = [];\r\n    let /** @type {?} */ bracketCount = 0;\r\n    let /** @type {?} */ currentBlockParts = [];\r\n    for (let /** @type {?} */ partIndex = 0; partIndex < inputParts.length; partIndex++) {\r\n        const /** @type {?} */ part = inputParts[partIndex];\r\n        if (part == CLOSE_CURLY) {\r\n            bracketCount--;\r\n        }\r\n        if (bracketCount > 0) {\r\n            currentBlockParts.push(part);\r\n        }\r\n        else {\r\n            if (currentBlockParts.length > 0) {\r\n                escapedBlocks.push(currentBlockParts.join(''));\r\n                resultParts.push(BLOCK_PLACEHOLDER);\r\n                currentBlockParts = [];\r\n            }\r\n            resultParts.push(part);\r\n        }\r\n        if (part == OPEN_CURLY) {\r\n            bracketCount++;\r\n        }\r\n    }\r\n    if (currentBlockParts.length > 0) {\r\n        escapedBlocks.push(currentBlockParts.join(''));\r\n        resultParts.push(BLOCK_PLACEHOLDER);\r\n    }\r\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst COMPONENT_VARIABLE = '%COMP%';\r\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\r\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\r\nclass StylesCompileDependency {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} moduleUrl\r\n     * @param {?} setValue\r\n     */\r\n    constructor(name, moduleUrl, setValue) {\r\n        this.name = name;\r\n        this.moduleUrl = moduleUrl;\r\n        this.setValue = setValue;\r\n    }\r\n}\r\nclass CompiledStylesheet {\r\n    /**\r\n     * @param {?} outputCtx\r\n     * @param {?} stylesVar\r\n     * @param {?} dependencies\r\n     * @param {?} isShimmed\r\n     * @param {?} meta\r\n     */\r\n    constructor(outputCtx, stylesVar, dependencies, isShimmed, meta) {\r\n        this.outputCtx = outputCtx;\r\n        this.stylesVar = stylesVar;\r\n        this.dependencies = dependencies;\r\n        this.isShimmed = isShimmed;\r\n        this.meta = meta;\r\n    }\r\n}\r\nclass StyleCompiler {\r\n    /**\r\n     * @param {?} _urlResolver\r\n     */\r\n    constructor(_urlResolver) {\r\n        this._urlResolver = _urlResolver;\r\n        this._shadowCss = new ShadowCss();\r\n    }\r\n    /**\r\n     * @param {?} outputCtx\r\n     * @param {?} comp\r\n     * @return {?}\r\n     */\r\n    compileComponent(outputCtx, comp) {\r\n        const /** @type {?} */ template = /** @type {?} */ ((comp.template));\r\n        return this._compileStyles(outputCtx, comp, new CompileStylesheetMetadata({\r\n            styles: template.styles,\r\n            styleUrls: template.styleUrls,\r\n            moduleUrl: identifierModuleUrl(comp.type)\r\n        }), this.needsStyleShim(comp), true);\r\n    }\r\n    /**\r\n     * @param {?} outputCtx\r\n     * @param {?} comp\r\n     * @param {?} stylesheet\r\n     * @param {?=} shim\r\n     * @return {?}\r\n     */\r\n    compileStyles(outputCtx, comp, stylesheet, shim = this.needsStyleShim(comp)) {\r\n        return this._compileStyles(outputCtx, comp, stylesheet, shim, false);\r\n    }\r\n    /**\r\n     * @param {?} comp\r\n     * @return {?}\r\n     */\r\n    needsStyleShim(comp) {\r\n        return /** @type {?} */ ((comp.template)).encapsulation === ViewEncapsulation.Emulated;\r\n    }\r\n    /**\r\n     * @param {?} outputCtx\r\n     * @param {?} comp\r\n     * @param {?} stylesheet\r\n     * @param {?} shim\r\n     * @param {?} isComponentStylesheet\r\n     * @return {?}\r\n     */\r\n    _compileStyles(outputCtx, comp, stylesheet, shim, isComponentStylesheet) {\r\n        const /** @type {?} */ styleExpressions = stylesheet.styles.map(plainStyle => literal(this._shimIfNeeded(plainStyle, shim)));\r\n        const /** @type {?} */ dependencies = [];\r\n        stylesheet.styleUrls.forEach((styleUrl) => {\r\n            const /** @type {?} */ exprIndex = styleExpressions.length;\r\n            // Note: This placeholder will be filled later.\r\n            styleExpressions.push(/** @type {?} */ ((null)));\r\n            dependencies.push(new StylesCompileDependency(getStylesVarName(null), styleUrl, (value) => styleExpressions[exprIndex] = outputCtx.importExpr(value)));\r\n        });\r\n        // styles variable contains plain strings and arrays of other styles arrays (recursive),\r\n        // so we set its type to dynamic.\r\n        const /** @type {?} */ stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\r\n        const /** @type {?} */ stmt = variable(stylesVar)\r\n            .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))\r\n            .toDeclStmt(null, isComponentStylesheet ? [StmtModifier.Final] : [\r\n            StmtModifier.Final, StmtModifier.Exported\r\n        ]);\r\n        outputCtx.statements.push(stmt);\r\n        return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);\r\n    }\r\n    /**\r\n     * @param {?} style\r\n     * @param {?} shim\r\n     * @return {?}\r\n     */\r\n    _shimIfNeeded(style, shim) {\r\n        return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;\r\n    }\r\n}\r\n/**\r\n * @param {?} component\r\n * @return {?}\r\n */\r\nfunction getStylesVarName(component) {\r\n    let /** @type {?} */ result = `styles`;\r\n    if (component) {\r\n        result += `_${identifierName(component.type)}`;\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\r\nconst SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\r\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\r\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\r\nconst WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\r\nconst NO_WS_REGEXP = new RegExp(`[^${WS_CHARS}]`);\r\nconst WS_REPLACE_REGEXP = new RegExp(`[${WS_CHARS}]{2,}`, 'g');\r\n/**\r\n * @param {?} attrs\r\n * @return {?}\r\n */\r\nfunction hasPreserveWhitespacesAttr(attrs) {\r\n    return attrs.some((attr) => attr.name === PRESERVE_WS_ATTR_NAME);\r\n}\r\n/**\r\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\r\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\r\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\r\n * and later on replaced by a space. We are re-implementing the same idea here.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction replaceNgsp(value) {\r\n    // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\r\n    return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\r\n}\r\n/**\r\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\r\n * - consider spaces, tabs and new lines as whitespace characters;\r\n * - drop text nodes consisting of whitespace characters only;\r\n * - for all other text nodes replace consecutive whitespace characters with one space;\r\n * - convert &ngsp; pseudo-entity to a single space;\r\n *\r\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\r\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\r\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\r\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\r\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\r\n * and might be changed to \"on\" by default.\r\n */\r\nclass WhitespaceVisitor {\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(element, context) {\r\n        if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\r\n            // don't descent into elements where we need to preserve whitespaces\r\n            // but still visit all attributes to eliminate one used as a market to preserve WS\r\n            return new Element(element.name, visitAll(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\r\n        }\r\n        return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) {\r\n        return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) {\r\n        const /** @type {?} */ isNotBlank = text.value.match(NO_WS_REGEXP);\r\n        if (isNotBlank) {\r\n            return new Text(replaceNgsp(text.value).replace(WS_REPLACE_REGEXP, ' '), text.sourceSpan);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { return comment; }\r\n    /**\r\n     * @param {?} expansion\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(expansion, context) { return expansion; }\r\n    /**\r\n     * @param {?} expansionCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(expansionCase, context) { return expansionCase; }\r\n}\r\n/**\r\n * @param {?} htmlAstWithErrors\r\n * @return {?}\r\n */\r\nfunction removeWhitespaces(htmlAstWithErrors) {\r\n    return new ParseTreeResult(visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// http://cldr.unicode.org/index/cldr-spec/plural-rules\r\nconst PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];\r\n/**\r\n * Expands special forms into elements.\r\n *\r\n * For example,\r\n *\r\n * ```\r\n * { messages.length, plural,\r\n *   =0 {zero}\r\n *   =1 {one}\r\n *   other {more than one}\r\n * }\r\n * ```\r\n *\r\n * will be expanded into\r\n *\r\n * ```\r\n * <ng-container [ngPlural]=\"messages.length\">\r\n *   <ng-template ngPluralCase=\"=0\">zero</ng-template>\r\n *   <ng-template ngPluralCase=\"=1\">one</ng-template>\r\n *   <ng-template ngPluralCase=\"other\">more than one</ng-template>\r\n * </ng-container>\r\n * ```\r\n * @param {?} nodes\r\n * @return {?}\r\n */\r\nfunction expandNodes(nodes) {\r\n    const /** @type {?} */ expander = new _Expander();\r\n    return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);\r\n}\r\nclass ExpansionResult {\r\n    /**\r\n     * @param {?} nodes\r\n     * @param {?} expanded\r\n     * @param {?} errors\r\n     */\r\n    constructor(nodes, expanded, errors) {\r\n        this.nodes = nodes;\r\n        this.expanded = expanded;\r\n        this.errors = errors;\r\n    }\r\n}\r\nclass ExpansionError extends ParseError {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} errorMsg\r\n     */\r\n    constructor(span, errorMsg) { super(span, errorMsg); }\r\n}\r\n/**\r\n * Expand expansion forms (plural, select) to directives\r\n *\r\n * \\@internal\r\n */\r\nclass _Expander {\r\n    constructor() {\r\n        this.isExpanded = false;\r\n        this.errors = [];\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(element, context) {\r\n        return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) { return attribute; }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(text, context) { return text; }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { return comment; }\r\n    /**\r\n     * @param {?} icu\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(icu, context) {\r\n        this.isExpanded = true;\r\n        return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :\r\n            _expandDefaultForm(icu, this.errors);\r\n    }\r\n    /**\r\n     * @param {?} icuCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(icuCase, context) {\r\n        throw new Error('Should not be reached');\r\n    }\r\n}\r\n/**\r\n * @param {?} ast\r\n * @param {?} errors\r\n * @return {?}\r\n */\r\nfunction _expandPluralForm(ast, errors) {\r\n    const /** @type {?} */ children = ast.cases.map(c => {\r\n        if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\\d+$/)) {\r\n            errors.push(new ExpansionError(c.valueSourceSpan, `Plural cases should be \"=<number>\" or one of ${PLURAL_CASES.join(\", \")}`));\r\n        }\r\n        const /** @type {?} */ expansionResult = expandNodes(c.expression);\r\n        errors.push(...expansionResult.errors);\r\n        return new Element(`ng-template`, [new Attribute$1('ngPluralCase', `${c.value}`, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\r\n    });\r\n    const /** @type {?} */ switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);\r\n    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\r\n}\r\n/**\r\n * @param {?} ast\r\n * @param {?} errors\r\n * @return {?}\r\n */\r\nfunction _expandDefaultForm(ast, errors) {\r\n    const /** @type {?} */ children = ast.cases.map(c => {\r\n        const /** @type {?} */ expansionResult = expandNodes(c.expression);\r\n        errors.push(...expansionResult.errors);\r\n        if (c.value === 'other') {\r\n            // other is the default case when no values match\r\n            return new Element(`ng-template`, [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\r\n        }\r\n        return new Element(`ng-template`, [new Attribute$1('ngSwitchCase', `${c.value}`, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\r\n    });\r\n    const /** @type {?} */ switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);\r\n    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst PROPERTY_PARTS_SEPARATOR = '.';\r\nconst ATTRIBUTE_PREFIX = 'attr';\r\nconst CLASS_PREFIX = 'class';\r\nconst STYLE_PREFIX = 'style';\r\nconst ANIMATE_PROP_PREFIX = 'animate-';\r\n/** @enum {number} */\r\nconst BoundPropertyType = {\r\n    DEFAULT: 0,\r\n    LITERAL_ATTR: 1,\r\n    ANIMATION: 2,\r\n};\r\nBoundPropertyType[BoundPropertyType.DEFAULT] = \"DEFAULT\";\r\nBoundPropertyType[BoundPropertyType.LITERAL_ATTR] = \"LITERAL_ATTR\";\r\nBoundPropertyType[BoundPropertyType.ANIMATION] = \"ANIMATION\";\r\n/**\r\n * Represents a parsed property.\r\n */\r\nclass BoundProperty {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} expression\r\n     * @param {?} type\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(name, expression, type, sourceSpan) {\r\n        this.name = name;\r\n        this.expression = expression;\r\n        this.type = type;\r\n        this.sourceSpan = sourceSpan;\r\n        this.isLiteral = this.type === BoundPropertyType.LITERAL_ATTR;\r\n        this.isAnimation = this.type === BoundPropertyType.ANIMATION;\r\n    }\r\n}\r\n/**\r\n * Parses bindings in templates and in the directive host area.\r\n */\r\nclass BindingParser {\r\n    /**\r\n     * @param {?} _exprParser\r\n     * @param {?} _interpolationConfig\r\n     * @param {?} _schemaRegistry\r\n     * @param {?} pipes\r\n     * @param {?} _targetErrors\r\n     */\r\n    constructor(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {\r\n        this._exprParser = _exprParser;\r\n        this._interpolationConfig = _interpolationConfig;\r\n        this._schemaRegistry = _schemaRegistry;\r\n        this._targetErrors = _targetErrors;\r\n        this.pipesByName = new Map();\r\n        this._usedPipes = new Map();\r\n        pipes.forEach(pipe => this.pipesByName.set(pipe.name, pipe));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getUsedPipes() { return Array.from(this._usedPipes.values()); }\r\n    /**\r\n     * @param {?} dirMeta\r\n     * @param {?} elementSelector\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    createDirectiveHostPropertyAsts(dirMeta, elementSelector, sourceSpan) {\r\n        if (dirMeta.hostProperties) {\r\n            const /** @type {?} */ boundProps = [];\r\n            Object.keys(dirMeta.hostProperties).forEach(propName => {\r\n                const /** @type {?} */ expression = dirMeta.hostProperties[propName];\r\n                if (typeof expression === 'string') {\r\n                    this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps);\r\n                }\r\n                else {\r\n                    this._reportError(`Value of the host property binding \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\r\n                }\r\n            });\r\n            return boundProps.map((prop) => this.createElementPropertyAst(elementSelector, prop));\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} dirMeta\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    createDirectiveHostEventAsts(dirMeta, sourceSpan) {\r\n        if (dirMeta.hostListeners) {\r\n            const /** @type {?} */ targetEventAsts = [];\r\n            Object.keys(dirMeta.hostListeners).forEach(propName => {\r\n                const /** @type {?} */ expression = dirMeta.hostListeners[propName];\r\n                if (typeof expression === 'string') {\r\n                    this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts);\r\n                }\r\n                else {\r\n                    this._reportError(`Value of the host listener \"${propName}\" needs to be a string representing an expression but got \"${expression}\" (${typeof expression})`, sourceSpan);\r\n                }\r\n            });\r\n            return targetEventAsts;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    parseInterpolation(value, sourceSpan) {\r\n        const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\r\n        try {\r\n            const /** @type {?} */ ast = /** @type {?} */ ((this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig)));\r\n            if (ast)\r\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\r\n            this._checkPipes(ast, sourceSpan);\r\n            return ast;\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            this._reportError(`${e}`, sourceSpan);\r\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} prefixToken\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetMatchableAttrs\r\n     * @param {?} targetProps\r\n     * @param {?} targetVars\r\n     * @return {?}\r\n     */\r\n    parseInlineTemplateBinding(prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {\r\n        const /** @type {?} */ bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);\r\n        for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\r\n            const /** @type {?} */ binding = bindings[i];\r\n            if (binding.keyIsVar) {\r\n                targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));\r\n            }\r\n            else if (binding.expression) {\r\n                this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);\r\n            }\r\n            else {\r\n                targetMatchableAttrs.push([binding.key, '']);\r\n                this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} prefixToken\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    _parseTemplateBindings(prefixToken, value, sourceSpan) {\r\n        const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\r\n        try {\r\n            const /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);\r\n            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\r\n            bindingsResult.templateBindings.forEach((binding) => {\r\n                if (binding.expression) {\r\n                    this._checkPipes(binding.expression, sourceSpan);\r\n                }\r\n            });\r\n            bindingsResult.warnings.forEach((warning) => { this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });\r\n            return bindingsResult.templateBindings;\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            this._reportError(`${e}`, sourceSpan);\r\n            return [];\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetMatchableAttrs\r\n     * @param {?} targetProps\r\n     * @return {?}\r\n     */\r\n    parseLiteralAttr(name, value, sourceSpan, targetMatchableAttrs, targetProps) {\r\n        if (_isAnimationLabel(name)) {\r\n            name = name.substring(1);\r\n            if (value) {\r\n                this._reportError(`Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid.` +\r\n                    ` Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.`, sourceSpan, ParseErrorLevel.ERROR);\r\n            }\r\n            this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);\r\n        }\r\n        else {\r\n            targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} expression\r\n     * @param {?} isHost\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetMatchableAttrs\r\n     * @param {?} targetProps\r\n     * @return {?}\r\n     */\r\n    parsePropertyBinding(name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {\r\n        let /** @type {?} */ isAnimationProp = false;\r\n        if (name.startsWith(ANIMATE_PROP_PREFIX)) {\r\n            isAnimationProp = true;\r\n            name = name.substring(ANIMATE_PROP_PREFIX.length);\r\n        }\r\n        else if (_isAnimationLabel(name)) {\r\n            isAnimationProp = true;\r\n            name = name.substring(1);\r\n        }\r\n        if (isAnimationProp) {\r\n            this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);\r\n        }\r\n        else {\r\n            this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetMatchableAttrs\r\n     * @param {?} targetProps\r\n     * @return {?}\r\n     */\r\n    parsePropertyInterpolation(name, value, sourceSpan, targetMatchableAttrs, targetProps) {\r\n        const /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);\r\n        if (expr) {\r\n            this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} ast\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetMatchableAttrs\r\n     * @param {?} targetProps\r\n     * @return {?}\r\n     */\r\n    _parsePropertyAst(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {\r\n        targetMatchableAttrs.push([name, /** @type {?} */ ((ast.source))]);\r\n        targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} expression\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetMatchableAttrs\r\n     * @param {?} targetProps\r\n     * @return {?}\r\n     */\r\n    _parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps) {\r\n        // This will occur when a @trigger is not paired with an expression.\r\n        // For animations it is valid to not have an expression since */void\r\n        // states will be applied by angular when the element is attached/detached\r\n        const /** @type {?} */ ast = this._parseBinding(expression || 'undefined', false, sourceSpan);\r\n        targetMatchableAttrs.push([name, /** @type {?} */ ((ast.source))]);\r\n        targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} isHostBinding\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    _parseBinding(value, isHostBinding, sourceSpan) {\r\n        const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\r\n        try {\r\n            const /** @type {?} */ ast = isHostBinding ?\r\n                this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :\r\n                this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);\r\n            if (ast)\r\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\r\n            this._checkPipes(ast, sourceSpan);\r\n            return ast;\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            this._reportError(`${e}`, sourceSpan);\r\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} elementSelector\r\n     * @param {?} boundProp\r\n     * @return {?}\r\n     */\r\n    createElementPropertyAst(elementSelector, boundProp) {\r\n        if (boundProp.isAnimation) {\r\n            return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan);\r\n        }\r\n        let /** @type {?} */ unit = null;\r\n        let /** @type {?} */ bindingType = /** @type {?} */ ((undefined));\r\n        let /** @type {?} */ boundPropertyName = null;\r\n        const /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\r\n        let /** @type {?} */ securityContexts = /** @type {?} */ ((undefined));\r\n        // Check check for special cases (prefix style, attr, class)\r\n        if (parts.length > 1) {\r\n            if (parts[0] == ATTRIBUTE_PREFIX) {\r\n                boundPropertyName = parts[1];\r\n                this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\r\n                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);\r\n                const /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');\r\n                if (nsSeparatorIdx > -1) {\r\n                    const /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);\r\n                    const /** @type {?} */ name = boundPropertyName.substring(nsSeparatorIdx + 1);\r\n                    boundPropertyName = mergeNsAndName(ns, name);\r\n                }\r\n                bindingType = PropertyBindingType.Attribute;\r\n            }\r\n            else if (parts[0] == CLASS_PREFIX) {\r\n                boundPropertyName = parts[1];\r\n                bindingType = PropertyBindingType.Class;\r\n                securityContexts = [SecurityContext.NONE];\r\n            }\r\n            else if (parts[0] == STYLE_PREFIX) {\r\n                unit = parts.length > 2 ? parts[2] : null;\r\n                boundPropertyName = parts[1];\r\n                bindingType = PropertyBindingType.Style;\r\n                securityContexts = [SecurityContext.STYLE];\r\n            }\r\n        }\r\n        // If not a special case, use the full property name\r\n        if (boundPropertyName === null) {\r\n            boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);\r\n            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);\r\n            bindingType = PropertyBindingType.Property;\r\n            this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);\r\n        }\r\n        return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} expression\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetMatchableAttrs\r\n     * @param {?} targetEvents\r\n     * @return {?}\r\n     */\r\n    parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\r\n        if (_isAnimationLabel(name)) {\r\n            name = name.substr(1);\r\n            this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);\r\n        }\r\n        else {\r\n            this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} expression\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetEvents\r\n     * @return {?}\r\n     */\r\n    _parseAnimationEvent(name, expression, sourceSpan, targetEvents) {\r\n        const /** @type {?} */ matches = splitAtPeriod(name, [name, '']);\r\n        const /** @type {?} */ eventName = matches[0];\r\n        const /** @type {?} */ phase = matches[1].toLowerCase();\r\n        if (phase) {\r\n            switch (phase) {\r\n                case 'start':\r\n                case 'done':\r\n                    const /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\r\n                    targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));\r\n                    break;\r\n                default:\r\n                    this._reportError(`The provided animation output phase value \"${phase}\" for \"@${eventName}\" is not supported (use start or done)`, sourceSpan);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            this._reportError(`The animation trigger output event (@${eventName}) is missing its phase value name (start or done are currently supported)`, sourceSpan);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} expression\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetMatchableAttrs\r\n     * @param {?} targetEvents\r\n     * @return {?}\r\n     */\r\n    _parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\r\n        // long format: 'target: eventName'\r\n        const [target, eventName] = splitAtColon(name, [/** @type {?} */ ((null)), name]);\r\n        const /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\r\n        targetMatchableAttrs.push([/** @type {?} */ ((name)), /** @type {?} */ ((ast.source))]);\r\n        targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));\r\n        // Don't detect directives for event names for now,\r\n        // so don't add the event name to the matchableAttrs\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    _parseAction(value, sourceSpan) {\r\n        const /** @type {?} */ sourceInfo = sourceSpan.start.toString();\r\n        try {\r\n            const /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);\r\n            if (ast) {\r\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\r\n            }\r\n            if (!ast || ast.ast instanceof EmptyExpr) {\r\n                this._reportError(`Empty expressions are not allowed`, sourceSpan);\r\n                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\r\n            }\r\n            this._checkPipes(ast, sourceSpan);\r\n            return ast;\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            this._reportError(`${e}`, sourceSpan);\r\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} sourceSpan\r\n     * @param {?=} level\r\n     * @return {?}\r\n     */\r\n    _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\r\n        this._targetErrors.push(new ParseError(sourceSpan, message, level));\r\n    }\r\n    /**\r\n     * @param {?} errors\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    _reportExpressionParserErrors(errors, sourceSpan) {\r\n        for (const /** @type {?} */ error of errors) {\r\n            this._reportError(error.message, sourceSpan);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    _checkPipes(ast, sourceSpan) {\r\n        if (ast) {\r\n            const /** @type {?} */ collector = new PipeCollector();\r\n            ast.visit(collector);\r\n            collector.pipes.forEach((ast, pipeName) => {\r\n                const /** @type {?} */ pipeMeta = this.pipesByName.get(pipeName);\r\n                if (!pipeMeta) {\r\n                    this._reportError(`The pipe '${pipeName}' could not be found`, new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));\r\n                }\r\n                else {\r\n                    this._usedPipes.set(pipeName, pipeMeta);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} propName the name of the property / attribute\r\n     * @param {?} sourceSpan\r\n     * @param {?} isAttr true when binding to an attribute\r\n     * @return {?}\r\n     */\r\n    _validatePropertyOrAttributeName(propName, sourceSpan, isAttr) {\r\n        const /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :\r\n            this._schemaRegistry.validateProperty(propName);\r\n        if (report.error) {\r\n            this._reportError(/** @type {?} */ ((report.msg)), sourceSpan, ParseErrorLevel.ERROR);\r\n        }\r\n    }\r\n}\r\nclass PipeCollector extends RecursiveAstVisitor {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.pipes = new Map();\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPipe(ast, context) {\r\n        this.pipes.set(ast.name, ast);\r\n        ast.exp.visit(this);\r\n        this.visitAll(ast.args, context);\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction _isAnimationLabel(name) {\r\n    return name[0] == '@';\r\n}\r\n/**\r\n * @param {?} registry\r\n * @param {?} selector\r\n * @param {?} propName\r\n * @param {?} isAttribute\r\n * @return {?}\r\n */\r\nfunction calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {\r\n    const /** @type {?} */ ctxs = [];\r\n    CssSelector.parse(selector).forEach((selector) => {\r\n        const /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\r\n        const /** @type {?} */ notElementNames = new Set(selector.notSelectors.filter(selector => selector.isElementSelector())\r\n            .map((selector) => selector.element));\r\n        const /** @type {?} */ possibleElementNames = elementNames.filter(elementName => !notElementNames.has(elementName));\r\n        ctxs.push(...possibleElementNames.map(elementName => registry.securityContext(elementName, propName, isAttribute)));\r\n    });\r\n    return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\r\n// Group 1 = \"bind-\"\r\nconst KW_BIND_IDX = 1;\r\n// Group 2 = \"let-\"\r\nconst KW_LET_IDX = 2;\r\n// Group 3 = \"ref-/#\"\r\nconst KW_REF_IDX = 3;\r\n// Group 4 = \"on-\"\r\nconst KW_ON_IDX = 4;\r\n// Group 5 = \"bindon-\"\r\nconst KW_BINDON_IDX = 5;\r\n// Group 6 = \"@\"\r\nconst KW_AT_IDX = 6;\r\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\r\nconst IDENT_KW_IDX = 7;\r\n// Group 8 = identifier inside [()]\r\nconst IDENT_BANANA_BOX_IDX = 8;\r\n// Group 9 = identifier inside []\r\nconst IDENT_PROPERTY_IDX = 9;\r\n// Group 10 = identifier inside ()\r\nconst IDENT_EVENT_IDX = 10;\r\n// deprecated in 4.x\r\nconst TEMPLATE_ELEMENT = 'template';\r\n// deprecated in 4.x\r\nconst TEMPLATE_ATTR = 'template';\r\nconst TEMPLATE_ATTR_PREFIX = '*';\r\nconst CLASS_ATTR = 'class';\r\nconst TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];\r\nconst TEMPLATE_ELEMENT_DEPRECATION_WARNING = 'The <template> element is deprecated. Use <ng-template> instead';\r\nconst TEMPLATE_ATTR_DEPRECATION_WARNING = 'The template attribute is deprecated. Use an ng-template element instead.';\r\nlet warningCounts = {};\r\n/**\r\n * @param {?} warnings\r\n * @return {?}\r\n */\r\nfunction warnOnlyOnce(warnings) {\r\n    return (error) => {\r\n        if (warnings.indexOf(error.msg) !== -1) {\r\n            warningCounts[error.msg] = (warningCounts[error.msg] || 0) + 1;\r\n            return warningCounts[error.msg] <= 1;\r\n        }\r\n        return true;\r\n    };\r\n}\r\nclass TemplateParseError extends ParseError {\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} span\r\n     * @param {?} level\r\n     */\r\n    constructor(message, span, level) {\r\n        super(span, message, level);\r\n    }\r\n}\r\nclass TemplateParseResult {\r\n    /**\r\n     * @param {?=} templateAst\r\n     * @param {?=} usedPipes\r\n     * @param {?=} errors\r\n     */\r\n    constructor(templateAst, usedPipes, errors) {\r\n        this.templateAst = templateAst;\r\n        this.usedPipes = usedPipes;\r\n        this.errors = errors;\r\n    }\r\n}\r\nclass TemplateParser {\r\n    /**\r\n     * @param {?} _config\r\n     * @param {?} _reflector\r\n     * @param {?} _exprParser\r\n     * @param {?} _schemaRegistry\r\n     * @param {?} _htmlParser\r\n     * @param {?} _console\r\n     * @param {?} transforms\r\n     */\r\n    constructor(_config, _reflector, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {\r\n        this._config = _config;\r\n        this._reflector = _reflector;\r\n        this._exprParser = _exprParser;\r\n        this._schemaRegistry = _schemaRegistry;\r\n        this._htmlParser = _htmlParser;\r\n        this._console = _console;\r\n        this.transforms = transforms;\r\n    }\r\n    /**\r\n     * @param {?} component\r\n     * @param {?} template\r\n     * @param {?} directives\r\n     * @param {?} pipes\r\n     * @param {?} schemas\r\n     * @param {?} templateUrl\r\n     * @param {?} preserveWhitespaces\r\n     * @return {?}\r\n     */\r\n    parse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {\r\n        const /** @type {?} */ result = this.tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces);\r\n        const /** @type {?} */ warnings = /** @type {?} */ ((result.errors)).filter(error => error.level === ParseErrorLevel.WARNING).filter(warnOnlyOnce([TEMPLATE_ATTR_DEPRECATION_WARNING, TEMPLATE_ELEMENT_DEPRECATION_WARNING]));\r\n        const /** @type {?} */ errors = /** @type {?} */ ((result.errors)).filter(error => error.level === ParseErrorLevel.ERROR);\r\n        if (warnings.length > 0) {\r\n            this._console.warn(`Template parse warnings:\\n${warnings.join('\\n')}`);\r\n        }\r\n        if (errors.length > 0) {\r\n            const /** @type {?} */ errorString = errors.join('\\n');\r\n            throw syntaxError(`Template parse errors:\\n${errorString}`, errors);\r\n        }\r\n        return { template: /** @type {?} */ ((result.templateAst)), pipes: /** @type {?} */ ((result.usedPipes)) };\r\n    }\r\n    /**\r\n     * @param {?} component\r\n     * @param {?} template\r\n     * @param {?} directives\r\n     * @param {?} pipes\r\n     * @param {?} schemas\r\n     * @param {?} templateUrl\r\n     * @param {?} preserveWhitespaces\r\n     * @return {?}\r\n     */\r\n    tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {\r\n        let /** @type {?} */ htmlParseResult = typeof template === 'string' ? /** @type {?} */ ((this._htmlParser)).parse(template, templateUrl, true, this.getInterpolationConfig(component)) :\r\n            template;\r\n        if (!preserveWhitespaces) {\r\n            htmlParseResult = removeWhitespaces(htmlParseResult);\r\n        }\r\n        return this.tryParseHtml(this.expandHtml(htmlParseResult), component, directives, pipes, schemas);\r\n    }\r\n    /**\r\n     * @param {?} htmlAstWithErrors\r\n     * @param {?} component\r\n     * @param {?} directives\r\n     * @param {?} pipes\r\n     * @param {?} schemas\r\n     * @return {?}\r\n     */\r\n    tryParseHtml(htmlAstWithErrors, component, directives, pipes, schemas) {\r\n        let /** @type {?} */ result;\r\n        const /** @type {?} */ errors = htmlAstWithErrors.errors;\r\n        const /** @type {?} */ usedPipes = [];\r\n        if (htmlAstWithErrors.rootNodes.length > 0) {\r\n            const /** @type {?} */ uniqDirectives = removeSummaryDuplicates(directives);\r\n            const /** @type {?} */ uniqPipes = removeSummaryDuplicates(pipes);\r\n            const /** @type {?} */ providerViewContext = new ProviderViewContext(this._reflector, component);\r\n            let /** @type {?} */ interpolationConfig = /** @type {?} */ ((undefined));\r\n            if (component.template && component.template.interpolation) {\r\n                interpolationConfig = {\r\n                    start: component.template.interpolation[0],\r\n                    end: component.template.interpolation[1]\r\n                };\r\n            }\r\n            const /** @type {?} */ bindingParser = new BindingParser(this._exprParser, /** @type {?} */ ((interpolationConfig)), this._schemaRegistry, uniqPipes, errors);\r\n            const /** @type {?} */ parseVisitor = new TemplateParseVisitor(this._reflector, this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);\r\n            result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);\r\n            errors.push(...providerViewContext.errors);\r\n            usedPipes.push(...bindingParser.getUsedPipes());\r\n        }\r\n        else {\r\n            result = [];\r\n        }\r\n        this._assertNoReferenceDuplicationOnTemplate(result, errors);\r\n        if (errors.length > 0) {\r\n            return new TemplateParseResult(result, usedPipes, errors);\r\n        }\r\n        if (this.transforms) {\r\n            this.transforms.forEach((transform) => { result = templateVisitAll(transform, result); });\r\n        }\r\n        return new TemplateParseResult(result, usedPipes, errors);\r\n    }\r\n    /**\r\n     * @param {?} htmlAstWithErrors\r\n     * @param {?=} forced\r\n     * @return {?}\r\n     */\r\n    expandHtml(htmlAstWithErrors, forced = false) {\r\n        const /** @type {?} */ errors = htmlAstWithErrors.errors;\r\n        if (errors.length == 0 || forced) {\r\n            // Transform ICU messages to angular directives\r\n            const /** @type {?} */ expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);\r\n            errors.push(...expandedHtmlAst.errors);\r\n            htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);\r\n        }\r\n        return htmlAstWithErrors;\r\n    }\r\n    /**\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    getInterpolationConfig(component) {\r\n        if (component.template) {\r\n            return InterpolationConfig.fromArray(component.template.interpolation);\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} result\r\n     * @param {?} errors\r\n     * @return {?}\r\n     */\r\n    _assertNoReferenceDuplicationOnTemplate(result, errors) {\r\n        const /** @type {?} */ existingReferences = [];\r\n        result.filter(element => !!(/** @type {?} */ (element)).references)\r\n            .forEach(element => (/** @type {?} */ (element)).references.forEach((reference) => {\r\n            const /** @type {?} */ name = reference.name;\r\n            if (existingReferences.indexOf(name) < 0) {\r\n                existingReferences.push(name);\r\n            }\r\n            else {\r\n                const /** @type {?} */ error = new TemplateParseError(`Reference \"#${name}\" is defined several times`, reference.sourceSpan, ParseErrorLevel.ERROR);\r\n                errors.push(error);\r\n            }\r\n        }));\r\n    }\r\n}\r\nclass TemplateParseVisitor {\r\n    /**\r\n     * @param {?} reflector\r\n     * @param {?} config\r\n     * @param {?} providerViewContext\r\n     * @param {?} directives\r\n     * @param {?} _bindingParser\r\n     * @param {?} _schemaRegistry\r\n     * @param {?} _schemas\r\n     * @param {?} _targetErrors\r\n     */\r\n    constructor(reflector, config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {\r\n        this.reflector = reflector;\r\n        this.config = config;\r\n        this.providerViewContext = providerViewContext;\r\n        this._bindingParser = _bindingParser;\r\n        this._schemaRegistry = _schemaRegistry;\r\n        this._schemas = _schemas;\r\n        this._targetErrors = _targetErrors;\r\n        this.selectorMatcher = new SelectorMatcher();\r\n        this.directivesIndex = new Map();\r\n        this.ngContentCount = 0;\r\n        // Note: queries start with id 1 so we can use the number in a Bloom filter!\r\n        this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;\r\n        directives.forEach((directive, index) => {\r\n            const /** @type {?} */ selector = CssSelector.parse(/** @type {?} */ ((directive.selector)));\r\n            this.selectorMatcher.addSelectables(selector, directive);\r\n            this.directivesIndex.set(directive, index);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} expansion\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(expansion, context) { return null; }\r\n    /**\r\n     * @param {?} expansionCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(expansionCase, context) { return null; }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} parent\r\n     * @return {?}\r\n     */\r\n    visitText(text, parent) {\r\n        const /** @type {?} */ ngContentIndex = /** @type {?} */ ((parent.findNgContentIndex(TEXT_CSS_SELECTOR)));\r\n        const /** @type {?} */ valueNoNgsp = replaceNgsp(text.value);\r\n        const /** @type {?} */ expr = this._bindingParser.parseInterpolation(valueNoNgsp, /** @type {?} */ ((text.sourceSpan)));\r\n        return expr ? new BoundTextAst(expr, ngContentIndex, /** @type {?} */ ((text.sourceSpan))) :\r\n            new TextAst(valueNoNgsp, ngContentIndex, /** @type {?} */ ((text.sourceSpan)));\r\n    }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) {\r\n        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { return null; }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} parent\r\n     * @return {?}\r\n     */\r\n    visitElement(element, parent) {\r\n        const /** @type {?} */ queryStartIndex = this.contentQueryStartId;\r\n        const /** @type {?} */ nodeName = element.name;\r\n        const /** @type {?} */ preparsedElement = preparseElement(element);\r\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\r\n            preparsedElement.type === PreparsedElementType.STYLE) {\r\n            // Skipping <script> for security reasons\r\n            // Skipping <style> as we already processed them\r\n            // in the StyleCompiler\r\n            return null;\r\n        }\r\n        if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\r\n            isStyleUrlResolvable(preparsedElement.hrefAttr)) {\r\n            // Skipping stylesheets with either relative urls or package scheme as we already processed\r\n            // them in the StyleCompiler\r\n            return null;\r\n        }\r\n        const /** @type {?} */ matchableAttrs = [];\r\n        const /** @type {?} */ elementOrDirectiveProps = [];\r\n        const /** @type {?} */ elementOrDirectiveRefs = [];\r\n        const /** @type {?} */ elementVars = [];\r\n        const /** @type {?} */ events = [];\r\n        const /** @type {?} */ templateElementOrDirectiveProps = [];\r\n        const /** @type {?} */ templateMatchableAttrs = [];\r\n        const /** @type {?} */ templateElementVars = [];\r\n        let /** @type {?} */ hasInlineTemplates = false;\r\n        const /** @type {?} */ attrs = [];\r\n        const /** @type {?} */ isTemplateElement = isTemplate(element, this.config.enableLegacyTemplate, (m, span) => this._reportError(m, span, ParseErrorLevel.WARNING));\r\n        element.attrs.forEach(attr => {\r\n            const /** @type {?} */ hasBinding = this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);\r\n            let /** @type {?} */ templateBindingsSource;\r\n            let /** @type {?} */ prefixToken;\r\n            let /** @type {?} */ normalizedName = this._normalizeAttributeName(attr.name);\r\n            if (this.config.enableLegacyTemplate && normalizedName == TEMPLATE_ATTR) {\r\n                this._reportError(TEMPLATE_ATTR_DEPRECATION_WARNING, attr.sourceSpan, ParseErrorLevel.WARNING);\r\n                templateBindingsSource = attr.value;\r\n            }\r\n            else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\r\n                templateBindingsSource = attr.value;\r\n                prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';\r\n            }\r\n            const /** @type {?} */ hasTemplateBinding = templateBindingsSource != null;\r\n            if (hasTemplateBinding) {\r\n                if (hasInlineTemplates) {\r\n                    this._reportError(`Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *`, attr.sourceSpan);\r\n                }\r\n                hasInlineTemplates = true;\r\n                this._bindingParser.parseInlineTemplateBinding(/** @type {?} */ ((prefixToken)), /** @type {?} */ ((templateBindingsSource)), attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);\r\n            }\r\n            if (!hasBinding && !hasTemplateBinding) {\r\n                // don't include the bindings as attributes as well in the AST\r\n                attrs.push(this.visitAttribute(attr, null));\r\n                matchableAttrs.push([attr.name, attr.value]);\r\n            }\r\n        });\r\n        const /** @type {?} */ elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);\r\n        const { directives: directiveMetas, matchElement } = this._parseDirectives(this.selectorMatcher, elementCssSelector);\r\n        const /** @type {?} */ references = [];\r\n        const /** @type {?} */ boundDirectivePropNames = new Set();\r\n        const /** @type {?} */ directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, /** @type {?} */ ((element.sourceSpan)), references, boundDirectivePropNames);\r\n        const /** @type {?} */ elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);\r\n        const /** @type {?} */ isViewRoot = parent.isTemplateElement || hasInlineTemplates;\r\n        const /** @type {?} */ providerContext = new ProviderElementContext(this.providerViewContext, /** @type {?} */ ((parent.providerContext)), isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, /** @type {?} */ ((element.sourceSpan)));\r\n        const /** @type {?} */ children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? /** @type {?} */ ((parent.providerContext)) : providerContext));\r\n        providerContext.afterElement();\r\n        // Override the actual selector when the `ngProjectAs` attribute is provided\r\n        const /** @type {?} */ projectionSelector = preparsedElement.projectAs != null ?\r\n            CssSelector.parse(preparsedElement.projectAs)[0] :\r\n            elementCssSelector;\r\n        const /** @type {?} */ ngContentIndex = /** @type {?} */ ((parent.findNgContentIndex(projectionSelector)));\r\n        let /** @type {?} */ parsedElement;\r\n        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\r\n            if (element.children && !element.children.every(_isEmptyTextNode)) {\r\n                this._reportError(`<ng-content> element cannot have content.`, /** @type {?} */ ((element.sourceSpan)));\r\n            }\r\n            parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? /** @type {?} */ ((null)) : ngContentIndex, /** @type {?} */ ((element.sourceSpan)));\r\n        }\r\n        else if (isTemplateElement) {\r\n            this._assertAllEventsPublishedByDirectives(directiveAsts, events);\r\n            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, /** @type {?} */ ((element.sourceSpan)));\r\n            parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? /** @type {?} */ ((null)) : ngContentIndex, /** @type {?} */ ((element.sourceSpan)));\r\n        }\r\n        else {\r\n            this._assertElementExists(matchElement, element);\r\n            this._assertOnlyOneComponent(directiveAsts, /** @type {?} */ ((element.sourceSpan)));\r\n            const /** @type {?} */ ngContentIndex = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);\r\n            parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan, element.endSourceSpan || null);\r\n        }\r\n        if (hasInlineTemplates) {\r\n            const /** @type {?} */ templateQueryStartIndex = this.contentQueryStartId;\r\n            const /** @type {?} */ templateSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);\r\n            const { directives: templateDirectiveMetas } = this._parseDirectives(this.selectorMatcher, templateSelector);\r\n            const /** @type {?} */ templateBoundDirectivePropNames = new Set();\r\n            const /** @type {?} */ templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], /** @type {?} */ ((element.sourceSpan)), [], templateBoundDirectivePropNames);\r\n            const /** @type {?} */ templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);\r\n            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, /** @type {?} */ ((element.sourceSpan)));\r\n            const /** @type {?} */ templateProviderContext = new ProviderElementContext(this.providerViewContext, /** @type {?} */ ((parent.providerContext)), parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, /** @type {?} */ ((element.sourceSpan)));\r\n            templateProviderContext.afterElement();\r\n            parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, /** @type {?} */ ((element.sourceSpan)));\r\n        }\r\n        return parsedElement;\r\n    }\r\n    /**\r\n     * @param {?} isTemplateElement\r\n     * @param {?} attr\r\n     * @param {?} targetMatchableAttrs\r\n     * @param {?} targetProps\r\n     * @param {?} targetEvents\r\n     * @param {?} targetRefs\r\n     * @param {?} targetVars\r\n     * @return {?}\r\n     */\r\n    _parseAttr(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {\r\n        const /** @type {?} */ name = this._normalizeAttributeName(attr.name);\r\n        const /** @type {?} */ value = attr.value;\r\n        const /** @type {?} */ srcSpan = attr.sourceSpan;\r\n        const /** @type {?} */ bindParts = name.match(BIND_NAME_REGEXP);\r\n        let /** @type {?} */ hasBinding = false;\r\n        if (bindParts !== null) {\r\n            hasBinding = true;\r\n            if (bindParts[KW_BIND_IDX] != null) {\r\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\r\n            }\r\n            else if (bindParts[KW_LET_IDX]) {\r\n                if (isTemplateElement) {\r\n                    const /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];\r\n                    this._parseVariable(identifier, value, srcSpan, targetVars);\r\n                }\r\n                else {\r\n                    this._reportError(`\"let-\" is only supported on ng-template elements.`, srcSpan);\r\n                }\r\n            }\r\n            else if (bindParts[KW_REF_IDX]) {\r\n                const /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];\r\n                this._parseReference(identifier, value, srcSpan, targetRefs);\r\n            }\r\n            else if (bindParts[KW_ON_IDX]) {\r\n                this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\r\n            }\r\n            else if (bindParts[KW_BINDON_IDX]) {\r\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\r\n                this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\r\n            }\r\n            else if (bindParts[KW_AT_IDX]) {\r\n                this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\r\n            }\r\n            else if (bindParts[IDENT_BANANA_BOX_IDX]) {\r\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\r\n                this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\r\n            }\r\n            else if (bindParts[IDENT_PROPERTY_IDX]) {\r\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\r\n            }\r\n            else if (bindParts[IDENT_EVENT_IDX]) {\r\n                this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\r\n            }\r\n        }\r\n        else {\r\n            hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);\r\n        }\r\n        if (!hasBinding) {\r\n            this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\r\n        }\r\n        return hasBinding;\r\n    }\r\n    /**\r\n     * @param {?} attrName\r\n     * @return {?}\r\n     */\r\n    _normalizeAttributeName(attrName) {\r\n        return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\r\n    }\r\n    /**\r\n     * @param {?} identifier\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetVars\r\n     * @return {?}\r\n     */\r\n    _parseVariable(identifier, value, sourceSpan, targetVars) {\r\n        if (identifier.indexOf('-') > -1) {\r\n            this._reportError(`\"-\" is not allowed in variable names`, sourceSpan);\r\n        }\r\n        targetVars.push(new VariableAst(identifier, value, sourceSpan));\r\n    }\r\n    /**\r\n     * @param {?} identifier\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetRefs\r\n     * @return {?}\r\n     */\r\n    _parseReference(identifier, value, sourceSpan, targetRefs) {\r\n        if (identifier.indexOf('-') > -1) {\r\n            this._reportError(`\"-\" is not allowed in reference names`, sourceSpan);\r\n        }\r\n        targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} expression\r\n     * @param {?} sourceSpan\r\n     * @param {?} targetMatchableAttrs\r\n     * @param {?} targetEvents\r\n     * @return {?}\r\n     */\r\n    _parseAssignmentEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\r\n        this._bindingParser.parseEvent(`${name}Change`, `${expression}=$event`, sourceSpan, targetMatchableAttrs, targetEvents);\r\n    }\r\n    /**\r\n     * @param {?} selectorMatcher\r\n     * @param {?} elementCssSelector\r\n     * @return {?}\r\n     */\r\n    _parseDirectives(selectorMatcher, elementCssSelector) {\r\n        // Need to sort the directives so that we get consistent results throughout,\r\n        // as selectorMatcher uses Maps inside.\r\n        // Also deduplicate directives as they might match more than one time!\r\n        const /** @type {?} */ directives = new Array(this.directivesIndex.size);\r\n        // Whether any directive selector matches on the element name\r\n        let /** @type {?} */ matchElement = false;\r\n        selectorMatcher.match(elementCssSelector, (selector, directive) => {\r\n            directives[/** @type {?} */ ((this.directivesIndex.get(directive)))] = directive;\r\n            matchElement = matchElement || selector.hasElementSelector();\r\n        });\r\n        return {\r\n            directives: directives.filter(dir => !!dir),\r\n            matchElement,\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} isTemplateElement\r\n     * @param {?} elementName\r\n     * @param {?} directives\r\n     * @param {?} props\r\n     * @param {?} elementOrDirectiveRefs\r\n     * @param {?} elementSourceSpan\r\n     * @param {?} targetReferences\r\n     * @param {?} targetBoundDirectivePropNames\r\n     * @return {?}\r\n     */\r\n    _createDirectiveAsts(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {\r\n        const /** @type {?} */ matchedReferences = new Set();\r\n        let /** @type {?} */ component = /** @type {?} */ ((null));\r\n        const /** @type {?} */ directiveAsts = directives.map((directive) => {\r\n            const /** @type {?} */ sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, `Directive ${identifierName(directive.type)}`);\r\n            if (directive.isComponent) {\r\n                component = directive;\r\n            }\r\n            const /** @type {?} */ directiveProperties = [];\r\n            let /** @type {?} */ hostProperties = /** @type {?} */ ((this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan)));\r\n            // Note: We need to check the host properties here as well,\r\n            // as we don't know the element name in the DirectiveWrapperCompiler yet.\r\n            hostProperties = this._checkPropertiesInSchema(elementName, hostProperties);\r\n            const /** @type {?} */ hostEvents = /** @type {?} */ ((this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan)));\r\n            this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);\r\n            elementOrDirectiveRefs.forEach((elOrDirRef) => {\r\n                if ((elOrDirRef.value.length === 0 && directive.isComponent) ||\r\n                    (elOrDirRef.isReferenceToDirective(directive))) {\r\n                    targetReferences.push(new ReferenceAst(elOrDirRef.name, createTokenForReference(directive.type.reference), elOrDirRef.sourceSpan));\r\n                    matchedReferences.add(elOrDirRef.name);\r\n                }\r\n            });\r\n            const /** @type {?} */ contentQueryStartId = this.contentQueryStartId;\r\n            this.contentQueryStartId += directive.queries.length;\r\n            return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);\r\n        });\r\n        elementOrDirectiveRefs.forEach((elOrDirRef) => {\r\n            if (elOrDirRef.value.length > 0) {\r\n                if (!matchedReferences.has(elOrDirRef.name)) {\r\n                    this._reportError(`There is no directive with \"exportAs\" set to \"${elOrDirRef.value}\"`, elOrDirRef.sourceSpan);\r\n                }\r\n            }\r\n            else if (!component) {\r\n                let /** @type {?} */ refToken = /** @type {?} */ ((null));\r\n                if (isTemplateElement) {\r\n                    refToken = createTokenForExternalReference(this.reflector, Identifiers.TemplateRef);\r\n                }\r\n                targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));\r\n            }\r\n        });\r\n        return directiveAsts;\r\n    }\r\n    /**\r\n     * @param {?} directiveProperties\r\n     * @param {?} boundProps\r\n     * @param {?} targetBoundDirectiveProps\r\n     * @param {?} targetBoundDirectivePropNames\r\n     * @return {?}\r\n     */\r\n    _createDirectivePropertyAsts(directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {\r\n        if (directiveProperties) {\r\n            const /** @type {?} */ boundPropsByName = new Map();\r\n            boundProps.forEach(boundProp => {\r\n                const /** @type {?} */ prevValue = boundPropsByName.get(boundProp.name);\r\n                if (!prevValue || prevValue.isLiteral) {\r\n                    // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\r\n                    boundPropsByName.set(boundProp.name, boundProp);\r\n                }\r\n            });\r\n            Object.keys(directiveProperties).forEach(dirProp => {\r\n                const /** @type {?} */ elProp = directiveProperties[dirProp];\r\n                const /** @type {?} */ boundProp = boundPropsByName.get(elProp);\r\n                // Bindings are optional, so this binding only needs to be set up if an expression is given.\r\n                if (boundProp) {\r\n                    targetBoundDirectivePropNames.add(boundProp.name);\r\n                    if (!isEmptyExpression(boundProp.expression)) {\r\n                        targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} elementName\r\n     * @param {?} props\r\n     * @param {?} boundDirectivePropNames\r\n     * @return {?}\r\n     */\r\n    _createElementPropertyAsts(elementName, props, boundDirectivePropNames) {\r\n        const /** @type {?} */ boundElementProps = [];\r\n        props.forEach((prop) => {\r\n            if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {\r\n                boundElementProps.push(this._bindingParser.createElementPropertyAst(elementName, prop));\r\n            }\r\n        });\r\n        return this._checkPropertiesInSchema(elementName, boundElementProps);\r\n    }\r\n    /**\r\n     * @param {?} directives\r\n     * @return {?}\r\n     */\r\n    _findComponentDirectives(directives) {\r\n        return directives.filter(directive => directive.directive.isComponent);\r\n    }\r\n    /**\r\n     * @param {?} directives\r\n     * @return {?}\r\n     */\r\n    _findComponentDirectiveNames(directives) {\r\n        return this._findComponentDirectives(directives)\r\n            .map(directive => /** @type {?} */ ((identifierName(directive.directive.type))));\r\n    }\r\n    /**\r\n     * @param {?} directives\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    _assertOnlyOneComponent(directives, sourceSpan) {\r\n        const /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);\r\n        if (componentTypeNames.length > 1) {\r\n            this._reportError(`More than one component matched on this element.\\n` +\r\n                `Make sure that only one component's selector can match a given element.\\n` +\r\n                `Conflicting components: ${componentTypeNames.join(',')}`, sourceSpan);\r\n        }\r\n    }\r\n    /**\r\n     * Make sure that non-angular tags conform to the schemas.\r\n     *\r\n     * Note: An element is considered an angular tag when at least one directive selector matches the\r\n     * tag name.\r\n     *\r\n     * @param {?} matchElement Whether any directive has matched on the tag name\r\n     * @param {?} element the html element\r\n     * @return {?}\r\n     */\r\n    _assertElementExists(matchElement, element) {\r\n        const /** @type {?} */ elName = element.name.replace(/^:xhtml:/, '');\r\n        if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {\r\n            let /** @type {?} */ errorMsg = `'${elName}' is not a known element:\\n`;\r\n            errorMsg +=\r\n                `1. If '${elName}' is an Angular component, then verify that it is part of this module.\\n`;\r\n            if (elName.indexOf('-') > -1) {\r\n                errorMsg +=\r\n                    `2. If '${elName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;\r\n            }\r\n            else {\r\n                errorMsg +=\r\n                    `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\r\n            }\r\n            this._reportError(errorMsg, /** @type {?} */ ((element.sourceSpan)));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} directives\r\n     * @param {?} elementProps\r\n     * @param {?} sourceSpan\r\n     * @return {?}\r\n     */\r\n    _assertNoComponentsNorElementBindingsOnTemplate(directives, elementProps, sourceSpan) {\r\n        const /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);\r\n        if (componentTypeNames.length > 0) {\r\n            this._reportError(`Components on an embedded template: ${componentTypeNames.join(',')}`, sourceSpan);\r\n        }\r\n        elementProps.forEach(prop => {\r\n            this._reportError(`Property binding ${prop.name} not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".`, sourceSpan);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} directives\r\n     * @param {?} events\r\n     * @return {?}\r\n     */\r\n    _assertAllEventsPublishedByDirectives(directives, events) {\r\n        const /** @type {?} */ allDirectiveEvents = new Set();\r\n        directives.forEach(directive => {\r\n            Object.keys(directive.directive.outputs).forEach(k => {\r\n                const /** @type {?} */ eventName = directive.directive.outputs[k];\r\n                allDirectiveEvents.add(eventName);\r\n            });\r\n        });\r\n        events.forEach(event => {\r\n            if (event.target != null || !allDirectiveEvents.has(event.name)) {\r\n                this._reportError(`Event binding ${event.fullName} not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".`, event.sourceSpan);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} elementName\r\n     * @param {?} boundProps\r\n     * @return {?}\r\n     */\r\n    _checkPropertiesInSchema(elementName, boundProps) {\r\n        // Note: We can't filter out empty expressions before this method,\r\n        // as we still want to validate them!\r\n        return boundProps.filter((boundProp) => {\r\n            if (boundProp.type === PropertyBindingType.Property &&\r\n                !this._schemaRegistry.hasProperty(elementName, boundProp.name, this._schemas)) {\r\n                let /** @type {?} */ errorMsg = `Can't bind to '${boundProp.name}' since it isn't a known property of '${elementName}'.`;\r\n                if (elementName.startsWith('ng-')) {\r\n                    errorMsg +=\r\n                        `\\n1. If '${boundProp.name}' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.` +\r\n                            `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\r\n                }\r\n                else if (elementName.indexOf('-') > -1) {\r\n                    errorMsg +=\r\n                        `\\n1. If '${elementName}' is an Angular component and it has '${boundProp.name}' input, then verify that it is part of this module.` +\r\n                            `\\n2. If '${elementName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.` +\r\n                            `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\r\n                }\r\n                this._reportError(errorMsg, boundProp.sourceSpan);\r\n            }\r\n            return !isEmptyExpression(boundProp.value);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @param {?} sourceSpan\r\n     * @param {?=} level\r\n     * @return {?}\r\n     */\r\n    _reportError(message, sourceSpan, level = ParseErrorLevel.ERROR) {\r\n        this._targetErrors.push(new ParseError(sourceSpan, message, level));\r\n    }\r\n}\r\nclass NonBindableVisitor {\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} parent\r\n     * @return {?}\r\n     */\r\n    visitElement(ast, parent) {\r\n        const /** @type {?} */ preparsedElement = preparseElement(ast);\r\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\r\n            preparsedElement.type === PreparsedElementType.STYLE ||\r\n            preparsedElement.type === PreparsedElementType.STYLESHEET) {\r\n            // Skipping <script> for security reasons\r\n            // Skipping <style> and stylesheets as we already processed them\r\n            // in the StyleCompiler\r\n            return null;\r\n        }\r\n        const /** @type {?} */ attrNameAndValues = ast.attrs.map((attr) => [attr.name, attr.value]);\r\n        const /** @type {?} */ selector = createElementCssSelector(ast.name, attrNameAndValues);\r\n        const /** @type {?} */ ngContentIndex = parent.findNgContentIndex(selector);\r\n        const /** @type {?} */ children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);\r\n        return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} comment\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitComment(comment, context) { return null; }\r\n    /**\r\n     * @param {?} attribute\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttribute(attribute, context) {\r\n        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?} parent\r\n     * @return {?}\r\n     */\r\n    visitText(text, parent) {\r\n        const /** @type {?} */ ngContentIndex = /** @type {?} */ ((parent.findNgContentIndex(TEXT_CSS_SELECTOR)));\r\n        return new TextAst(text.value, ngContentIndex, /** @type {?} */ ((text.sourceSpan)));\r\n    }\r\n    /**\r\n     * @param {?} expansion\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansion(expansion, context) { return expansion; }\r\n    /**\r\n     * @param {?} expansionCase\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitExpansionCase(expansionCase, context) { return expansionCase; }\r\n}\r\n/**\r\n * A reference to an element or directive in a template. E.g., the reference in this template:\r\n *\r\n * <div #myMenu=\"coolMenu\">\r\n *\r\n * would be {name: 'myMenu', value: 'coolMenu', sourceSpan: ...}\r\n */\r\nclass ElementOrDirectiveRef {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?} sourceSpan\r\n     */\r\n    constructor(name, value, sourceSpan) {\r\n        this.name = name;\r\n        this.value = value;\r\n        this.sourceSpan = sourceSpan;\r\n    }\r\n    /**\r\n     * Gets whether this is a reference to the given directive.\r\n     * @param {?} directive\r\n     * @return {?}\r\n     */\r\n    isReferenceToDirective(directive) {\r\n        return splitExportAs(directive.exportAs).indexOf(this.value) !== -1;\r\n    }\r\n}\r\n/**\r\n * Splits a raw, potentially comma-delimted `exportAs` value into an array of names.\r\n * @param {?} exportAs\r\n * @return {?}\r\n */\r\nfunction splitExportAs(exportAs) {\r\n    return exportAs ? exportAs.split(',').map(e => e.trim()) : [];\r\n}\r\n/**\r\n * @param {?} classAttrValue\r\n * @return {?}\r\n */\r\nfunction splitClasses(classAttrValue) {\r\n    return classAttrValue.trim().split(/\\s+/g);\r\n}\r\nclass ElementContext {\r\n    /**\r\n     * @param {?} isTemplateElement\r\n     * @param {?} _ngContentIndexMatcher\r\n     * @param {?} _wildcardNgContentIndex\r\n     * @param {?} providerContext\r\n     */\r\n    constructor(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {\r\n        this.isTemplateElement = isTemplateElement;\r\n        this._ngContentIndexMatcher = _ngContentIndexMatcher;\r\n        this._wildcardNgContentIndex = _wildcardNgContentIndex;\r\n        this.providerContext = providerContext;\r\n    }\r\n    /**\r\n     * @param {?} isTemplateElement\r\n     * @param {?} directives\r\n     * @param {?} providerContext\r\n     * @return {?}\r\n     */\r\n    static create(isTemplateElement, directives, providerContext) {\r\n        const /** @type {?} */ matcher = new SelectorMatcher();\r\n        let /** @type {?} */ wildcardNgContentIndex = /** @type {?} */ ((null));\r\n        const /** @type {?} */ component = directives.find(directive => directive.directive.isComponent);\r\n        if (component) {\r\n            const /** @type {?} */ ngContentSelectors = /** @type {?} */ ((component.directive.template)).ngContentSelectors;\r\n            for (let /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {\r\n                const /** @type {?} */ selector = ngContentSelectors[i];\r\n                if (selector === '*') {\r\n                    wildcardNgContentIndex = i;\r\n                }\r\n                else {\r\n                    matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);\r\n                }\r\n            }\r\n        }\r\n        return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);\r\n    }\r\n    /**\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    findNgContentIndex(selector) {\r\n        const /** @type {?} */ ngContentIndices = [];\r\n        this._ngContentIndexMatcher.match(selector, (selector, ngContentIndex) => { ngContentIndices.push(ngContentIndex); });\r\n        ngContentIndices.sort();\r\n        if (this._wildcardNgContentIndex != null) {\r\n            ngContentIndices.push(this._wildcardNgContentIndex);\r\n        }\r\n        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;\r\n    }\r\n}\r\n/**\r\n * @param {?} elementName\r\n * @param {?} attributes\r\n * @return {?}\r\n */\r\nfunction createElementCssSelector(elementName, attributes) {\r\n    const /** @type {?} */ cssSelector = new CssSelector();\r\n    const /** @type {?} */ elNameNoNs = splitNsName(elementName)[1];\r\n    cssSelector.setElement(elNameNoNs);\r\n    for (let /** @type {?} */ i = 0; i < attributes.length; i++) {\r\n        const /** @type {?} */ attrName = attributes[i][0];\r\n        const /** @type {?} */ attrNameNoNs = splitNsName(attrName)[1];\r\n        const /** @type {?} */ attrValue = attributes[i][1];\r\n        cssSelector.addAttribute(attrNameNoNs, attrValue);\r\n        if (attrName.toLowerCase() == CLASS_ATTR) {\r\n            const /** @type {?} */ classes = splitClasses(attrValue);\r\n            classes.forEach(className => cssSelector.addClassName(className));\r\n        }\r\n    }\r\n    return cssSelector;\r\n}\r\nconst EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);\r\nconst NON_BINDABLE_VISITOR = new NonBindableVisitor();\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction _isEmptyTextNode(node) {\r\n    return node instanceof Text && node.value.trim().length == 0;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} items\r\n * @return {?}\r\n */\r\nfunction removeSummaryDuplicates(items) {\r\n    const /** @type {?} */ map = new Map();\r\n    items.forEach((item) => {\r\n        if (!map.get(item.type.reference)) {\r\n            map.set(item.type.reference, item);\r\n        }\r\n    });\r\n    return Array.from(map.values());\r\n}\r\n/**\r\n * @param {?} ast\r\n * @return {?}\r\n */\r\nfunction isEmptyExpression(ast) {\r\n    if (ast instanceof ASTWithSource) {\r\n        ast = ast.ast;\r\n    }\r\n    return ast instanceof EmptyExpr;\r\n}\r\n/**\r\n * @param {?} el\r\n * @param {?} enableLegacyTemplate\r\n * @param {?} reportDeprecation\r\n * @return {?}\r\n */\r\nfunction isTemplate(el, enableLegacyTemplate, reportDeprecation) {\r\n    if (isNgTemplate(el.name))\r\n        return true;\r\n    const /** @type {?} */ tagNoNs = splitNsName(el.name)[1];\r\n    // `<template>` is HTML and case insensitive\r\n    if (tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {\r\n        if (enableLegacyTemplate && tagNoNs.toLowerCase() === TEMPLATE_ELEMENT) {\r\n            reportDeprecation(TEMPLATE_ELEMENT_DEPRECATION_WARNING, /** @type {?} */ ((el.sourceSpan)));\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass EventHandlerVars {\r\n}\r\nEventHandlerVars.event = variable('$event');\r\n/**\r\n * @record\r\n */\r\n\r\nclass ConvertActionBindingResult {\r\n    /**\r\n     * @param {?} stmts\r\n     * @param {?} allowDefault\r\n     */\r\n    constructor(stmts, allowDefault) {\r\n        this.stmts = stmts;\r\n        this.allowDefault = allowDefault;\r\n    }\r\n}\r\n/**\r\n * Converts the given expression AST into an executable output AST, assuming the expression is\r\n * used in an action binding (e.g. an event handler).\r\n * @param {?} localResolver\r\n * @param {?} implicitReceiver\r\n * @param {?} action\r\n * @param {?} bindingId\r\n * @return {?}\r\n */\r\nfunction convertActionBinding(localResolver, implicitReceiver, action, bindingId) {\r\n    if (!localResolver) {\r\n        localResolver = new DefaultLocalResolver();\r\n    }\r\n    const /** @type {?} */ actionWithoutBuiltins = convertPropertyBindingBuiltins({\r\n        createLiteralArrayConverter: (argCount) => {\r\n            // Note: no caching for literal arrays in actions.\r\n            return (args) => literalArr(args);\r\n        },\r\n        createLiteralMapConverter: (keys) => {\r\n            // Note: no caching for literal maps in actions.\r\n            return (values) => {\r\n                const /** @type {?} */ entries = keys.map((k, i) => ({\r\n                    key: k.key,\r\n                    value: values[i],\r\n                    quoted: k.quoted,\r\n                }));\r\n                return literalMap(entries);\r\n            };\r\n        },\r\n        createPipeConverter: (name) => {\r\n            throw new Error(`Illegal State: Actions are not allowed to contain pipes. Pipe: ${name}`);\r\n        }\r\n    }, action);\r\n    const /** @type {?} */ visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);\r\n    const /** @type {?} */ actionStmts = [];\r\n    flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);\r\n    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\r\n    const /** @type {?} */ lastIndex = actionStmts.length - 1;\r\n    let /** @type {?} */ preventDefaultVar = /** @type {?} */ ((null));\r\n    if (lastIndex >= 0) {\r\n        const /** @type {?} */ lastStatement = actionStmts[lastIndex];\r\n        const /** @type {?} */ returnExpr = convertStmtIntoExpression(lastStatement);\r\n        if (returnExpr) {\r\n            // Note: We need to cast the result of the method call to dynamic,\r\n            // as it might be a void method!\r\n            preventDefaultVar = createPreventDefaultVar(bindingId);\r\n            actionStmts[lastIndex] =\r\n                preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))\r\n                    .toDeclStmt(null, [StmtModifier.Final]);\r\n        }\r\n    }\r\n    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} converterFactory\r\n * @param {?} ast\r\n * @return {?}\r\n */\r\nfunction convertPropertyBindingBuiltins(converterFactory, ast) {\r\n    return convertBuiltins(converterFactory, ast);\r\n}\r\nclass ConvertPropertyBindingResult {\r\n    /**\r\n     * @param {?} stmts\r\n     * @param {?} currValExpr\r\n     */\r\n    constructor(stmts, currValExpr) {\r\n        this.stmts = stmts;\r\n        this.currValExpr = currValExpr;\r\n    }\r\n}\r\n/**\r\n * Converts the given expression AST into an executable output AST, assuming the expression\r\n * is used in property binding. The expression has to be preprocessed via\r\n * `convertPropertyBindingBuiltins`.\r\n * @param {?} localResolver\r\n * @param {?} implicitReceiver\r\n * @param {?} expressionWithoutBuiltins\r\n * @param {?} bindingId\r\n * @return {?}\r\n */\r\nfunction convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId) {\r\n    if (!localResolver) {\r\n        localResolver = new DefaultLocalResolver();\r\n    }\r\n    const /** @type {?} */ currValExpr = createCurrValueExpr(bindingId);\r\n    const /** @type {?} */ stmts = [];\r\n    const /** @type {?} */ visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId);\r\n    const /** @type {?} */ outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);\r\n    if (visitor.temporaryCount) {\r\n        for (let /** @type {?} */ i = 0; i < visitor.temporaryCount; i++) {\r\n            stmts.push(temporaryDeclaration(bindingId, i));\r\n        }\r\n    }\r\n    stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));\r\n    return new ConvertPropertyBindingResult(stmts, currValExpr);\r\n}\r\n/**\r\n * @param {?} converterFactory\r\n * @param {?} ast\r\n * @return {?}\r\n */\r\nfunction convertBuiltins(converterFactory, ast) {\r\n    const /** @type {?} */ visitor = new _BuiltinAstConverter(converterFactory);\r\n    return ast.visit(visitor);\r\n}\r\n/**\r\n * @param {?} bindingId\r\n * @param {?} temporaryNumber\r\n * @return {?}\r\n */\r\nfunction temporaryName(bindingId, temporaryNumber) {\r\n    return `tmp_${bindingId}_${temporaryNumber}`;\r\n}\r\n/**\r\n * @param {?} bindingId\r\n * @param {?} temporaryNumber\r\n * @return {?}\r\n */\r\nfunction temporaryDeclaration(bindingId, temporaryNumber) {\r\n    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);\r\n}\r\n/**\r\n * @param {?} temporaryCount\r\n * @param {?} bindingId\r\n * @param {?} statements\r\n * @return {?}\r\n */\r\nfunction prependTemporaryDecls(temporaryCount, bindingId, statements) {\r\n    for (let /** @type {?} */ i = temporaryCount - 1; i >= 0; i--) {\r\n        statements.unshift(temporaryDeclaration(bindingId, i));\r\n    }\r\n}\r\n/** @enum {number} */\r\nconst _Mode = {\r\n    Statement: 0,\r\n    Expression: 1,\r\n};\r\n_Mode[_Mode.Statement] = \"Statement\";\r\n_Mode[_Mode.Expression] = \"Expression\";\r\n/**\r\n * @param {?} mode\r\n * @param {?} ast\r\n * @return {?}\r\n */\r\nfunction ensureStatementMode(mode, ast) {\r\n    if (mode !== _Mode.Statement) {\r\n        throw new Error(`Expected a statement, but saw ${ast}`);\r\n    }\r\n}\r\n/**\r\n * @param {?} mode\r\n * @param {?} ast\r\n * @return {?}\r\n */\r\nfunction ensureExpressionMode(mode, ast) {\r\n    if (mode !== _Mode.Expression) {\r\n        throw new Error(`Expected an expression, but saw ${ast}`);\r\n    }\r\n}\r\n/**\r\n * @param {?} mode\r\n * @param {?} expr\r\n * @return {?}\r\n */\r\nfunction convertToStatementIfNeeded(mode, expr) {\r\n    if (mode === _Mode.Statement) {\r\n        return expr.toStmt();\r\n    }\r\n    else {\r\n        return expr;\r\n    }\r\n}\r\nclass _BuiltinAstConverter extends AstTransformer {\r\n    /**\r\n     * @param {?} _converterFactory\r\n     */\r\n    constructor(_converterFactory) {\r\n        super();\r\n        this._converterFactory = _converterFactory;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitPipe(ast, context) {\r\n        const /** @type {?} */ args = [ast.exp, ...ast.args].map(ast => ast.visit(this, context));\r\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralArray(ast, context) {\r\n        const /** @type {?} */ args = ast.expressions.map(ast => ast.visit(this, context));\r\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitLiteralMap(ast, context) {\r\n        const /** @type {?} */ args = ast.values.map(ast => ast.visit(this, context));\r\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));\r\n    }\r\n}\r\nclass _AstToIrVisitor {\r\n    /**\r\n     * @param {?} _localResolver\r\n     * @param {?} _implicitReceiver\r\n     * @param {?} bindingId\r\n     */\r\n    constructor(_localResolver, _implicitReceiver, bindingId) {\r\n        this._localResolver = _localResolver;\r\n        this._implicitReceiver = _implicitReceiver;\r\n        this.bindingId = bindingId;\r\n        this._nodeMap = new Map();\r\n        this._resultMap = new Map();\r\n        this._currentTemporary = 0;\r\n        this.temporaryCount = 0;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitBinary(ast, mode) {\r\n        let /** @type {?} */ op;\r\n        switch (ast.operation) {\r\n            case '+':\r\n                op = BinaryOperator.Plus;\r\n                break;\r\n            case '-':\r\n                op = BinaryOperator.Minus;\r\n                break;\r\n            case '*':\r\n                op = BinaryOperator.Multiply;\r\n                break;\r\n            case '/':\r\n                op = BinaryOperator.Divide;\r\n                break;\r\n            case '%':\r\n                op = BinaryOperator.Modulo;\r\n                break;\r\n            case '&&':\r\n                op = BinaryOperator.And;\r\n                break;\r\n            case '||':\r\n                op = BinaryOperator.Or;\r\n                break;\r\n            case '==':\r\n                op = BinaryOperator.Equals;\r\n                break;\r\n            case '!=':\r\n                op = BinaryOperator.NotEquals;\r\n                break;\r\n            case '===':\r\n                op = BinaryOperator.Identical;\r\n                break;\r\n            case '!==':\r\n                op = BinaryOperator.NotIdentical;\r\n                break;\r\n            case '<':\r\n                op = BinaryOperator.Lower;\r\n                break;\r\n            case '>':\r\n                op = BinaryOperator.Bigger;\r\n                break;\r\n            case '<=':\r\n                op = BinaryOperator.LowerEquals;\r\n                break;\r\n            case '>=':\r\n                op = BinaryOperator.BiggerEquals;\r\n                break;\r\n            default:\r\n                throw new Error(`Unsupported operation ${ast.operation}`);\r\n        }\r\n        return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression)));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitChain(ast, mode) {\r\n        ensureStatementMode(mode, ast);\r\n        return this.visitAll(ast.expressions, mode);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitConditional(ast, mode) {\r\n        const /** @type {?} */ value = this._visit(ast.condition, _Mode.Expression);\r\n        return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression)));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitPipe(ast, mode) {\r\n        throw new Error(`Illegal state: Pipes should have been converted into functions. Pipe: ${ast.name}`);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitFunctionCall(ast, mode) {\r\n        const /** @type {?} */ convertedArgs = this.visitAll(ast.args, _Mode.Expression);\r\n        let /** @type {?} */ fnResult;\r\n        if (ast instanceof BuiltinFunctionCall) {\r\n            fnResult = ast.converter(convertedArgs);\r\n        }\r\n        else {\r\n            fnResult = this._visit(/** @type {?} */ ((ast.target)), _Mode.Expression).callFn(convertedArgs);\r\n        }\r\n        return convertToStatementIfNeeded(mode, fnResult);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitImplicitReceiver(ast, mode) {\r\n        ensureExpressionMode(mode, ast);\r\n        return this._implicitReceiver;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitInterpolation(ast, mode) {\r\n        ensureExpressionMode(mode, ast);\r\n        const /** @type {?} */ args = [literal(ast.expressions.length)];\r\n        for (let /** @type {?} */ i = 0; i < ast.strings.length - 1; i++) {\r\n            args.push(literal(ast.strings[i]));\r\n            args.push(this._visit(ast.expressions[i], _Mode.Expression));\r\n        }\r\n        args.push(literal(ast.strings[ast.strings.length - 1]));\r\n        return ast.expressions.length <= 9 ?\r\n            importExpr(Identifiers.inlineInterpolate).callFn(args) :\r\n            importExpr(Identifiers.interpolate).callFn([args[0], literalArr(args.slice(1))]);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitKeyedRead(ast, mode) {\r\n        const /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);\r\n        if (leftMostSafe) {\r\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\r\n        }\r\n        else {\r\n            return convertToStatementIfNeeded(mode, this._visit(ast.obj, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitKeyedWrite(ast, mode) {\r\n        const /** @type {?} */ obj = this._visit(ast.obj, _Mode.Expression);\r\n        const /** @type {?} */ key = this._visit(ast.key, _Mode.Expression);\r\n        const /** @type {?} */ value = this._visit(ast.value, _Mode.Expression);\r\n        return convertToStatementIfNeeded(mode, obj.key(key).set(value));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitLiteralArray(ast, mode) {\r\n        throw new Error(`Illegal State: literal arrays should have been converted into functions`);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitLiteralMap(ast, mode) {\r\n        throw new Error(`Illegal State: literal maps should have been converted into functions`);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitLiteralPrimitive(ast, mode) {\r\n        return convertToStatementIfNeeded(mode, literal(ast.value));\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    _getLocal(name) { return this._localResolver.getLocal(name); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitMethodCall(ast, mode) {\r\n        const /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);\r\n        if (leftMostSafe) {\r\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\r\n        }\r\n        else {\r\n            const /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);\r\n            let /** @type {?} */ result = null;\r\n            const /** @type {?} */ receiver = this._visit(ast.receiver, _Mode.Expression);\r\n            if (receiver === this._implicitReceiver) {\r\n                const /** @type {?} */ varExpr = this._getLocal(ast.name);\r\n                if (varExpr) {\r\n                    result = varExpr.callFn(args);\r\n                }\r\n            }\r\n            if (result == null) {\r\n                result = receiver.callMethod(ast.name, args);\r\n            }\r\n            return convertToStatementIfNeeded(mode, result);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitPrefixNot(ast, mode) {\r\n        return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitNonNullAssert(ast, mode) {\r\n        return convertToStatementIfNeeded(mode, assertNotNull(this._visit(ast.expression, _Mode.Expression)));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitPropertyRead(ast, mode) {\r\n        const /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);\r\n        if (leftMostSafe) {\r\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\r\n        }\r\n        else {\r\n            let /** @type {?} */ result = null;\r\n            const /** @type {?} */ receiver = this._visit(ast.receiver, _Mode.Expression);\r\n            if (receiver === this._implicitReceiver) {\r\n                result = this._getLocal(ast.name);\r\n            }\r\n            if (result == null) {\r\n                result = receiver.prop(ast.name);\r\n            }\r\n            return convertToStatementIfNeeded(mode, result);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitPropertyWrite(ast, mode) {\r\n        const /** @type {?} */ receiver = this._visit(ast.receiver, _Mode.Expression);\r\n        if (receiver === this._implicitReceiver) {\r\n            const /** @type {?} */ varExpr = this._getLocal(ast.name);\r\n            if (varExpr) {\r\n                throw new Error('Cannot assign to a reference or variable!');\r\n            }\r\n        }\r\n        return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this._visit(ast.value, _Mode.Expression)));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitSafePropertyRead(ast, mode) {\r\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitSafeMethodCall(ast, mode) {\r\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\r\n    }\r\n    /**\r\n     * @param {?} asts\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitAll(asts, mode) { return asts.map(ast => this._visit(ast, mode)); }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    visitQuote(ast, mode) {\r\n        throw new Error(`Quotes are not supported for evaluation!\r\n        Statement: ${ast.uninterpretedExpression} located at ${ast.location}`);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    _visit(ast, mode) {\r\n        const /** @type {?} */ result = this._resultMap.get(ast);\r\n        if (result)\r\n            return result;\r\n        return (this._nodeMap.get(ast) || ast).visit(this, mode);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} leftMostSafe\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    convertSafeAccess(ast, leftMostSafe, mode) {\r\n        // If the expression contains a safe access node on the left it needs to be converted to\r\n        // an expression that guards the access to the member by checking the receiver for blank. As\r\n        // execution proceeds from left to right, the left most part of the expression must be guarded\r\n        // first but, because member access is left associative, the right side of the expression is at\r\n        // the top of the AST. The desired result requires lifting a copy of the the left part of the\r\n        // expression up to test it for blank before generating the unguarded version.\r\n        // Consider, for example the following expression: a?.b.c?.d.e\r\n        // This results in the ast:\r\n        //         .\r\n        //        / \\\r\n        //       ?.   e\r\n        //      /  \\\r\n        //     .    d\r\n        //    / \\\r\n        //   ?.  c\r\n        //  /  \\\r\n        // a    b\r\n        // The following tree should be generated:\r\n        //\r\n        //        /---- ? ----\\\r\n        //       /      |      \\\r\n        //     a   /--- ? ---\\  null\r\n        //        /     |     \\\r\n        //       .      .     null\r\n        //      / \\    / \\\r\n        //     .  c   .   e\r\n        //    / \\    / \\\r\n        //   a   b  ,   d\r\n        //         / \\\r\n        //        .   c\r\n        //       / \\\r\n        //      a   b\r\n        //\r\n        // Notice that the first guard condition is the left hand of the left most safe access node\r\n        // which comes in as leftMostSafe to this routine.\r\n        let /** @type {?} */ guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);\r\n        let /** @type {?} */ temporary = /** @type {?} */ ((undefined));\r\n        if (this.needsTemporary(leftMostSafe.receiver)) {\r\n            // If the expression has method calls or pipes then we need to save the result into a\r\n            // temporary variable to avoid calling stateful or impure code more than once.\r\n            temporary = this.allocateTemporary();\r\n            // Preserve the result in the temporary variable\r\n            guardedExpression = temporary.set(guardedExpression);\r\n            // Ensure all further references to the guarded expression refer to the temporary instead.\r\n            this._resultMap.set(leftMostSafe.receiver, temporary);\r\n        }\r\n        const /** @type {?} */ condition = guardedExpression.isBlank();\r\n        // Convert the ast to an unguarded access to the receiver's member. The map will substitute\r\n        // leftMostNode with its unguarded version in the call to `this.visit()`.\r\n        if (leftMostSafe instanceof SafeMethodCall) {\r\n            this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));\r\n        }\r\n        else {\r\n            this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));\r\n        }\r\n        // Recursively convert the node now without the guarded member access.\r\n        const /** @type {?} */ access = this._visit(ast, _Mode.Expression);\r\n        // Remove the mapping. This is not strictly required as the converter only traverses each node\r\n        // once but is safer if the conversion is changed to traverse the nodes more than once.\r\n        this._nodeMap.delete(leftMostSafe);\r\n        // If we allocated a temporary, release it.\r\n        if (temporary) {\r\n            this.releaseTemporary(temporary);\r\n        }\r\n        // Produce the conditional\r\n        return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @return {?}\r\n     */\r\n    leftMostSafeNode(ast) {\r\n        const /** @type {?} */ visit = (visitor, ast) => {\r\n            return (this._nodeMap.get(ast) || ast).visit(visitor);\r\n        };\r\n        return ast.visit({\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitBinary(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitChain(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitConditional(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitFunctionCall(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitImplicitReceiver(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitInterpolation(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitKeyedRead(ast) { return visit(this, ast.obj); },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitKeyedWrite(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitLiteralArray(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitLiteralMap(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitLiteralPrimitive(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitMethodCall(ast) { return visit(this, ast.receiver); },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitPipe(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitPrefixNot(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitNonNullAssert(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitPropertyRead(ast) { return visit(this, ast.receiver); },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitPropertyWrite(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitQuote(ast) { return null; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitSafeMethodCall(ast) { return visit(this, ast.receiver) || ast; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitSafePropertyRead(ast) {\r\n                return visit(this, ast.receiver) || ast;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @return {?}\r\n     */\r\n    needsTemporary(ast) {\r\n        const /** @type {?} */ visit = (visitor, ast) => {\r\n            return ast && (this._nodeMap.get(ast) || ast).visit(visitor);\r\n        };\r\n        const /** @type {?} */ visitSome = (visitor, ast) => {\r\n            return ast.some(ast => visit(visitor, ast));\r\n        };\r\n        return ast.visit({\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitBinary(ast) { return visit(this, ast.left) || visit(this, ast.right); },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitChain(ast) { return false; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitConditional(ast) {\r\n                return visit(this, ast.condition) || visit(this, ast.trueExp) ||\r\n                    visit(this, ast.falseExp);\r\n            },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitFunctionCall(ast) { return true; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitImplicitReceiver(ast) { return false; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitInterpolation(ast) { return visitSome(this, ast.expressions); },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitKeyedRead(ast) { return false; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitKeyedWrite(ast) { return false; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitLiteralArray(ast) { return true; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitLiteralMap(ast) { return true; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitLiteralPrimitive(ast) { return false; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitMethodCall(ast) { return true; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitPipe(ast) { return true; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitPrefixNot(ast) { return visit(this, ast.expression); },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitNonNullAssert(ast) { return visit(this, ast.expression); },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitPropertyRead(ast) { return false; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitPropertyWrite(ast) { return false; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitQuote(ast) { return false; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitSafeMethodCall(ast) { return true; },\r\n            /**\r\n             * @param {?} ast\r\n             * @return {?}\r\n             */\r\n            visitSafePropertyRead(ast) { return false; }\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    allocateTemporary() {\r\n        const /** @type {?} */ tempNumber = this._currentTemporary++;\r\n        this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\r\n        return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));\r\n    }\r\n    /**\r\n     * @param {?} temporary\r\n     * @return {?}\r\n     */\r\n    releaseTemporary(temporary) {\r\n        this._currentTemporary--;\r\n        if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\r\n            throw new Error(`Temporary ${temporary.name} released out of order`);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} arg\r\n * @param {?} output\r\n * @return {?}\r\n */\r\nfunction flattenStatements(arg, output) {\r\n    if (Array.isArray(arg)) {\r\n        (/** @type {?} */ (arg)).forEach((entry) => flattenStatements(entry, output));\r\n    }\r\n    else {\r\n        output.push(arg);\r\n    }\r\n}\r\nclass DefaultLocalResolver {\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getLocal(name) {\r\n        if (name === EventHandlerVars.event.name) {\r\n            return EventHandlerVars.event;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @param {?} bindingId\r\n * @return {?}\r\n */\r\nfunction createCurrValueExpr(bindingId) {\r\n    return variable(`currVal_${bindingId}`); // fix syntax highlighting: `\r\n}\r\n/**\r\n * @param {?} bindingId\r\n * @return {?}\r\n */\r\nfunction createPreventDefaultVar(bindingId) {\r\n    return variable(`pd_${bindingId}`);\r\n}\r\n/**\r\n * @param {?} stmt\r\n * @return {?}\r\n */\r\nfunction convertStmtIntoExpression(stmt) {\r\n    if (stmt instanceof ExpressionStatement) {\r\n        return stmt.expr;\r\n    }\r\n    else if (stmt instanceof ReturnStatement) {\r\n        return stmt.value;\r\n    }\r\n    return null;\r\n}\r\nclass BuiltinFunctionCall extends FunctionCall {\r\n    /**\r\n     * @param {?} span\r\n     * @param {?} args\r\n     * @param {?} converter\r\n     */\r\n    constructor(span, args, converter) {\r\n        super(span, null, args);\r\n        this.args = args;\r\n        this.converter = converter;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Generates code that is used to type check templates.\r\n */\r\nclass TypeCheckCompiler {\r\n    /**\r\n     * @param {?} options\r\n     * @param {?} reflector\r\n     */\r\n    constructor(options, reflector) {\r\n        this.options = options;\r\n        this.reflector = reflector;\r\n    }\r\n    /**\r\n     * Important notes:\r\n     * - This must not produce new `import` statements, but only refer to types outside\r\n     *   of the file via the variables provided via externalReferenceVars.\r\n     *   This allows Typescript to reuse the old program's structure as no imports have changed.\r\n     * - This must not produce any exports, as this would pollute the .d.ts file\r\n     *   and also violate the point above.\r\n     * @param {?} componentId\r\n     * @param {?} component\r\n     * @param {?} template\r\n     * @param {?} usedPipes\r\n     * @param {?} externalReferenceVars\r\n     * @return {?}\r\n     */\r\n    compileComponent(componentId, component, template, usedPipes, externalReferenceVars) {\r\n        const /** @type {?} */ pipes = new Map();\r\n        usedPipes.forEach(p => pipes.set(p.name, p.type.reference));\r\n        let /** @type {?} */ embeddedViewCount = 0;\r\n        const /** @type {?} */ viewBuilderFactory = (parent) => {\r\n            const /** @type {?} */ embeddedViewIndex = embeddedViewCount++;\r\n            return new ViewBuilder(this.options, this.reflector, externalReferenceVars, parent, component.type.reference, component.isHost, embeddedViewIndex, pipes, viewBuilderFactory);\r\n        };\r\n        const /** @type {?} */ visitor = viewBuilderFactory(null);\r\n        visitor.visitAll([], template);\r\n        return visitor.build(componentId);\r\n    }\r\n}\r\nconst DYNAMIC_VAR_NAME = '_any';\r\nclass TypeCheckLocalResolver {\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getLocal(name) {\r\n        if (name === EventHandlerVars.event.name) {\r\n            // References to the event should not be type-checked.\r\n            // TODO(chuckj): determine a better type for the event.\r\n            return variable(DYNAMIC_VAR_NAME);\r\n        }\r\n        return null;\r\n    }\r\n}\r\nconst defaultResolver = new TypeCheckLocalResolver();\r\nclass ViewBuilder {\r\n    /**\r\n     * @param {?} options\r\n     * @param {?} reflector\r\n     * @param {?} externalReferenceVars\r\n     * @param {?} parent\r\n     * @param {?} component\r\n     * @param {?} isHostComponent\r\n     * @param {?} embeddedViewIndex\r\n     * @param {?} pipes\r\n     * @param {?} viewBuilderFactory\r\n     */\r\n    constructor(options, reflector, externalReferenceVars, parent, component, isHostComponent, embeddedViewIndex, pipes, viewBuilderFactory) {\r\n        this.options = options;\r\n        this.reflector = reflector;\r\n        this.externalReferenceVars = externalReferenceVars;\r\n        this.parent = parent;\r\n        this.component = component;\r\n        this.isHostComponent = isHostComponent;\r\n        this.embeddedViewIndex = embeddedViewIndex;\r\n        this.pipes = pipes;\r\n        this.viewBuilderFactory = viewBuilderFactory;\r\n        this.refOutputVars = new Map();\r\n        this.variables = [];\r\n        this.children = [];\r\n        this.updates = [];\r\n        this.actions = [];\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    getOutputVar(type) {\r\n        let /** @type {?} */ varName;\r\n        if (type === this.component && this.isHostComponent) {\r\n            varName = DYNAMIC_VAR_NAME;\r\n        }\r\n        else if (type instanceof StaticSymbol) {\r\n            varName = this.externalReferenceVars.get(type);\r\n        }\r\n        else {\r\n            varName = DYNAMIC_VAR_NAME;\r\n        }\r\n        if (!varName) {\r\n            throw new Error(`Illegal State: referring to a type without a variable ${JSON.stringify(type)}`);\r\n        }\r\n        return varName;\r\n    }\r\n    /**\r\n     * @param {?} variables\r\n     * @param {?} astNodes\r\n     * @return {?}\r\n     */\r\n    visitAll(variables, astNodes) {\r\n        this.variables = variables;\r\n        templateVisitAll(this, astNodes);\r\n    }\r\n    /**\r\n     * @param {?} componentId\r\n     * @param {?=} targetStatements\r\n     * @return {?}\r\n     */\r\n    build(componentId, targetStatements = []) {\r\n        this.children.forEach((child) => child.build(componentId, targetStatements));\r\n        const /** @type {?} */ viewStmts = [variable(DYNAMIC_VAR_NAME).set(NULL_EXPR).toDeclStmt(DYNAMIC_TYPE)];\r\n        let /** @type {?} */ bindingCount = 0;\r\n        this.updates.forEach((expression) => {\r\n            const { sourceSpan, context, value } = this.preprocessUpdateExpression(expression);\r\n            const /** @type {?} */ bindingId = `${bindingCount++}`;\r\n            const /** @type {?} */ nameResolver = context === this.component ? this : defaultResolver;\r\n            const { stmts, currValExpr } = convertPropertyBinding(nameResolver, variable(this.getOutputVar(context)), value, bindingId);\r\n            stmts.push(new ExpressionStatement(currValExpr));\r\n            viewStmts.push(...stmts.map((stmt) => applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\r\n        });\r\n        this.actions.forEach(({ sourceSpan, context, value }) => {\r\n            const /** @type {?} */ bindingId = `${bindingCount++}`;\r\n            const /** @type {?} */ nameResolver = context === this.component ? this : defaultResolver;\r\n            const { stmts } = convertActionBinding(nameResolver, variable(this.getOutputVar(context)), value, bindingId);\r\n            viewStmts.push(...stmts.map((stmt) => applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\r\n        });\r\n        const /** @type {?} */ viewName = `_View_${componentId}_${this.embeddedViewIndex}`;\r\n        const /** @type {?} */ viewFactory = new DeclareFunctionStmt(viewName, [], viewStmts);\r\n        targetStatements.push(viewFactory);\r\n        return targetStatements;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitBoundText(ast, context) {\r\n        const /** @type {?} */ astWithSource = /** @type {?} */ (ast.value);\r\n        const /** @type {?} */ inter = /** @type {?} */ (astWithSource.ast);\r\n        inter.expressions.forEach((expr) => this.updates.push({ context: this.component, value: expr, sourceSpan: ast.sourceSpan }));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitEmbeddedTemplate(ast, context) {\r\n        this.visitElementOrTemplate(ast);\r\n        // Note: The old view compiler used to use an `any` type\r\n        // for the context in any embedded view.\r\n        // We keep this behaivor behind a flag for now.\r\n        if (this.options.fullTemplateTypeCheck) {\r\n            const /** @type {?} */ childVisitor = this.viewBuilderFactory(this);\r\n            this.children.push(childVisitor);\r\n            childVisitor.visitAll(ast.variables, ast.children);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(ast, context) {\r\n        this.visitElementOrTemplate(ast);\r\n        let /** @type {?} */ inputDefs = [];\r\n        let /** @type {?} */ updateRendererExpressions = [];\r\n        let /** @type {?} */ outputDefs = [];\r\n        ast.inputs.forEach((inputAst) => {\r\n            this.updates.push({ context: this.component, value: inputAst.value, sourceSpan: inputAst.sourceSpan });\r\n        });\r\n        templateVisitAll(this, ast.children);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @return {?}\r\n     */\r\n    visitElementOrTemplate(ast) {\r\n        ast.directives.forEach((dirAst) => { this.visitDirective(dirAst); });\r\n        ast.references.forEach((ref) => {\r\n            let /** @type {?} */ outputVarType = /** @type {?} */ ((null));\r\n            // Note: The old view compiler used to use an `any` type\r\n            // for directives exposed via `exportAs`.\r\n            // We keep this behaivor behind a flag for now.\r\n            if (ref.value && ref.value.identifier && this.options.fullTemplateTypeCheck) {\r\n                outputVarType = ref.value.identifier.reference;\r\n            }\r\n            else {\r\n                outputVarType = BuiltinTypeName.Dynamic;\r\n            }\r\n            this.refOutputVars.set(ref.name, outputVarType);\r\n        });\r\n        ast.outputs.forEach((outputAst) => {\r\n            this.actions.push({ context: this.component, value: outputAst.handler, sourceSpan: outputAst.sourceSpan });\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} dirAst\r\n     * @return {?}\r\n     */\r\n    visitDirective(dirAst) {\r\n        const /** @type {?} */ dirType = dirAst.directive.type.reference;\r\n        dirAst.inputs.forEach((input) => this.updates.push({ context: this.component, value: input.value, sourceSpan: input.sourceSpan }));\r\n        // Note: The old view compiler used to use an `any` type\r\n        // for expressions in host properties / events.\r\n        // We keep this behaivor behind a flag for now.\r\n        if (this.options.fullTemplateTypeCheck) {\r\n            dirAst.hostProperties.forEach((inputAst) => this.updates.push({ context: dirType, value: inputAst.value, sourceSpan: inputAst.sourceSpan }));\r\n            dirAst.hostEvents.forEach((hostEventAst) => this.actions.push({\r\n                context: dirType,\r\n                value: hostEventAst.handler,\r\n                sourceSpan: hostEventAst.sourceSpan\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getLocal(name) {\r\n        if (name == EventHandlerVars.event.name) {\r\n            return variable(this.getOutputVar(BuiltinTypeName.Dynamic));\r\n        }\r\n        for (let /** @type {?} */ currBuilder = this; currBuilder; currBuilder = currBuilder.parent) {\r\n            let /** @type {?} */ outputVarType;\r\n            // check references\r\n            outputVarType = currBuilder.refOutputVars.get(name);\r\n            if (outputVarType == null) {\r\n                // check variables\r\n                const /** @type {?} */ varAst = currBuilder.variables.find((varAst) => varAst.name === name);\r\n                if (varAst) {\r\n                    outputVarType = BuiltinTypeName.Dynamic;\r\n                }\r\n            }\r\n            if (outputVarType != null) {\r\n                return variable(this.getOutputVar(outputVarType));\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    pipeOutputVar(name) {\r\n        const /** @type {?} */ pipe = this.pipes.get(name);\r\n        if (!pipe) {\r\n            throw new Error(`Illegal State: Could not find pipe ${name} in template of ${this.component}`);\r\n        }\r\n        return this.getOutputVar(pipe);\r\n    }\r\n    /**\r\n     * @param {?} expression\r\n     * @return {?}\r\n     */\r\n    preprocessUpdateExpression(expression) {\r\n        return {\r\n            sourceSpan: expression.sourceSpan,\r\n            context: expression.context,\r\n            value: convertPropertyBindingBuiltins({\r\n                createLiteralArrayConverter: (argCount) => (args) => {\r\n                    const /** @type {?} */ arr = literalArr(args);\r\n                    // Note: The old view compiler used to use an `any` type\r\n                    // for arrays.\r\n                    return this.options.fullTemplateTypeCheck ? arr : arr.cast(DYNAMIC_TYPE);\r\n                },\r\n                createLiteralMapConverter: (keys) => (values) => {\r\n                    const /** @type {?} */ entries = keys.map((k, i) => ({\r\n                        key: k.key,\r\n                        value: values[i],\r\n                        quoted: k.quoted,\r\n                    }));\r\n                    const /** @type {?} */ map = literalMap(entries);\r\n                    // Note: The old view compiler used to use an `any` type\r\n                    // for maps.\r\n                    return this.options.fullTemplateTypeCheck ? map : map.cast(DYNAMIC_TYPE);\r\n                },\r\n                createPipeConverter: (name, argCount) => (args) => {\r\n                    // Note: The old view compiler used to use an `any` type\r\n                    // for pipes.\r\n                    const /** @type {?} */ pipeExpr = this.options.fullTemplateTypeCheck ?\r\n                        variable(this.pipeOutputVar(name)) :\r\n                        variable(this.getOutputVar(BuiltinTypeName.Dynamic));\r\n                    return pipeExpr.callMethod('transform', args);\r\n                },\r\n            }, expression.value)\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitNgContent(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDirectiveProperty(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReference(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitVariable(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitEvent(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElementProperty(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttr(ast, context) { }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst CLASS_ATTR$1 = 'class';\r\nconst STYLE_ATTR = 'style';\r\nconst IMPLICIT_TEMPLATE_VAR = '\\$implicit';\r\nclass ViewCompileResult {\r\n    /**\r\n     * @param {?} viewClassVar\r\n     * @param {?} rendererTypeVar\r\n     */\r\n    constructor(viewClassVar, rendererTypeVar) {\r\n        this.viewClassVar = viewClassVar;\r\n        this.rendererTypeVar = rendererTypeVar;\r\n    }\r\n}\r\nclass ViewCompiler {\r\n    /**\r\n     * @param {?} _reflector\r\n     */\r\n    constructor(_reflector) {\r\n        this._reflector = _reflector;\r\n    }\r\n    /**\r\n     * @param {?} outputCtx\r\n     * @param {?} component\r\n     * @param {?} template\r\n     * @param {?} styles\r\n     * @param {?} usedPipes\r\n     * @return {?}\r\n     */\r\n    compileComponent(outputCtx, component, template, styles, usedPipes) {\r\n        let /** @type {?} */ embeddedViewCount = 0;\r\n        const /** @type {?} */ staticQueryIds = findStaticQueryIds(template);\r\n        let /** @type {?} */ renderComponentVarName = /** @type {?} */ ((undefined));\r\n        if (!component.isHost) {\r\n            const /** @type {?} */ template = /** @type {?} */ ((component.template));\r\n            const /** @type {?} */ customRenderData = [];\r\n            if (template.animations && template.animations.length) {\r\n                customRenderData.push(new LiteralMapEntry('animation', convertValueToOutputAst(outputCtx, template.animations), true));\r\n            }\r\n            const /** @type {?} */ renderComponentVar = variable(rendererTypeName(component.type.reference));\r\n            renderComponentVarName = /** @type {?} */ ((renderComponentVar.name));\r\n            outputCtx.statements.push(renderComponentVar\r\n                .set(importExpr(Identifiers.createRendererType2).callFn([new LiteralMapExpr([\r\n                    new LiteralMapEntry('encapsulation', literal(template.encapsulation), false),\r\n                    new LiteralMapEntry('styles', styles, false),\r\n                    new LiteralMapEntry('data', new LiteralMapExpr(customRenderData), false)\r\n                ])]))\r\n                .toDeclStmt(importType(Identifiers.RendererType2), [StmtModifier.Final, StmtModifier.Exported]));\r\n        }\r\n        const /** @type {?} */ viewBuilderFactory = (parent) => {\r\n            const /** @type {?} */ embeddedViewIndex = embeddedViewCount++;\r\n            return new ViewBuilder$1(this._reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);\r\n        };\r\n        const /** @type {?} */ visitor = viewBuilderFactory(null);\r\n        visitor.visitAll([], template);\r\n        outputCtx.statements.push(...visitor.build());\r\n        return new ViewCompileResult(visitor.viewName, renderComponentVarName);\r\n    }\r\n}\r\nconst LOG_VAR$1 = variable('_l');\r\nconst VIEW_VAR = variable('_v');\r\nconst CHECK_VAR = variable('_ck');\r\nconst COMP_VAR = variable('_co');\r\nconst EVENT_NAME_VAR = variable('en');\r\nconst ALLOW_DEFAULT_VAR = variable(`ad`);\r\nclass ViewBuilder$1 {\r\n    /**\r\n     * @param {?} reflector\r\n     * @param {?} outputCtx\r\n     * @param {?} parent\r\n     * @param {?} component\r\n     * @param {?} embeddedViewIndex\r\n     * @param {?} usedPipes\r\n     * @param {?} staticQueryIds\r\n     * @param {?} viewBuilderFactory\r\n     */\r\n    constructor(reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {\r\n        this.reflector = reflector;\r\n        this.outputCtx = outputCtx;\r\n        this.parent = parent;\r\n        this.component = component;\r\n        this.embeddedViewIndex = embeddedViewIndex;\r\n        this.usedPipes = usedPipes;\r\n        this.staticQueryIds = staticQueryIds;\r\n        this.viewBuilderFactory = viewBuilderFactory;\r\n        this.nodes = [];\r\n        this.purePipeNodeIndices = Object.create(null);\r\n        this.refNodeIndices = Object.create(null);\r\n        this.variables = [];\r\n        this.children = [];\r\n        // TODO(tbosch): The old view compiler used to use an `any` type\r\n        // for the context in any embedded view. We keep this behaivor for now\r\n        // to be able to introduce the new view compiler without too many errors.\r\n        this.compType = this.embeddedViewIndex > 0 ?\r\n            DYNAMIC_TYPE : /** @type {?} */\r\n            ((expressionType(outputCtx.importExpr(this.component.type.reference))));\r\n        this.viewName = viewClassName(this.component.type.reference, this.embeddedViewIndex);\r\n    }\r\n    /**\r\n     * @param {?} variables\r\n     * @param {?} astNodes\r\n     * @return {?}\r\n     */\r\n    visitAll(variables, astNodes) {\r\n        this.variables = variables;\r\n        // create the pipes for the pure pipes immediately, so that we know their indices.\r\n        if (!this.parent) {\r\n            this.usedPipes.forEach((pipe) => {\r\n                if (pipe.pure) {\r\n                    this.purePipeNodeIndices[pipe.name] = this._createPipe(null, pipe);\r\n                }\r\n            });\r\n        }\r\n        if (!this.parent) {\r\n            const /** @type {?} */ queryIds = staticViewQueryIds(this.staticQueryIds);\r\n            this.component.viewQueries.forEach((query, queryIndex) => {\r\n                // Note: queries start with id 1 so we can use the number in a Bloom filter!\r\n                const /** @type {?} */ queryId = queryIndex + 1;\r\n                const /** @type {?} */ bindingType = query.first ? 0 /* First */ : 1;\r\n                const /** @type {?} */ flags = 134217728 /* TypeViewQuery */ | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);\r\n                this.nodes.push(() => ({\r\n                    sourceSpan: null,\r\n                    nodeFlags: flags,\r\n                    nodeDef: importExpr(Identifiers.queryDef).callFn([\r\n                        literal(flags), literal(queryId),\r\n                        new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType), false)])\r\n                    ])\r\n                }));\r\n            });\r\n        }\r\n        templateVisitAll(this, astNodes);\r\n        if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {\r\n            // if the view is an embedded view, then we need to add an additional root node in some cases\r\n            this.nodes.push(() => ({\r\n                sourceSpan: null,\r\n                nodeFlags: 1 /* TypeElement */,\r\n                nodeDef: importExpr(Identifiers.anchorDef).callFn([\r\n                    literal(0 /* None */), NULL_EXPR, NULL_EXPR, literal(0)\r\n                ])\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?=} targetStatements\r\n     * @return {?}\r\n     */\r\n    build(targetStatements = []) {\r\n        this.children.forEach((child) => child.build(targetStatements));\r\n        const { updateRendererStmts, updateDirectivesStmts, nodeDefExprs } = this._createNodeExpressions();\r\n        const /** @type {?} */ updateRendererFn = this._createUpdateFn(updateRendererStmts);\r\n        const /** @type {?} */ updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);\r\n        let /** @type {?} */ viewFlags = 0;\r\n        if (!this.parent && this.component.changeDetection === ChangeDetectionStrategy.OnPush) {\r\n            viewFlags |= 2 /* OnPush */;\r\n        }\r\n        const /** @type {?} */ viewFactory = new DeclareFunctionStmt(this.viewName, [new FnParam(/** @type {?} */ ((LOG_VAR$1.name)))], [new ReturnStatement(importExpr(Identifiers.viewDef).callFn([\r\n                literal(viewFlags),\r\n                literalArr(nodeDefExprs),\r\n                updateDirectivesFn,\r\n                updateRendererFn,\r\n            ]))], importType(Identifiers.ViewDefinition), this.embeddedViewIndex === 0 ? [StmtModifier.Exported] : []);\r\n        targetStatements.push(viewFactory);\r\n        return targetStatements;\r\n    }\r\n    /**\r\n     * @param {?} updateStmts\r\n     * @return {?}\r\n     */\r\n    _createUpdateFn(updateStmts) {\r\n        let /** @type {?} */ updateFn;\r\n        if (updateStmts.length > 0) {\r\n            const /** @type {?} */ preStmts = [];\r\n            if (!this.component.isHost && findReadVarNames(updateStmts).has(/** @type {?} */ ((COMP_VAR.name)))) {\r\n                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\r\n            }\r\n            updateFn = fn([\r\n                new FnParam(/** @type {?} */ ((CHECK_VAR.name)), INFERRED_TYPE),\r\n                new FnParam(/** @type {?} */ ((VIEW_VAR.name)), INFERRED_TYPE)\r\n            ], [...preStmts, ...updateStmts], INFERRED_TYPE);\r\n        }\r\n        else {\r\n            updateFn = NULL_EXPR;\r\n        }\r\n        return updateFn;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitNgContent(ast, context) {\r\n        // ngContentDef(ngContentIndex: number, index: number): NodeDef;\r\n        this.nodes.push(() => ({\r\n            sourceSpan: ast.sourceSpan,\r\n            nodeFlags: 8 /* TypeNgContent */,\r\n            nodeDef: importExpr(Identifiers.ngContentDef).callFn([\r\n                literal(ast.ngContentIndex), literal(ast.index)\r\n            ])\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitText(ast, context) {\r\n        // Static text nodes have no check function\r\n        const /** @type {?} */ checkIndex = -1;\r\n        this.nodes.push(() => ({\r\n            sourceSpan: ast.sourceSpan,\r\n            nodeFlags: 2 /* TypeText */,\r\n            nodeDef: importExpr(Identifiers.textDef).callFn([\r\n                literal(checkIndex),\r\n                literal(ast.ngContentIndex),\r\n                literalArr([literal(ast.value)]),\r\n            ])\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitBoundText(ast, context) {\r\n        const /** @type {?} */ nodeIndex = this.nodes.length;\r\n        // reserve the space in the nodeDefs array\r\n        this.nodes.push(/** @type {?} */ ((null)));\r\n        const /** @type {?} */ astWithSource = /** @type {?} */ (ast.value);\r\n        const /** @type {?} */ inter = /** @type {?} */ (astWithSource.ast);\r\n        const /** @type {?} */ updateRendererExpressions = inter.expressions.map((expr, bindingIndex) => this._preprocessUpdateExpression({ nodeIndex, bindingIndex, sourceSpan: ast.sourceSpan, context: COMP_VAR, value: expr }));\r\n        // Check index is the same as the node index during compilation\r\n        // They might only differ at runtime\r\n        const /** @type {?} */ checkIndex = nodeIndex;\r\n        this.nodes[nodeIndex] = () => ({\r\n            sourceSpan: ast.sourceSpan,\r\n            nodeFlags: 2 /* TypeText */,\r\n            nodeDef: importExpr(Identifiers.textDef).callFn([\r\n                literal(checkIndex),\r\n                literal(ast.ngContentIndex),\r\n                literalArr(inter.strings.map(s => literal(s))),\r\n            ]),\r\n            updateRenderer: updateRendererExpressions\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitEmbeddedTemplate(ast, context) {\r\n        const /** @type {?} */ nodeIndex = this.nodes.length;\r\n        // reserve the space in the nodeDefs array\r\n        this.nodes.push(/** @type {?} */ ((null)));\r\n        const { flags, queryMatchesExpr, hostEvents } = this._visitElementOrTemplate(nodeIndex, ast);\r\n        const /** @type {?} */ childVisitor = this.viewBuilderFactory(this);\r\n        this.children.push(childVisitor);\r\n        childVisitor.visitAll(ast.variables, ast.children);\r\n        const /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\r\n        // anchorDef(\r\n        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,\r\n        //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:\r\n        //   ViewDefinitionFactory): NodeDef;\r\n        this.nodes[nodeIndex] = () => ({\r\n            sourceSpan: ast.sourceSpan,\r\n            nodeFlags: 1 /* TypeElement */ | flags,\r\n            nodeDef: importExpr(Identifiers.anchorDef).callFn([\r\n                literal(flags),\r\n                queryMatchesExpr,\r\n                literal(ast.ngContentIndex),\r\n                literal(childCount),\r\n                this._createElementHandleEventFn(nodeIndex, hostEvents),\r\n                variable(childVisitor.viewName),\r\n            ])\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElement(ast, context) {\r\n        const /** @type {?} */ nodeIndex = this.nodes.length;\r\n        // reserve the space in the nodeDefs array so we can add children\r\n        this.nodes.push(/** @type {?} */ ((null)));\r\n        // Using a null element name creates an anchor.\r\n        const /** @type {?} */ elName = isNgContainer(ast.name) ? null : ast.name;\r\n        const { flags, usedEvents, queryMatchesExpr, hostBindings: dirHostBindings, hostEvents } = this._visitElementOrTemplate(nodeIndex, ast);\r\n        let /** @type {?} */ inputDefs = [];\r\n        let /** @type {?} */ updateRendererExpressions = [];\r\n        let /** @type {?} */ outputDefs = [];\r\n        if (elName) {\r\n            const /** @type {?} */ hostBindings = ast.inputs\r\n                .map((inputAst) => ({\r\n                context: /** @type {?} */ (COMP_VAR),\r\n                inputAst,\r\n                dirAst: /** @type {?} */ (null),\r\n            }))\r\n                .concat(dirHostBindings);\r\n            if (hostBindings.length) {\r\n                updateRendererExpressions =\r\n                    hostBindings.map((hostBinding, bindingIndex) => this._preprocessUpdateExpression({\r\n                        context: hostBinding.context,\r\n                        nodeIndex,\r\n                        bindingIndex,\r\n                        sourceSpan: hostBinding.inputAst.sourceSpan,\r\n                        value: hostBinding.inputAst.value\r\n                    }));\r\n                inputDefs = hostBindings.map(hostBinding => elementBindingDef(hostBinding.inputAst, hostBinding.dirAst));\r\n            }\r\n            outputDefs = usedEvents.map(([target, eventName]) => literalArr([literal(target), literal(eventName)]));\r\n        }\r\n        templateVisitAll(this, ast.children);\r\n        const /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\r\n        const /** @type {?} */ compAst = ast.directives.find(dirAst => dirAst.directive.isComponent);\r\n        let /** @type {?} */ compRendererType = /** @type {?} */ (NULL_EXPR);\r\n        let /** @type {?} */ compView = /** @type {?} */ (NULL_EXPR);\r\n        if (compAst) {\r\n            compView = this.outputCtx.importExpr(compAst.directive.componentViewType);\r\n            compRendererType = this.outputCtx.importExpr(compAst.directive.rendererType);\r\n        }\r\n        // Check index is the same as the node index during compilation\r\n        // They might only differ at runtime\r\n        const /** @type {?} */ checkIndex = nodeIndex;\r\n        this.nodes[nodeIndex] = () => ({\r\n            sourceSpan: ast.sourceSpan,\r\n            nodeFlags: 1 /* TypeElement */ | flags,\r\n            nodeDef: importExpr(Identifiers.elementDef).callFn([\r\n                literal(checkIndex),\r\n                literal(flags),\r\n                queryMatchesExpr,\r\n                literal(ast.ngContentIndex),\r\n                literal(childCount),\r\n                literal(elName),\r\n                elName ? fixedAttrsDef(ast) : NULL_EXPR,\r\n                inputDefs.length ? literalArr(inputDefs) : NULL_EXPR,\r\n                outputDefs.length ? literalArr(outputDefs) : NULL_EXPR,\r\n                this._createElementHandleEventFn(nodeIndex, hostEvents),\r\n                compView,\r\n                compRendererType,\r\n            ]),\r\n            updateRenderer: updateRendererExpressions\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} nodeIndex\r\n     * @param {?} ast\r\n     * @return {?}\r\n     */\r\n    _visitElementOrTemplate(nodeIndex, ast) {\r\n        let /** @type {?} */ flags = 0;\r\n        if (ast.hasViewContainer) {\r\n            flags |= 16777216 /* EmbeddedViews */;\r\n        }\r\n        const /** @type {?} */ usedEvents = new Map();\r\n        ast.outputs.forEach((event) => {\r\n            const { name, target } = elementEventNameAndTarget(event, null);\r\n            usedEvents.set(elementEventFullName(target, name), [target, name]);\r\n        });\r\n        ast.directives.forEach((dirAst) => {\r\n            dirAst.hostEvents.forEach((event) => {\r\n                const { name, target } = elementEventNameAndTarget(event, dirAst);\r\n                usedEvents.set(elementEventFullName(target, name), [target, name]);\r\n            });\r\n        });\r\n        const /** @type {?} */ hostBindings = [];\r\n        const /** @type {?} */ hostEvents = [];\r\n        this._visitComponentFactoryResolverProvider(ast.directives);\r\n        ast.providers.forEach((providerAst, providerIndex) => {\r\n            let /** @type {?} */ dirAst = /** @type {?} */ ((undefined));\r\n            let /** @type {?} */ dirIndex = /** @type {?} */ ((undefined));\r\n            ast.directives.forEach((localDirAst, i) => {\r\n                if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {\r\n                    dirAst = localDirAst;\r\n                    dirIndex = i;\r\n                }\r\n            });\r\n            if (dirAst) {\r\n                const { hostBindings: dirHostBindings, hostEvents: dirHostEvents } = this._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, /** @type {?} */ ((this.staticQueryIds.get(/** @type {?} */ (ast)))));\r\n                hostBindings.push(...dirHostBindings);\r\n                hostEvents.push(...dirHostEvents);\r\n            }\r\n            else {\r\n                this._visitProvider(providerAst, ast.queryMatches);\r\n            }\r\n        });\r\n        let /** @type {?} */ queryMatchExprs = [];\r\n        ast.queryMatches.forEach((match) => {\r\n            let /** @type {?} */ valueType = /** @type {?} */ ((undefined));\r\n            if (tokenReference(match.value) ===\r\n                this.reflector.resolveExternalReference(Identifiers.ElementRef)) {\r\n                valueType = 0 /* ElementRef */;\r\n            }\r\n            else if (tokenReference(match.value) ===\r\n                this.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\r\n                valueType = 3 /* ViewContainerRef */;\r\n            }\r\n            else if (tokenReference(match.value) ===\r\n                this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\r\n                valueType = 2 /* TemplateRef */;\r\n            }\r\n            if (valueType != null) {\r\n                queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));\r\n            }\r\n        });\r\n        ast.references.forEach((ref) => {\r\n            let /** @type {?} */ valueType = /** @type {?} */ ((undefined));\r\n            if (!ref.value) {\r\n                valueType = 1 /* RenderElement */;\r\n            }\r\n            else if (tokenReference(ref.value) ===\r\n                this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\r\n                valueType = 2 /* TemplateRef */;\r\n            }\r\n            if (valueType != null) {\r\n                this.refNodeIndices[ref.name] = nodeIndex;\r\n                queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)]));\r\n            }\r\n        });\r\n        ast.outputs.forEach((outputAst) => {\r\n            hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: /** @type {?} */ ((null)) });\r\n        });\r\n        return {\r\n            flags,\r\n            usedEvents: Array.from(usedEvents.values()),\r\n            queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,\r\n            hostBindings,\r\n            hostEvents: hostEvents\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} providerAst\r\n     * @param {?} dirAst\r\n     * @param {?} directiveIndex\r\n     * @param {?} elementNodeIndex\r\n     * @param {?} refs\r\n     * @param {?} queryMatches\r\n     * @param {?} usedEvents\r\n     * @param {?} queryIds\r\n     * @return {?}\r\n     */\r\n    _visitDirective(providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {\r\n        const /** @type {?} */ nodeIndex = this.nodes.length;\r\n        // reserve the space in the nodeDefs array so we can add children\r\n        this.nodes.push(/** @type {?} */ ((null)));\r\n        dirAst.directive.queries.forEach((query, queryIndex) => {\r\n            const /** @type {?} */ queryId = dirAst.contentQueryStartId + queryIndex;\r\n            const /** @type {?} */ flags = 67108864 /* TypeContentQuery */ | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);\r\n            const /** @type {?} */ bindingType = query.first ? 0 /* First */ : 1;\r\n            this.nodes.push(() => ({\r\n                sourceSpan: dirAst.sourceSpan,\r\n                nodeFlags: flags,\r\n                nodeDef: importExpr(Identifiers.queryDef).callFn([\r\n                    literal(flags), literal(queryId),\r\n                    new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType), false)])\r\n                ]),\r\n            }));\r\n        });\r\n        // Note: the operation below might also create new nodeDefs,\r\n        // but we don't want them to be a child of a directive,\r\n        // as they might be a provider/pipe on their own.\r\n        // I.e. we only allow queries as children of directives nodes.\r\n        const /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\r\n        let { flags, queryMatchExprs, providerExpr, depsExpr } = this._visitProviderOrDirective(providerAst, queryMatches);\r\n        refs.forEach((ref) => {\r\n            if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {\r\n                this.refNodeIndices[ref.name] = nodeIndex;\r\n                queryMatchExprs.push(literalArr([literal(ref.name), literal(4 /* Provider */)]));\r\n            }\r\n        });\r\n        if (dirAst.directive.isComponent) {\r\n            flags |= 32768 /* Component */;\r\n        }\r\n        const /** @type {?} */ inputDefs = dirAst.inputs.map((inputAst, inputIndex) => {\r\n            const /** @type {?} */ mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]);\r\n            // Note: it's important to not quote the key so that we can capture renames by minifiers!\r\n            return new LiteralMapEntry(inputAst.directiveName, mapValue, false);\r\n        });\r\n        const /** @type {?} */ outputDefs = [];\r\n        const /** @type {?} */ dirMeta = dirAst.directive;\r\n        Object.keys(dirMeta.outputs).forEach((propName) => {\r\n            const /** @type {?} */ eventName = dirMeta.outputs[propName];\r\n            if (usedEvents.has(eventName)) {\r\n                // Note: it's important to not quote the key so that we can capture renames by minifiers!\r\n                outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));\r\n            }\r\n        });\r\n        let /** @type {?} */ updateDirectiveExpressions = [];\r\n        if (dirAst.inputs.length || (flags & (262144 /* DoCheck */ | 65536 /* OnInit */)) > 0) {\r\n            updateDirectiveExpressions =\r\n                dirAst.inputs.map((input, bindingIndex) => this._preprocessUpdateExpression({\r\n                    nodeIndex,\r\n                    bindingIndex,\r\n                    sourceSpan: input.sourceSpan,\r\n                    context: COMP_VAR,\r\n                    value: input.value\r\n                }));\r\n        }\r\n        const /** @type {?} */ dirContextExpr = importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, literal(nodeIndex)]);\r\n        const /** @type {?} */ hostBindings = dirAst.hostProperties.map((inputAst) => ({\r\n            context: dirContextExpr,\r\n            dirAst,\r\n            inputAst,\r\n        }));\r\n        const /** @type {?} */ hostEvents = dirAst.hostEvents.map((hostEventAst) => ({\r\n            context: dirContextExpr,\r\n            eventAst: hostEventAst, dirAst,\r\n        }));\r\n        // Check index is the same as the node index during compilation\r\n        // They might only differ at runtime\r\n        const /** @type {?} */ checkIndex = nodeIndex;\r\n        this.nodes[nodeIndex] = () => ({\r\n            sourceSpan: dirAst.sourceSpan,\r\n            nodeFlags: 16384 /* TypeDirective */ | flags,\r\n            nodeDef: importExpr(Identifiers.directiveDef).callFn([\r\n                literal(checkIndex),\r\n                literal(flags),\r\n                queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,\r\n                literal(childCount),\r\n                providerExpr,\r\n                depsExpr,\r\n                inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR,\r\n                outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR,\r\n            ]),\r\n            updateDirectives: updateDirectiveExpressions,\r\n            directive: dirAst.directive.type,\r\n        });\r\n        return { hostBindings, hostEvents };\r\n    }\r\n    /**\r\n     * @param {?} providerAst\r\n     * @param {?} queryMatches\r\n     * @return {?}\r\n     */\r\n    _visitProvider(providerAst, queryMatches) {\r\n        this._addProviderNode(this._visitProviderOrDirective(providerAst, queryMatches));\r\n    }\r\n    /**\r\n     * @param {?} directives\r\n     * @return {?}\r\n     */\r\n    _visitComponentFactoryResolverProvider(directives) {\r\n        const /** @type {?} */ componentDirMeta = directives.find(dirAst => dirAst.directive.isComponent);\r\n        if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {\r\n            const { providerExpr, depsExpr, flags, tokenExpr } = componentFactoryResolverProviderDef(this.reflector, this.outputCtx, 8192 /* PrivateProvider */, componentDirMeta.directive.entryComponents);\r\n            this._addProviderNode({\r\n                providerExpr,\r\n                depsExpr,\r\n                flags,\r\n                tokenExpr,\r\n                queryMatchExprs: [],\r\n                sourceSpan: componentDirMeta.sourceSpan\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    _addProviderNode(data) {\r\n        const /** @type {?} */ nodeIndex = this.nodes.length;\r\n        // providerDef(\r\n        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,\r\n        //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\r\n        this.nodes.push(() => ({\r\n            sourceSpan: data.sourceSpan,\r\n            nodeFlags: data.flags,\r\n            nodeDef: importExpr(Identifiers.providerDef).callFn([\r\n                literal(data.flags),\r\n                data.queryMatchExprs.length ? literalArr(data.queryMatchExprs) : NULL_EXPR,\r\n                data.tokenExpr, data.providerExpr, data.depsExpr\r\n            ])\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} providerAst\r\n     * @param {?} queryMatches\r\n     * @return {?}\r\n     */\r\n    _visitProviderOrDirective(providerAst, queryMatches) {\r\n        let /** @type {?} */ flags = 0;\r\n        let /** @type {?} */ queryMatchExprs = [];\r\n        queryMatches.forEach((match) => {\r\n            if (tokenReference(match.value) === tokenReference(providerAst.token)) {\r\n                queryMatchExprs.push(literalArr([literal(match.queryId), literal(4 /* Provider */)]));\r\n            }\r\n        });\r\n        const { providerExpr, depsExpr, flags: providerFlags, tokenExpr } = providerDef(this.outputCtx, providerAst);\r\n        return {\r\n            flags: flags | providerFlags,\r\n            queryMatchExprs,\r\n            providerExpr,\r\n            depsExpr,\r\n            tokenExpr,\r\n            sourceSpan: providerAst.sourceSpan\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getLocal(name) {\r\n        if (name == EventHandlerVars.event.name) {\r\n            return EventHandlerVars.event;\r\n        }\r\n        let /** @type {?} */ currViewExpr = VIEW_VAR;\r\n        for (let /** @type {?} */ currBuilder = this; currBuilder; currBuilder = currBuilder.parent,\r\n            currViewExpr = currViewExpr.prop('parent').cast(DYNAMIC_TYPE)) {\r\n            // check references\r\n            const /** @type {?} */ refNodeIndex = currBuilder.refNodeIndices[name];\r\n            if (refNodeIndex != null) {\r\n                return importExpr(Identifiers.nodeValue).callFn([currViewExpr, literal(refNodeIndex)]);\r\n            }\r\n            // check variables\r\n            const /** @type {?} */ varAst = currBuilder.variables.find((varAst) => varAst.name === name);\r\n            if (varAst) {\r\n                const /** @type {?} */ varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;\r\n                return currViewExpr.prop('context').prop(varValue);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} sourceSpan\r\n     * @param {?} argCount\r\n     * @return {?}\r\n     */\r\n    _createLiteralArrayConverter(sourceSpan, argCount) {\r\n        if (argCount === 0) {\r\n            const /** @type {?} */ valueExpr = importExpr(Identifiers.EMPTY_ARRAY);\r\n            return () => valueExpr;\r\n        }\r\n        const /** @type {?} */ checkIndex = this.nodes.length;\r\n        this.nodes.push(() => ({\r\n            sourceSpan,\r\n            nodeFlags: 32 /* TypePureArray */,\r\n            nodeDef: importExpr(Identifiers.pureArrayDef).callFn([\r\n                literal(checkIndex),\r\n                literal(argCount),\r\n            ])\r\n        }));\r\n        return (args) => callCheckStmt(checkIndex, args);\r\n    }\r\n    /**\r\n     * @param {?} sourceSpan\r\n     * @param {?} keys\r\n     * @return {?}\r\n     */\r\n    _createLiteralMapConverter(sourceSpan, keys) {\r\n        if (keys.length === 0) {\r\n            const /** @type {?} */ valueExpr = importExpr(Identifiers.EMPTY_MAP);\r\n            return () => valueExpr;\r\n        }\r\n        const /** @type {?} */ map = literalMap(keys.map((e, i) => (Object.assign({}, e, { value: literal(i) }))));\r\n        const /** @type {?} */ checkIndex = this.nodes.length;\r\n        this.nodes.push(() => ({\r\n            sourceSpan,\r\n            nodeFlags: 64 /* TypePureObject */,\r\n            nodeDef: importExpr(Identifiers.pureObjectDef).callFn([\r\n                literal(checkIndex),\r\n                map,\r\n            ])\r\n        }));\r\n        return (args) => callCheckStmt(checkIndex, args);\r\n    }\r\n    /**\r\n     * @param {?} expression\r\n     * @param {?} name\r\n     * @param {?} argCount\r\n     * @return {?}\r\n     */\r\n    _createPipeConverter(expression, name, argCount) {\r\n        const /** @type {?} */ pipe = /** @type {?} */ ((this.usedPipes.find((pipeSummary) => pipeSummary.name === name)));\r\n        if (pipe.pure) {\r\n            const /** @type {?} */ checkIndex = this.nodes.length;\r\n            this.nodes.push(() => ({\r\n                sourceSpan: expression.sourceSpan,\r\n                nodeFlags: 128 /* TypePurePipe */,\r\n                nodeDef: importExpr(Identifiers.purePipeDef).callFn([\r\n                    literal(checkIndex),\r\n                    literal(argCount),\r\n                ])\r\n            }));\r\n            // find underlying pipe in the component view\r\n            let /** @type {?} */ compViewExpr = VIEW_VAR;\r\n            let /** @type {?} */ compBuilder = this;\r\n            while (compBuilder.parent) {\r\n                compBuilder = compBuilder.parent;\r\n                compViewExpr = compViewExpr.prop('parent').cast(DYNAMIC_TYPE);\r\n            }\r\n            const /** @type {?} */ pipeNodeIndex = compBuilder.purePipeNodeIndices[name];\r\n            const /** @type {?} */ pipeValueExpr = importExpr(Identifiers.nodeValue).callFn([compViewExpr, literal(pipeNodeIndex)]);\r\n            return (args) => callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(checkIndex, [pipeValueExpr].concat(args)));\r\n        }\r\n        else {\r\n            const /** @type {?} */ nodeIndex = this._createPipe(expression.sourceSpan, pipe);\r\n            const /** @type {?} */ nodeValueExpr = importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, literal(nodeIndex)]);\r\n            return (args) => callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr.callMethod('transform', args));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} sourceSpan\r\n     * @param {?} pipe\r\n     * @return {?}\r\n     */\r\n    _createPipe(sourceSpan, pipe) {\r\n        const /** @type {?} */ nodeIndex = this.nodes.length;\r\n        let /** @type {?} */ flags = 0;\r\n        pipe.type.lifecycleHooks.forEach((lifecycleHook) => {\r\n            // for pipes, we only support ngOnDestroy\r\n            if (lifecycleHook === LifecycleHooks.OnDestroy) {\r\n                flags |= lifecycleHookToNodeFlag(lifecycleHook);\r\n            }\r\n        });\r\n        const /** @type {?} */ depExprs = pipe.type.diDeps.map((diDep) => depDef(this.outputCtx, diDep));\r\n        // function pipeDef(\r\n        //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef\r\n        this.nodes.push(() => ({\r\n            sourceSpan,\r\n            nodeFlags: 16 /* TypePipe */,\r\n            nodeDef: importExpr(Identifiers.pipeDef).callFn([\r\n                literal(flags), this.outputCtx.importExpr(pipe.type.reference), literalArr(depExprs)\r\n            ])\r\n        }));\r\n        return nodeIndex;\r\n    }\r\n    /**\r\n     * For the AST in `UpdateExpression.value`:\r\n     * - create nodes for pipes, literal arrays and, literal maps,\r\n     * - update the AST to replace pipes, literal arrays and, literal maps with calls to check fn.\r\n     *\r\n     * WARNING: This might create new nodeDefs (for pipes and literal arrays and literal maps)!\r\n     * @param {?} expression\r\n     * @return {?}\r\n     */\r\n    _preprocessUpdateExpression(expression) {\r\n        return {\r\n            nodeIndex: expression.nodeIndex,\r\n            bindingIndex: expression.bindingIndex,\r\n            sourceSpan: expression.sourceSpan,\r\n            context: expression.context,\r\n            value: convertPropertyBindingBuiltins({\r\n                createLiteralArrayConverter: (argCount) => this._createLiteralArrayConverter(expression.sourceSpan, argCount),\r\n                createLiteralMapConverter: (keys) => this._createLiteralMapConverter(expression.sourceSpan, keys),\r\n                createPipeConverter: (name, argCount) => this._createPipeConverter(expression, name, argCount)\r\n            }, expression.value)\r\n        };\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _createNodeExpressions() {\r\n        const /** @type {?} */ self = this;\r\n        let /** @type {?} */ updateBindingCount = 0;\r\n        const /** @type {?} */ updateRendererStmts = [];\r\n        const /** @type {?} */ updateDirectivesStmts = [];\r\n        const /** @type {?} */ nodeDefExprs = this.nodes.map((factory, nodeIndex) => {\r\n            const { nodeDef, nodeFlags, updateDirectives, updateRenderer, sourceSpan } = factory();\r\n            if (updateRenderer) {\r\n                updateRendererStmts.push(...createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false));\r\n            }\r\n            if (updateDirectives) {\r\n                updateDirectivesStmts.push(...createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (nodeFlags & (262144 /* DoCheck */ | 65536 /* OnInit */)) > 0));\r\n            }\r\n            // We use a comma expression to call the log function before\r\n            // the nodeDef function, but still use the result of the nodeDef function\r\n            // as the value.\r\n            // Note: We only add the logger to elements / text nodes,\r\n            // so we don't generate too much code.\r\n            const /** @type {?} */ logWithNodeDef = nodeFlags & 3 /* CatRenderNode */ ?\r\n                new CommaExpr([LOG_VAR$1.callFn([]).callFn([]), nodeDef]) :\r\n                nodeDef;\r\n            return applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);\r\n        });\r\n        return { updateRendererStmts, updateDirectivesStmts, nodeDefExprs };\r\n        /**\r\n         * @param {?} nodeIndex\r\n         * @param {?} sourceSpan\r\n         * @param {?} expressions\r\n         * @param {?} allowEmptyExprs\r\n         * @return {?}\r\n         */\r\n        function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {\r\n            const /** @type {?} */ updateStmts = [];\r\n            const /** @type {?} */ exprs = expressions.map(({ sourceSpan, context, value }) => {\r\n                const /** @type {?} */ bindingId = `${updateBindingCount++}`;\r\n                const /** @type {?} */ nameResolver = context === COMP_VAR ? self : null;\r\n                const { stmts, currValExpr } = convertPropertyBinding(nameResolver, context, value, bindingId);\r\n                updateStmts.push(...stmts.map((stmt) => applySourceSpanToStatementIfNeeded(stmt, sourceSpan)));\r\n                return applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);\r\n            });\r\n            if (expressions.length || allowEmptyExprs) {\r\n                updateStmts.push(applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));\r\n            }\r\n            return updateStmts;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} nodeIndex\r\n     * @param {?} handlers\r\n     * @return {?}\r\n     */\r\n    _createElementHandleEventFn(nodeIndex, handlers) {\r\n        const /** @type {?} */ handleEventStmts = [];\r\n        let /** @type {?} */ handleEventBindingCount = 0;\r\n        handlers.forEach(({ context, eventAst, dirAst }) => {\r\n            const /** @type {?} */ bindingId = `${handleEventBindingCount++}`;\r\n            const /** @type {?} */ nameResolver = context === COMP_VAR ? this : null;\r\n            const { stmts, allowDefault } = convertActionBinding(nameResolver, context, eventAst.handler, bindingId);\r\n            const /** @type {?} */ trueStmts = stmts;\r\n            if (allowDefault) {\r\n                trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());\r\n            }\r\n            const { target: eventTarget, name: eventName } = elementEventNameAndTarget(eventAst, dirAst);\r\n            const /** @type {?} */ fullEventName = elementEventFullName(eventTarget, eventName);\r\n            handleEventStmts.push(applySourceSpanToStatementIfNeeded(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));\r\n        });\r\n        let /** @type {?} */ handleEventFn;\r\n        if (handleEventStmts.length > 0) {\r\n            const /** @type {?} */ preStmts = [ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];\r\n            if (!this.component.isHost && findReadVarNames(handleEventStmts).has(/** @type {?} */ ((COMP_VAR.name)))) {\r\n                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\r\n            }\r\n            handleEventFn = fn([\r\n                new FnParam(/** @type {?} */ ((VIEW_VAR.name)), INFERRED_TYPE),\r\n                new FnParam(/** @type {?} */ ((EVENT_NAME_VAR.name)), INFERRED_TYPE),\r\n                new FnParam(/** @type {?} */ ((EventHandlerVars.event.name)), INFERRED_TYPE)\r\n            ], [...preStmts, ...handleEventStmts, new ReturnStatement(ALLOW_DEFAULT_VAR)], INFERRED_TYPE);\r\n        }\r\n        else {\r\n            handleEventFn = NULL_EXPR;\r\n        }\r\n        return handleEventFn;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDirective(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitDirectiveProperty(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitReference(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitVariable(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitEvent(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitElementProperty(ast, context) { }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitAttr(ast, context) { }\r\n}\r\n/**\r\n * @param {?} astNodes\r\n * @return {?}\r\n */\r\nfunction needsAdditionalRootNode(astNodes) {\r\n    const /** @type {?} */ lastAstNode = astNodes[astNodes.length - 1];\r\n    if (lastAstNode instanceof EmbeddedTemplateAst) {\r\n        return lastAstNode.hasViewContainer;\r\n    }\r\n    if (lastAstNode instanceof ElementAst) {\r\n        if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {\r\n            return needsAdditionalRootNode(lastAstNode.children);\r\n        }\r\n        return lastAstNode.hasViewContainer;\r\n    }\r\n    return lastAstNode instanceof NgContentAst;\r\n}\r\n/**\r\n * @param {?} inputAst\r\n * @param {?} dirAst\r\n * @return {?}\r\n */\r\nfunction elementBindingDef(inputAst, dirAst) {\r\n    switch (inputAst.type) {\r\n        case PropertyBindingType.Attribute:\r\n            return literalArr([\r\n                literal(1 /* TypeElementAttribute */), literal(inputAst.name),\r\n                literal(inputAst.securityContext)\r\n            ]);\r\n        case PropertyBindingType.Property:\r\n            return literalArr([\r\n                literal(8 /* TypeProperty */), literal(inputAst.name),\r\n                literal(inputAst.securityContext)\r\n            ]);\r\n        case PropertyBindingType.Animation:\r\n            const /** @type {?} */ bindingType = 8 /* TypeProperty */ |\r\n                (dirAst && dirAst.directive.isComponent ? 32 /* SyntheticHostProperty */ :\r\n                    16 /* SyntheticProperty */);\r\n            return literalArr([\r\n                literal(bindingType), literal('@' + inputAst.name), literal(inputAst.securityContext)\r\n            ]);\r\n        case PropertyBindingType.Class:\r\n            return literalArr([literal(2 /* TypeElementClass */), literal(inputAst.name), NULL_EXPR]);\r\n        case PropertyBindingType.Style:\r\n            return literalArr([\r\n                literal(4 /* TypeElementStyle */), literal(inputAst.name), literal(inputAst.unit)\r\n            ]);\r\n    }\r\n}\r\n/**\r\n * @param {?} elementAst\r\n * @return {?}\r\n */\r\nfunction fixedAttrsDef(elementAst) {\r\n    const /** @type {?} */ mapResult = Object.create(null);\r\n    elementAst.attrs.forEach(attrAst => { mapResult[attrAst.name] = attrAst.value; });\r\n    elementAst.directives.forEach(dirAst => {\r\n        Object.keys(dirAst.directive.hostAttributes).forEach(name => {\r\n            const /** @type {?} */ value = dirAst.directive.hostAttributes[name];\r\n            const /** @type {?} */ prevValue = mapResult[name];\r\n            mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;\r\n        });\r\n    });\r\n    // Note: We need to sort to get a defined output order\r\n    // for tests and for caching generated artifacts...\r\n    return literalArr(Object.keys(mapResult).sort().map((attrName) => literalArr([literal(attrName), literal(mapResult[attrName])])));\r\n}\r\n/**\r\n * @param {?} attrName\r\n * @param {?} attrValue1\r\n * @param {?} attrValue2\r\n * @return {?}\r\n */\r\nfunction mergeAttributeValue(attrName, attrValue1, attrValue2) {\r\n    if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {\r\n        return `${attrValue1} ${attrValue2}`;\r\n    }\r\n    else {\r\n        return attrValue2;\r\n    }\r\n}\r\n/**\r\n * @param {?} nodeIndex\r\n * @param {?} exprs\r\n * @return {?}\r\n */\r\nfunction callCheckStmt(nodeIndex, exprs) {\r\n    if (exprs.length > 10) {\r\n        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(1 /* Dynamic */), literalArr(exprs)]);\r\n    }\r\n    else {\r\n        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(0 /* Inline */), ...exprs]);\r\n    }\r\n}\r\n/**\r\n * @param {?} nodeIndex\r\n * @param {?} bindingIdx\r\n * @param {?} expr\r\n * @return {?}\r\n */\r\nfunction callUnwrapValue(nodeIndex, bindingIdx, expr) {\r\n    return importExpr(Identifiers.unwrapValue).callFn([\r\n        VIEW_VAR, literal(nodeIndex), literal(bindingIdx), expr\r\n    ]);\r\n}\r\n/**\r\n * @param {?} nodes\r\n * @param {?=} result\r\n * @return {?}\r\n */\r\nfunction findStaticQueryIds(nodes, result = new Map()) {\r\n    nodes.forEach((node) => {\r\n        const /** @type {?} */ staticQueryIds = new Set();\r\n        const /** @type {?} */ dynamicQueryIds = new Set();\r\n        let /** @type {?} */ queryMatches = /** @type {?} */ ((undefined));\r\n        if (node instanceof ElementAst) {\r\n            findStaticQueryIds(node.children, result);\r\n            node.children.forEach((child) => {\r\n                const /** @type {?} */ childData = /** @type {?} */ ((result.get(child)));\r\n                childData.staticQueryIds.forEach(queryId => staticQueryIds.add(queryId));\r\n                childData.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\r\n            });\r\n            queryMatches = node.queryMatches;\r\n        }\r\n        else if (node instanceof EmbeddedTemplateAst) {\r\n            findStaticQueryIds(node.children, result);\r\n            node.children.forEach((child) => {\r\n                const /** @type {?} */ childData = /** @type {?} */ ((result.get(child)));\r\n                childData.staticQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\r\n                childData.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\r\n            });\r\n            queryMatches = node.queryMatches;\r\n        }\r\n        if (queryMatches) {\r\n            queryMatches.forEach((match) => staticQueryIds.add(match.queryId));\r\n        }\r\n        dynamicQueryIds.forEach(queryId => staticQueryIds.delete(queryId));\r\n        result.set(node, { staticQueryIds, dynamicQueryIds });\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * @param {?} nodeStaticQueryIds\r\n * @return {?}\r\n */\r\nfunction staticViewQueryIds(nodeStaticQueryIds) {\r\n    const /** @type {?} */ staticQueryIds = new Set();\r\n    const /** @type {?} */ dynamicQueryIds = new Set();\r\n    Array.from(nodeStaticQueryIds.values()).forEach((entry) => {\r\n        entry.staticQueryIds.forEach(queryId => staticQueryIds.add(queryId));\r\n        entry.dynamicQueryIds.forEach(queryId => dynamicQueryIds.add(queryId));\r\n    });\r\n    dynamicQueryIds.forEach(queryId => staticQueryIds.delete(queryId));\r\n    return { staticQueryIds, dynamicQueryIds };\r\n}\r\n/**\r\n * @param {?} eventAst\r\n * @param {?} dirAst\r\n * @return {?}\r\n */\r\nfunction elementEventNameAndTarget(eventAst, dirAst) {\r\n    if (eventAst.isAnimation) {\r\n        return {\r\n            name: `@${eventAst.name}.${eventAst.phase}`,\r\n            target: dirAst && dirAst.directive.isComponent ? 'component' : null\r\n        };\r\n    }\r\n    else {\r\n        return eventAst;\r\n    }\r\n}\r\n/**\r\n * @param {?} queryIds\r\n * @param {?} queryId\r\n * @param {?} isFirst\r\n * @return {?}\r\n */\r\nfunction calcStaticDynamicQueryFlags(queryIds, queryId, isFirst) {\r\n    let /** @type {?} */ flags = 0;\r\n    // Note: We only make queries static that query for a single item.\r\n    // This is because of backwards compatibility with the old view compiler...\r\n    if (isFirst && (queryIds.staticQueryIds.has(queryId) || !queryIds.dynamicQueryIds.has(queryId))) {\r\n        flags |= 268435456 /* StaticQuery */;\r\n    }\r\n    else {\r\n        flags |= 536870912 /* DynamicQuery */;\r\n    }\r\n    return flags;\r\n}\r\n/**\r\n * @param {?} target\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction elementEventFullName(target, name) {\r\n    return target ? `${target}:${name}` : name;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A container for message extracted from the templates.\r\n */\r\nclass MessageBundle {\r\n    /**\r\n     * @param {?} _htmlParser\r\n     * @param {?} _implicitTags\r\n     * @param {?} _implicitAttrs\r\n     * @param {?=} _locale\r\n     */\r\n    constructor(_htmlParser, _implicitTags, _implicitAttrs, _locale = null) {\r\n        this._htmlParser = _htmlParser;\r\n        this._implicitTags = _implicitTags;\r\n        this._implicitAttrs = _implicitAttrs;\r\n        this._locale = _locale;\r\n        this._messages = [];\r\n    }\r\n    /**\r\n     * @param {?} html\r\n     * @param {?} url\r\n     * @param {?} interpolationConfig\r\n     * @return {?}\r\n     */\r\n    updateFromTemplate(html, url, interpolationConfig) {\r\n        const /** @type {?} */ htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);\r\n        if (htmlParserResult.errors.length) {\r\n            return htmlParserResult.errors;\r\n        }\r\n        const /** @type {?} */ i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\r\n        if (i18nParserResult.errors.length) {\r\n            return i18nParserResult.errors;\r\n        }\r\n        this._messages.push(...i18nParserResult.messages);\r\n        return [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getMessages() { return this._messages; }\r\n    /**\r\n     * @param {?} serializer\r\n     * @param {?=} filterSources\r\n     * @return {?}\r\n     */\r\n    write(serializer, filterSources) {\r\n        const /** @type {?} */ messages = {};\r\n        const /** @type {?} */ mapperVisitor = new MapPlaceholderNames();\r\n        // Deduplicate messages based on their ID\r\n        this._messages.forEach(message => {\r\n            const /** @type {?} */ id = serializer.digest(message);\r\n            if (!messages.hasOwnProperty(id)) {\r\n                messages[id] = message;\r\n            }\r\n            else {\r\n                messages[id].sources.push(...message.sources);\r\n            }\r\n        });\r\n        // Transform placeholder names using the serializer mapping\r\n        const /** @type {?} */ msgList = Object.keys(messages).map(id => {\r\n            const /** @type {?} */ mapper = serializer.createNameMapper(messages[id]);\r\n            const /** @type {?} */ src = messages[id];\r\n            const /** @type {?} */ nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\r\n            let /** @type {?} */ transformedMessage = new Message(nodes, {}, {}, src.meaning, src.description, id);\r\n            transformedMessage.sources = src.sources;\r\n            if (filterSources) {\r\n                transformedMessage.sources.forEach((source) => source.filePath = filterSources(source.filePath));\r\n            }\r\n            return transformedMessage;\r\n        });\r\n        return serializer.write(msgList, this._locale);\r\n    }\r\n}\r\nclass MapPlaceholderNames extends CloneVisitor {\r\n    /**\r\n     * @param {?} nodes\r\n     * @param {?} mapper\r\n     * @return {?}\r\n     */\r\n    convert(nodes, mapper) {\r\n        return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?} mapper\r\n     * @return {?}\r\n     */\r\n    visitTagPlaceholder(ph, mapper) {\r\n        const /** @type {?} */ startName = /** @type {?} */ ((mapper.toPublicName(ph.startName)));\r\n        const /** @type {?} */ closeName = ph.closeName ? /** @type {?} */ ((mapper.toPublicName(ph.closeName))) : ph.closeName;\r\n        const /** @type {?} */ children = ph.children.map(n => n.visit(this, mapper));\r\n        return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?} mapper\r\n     * @return {?}\r\n     */\r\n    visitPlaceholder(ph, mapper) {\r\n        return new Placeholder(ph.value, /** @type {?} */ ((mapper.toPublicName(ph.name))), ph.sourceSpan);\r\n    }\r\n    /**\r\n     * @param {?} ph\r\n     * @param {?} mapper\r\n     * @return {?}\r\n     */\r\n    visitIcuPlaceholder(ph, mapper) {\r\n        return new IcuPlaceholder(ph.value, /** @type {?} */ ((mapper.toPublicName(ph.name))), ph.sourceSpan);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass GeneratedFile {\r\n    /**\r\n     * @param {?} srcFileUrl\r\n     * @param {?} genFileUrl\r\n     * @param {?} sourceOrStmts\r\n     */\r\n    constructor(srcFileUrl, genFileUrl, sourceOrStmts) {\r\n        this.srcFileUrl = srcFileUrl;\r\n        this.genFileUrl = genFileUrl;\r\n        if (typeof sourceOrStmts === 'string') {\r\n            this.source = sourceOrStmts;\r\n            this.stmts = null;\r\n        }\r\n        else {\r\n            this.source = null;\r\n            this.stmts = sourceOrStmts;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} other\r\n     * @return {?}\r\n     */\r\n    isEquivalent(other) {\r\n        if (this.genFileUrl !== other.genFileUrl) {\r\n            return false;\r\n        }\r\n        if (this.source) {\r\n            return this.source === other.source;\r\n        }\r\n        if (other.stmts == null) {\r\n            return false;\r\n        }\r\n        // Note: the constructor guarantees that if this.source is not filled,\r\n        // then this.stmts is.\r\n        return areAllEquivalent(/** @type {?} */ ((this.stmts)), /** @type {?} */ ((other.stmts)));\r\n    }\r\n}\r\n/**\r\n * @param {?} file\r\n * @param {?=} preamble\r\n * @return {?}\r\n */\r\nfunction toTypeScript(file, preamble = '') {\r\n    if (!file.stmts) {\r\n        throw new Error(`Illegal state: No stmts present on GeneratedFile ${file.genFileUrl}`);\r\n    }\r\n    return new TypeScriptEmitter().emitStatements(file.genFileUrl, file.stmts, preamble);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} moduleMeta\r\n * @param {?} reflector\r\n * @return {?}\r\n */\r\nfunction listLazyRoutes(moduleMeta, reflector) {\r\n    const /** @type {?} */ allLazyRoutes = [];\r\n    for (const { provider, module } of moduleMeta.transitiveModule.providers) {\r\n        if (tokenReference(provider.token) === reflector.ROUTES) {\r\n            const /** @type {?} */ loadChildren = _collectLoadChildren(provider.useValue);\r\n            for (const /** @type {?} */ route of loadChildren) {\r\n                allLazyRoutes.push(parseLazyRoute(route, reflector, module.reference));\r\n            }\r\n        }\r\n    }\r\n    return allLazyRoutes;\r\n}\r\n/**\r\n * @param {?} routes\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction _collectLoadChildren(routes, target = []) {\r\n    if (typeof routes === 'string') {\r\n        target.push(routes);\r\n    }\r\n    else if (Array.isArray(routes)) {\r\n        for (const /** @type {?} */ route of routes) {\r\n            _collectLoadChildren(route, target);\r\n        }\r\n    }\r\n    else if (routes.loadChildren) {\r\n        _collectLoadChildren(routes.loadChildren, target);\r\n    }\r\n    else if (routes.children) {\r\n        _collectLoadChildren(routes.children, target);\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * @param {?} route\r\n * @param {?} reflector\r\n * @param {?=} module\r\n * @return {?}\r\n */\r\nfunction parseLazyRoute(route, reflector, module) {\r\n    const [routePath, routeName] = route.split('#');\r\n    const /** @type {?} */ referencedModule = reflector.resolveExternalReference({\r\n        moduleName: routePath,\r\n        name: routeName,\r\n    }, module ? module.filePath : undefined);\r\n    return { route: route, module: module || referencedModule, referencedModule };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass ResolvedStaticSymbol {\r\n    /**\r\n     * @param {?} symbol\r\n     * @param {?} metadata\r\n     */\r\n    constructor(symbol, metadata) {\r\n        this.symbol = symbol;\r\n        this.metadata = metadata;\r\n    }\r\n}\r\n/**\r\n * The host of the SymbolResolverHost disconnects the implementation from TypeScript / other\r\n * language\r\n * services and from underlying file systems.\r\n * @record\r\n */\r\n\r\nconst SUPPORTED_SCHEMA_VERSION = 4;\r\n/**\r\n * This class is responsible for loading metadata per symbol,\r\n * and normalizing references between symbols.\r\n *\r\n * Internally, it only uses symbols without members,\r\n * and deduces the values for symbols with members based\r\n * on these symbols.\r\n */\r\nclass StaticSymbolResolver {\r\n    /**\r\n     * @param {?} host\r\n     * @param {?} staticSymbolCache\r\n     * @param {?} summaryResolver\r\n     * @param {?=} errorRecorder\r\n     */\r\n    constructor(host, staticSymbolCache, summaryResolver, errorRecorder) {\r\n        this.host = host;\r\n        this.staticSymbolCache = staticSymbolCache;\r\n        this.summaryResolver = summaryResolver;\r\n        this.errorRecorder = errorRecorder;\r\n        this.metadataCache = new Map();\r\n        this.resolvedSymbols = new Map();\r\n        this.resolvedFilePaths = new Set();\r\n        this.importAs = new Map();\r\n        this.symbolResourcePaths = new Map();\r\n        this.symbolFromFile = new Map();\r\n        this.knownFileNameToModuleNames = new Map();\r\n    }\r\n    /**\r\n     * @param {?} staticSymbol\r\n     * @return {?}\r\n     */\r\n    resolveSymbol(staticSymbol) {\r\n        if (staticSymbol.members.length > 0) {\r\n            return /** @type {?} */ ((this._resolveSymbolMembers(staticSymbol)));\r\n        }\r\n        // Note: always ask for a summary first,\r\n        // as we might have read shallow metadata via a .d.ts file\r\n        // for the symbol.\r\n        const /** @type {?} */ resultFromSummary = /** @type {?} */ ((this._resolveSymbolFromSummary(staticSymbol)));\r\n        if (resultFromSummary) {\r\n            return resultFromSummary;\r\n        }\r\n        const /** @type {?} */ resultFromCache = this.resolvedSymbols.get(staticSymbol);\r\n        if (resultFromCache) {\r\n            return resultFromCache;\r\n        }\r\n        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\r\n        // have summaries, only .d.ts files. So we always need to check both, the summary\r\n        // and metadata.\r\n        this._createSymbolsOf(staticSymbol.filePath);\r\n        return /** @type {?} */ ((this.resolvedSymbols.get(staticSymbol)));\r\n    }\r\n    /**\r\n     * getImportAs produces a symbol that can be used to import the given symbol.\r\n     * The import might be different than the symbol if the symbol is exported from\r\n     * a library with a summary; in which case we want to import the symbol from the\r\n     * ngfactory re-export instead of directly to avoid introducing a direct dependency\r\n     * on an otherwise indirect dependency.\r\n     *\r\n     * @param {?} staticSymbol the symbol for which to generate a import symbol\r\n     * @return {?}\r\n     */\r\n    getImportAs(staticSymbol) {\r\n        if (staticSymbol.members.length) {\r\n            const /** @type {?} */ baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);\r\n            const /** @type {?} */ baseImportAs = this.getImportAs(baseSymbol);\r\n            return baseImportAs ?\r\n                this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) :\r\n                null;\r\n        }\r\n        const /** @type {?} */ summarizedFileName = stripSummaryForJitFileSuffix(staticSymbol.filePath);\r\n        if (summarizedFileName !== staticSymbol.filePath) {\r\n            const /** @type {?} */ summarizedName = stripSummaryForJitNameSuffix(staticSymbol.name);\r\n            const /** @type {?} */ baseSymbol = this.getStaticSymbol(summarizedFileName, summarizedName, staticSymbol.members);\r\n            const /** @type {?} */ baseImportAs = this.getImportAs(baseSymbol);\r\n            return baseImportAs ?\r\n                this.getStaticSymbol(summaryForJitFileName(baseImportAs.filePath), summaryForJitName(baseImportAs.name), baseSymbol.members) :\r\n                null;\r\n        }\r\n        let /** @type {?} */ result = this.summaryResolver.getImportAs(staticSymbol);\r\n        if (!result) {\r\n            result = /** @type {?} */ ((this.importAs.get(staticSymbol)));\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * getResourcePath produces the path to the original location of the symbol and should\r\n     * be used to determine the relative location of resource references recorded in\r\n     * symbol metadata.\r\n     * @param {?} staticSymbol\r\n     * @return {?}\r\n     */\r\n    getResourcePath(staticSymbol) {\r\n        return this.symbolResourcePaths.get(staticSymbol) || staticSymbol.filePath;\r\n    }\r\n    /**\r\n     * getTypeArity returns the number of generic type parameters the given symbol\r\n     * has. If the symbol is not a type the result is null.\r\n     * @param {?} staticSymbol\r\n     * @return {?}\r\n     */\r\n    getTypeArity(staticSymbol) {\r\n        // If the file is a factory/ngsummary file, don't resolve the symbol as doing so would\r\n        // cause the metadata for an factory/ngsummary file to be loaded which doesn't exist.\r\n        // All references to generated classes must include the correct arity whenever\r\n        // generating code.\r\n        if (isGeneratedFile(staticSymbol.filePath)) {\r\n            return null;\r\n        }\r\n        let /** @type {?} */ resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(staticSymbol));\r\n        while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {\r\n            resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(resolvedSymbol.metadata));\r\n        }\r\n        return (resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity) || null;\r\n    }\r\n    /**\r\n     * @param {?} filePath\r\n     * @return {?}\r\n     */\r\n    getKnownModuleName(filePath) {\r\n        return this.knownFileNameToModuleNames.get(filePath) || null;\r\n    }\r\n    /**\r\n     * @param {?} sourceSymbol\r\n     * @param {?} targetSymbol\r\n     * @return {?}\r\n     */\r\n    recordImportAs(sourceSymbol, targetSymbol) {\r\n        sourceSymbol.assertNoMembers();\r\n        targetSymbol.assertNoMembers();\r\n        this.importAs.set(sourceSymbol, targetSymbol);\r\n    }\r\n    /**\r\n     * @param {?} fileName\r\n     * @param {?} moduleName\r\n     * @return {?}\r\n     */\r\n    recordModuleNameForFileName(fileName, moduleName) {\r\n        this.knownFileNameToModuleNames.set(fileName, moduleName);\r\n    }\r\n    /**\r\n     * Invalidate all information derived from the given file.\r\n     *\r\n     * @param {?} fileName the file to invalidate\r\n     * @return {?}\r\n     */\r\n    invalidateFile(fileName) {\r\n        this.metadataCache.delete(fileName);\r\n        this.resolvedFilePaths.delete(fileName);\r\n        const /** @type {?} */ symbols = this.symbolFromFile.get(fileName);\r\n        if (symbols) {\r\n            this.symbolFromFile.delete(fileName);\r\n            for (const /** @type {?} */ symbol of symbols) {\r\n                this.resolvedSymbols.delete(symbol);\r\n                this.importAs.delete(symbol);\r\n                this.symbolResourcePaths.delete(symbol);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} cb\r\n     * @return {?}\r\n     */\r\n    ignoreErrorsFor(cb) {\r\n        const /** @type {?} */ recorder = this.errorRecorder;\r\n        this.errorRecorder = () => { };\r\n        try {\r\n            return cb();\r\n        }\r\n        finally {\r\n            this.errorRecorder = recorder;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} staticSymbol\r\n     * @return {?}\r\n     */\r\n    _resolveSymbolMembers(staticSymbol) {\r\n        const /** @type {?} */ members = staticSymbol.members;\r\n        const /** @type {?} */ baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));\r\n        if (!baseResolvedSymbol) {\r\n            return null;\r\n        }\r\n        let /** @type {?} */ baseMetadata = unwrapResolvedMetadata(baseResolvedSymbol.metadata);\r\n        if (baseMetadata instanceof StaticSymbol) {\r\n            return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));\r\n        }\r\n        else if (baseMetadata && baseMetadata.__symbolic === 'class') {\r\n            if (baseMetadata.statics && members.length === 1) {\r\n                return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);\r\n            }\r\n        }\r\n        else {\r\n            let /** @type {?} */ value = baseMetadata;\r\n            for (let /** @type {?} */ i = 0; i < members.length && value; i++) {\r\n                value = value[members[i]];\r\n            }\r\n            return new ResolvedStaticSymbol(staticSymbol, value);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} staticSymbol\r\n     * @return {?}\r\n     */\r\n    _resolveSymbolFromSummary(staticSymbol) {\r\n        const /** @type {?} */ summary = this.summaryResolver.resolveSummary(staticSymbol);\r\n        return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;\r\n    }\r\n    /**\r\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\r\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\r\n     *\r\n     * @param {?} declarationFile the absolute path of the file where the symbol is declared\r\n     * @param {?} name the name of the type.\r\n     * @param {?=} members a symbol for a static member of the named type\r\n     * @return {?}\r\n     */\r\n    getStaticSymbol(declarationFile, name, members) {\r\n        return this.staticSymbolCache.get(declarationFile, name, members);\r\n    }\r\n    /**\r\n     * hasDecorators checks a file's metadata for the presense of decorators without evalutating the\r\n     * metadata.\r\n     *\r\n     * @param {?} filePath the absolute path to examine for decorators.\r\n     * @return {?} true if any class in the file has a decorator.\r\n     */\r\n    hasDecorators(filePath) {\r\n        const /** @type {?} */ metadata = this.getModuleMetadata(filePath);\r\n        if (metadata['metadata']) {\r\n            return Object.keys(metadata['metadata']).some((metadataKey) => {\r\n                const /** @type {?} */ entry = metadata['metadata'][metadataKey];\r\n                return entry && entry.__symbolic === 'class' && entry.decorators;\r\n            });\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} filePath\r\n     * @return {?}\r\n     */\r\n    getSymbolsOf(filePath) {\r\n        const /** @type {?} */ summarySymbols = this.summaryResolver.getSymbolsOf(filePath);\r\n        if (summarySymbols) {\r\n            return summarySymbols;\r\n        }\r\n        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\r\n        // have summaries, only .d.ts files, but `summaryResolver.isLibraryFile` returns true.\r\n        this._createSymbolsOf(filePath);\r\n        const /** @type {?} */ metadataSymbols = [];\r\n        this.resolvedSymbols.forEach((resolvedSymbol) => {\r\n            if (resolvedSymbol.symbol.filePath === filePath) {\r\n                metadataSymbols.push(resolvedSymbol.symbol);\r\n            }\r\n        });\r\n        return metadataSymbols;\r\n    }\r\n    /**\r\n     * @param {?} filePath\r\n     * @return {?}\r\n     */\r\n    _createSymbolsOf(filePath) {\r\n        if (this.resolvedFilePaths.has(filePath)) {\r\n            return;\r\n        }\r\n        this.resolvedFilePaths.add(filePath);\r\n        const /** @type {?} */ resolvedSymbols = [];\r\n        const /** @type {?} */ metadata = this.getModuleMetadata(filePath);\r\n        if (metadata['importAs']) {\r\n            // Index bundle indices should use the importAs module name defined\r\n            // in the bundle.\r\n            this.knownFileNameToModuleNames.set(filePath, metadata['importAs']);\r\n        }\r\n        // handle the symbols in one of the re-export location\r\n        if (metadata['exports']) {\r\n            for (const /** @type {?} */ moduleExport of metadata['exports']) {\r\n                // handle the symbols in the list of explicitly re-exported symbols.\r\n                if (moduleExport.export) {\r\n                    moduleExport.export.forEach((exportSymbol) => {\r\n                        let /** @type {?} */ symbolName;\r\n                        if (typeof exportSymbol === 'string') {\r\n                            symbolName = exportSymbol;\r\n                        }\r\n                        else {\r\n                            symbolName = exportSymbol.as;\r\n                        }\r\n                        symbolName = unescapeIdentifier(symbolName);\r\n                        let /** @type {?} */ symName = symbolName;\r\n                        if (typeof exportSymbol !== 'string') {\r\n                            symName = unescapeIdentifier(exportSymbol.name);\r\n                        }\r\n                        const /** @type {?} */ resolvedModule = this.resolveModule(moduleExport.from, filePath);\r\n                        if (resolvedModule) {\r\n                            const /** @type {?} */ targetSymbol = this.getStaticSymbol(resolvedModule, symName);\r\n                            const /** @type {?} */ sourceSymbol = this.getStaticSymbol(filePath, symbolName);\r\n                            resolvedSymbols.push(this.createExport(sourceSymbol, targetSymbol));\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    // handle the symbols via export * directives.\r\n                    const /** @type {?} */ resolvedModule = this.resolveModule(moduleExport.from, filePath);\r\n                    if (resolvedModule) {\r\n                        const /** @type {?} */ nestedExports = this.getSymbolsOf(resolvedModule);\r\n                        nestedExports.forEach((targetSymbol) => {\r\n                            const /** @type {?} */ sourceSymbol = this.getStaticSymbol(filePath, targetSymbol.name);\r\n                            resolvedSymbols.push(this.createExport(sourceSymbol, targetSymbol));\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // handle the actual metadata. Has to be after the exports\r\n        // as there migth be collisions in the names, and we want the symbols\r\n        // of the current module to win ofter reexports.\r\n        if (metadata['metadata']) {\r\n            // handle direct declarations of the symbol\r\n            const /** @type {?} */ topLevelSymbolNames = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));\r\n            const /** @type {?} */ origins = metadata['origins'] || {};\r\n            Object.keys(metadata['metadata']).forEach((metadataKey) => {\r\n                const /** @type {?} */ symbolMeta = metadata['metadata'][metadataKey];\r\n                const /** @type {?} */ name = unescapeIdentifier(metadataKey);\r\n                const /** @type {?} */ symbol = this.getStaticSymbol(filePath, name);\r\n                const /** @type {?} */ origin = origins.hasOwnProperty(metadataKey) && origins[metadataKey];\r\n                if (origin) {\r\n                    // If the symbol is from a bundled index, use the declaration location of the\r\n                    // symbol so relative references (such as './my.html') will be calculated\r\n                    // correctly.\r\n                    const /** @type {?} */ originFilePath = this.resolveModule(origin, filePath);\r\n                    if (!originFilePath) {\r\n                        this.reportError(new Error(`Couldn't resolve original symbol for ${origin} from ${filePath}`));\r\n                    }\r\n                    else {\r\n                        this.symbolResourcePaths.set(symbol, originFilePath);\r\n                    }\r\n                }\r\n                resolvedSymbols.push(this.createResolvedSymbol(symbol, filePath, topLevelSymbolNames, symbolMeta));\r\n            });\r\n        }\r\n        resolvedSymbols.forEach((resolvedSymbol) => this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol));\r\n        this.symbolFromFile.set(filePath, resolvedSymbols.map(resolvedSymbol => resolvedSymbol.symbol));\r\n    }\r\n    /**\r\n     * @param {?} sourceSymbol\r\n     * @param {?} topLevelPath\r\n     * @param {?} topLevelSymbolNames\r\n     * @param {?} metadata\r\n     * @return {?}\r\n     */\r\n    createResolvedSymbol(sourceSymbol, topLevelPath, topLevelSymbolNames, metadata) {\r\n        // For classes that don't have Angular summaries / metadata,\r\n        // we only keep their arity, but nothing else\r\n        // (e.g. their constructor parameters).\r\n        // We do this to prevent introducing deep imports\r\n        // as we didn't generate .ngfactory.ts files with proper reexports.\r\n        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && metadata &&\r\n            metadata['__symbolic'] === 'class') {\r\n            const /** @type {?} */ transformedMeta = { __symbolic: 'class', arity: metadata.arity };\r\n            return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);\r\n        }\r\n        let /** @type {?} */ _originalFileMemo;\r\n        const /** @type {?} */ getOriginalName = () => {\r\n            if (!_originalFileMemo) {\r\n                // Guess what hte original file name is from the reference. If it has a `.d.ts` extension\r\n                // replace it with `.ts`. If it already has `.ts` just leave it in place. If it doesn't have\r\n                // .ts or .d.ts, append `.ts'. Also, if it is in `node_modules`, trim the `node_module`\r\n                // location as it is not important to finding the file.\r\n                _originalFileMemo =\r\n                    topLevelPath.replace(/((\\.ts)|(\\.d\\.ts)|)$/, '.ts').replace(/^.*node_modules[/\\\\]/, '');\r\n            }\r\n            return _originalFileMemo;\r\n        };\r\n        const /** @type {?} */ self = this;\r\n        class ReferenceTransformer extends ValueTransformer {\r\n            /**\r\n             * @param {?} map\r\n             * @param {?} functionParams\r\n             * @return {?}\r\n             */\r\n            visitStringMap(map, functionParams) {\r\n                const /** @type {?} */ symbolic = map['__symbolic'];\r\n                if (symbolic === 'function') {\r\n                    const /** @type {?} */ oldLen = functionParams.length;\r\n                    functionParams.push(...(map['parameters'] || []));\r\n                    const /** @type {?} */ result = super.visitStringMap(map, functionParams);\r\n                    functionParams.length = oldLen;\r\n                    return result;\r\n                }\r\n                else if (symbolic === 'reference') {\r\n                    const /** @type {?} */ module = map['module'];\r\n                    const /** @type {?} */ name = map['name'] ? unescapeIdentifier(map['name']) : map['name'];\r\n                    if (!name) {\r\n                        return null;\r\n                    }\r\n                    let /** @type {?} */ filePath;\r\n                    if (module) {\r\n                        filePath = /** @type {?} */ ((self.resolveModule(module, sourceSymbol.filePath)));\r\n                        if (!filePath) {\r\n                            return {\r\n                                __symbolic: 'error',\r\n                                message: `Could not resolve ${module} relative to ${sourceSymbol.filePath}.`,\r\n                                line: map[\"line\"],\r\n                                character: map[\"character\"],\r\n                                fileName: getOriginalName()\r\n                            };\r\n                        }\r\n                        return {\r\n                            __symbolic: 'resolved',\r\n                            symbol: self.getStaticSymbol(filePath, name),\r\n                            line: map[\"line\"],\r\n                            character: map[\"character\"],\r\n                            fileName: getOriginalName()\r\n                        };\r\n                    }\r\n                    else if (functionParams.indexOf(name) >= 0) {\r\n                        // reference to a function parameter\r\n                        return { __symbolic: 'reference', name: name };\r\n                    }\r\n                    else {\r\n                        if (topLevelSymbolNames.has(name)) {\r\n                            return self.getStaticSymbol(topLevelPath, name);\r\n                        }\r\n                        // ambient value\r\n                        null;\r\n                    }\r\n                }\r\n                else if (symbolic === 'error') {\r\n                    return Object.assign({}, map, { fileName: getOriginalName() });\r\n                }\r\n                else {\r\n                    return super.visitStringMap(map, functionParams);\r\n                }\r\n            }\r\n        }\r\n        const /** @type {?} */ transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);\r\n        let /** @type {?} */ unwrappedTransformedMeta = unwrapResolvedMetadata(transformedMeta);\r\n        if (unwrappedTransformedMeta instanceof StaticSymbol) {\r\n            return this.createExport(sourceSymbol, unwrappedTransformedMeta);\r\n        }\r\n        return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);\r\n    }\r\n    /**\r\n     * @param {?} sourceSymbol\r\n     * @param {?} targetSymbol\r\n     * @return {?}\r\n     */\r\n    createExport(sourceSymbol, targetSymbol) {\r\n        sourceSymbol.assertNoMembers();\r\n        targetSymbol.assertNoMembers();\r\n        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) &&\r\n            this.summaryResolver.isLibraryFile(targetSymbol.filePath)) {\r\n            // This case is for an ng library importing symbols from a plain ts library\r\n            // transitively.\r\n            // Note: We rely on the fact that we discover symbols in the direction\r\n            // from source files to library files\r\n            this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);\r\n        }\r\n        return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);\r\n    }\r\n    /**\r\n     * @param {?} error\r\n     * @param {?=} context\r\n     * @param {?=} path\r\n     * @return {?}\r\n     */\r\n    reportError(error, context, path) {\r\n        if (this.errorRecorder) {\r\n            this.errorRecorder(error, (context && context.filePath) || path);\r\n        }\r\n        else {\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} module an absolute path to a module file.\r\n     * @return {?}\r\n     */\r\n    getModuleMetadata(module) {\r\n        let /** @type {?} */ moduleMetadata = this.metadataCache.get(module);\r\n        if (!moduleMetadata) {\r\n            const /** @type {?} */ moduleMetadatas = this.host.getMetadataFor(module);\r\n            if (moduleMetadatas) {\r\n                let /** @type {?} */ maxVersion = -1;\r\n                moduleMetadatas.forEach((md) => {\r\n                    if (md && md['version'] > maxVersion) {\r\n                        maxVersion = md['version'];\r\n                        moduleMetadata = md;\r\n                    }\r\n                });\r\n            }\r\n            if (!moduleMetadata) {\r\n                moduleMetadata =\r\n                    { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };\r\n            }\r\n            if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {\r\n                const /** @type {?} */ errorMessage = moduleMetadata['version'] == 2 ?\r\n                    `Unsupported metadata version ${moduleMetadata['version']} for module ${module}. This module should be compiled with a newer version of ngc` :\r\n                    `Metadata version mismatch for module ${module}, found version ${moduleMetadata['version']}, expected ${SUPPORTED_SCHEMA_VERSION}`;\r\n                this.reportError(new Error(errorMessage));\r\n            }\r\n            this.metadataCache.set(module, moduleMetadata);\r\n        }\r\n        return moduleMetadata;\r\n    }\r\n    /**\r\n     * @param {?} module\r\n     * @param {?} symbolName\r\n     * @param {?=} containingFile\r\n     * @return {?}\r\n     */\r\n    getSymbolByModule(module, symbolName, containingFile) {\r\n        const /** @type {?} */ filePath = this.resolveModule(module, containingFile);\r\n        if (!filePath) {\r\n            this.reportError(new Error(`Could not resolve module ${module}${containingFile ? ' relative to ' +\r\n                containingFile : ''}`));\r\n            return this.getStaticSymbol(`ERROR:${module}`, symbolName);\r\n        }\r\n        return this.getStaticSymbol(filePath, symbolName);\r\n    }\r\n    /**\r\n     * @param {?} module\r\n     * @param {?=} containingFile\r\n     * @return {?}\r\n     */\r\n    resolveModule(module, containingFile) {\r\n        try {\r\n            return this.host.moduleNameToFileName(module, containingFile);\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            console.error(`Could not resolve module '${module}' relative to file ${containingFile}`);\r\n            this.reportError(e, undefined, containingFile);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @param {?} identifier\r\n * @return {?}\r\n */\r\nfunction unescapeIdentifier(identifier) {\r\n    return identifier.startsWith('___') ? identifier.substr(1) : identifier;\r\n}\r\n/**\r\n * @param {?} metadata\r\n * @return {?}\r\n */\r\nfunction unwrapResolvedMetadata(metadata) {\r\n    if (metadata && metadata.__symbolic === 'resolved') {\r\n        return metadata.symbol;\r\n    }\r\n    return metadata;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} srcFileName\r\n * @param {?} forJitCtx\r\n * @param {?} summaryResolver\r\n * @param {?} symbolResolver\r\n * @param {?} symbols\r\n * @param {?} types\r\n * @return {?}\r\n */\r\nfunction serializeSummaries(srcFileName, forJitCtx, summaryResolver, symbolResolver, symbols, types) {\r\n    const /** @type {?} */ toJsonSerializer = new ToJsonSerializer(symbolResolver, summaryResolver, srcFileName);\r\n    // for symbols, we use everything except for the class metadata itself\r\n    // (we keep the statics though), as the class metadata is contained in the\r\n    // CompileTypeSummary.\r\n    symbols.forEach((resolvedSymbol) => toJsonSerializer.addSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata }));\r\n    // Add type summaries.\r\n    types.forEach(({ summary, metadata }) => {\r\n        toJsonSerializer.addSummary({ symbol: summary.type.reference, metadata: undefined, type: summary });\r\n    });\r\n    const { json, exportAs } = toJsonSerializer.serialize();\r\n    if (forJitCtx) {\r\n        const /** @type {?} */ forJitSerializer = new ForJitSerializer(forJitCtx, symbolResolver, summaryResolver);\r\n        types.forEach(({ summary, metadata }) => { forJitSerializer.addSourceType(summary, metadata); });\r\n        toJsonSerializer.unprocessedSymbolSummariesBySymbol.forEach((summary) => {\r\n            if (summaryResolver.isLibraryFile(summary.symbol.filePath) && summary.type) {\r\n                forJitSerializer.addLibType(summary.type);\r\n            }\r\n        });\r\n        forJitSerializer.serialize(exportAs);\r\n    }\r\n    return { json, exportAs };\r\n}\r\n/**\r\n * @param {?} symbolCache\r\n * @param {?} summaryResolver\r\n * @param {?} libraryFileName\r\n * @param {?} json\r\n * @return {?}\r\n */\r\nfunction deserializeSummaries(symbolCache, summaryResolver, libraryFileName, json) {\r\n    const /** @type {?} */ deserializer = new FromJsonDeserializer(symbolCache, summaryResolver);\r\n    return deserializer.deserialize(libraryFileName, json);\r\n}\r\n/**\r\n * @param {?} outputCtx\r\n * @param {?} reference\r\n * @return {?}\r\n */\r\nfunction createForJitStub(outputCtx, reference) {\r\n    return createSummaryForJitFunction(outputCtx, reference, NULL_EXPR);\r\n}\r\n/**\r\n * @param {?} outputCtx\r\n * @param {?} reference\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction createSummaryForJitFunction(outputCtx, reference, value) {\r\n    const /** @type {?} */ fnName = summaryForJitName(reference.name);\r\n    outputCtx.statements.push(fn([], [new ReturnStatement(value)], new ArrayType(DYNAMIC_TYPE)).toDeclStmt(fnName, [\r\n        StmtModifier.Final, StmtModifier.Exported\r\n    ]));\r\n}\r\nclass ToJsonSerializer extends ValueTransformer {\r\n    /**\r\n     * @param {?} symbolResolver\r\n     * @param {?} summaryResolver\r\n     * @param {?} srcFileName\r\n     */\r\n    constructor(symbolResolver, summaryResolver, srcFileName) {\r\n        super();\r\n        this.symbolResolver = symbolResolver;\r\n        this.summaryResolver = summaryResolver;\r\n        this.srcFileName = srcFileName;\r\n        this.symbols = [];\r\n        this.indexBySymbol = new Map();\r\n        this.reexportedBy = new Map();\r\n        this.processedSummaryBySymbol = new Map();\r\n        this.processedSummaries = [];\r\n        this.unprocessedSymbolSummariesBySymbol = new Map();\r\n        this.moduleName = symbolResolver.getKnownModuleName(srcFileName);\r\n    }\r\n    /**\r\n     * @param {?} summary\r\n     * @return {?}\r\n     */\r\n    addSummary(summary) {\r\n        let /** @type {?} */ unprocessedSummary = this.unprocessedSymbolSummariesBySymbol.get(summary.symbol);\r\n        let /** @type {?} */ processedSummary = this.processedSummaryBySymbol.get(summary.symbol);\r\n        if (!unprocessedSummary) {\r\n            unprocessedSummary = { symbol: summary.symbol, metadata: undefined };\r\n            this.unprocessedSymbolSummariesBySymbol.set(summary.symbol, unprocessedSummary);\r\n            processedSummary = { symbol: this.processValue(summary.symbol, 0 /* None */) };\r\n            this.processedSummaries.push(processedSummary);\r\n            this.processedSummaryBySymbol.set(summary.symbol, processedSummary);\r\n        }\r\n        if (!unprocessedSummary.metadata && summary.metadata) {\r\n            let /** @type {?} */ metadata = summary.metadata || {};\r\n            if (metadata.__symbolic === 'class') {\r\n                // For classes, we keep everything except their class decorators.\r\n                // We need to keep e.g. the ctor args, method names, method decorators\r\n                // so that the class can be extended in another compilation unit.\r\n                // We don't keep the class decorators as\r\n                // 1) they refer to data\r\n                //   that should not cause a rebuild of downstream compilation units\r\n                //   (e.g. inline templates of @Component, or @NgModule.declarations)\r\n                // 2) their data is already captured in TypeSummaries, e.g. DirectiveSummary.\r\n                const /** @type {?} */ clone = {};\r\n                Object.keys(metadata).forEach((propName) => {\r\n                    if (propName !== 'decorators') {\r\n                        clone[propName] = metadata[propName];\r\n                    }\r\n                });\r\n                metadata = clone;\r\n            }\r\n            else if (isCall(metadata)) {\r\n                if (!isFunctionCall(metadata) && !isMethodCallOnVariable(metadata)) {\r\n                    // Don't store complex calls as we won't be able to simplify them anyways later on.\r\n                    metadata = {\r\n                        __symbolic: 'error',\r\n                        message: 'Complex function calls are not supported.',\r\n                    };\r\n                }\r\n            }\r\n            // Note: We need to keep storing ctor calls for e.g.\r\n            // `export const x = new InjectionToken(...)`\r\n            unprocessedSummary.metadata = metadata;\r\n            processedSummary.metadata = this.processValue(metadata, 1 /* ResolveValue */);\r\n            if (metadata instanceof StaticSymbol &&\r\n                this.summaryResolver.isLibraryFile(metadata.filePath)) {\r\n                const /** @type {?} */ declarationSymbol = this.symbols[/** @type {?} */ ((this.indexBySymbol.get(metadata)))];\r\n                if (!isLoweredSymbol(declarationSymbol.name)) {\r\n                    // Note: symbols that were introduced during codegen in the user file can have a reexport\r\n                    // if a user used `export *`. However, we can't rely on this as tsickle will change\r\n                    // `export *` into named exports, using only the information from the typechecker.\r\n                    // As we introduce the new symbols after typecheck, Tsickle does not know about them,\r\n                    // and omits them when expanding `export *`.\r\n                    // So we have to keep reexporting these symbols manually via .ngfactory files.\r\n                    this.reexportedBy.set(declarationSymbol, summary.symbol);\r\n                }\r\n            }\r\n        }\r\n        if (!unprocessedSummary.type && summary.type) {\r\n            unprocessedSummary.type = summary.type;\r\n            // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,\r\n            // as the type summaries already contain the transitive data that they require\r\n            // (in a minimal way).\r\n            processedSummary.type = this.processValue(summary.type, 0 /* None */);\r\n            // except for reexported directives / pipes, so we need to store\r\n            // their summaries explicitly.\r\n            if (summary.type.summaryKind === CompileSummaryKind.NgModule) {\r\n                const /** @type {?} */ ngModuleSummary = /** @type {?} */ (summary.type);\r\n                ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach((id) => {\r\n                    const /** @type {?} */ symbol = id.reference;\r\n                    if (this.summaryResolver.isLibraryFile(symbol.filePath) &&\r\n                        !this.unprocessedSymbolSummariesBySymbol.has(symbol)) {\r\n                        const /** @type {?} */ summary = this.summaryResolver.resolveSummary(symbol);\r\n                        if (summary) {\r\n                            this.addSummary(summary);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    serialize() {\r\n        const /** @type {?} */ exportAs = [];\r\n        const /** @type {?} */ json = JSON.stringify({\r\n            moduleName: this.moduleName,\r\n            summaries: this.processedSummaries,\r\n            symbols: this.symbols.map((symbol, index) => {\r\n                symbol.assertNoMembers();\r\n                let /** @type {?} */ importAs = /** @type {?} */ ((undefined));\r\n                if (this.summaryResolver.isLibraryFile(symbol.filePath)) {\r\n                    const /** @type {?} */ reexportSymbol = this.reexportedBy.get(symbol);\r\n                    if (reexportSymbol) {\r\n                        importAs = /** @type {?} */ ((this.indexBySymbol.get(reexportSymbol)));\r\n                    }\r\n                    else {\r\n                        const /** @type {?} */ summary = this.unprocessedSymbolSummariesBySymbol.get(symbol);\r\n                        if (!summary || !summary.metadata || summary.metadata.__symbolic !== 'interface') {\r\n                            importAs = `${symbol.name}_${index}`;\r\n                            exportAs.push({ symbol, exportAs: importAs });\r\n                        }\r\n                    }\r\n                }\r\n                return {\r\n                    __symbol: index,\r\n                    name: symbol.name,\r\n                    filePath: this.summaryResolver.toSummaryFileName(symbol.filePath, this.srcFileName),\r\n                    importAs: importAs\r\n                };\r\n            })\r\n        });\r\n        return { json, exportAs };\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    processValue(value, flags) {\r\n        return visitValue(value, this, flags);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitOther(value, context) {\r\n        if (value instanceof StaticSymbol) {\r\n            let /** @type {?} */ baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);\r\n            const /** @type {?} */ index = this.visitStaticSymbol(baseSymbol, context);\r\n            return { __symbol: index, members: value.members };\r\n        }\r\n    }\r\n    /**\r\n     * Returns null if the options.resolveValue is true, and the summary for the symbol\r\n     * resolved to a type or could not be resolved.\r\n     * @param {?} baseSymbol\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    visitStaticSymbol(baseSymbol, flags) {\r\n        let /** @type {?} */ index = this.indexBySymbol.get(baseSymbol);\r\n        let /** @type {?} */ summary = null;\r\n        if (flags & 1 /* ResolveValue */ &&\r\n            this.summaryResolver.isLibraryFile(baseSymbol.filePath)) {\r\n            if (this.unprocessedSymbolSummariesBySymbol.has(baseSymbol)) {\r\n                // the summary for this symbol was already added\r\n                // -> nothing to do.\r\n                return /** @type {?} */ ((index));\r\n            }\r\n            summary = this.loadSummary(baseSymbol);\r\n            if (summary && summary.metadata instanceof StaticSymbol) {\r\n                // The summary is a reexport\r\n                index = this.visitStaticSymbol(summary.metadata, flags);\r\n                // reset the summary as it is just a reexport, so we don't want to store it.\r\n                summary = null;\r\n            }\r\n        }\r\n        else if (index != null) {\r\n            // Note: == on purpose to compare with undefined!\r\n            // No summary and the symbol is already added -> nothing to do.\r\n            return index;\r\n        }\r\n        // Note: == on purpose to compare with undefined!\r\n        if (index == null) {\r\n            index = this.symbols.length;\r\n            this.symbols.push(baseSymbol);\r\n        }\r\n        this.indexBySymbol.set(baseSymbol, index);\r\n        if (summary) {\r\n            this.addSummary(summary);\r\n        }\r\n        return index;\r\n    }\r\n    /**\r\n     * @param {?} symbol\r\n     * @return {?}\r\n     */\r\n    loadSummary(symbol) {\r\n        let /** @type {?} */ summary = this.summaryResolver.resolveSummary(symbol);\r\n        if (!summary) {\r\n            // some symbols might originate from a plain typescript library\r\n            // that just exported .d.ts and .metadata.json files, i.e. where no summary\r\n            // files were created.\r\n            const /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\r\n            if (resolvedSymbol) {\r\n                summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };\r\n            }\r\n        }\r\n        return summary;\r\n    }\r\n}\r\nclass ForJitSerializer {\r\n    /**\r\n     * @param {?} outputCtx\r\n     * @param {?} symbolResolver\r\n     * @param {?} summaryResolver\r\n     */\r\n    constructor(outputCtx, symbolResolver, summaryResolver) {\r\n        this.outputCtx = outputCtx;\r\n        this.symbolResolver = symbolResolver;\r\n        this.summaryResolver = summaryResolver;\r\n        this.data = [];\r\n    }\r\n    /**\r\n     * @param {?} summary\r\n     * @param {?} metadata\r\n     * @return {?}\r\n     */\r\n    addSourceType(summary, metadata) {\r\n        this.data.push({ summary, metadata, isLibrary: false });\r\n    }\r\n    /**\r\n     * @param {?} summary\r\n     * @return {?}\r\n     */\r\n    addLibType(summary) {\r\n        this.data.push({ summary, metadata: null, isLibrary: true });\r\n    }\r\n    /**\r\n     * @param {?} exportAsArr\r\n     * @return {?}\r\n     */\r\n    serialize(exportAsArr) {\r\n        const /** @type {?} */ exportAsBySymbol = new Map();\r\n        for (const { symbol, exportAs } of exportAsArr) {\r\n            exportAsBySymbol.set(symbol, exportAs);\r\n        }\r\n        const /** @type {?} */ ngModuleSymbols = new Set();\r\n        for (const { summary, metadata, isLibrary } of this.data) {\r\n            if (summary.summaryKind === CompileSummaryKind.NgModule) {\r\n                // collect the symbols that refer to NgModule classes.\r\n                // Note: we can't just rely on `summary.type.summaryKind` to determine this as\r\n                // we don't add the summaries of all referenced symbols when we serialize type summaries.\r\n                // See serializeSummaries for details.\r\n                ngModuleSymbols.add(summary.type.reference);\r\n                const /** @type {?} */ modSummary = /** @type {?} */ (summary);\r\n                for (const /** @type {?} */ mod of modSummary.modules) {\r\n                    ngModuleSymbols.add(mod.reference);\r\n                }\r\n            }\r\n            if (!isLibrary) {\r\n                const /** @type {?} */ fnName = summaryForJitName(summary.type.reference.name);\r\n                createSummaryForJitFunction(this.outputCtx, summary.type.reference, this.serializeSummaryWithDeps(summary, /** @type {?} */ ((metadata))));\r\n            }\r\n        }\r\n        ngModuleSymbols.forEach((ngModuleSymbol) => {\r\n            if (this.summaryResolver.isLibraryFile(ngModuleSymbol.filePath)) {\r\n                let /** @type {?} */ exportAs = exportAsBySymbol.get(ngModuleSymbol) || ngModuleSymbol.name;\r\n                const /** @type {?} */ jitExportAsName = summaryForJitName(exportAs);\r\n                this.outputCtx.statements.push(variable(jitExportAsName)\r\n                    .set(this.serializeSummaryRef(ngModuleSymbol))\r\n                    .toDeclStmt(null, [StmtModifier.Exported]));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} summary\r\n     * @param {?} metadata\r\n     * @return {?}\r\n     */\r\n    serializeSummaryWithDeps(summary, metadata) {\r\n        const /** @type {?} */ expressions = [this.serializeSummary(summary)];\r\n        let /** @type {?} */ providers = [];\r\n        if (metadata instanceof CompileNgModuleMetadata) {\r\n            expressions.push(...\r\n            // For directives / pipes, we only add the declared ones,\r\n            // and rely on transitively importing NgModules to get the transitive\r\n            // summaries.\r\n            metadata.declaredDirectives.concat(metadata.declaredPipes)\r\n                .map(type => type.reference)\r\n                .concat(metadata.transitiveModule.modules.map(type => type.reference)\r\n                .filter(ref => ref !== metadata.type.reference))\r\n                .map((ref) => this.serializeSummaryRef(ref)));\r\n            // Note: We don't use `NgModuleSummary.providers`, as that one is transitive,\r\n            // and we already have transitive modules.\r\n            providers = metadata.providers;\r\n        }\r\n        else if (summary.summaryKind === CompileSummaryKind.Directive) {\r\n            const /** @type {?} */ dirSummary = /** @type {?} */ (summary);\r\n            providers = dirSummary.providers.concat(dirSummary.viewProviders);\r\n        }\r\n        // Note: We can't just refer to the `ngsummary.ts` files for `useClass` providers (as we do for\r\n        // declaredDirectives / declaredPipes), as we allow\r\n        // providers without ctor arguments to skip the `@Injectable` decorator,\r\n        // i.e. we didn't generate .ngsummary.ts files for these.\r\n        expressions.push(...providers.filter(provider => !!provider.useClass).map(provider => this.serializeSummary(/** @type {?} */ ({\r\n            summaryKind: CompileSummaryKind.Injectable, type: provider.useClass\r\n        }))));\r\n        return literalArr(expressions);\r\n    }\r\n    /**\r\n     * @param {?} typeSymbol\r\n     * @return {?}\r\n     */\r\n    serializeSummaryRef(typeSymbol) {\r\n        const /** @type {?} */ jitImportedSymbol = this.symbolResolver.getStaticSymbol(summaryForJitFileName(typeSymbol.filePath), summaryForJitName(typeSymbol.name));\r\n        return this.outputCtx.importExpr(jitImportedSymbol);\r\n    }\r\n    /**\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    serializeSummary(data) {\r\n        const /** @type {?} */ outputCtx = this.outputCtx;\r\n        class Transformer {\r\n            /**\r\n             * @param {?} arr\r\n             * @param {?} context\r\n             * @return {?}\r\n             */\r\n            visitArray(arr, context) {\r\n                return literalArr(arr.map(entry => visitValue(entry, this, context)));\r\n            }\r\n            /**\r\n             * @param {?} map\r\n             * @param {?} context\r\n             * @return {?}\r\n             */\r\n            visitStringMap(map, context) {\r\n                return new LiteralMapExpr(Object.keys(map).map((key) => new LiteralMapEntry(key, visitValue(map[key], this, context), false)));\r\n            }\r\n            /**\r\n             * @param {?} value\r\n             * @param {?} context\r\n             * @return {?}\r\n             */\r\n            visitPrimitive(value, context) { return literal(value); }\r\n            /**\r\n             * @param {?} value\r\n             * @param {?} context\r\n             * @return {?}\r\n             */\r\n            visitOther(value, context) {\r\n                if (value instanceof StaticSymbol) {\r\n                    return outputCtx.importExpr(value);\r\n                }\r\n                else {\r\n                    throw new Error(`Illegal State: Encountered value ${value}`);\r\n                }\r\n            }\r\n        }\r\n        return visitValue(data, new Transformer(), null);\r\n    }\r\n}\r\nclass FromJsonDeserializer extends ValueTransformer {\r\n    /**\r\n     * @param {?} symbolCache\r\n     * @param {?} summaryResolver\r\n     */\r\n    constructor(symbolCache, summaryResolver) {\r\n        super();\r\n        this.symbolCache = symbolCache;\r\n        this.summaryResolver = summaryResolver;\r\n    }\r\n    /**\r\n     * @param {?} libraryFileName\r\n     * @param {?} json\r\n     * @return {?}\r\n     */\r\n    deserialize(libraryFileName, json) {\r\n        const /** @type {?} */ data = JSON.parse(json);\r\n        const /** @type {?} */ allImportAs = [];\r\n        this.symbols = data.symbols.map((serializedSymbol) => this.symbolCache.get(this.summaryResolver.fromSummaryFileName(serializedSymbol.filePath, libraryFileName), serializedSymbol.name));\r\n        data.symbols.forEach((serializedSymbol, index) => {\r\n            const /** @type {?} */ symbol = this.symbols[index];\r\n            const /** @type {?} */ importAs = serializedSymbol.importAs;\r\n            if (typeof importAs === 'number') {\r\n                allImportAs.push({ symbol, importAs: this.symbols[importAs] });\r\n            }\r\n            else if (typeof importAs === 'string') {\r\n                allImportAs.push({ symbol, importAs: this.symbolCache.get(ngfactoryFilePath(libraryFileName), importAs) });\r\n            }\r\n        });\r\n        const /** @type {?} */ summaries = /** @type {?} */ (visitValue(data.summaries, this, null));\r\n        return { moduleName: data.moduleName, summaries, importAs: allImportAs };\r\n    }\r\n    /**\r\n     * @param {?} map\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitStringMap(map, context) {\r\n        if ('__symbol' in map) {\r\n            const /** @type {?} */ baseSymbol = this.symbols[map['__symbol']];\r\n            const /** @type {?} */ members = map['members'];\r\n            return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :\r\n                baseSymbol;\r\n        }\r\n        else {\r\n            return super.visitStringMap(map, context);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} metadata\r\n * @return {?}\r\n */\r\nfunction isCall(metadata) {\r\n    return metadata && metadata.__symbolic === 'call';\r\n}\r\n/**\r\n * @param {?} metadata\r\n * @return {?}\r\n */\r\nfunction isFunctionCall(metadata) {\r\n    return isCall(metadata) && unwrapResolvedMetadata(metadata.expression) instanceof StaticSymbol;\r\n}\r\n/**\r\n * @param {?} metadata\r\n * @return {?}\r\n */\r\nfunction isMethodCallOnVariable(metadata) {\r\n    return isCall(metadata) && metadata.expression && metadata.expression.__symbolic === 'select' &&\r\n        unwrapResolvedMetadata(metadata.expression.expression) instanceof StaticSymbol;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst StubEmitFlags = {\r\n    Basic: 1,\r\n    TypeCheck: 2,\r\n    All: 3,\r\n};\r\nStubEmitFlags[StubEmitFlags.Basic] = \"Basic\";\r\nStubEmitFlags[StubEmitFlags.TypeCheck] = \"TypeCheck\";\r\nStubEmitFlags[StubEmitFlags.All] = \"All\";\r\nclass AotCompiler {\r\n    /**\r\n     * @param {?} _config\r\n     * @param {?} _options\r\n     * @param {?} _host\r\n     * @param {?} _reflector\r\n     * @param {?} _metadataResolver\r\n     * @param {?} _templateParser\r\n     * @param {?} _styleCompiler\r\n     * @param {?} _viewCompiler\r\n     * @param {?} _typeCheckCompiler\r\n     * @param {?} _ngModuleCompiler\r\n     * @param {?} _outputEmitter\r\n     * @param {?} _summaryResolver\r\n     * @param {?} _symbolResolver\r\n     */\r\n    constructor(_config, _options, _host, _reflector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _typeCheckCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _symbolResolver) {\r\n        this._config = _config;\r\n        this._options = _options;\r\n        this._host = _host;\r\n        this._reflector = _reflector;\r\n        this._metadataResolver = _metadataResolver;\r\n        this._templateParser = _templateParser;\r\n        this._styleCompiler = _styleCompiler;\r\n        this._viewCompiler = _viewCompiler;\r\n        this._typeCheckCompiler = _typeCheckCompiler;\r\n        this._ngModuleCompiler = _ngModuleCompiler;\r\n        this._outputEmitter = _outputEmitter;\r\n        this._summaryResolver = _summaryResolver;\r\n        this._symbolResolver = _symbolResolver;\r\n        this._templateAstCache = new Map();\r\n        this._analyzedFiles = new Map();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearCache() { this._metadataResolver.clearCache(); }\r\n    /**\r\n     * @param {?} rootFiles\r\n     * @return {?}\r\n     */\r\n    analyzeModulesSync(rootFiles) {\r\n        const /** @type {?} */ analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);\r\n        analyzeResult.ngModules.forEach(ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true));\r\n        return analyzeResult;\r\n    }\r\n    /**\r\n     * @param {?} rootFiles\r\n     * @return {?}\r\n     */\r\n    analyzeModulesAsync(rootFiles) {\r\n        const /** @type {?} */ analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);\r\n        return Promise\r\n            .all(analyzeResult.ngModules.map(ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false)))\r\n            .then(() => analyzeResult);\r\n    }\r\n    /**\r\n     * @param {?} fileName\r\n     * @return {?}\r\n     */\r\n    _analyzeFile(fileName) {\r\n        let /** @type {?} */ analyzedFile = this._analyzedFiles.get(fileName);\r\n        if (!analyzedFile) {\r\n            analyzedFile =\r\n                analyzeFile(this._host, this._symbolResolver, this._metadataResolver, fileName);\r\n            this._analyzedFiles.set(fileName, analyzedFile);\r\n        }\r\n        return analyzedFile;\r\n    }\r\n    /**\r\n     * @param {?} fileName\r\n     * @return {?}\r\n     */\r\n    findGeneratedFileNames(fileName) {\r\n        const /** @type {?} */ genFileNames = [];\r\n        const /** @type {?} */ file = this._analyzeFile(fileName);\r\n        // Make sure we create a .ngfactory if we have a injectable/directive/pipe/NgModule\r\n        // or a reference to a non source file.\r\n        // Note: This is overestimating the required .ngfactory files as the real calculation is harder.\r\n        // Only do this for StubEmitFlags.Basic, as adding a type check block\r\n        // does not change this file (as we generate type check blocks based on NgModules).\r\n        if (this._options.allowEmptyCodegenFiles || file.directives.length || file.pipes.length ||\r\n            file.injectables.length || file.ngModules.length || file.exportsNonSourceFiles) {\r\n            genFileNames.push(ngfactoryFilePath(file.fileName, true));\r\n            if (this._options.enableSummariesForJit) {\r\n                genFileNames.push(summaryForJitFileName(file.fileName, true));\r\n            }\r\n        }\r\n        const /** @type {?} */ fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(file.fileName, true)[1]);\r\n        file.directives.forEach((dirSymbol) => {\r\n            const /** @type {?} */ compMeta = /** @type {?} */ ((this._metadataResolver.getNonNormalizedDirectiveMetadata(dirSymbol))).metadata;\r\n            if (!compMeta.isComponent) {\r\n                return;\r\n            } /** @type {?} */\r\n            ((\r\n            // Note: compMeta is a component and therefore template is non null.\r\n            compMeta.template)).styleUrls.forEach((styleUrl) => {\r\n                const /** @type {?} */ normalizedUrl = this._host.resourceNameToFileName(styleUrl, file.fileName);\r\n                if (!normalizedUrl) {\r\n                    throw syntaxError(`Couldn't resolve resource ${styleUrl} relative to ${file.fileName}`);\r\n                }\r\n                const /** @type {?} */ needsShim = (/** @type {?} */ ((compMeta.template)).encapsulation || this._config.defaultEncapsulation) === ViewEncapsulation.Emulated;\r\n                genFileNames.push(_stylesModuleUrl(normalizedUrl, needsShim, fileSuffix));\r\n                if (this._options.allowEmptyCodegenFiles) {\r\n                    genFileNames.push(_stylesModuleUrl(normalizedUrl, !needsShim, fileSuffix));\r\n                }\r\n            });\r\n        });\r\n        return genFileNames;\r\n    }\r\n    /**\r\n     * @param {?} genFileName\r\n     * @param {?=} originalFileName\r\n     * @return {?}\r\n     */\r\n    emitBasicStub(genFileName, originalFileName) {\r\n        const /** @type {?} */ outputCtx = this._createOutputContext(genFileName);\r\n        if (genFileName.endsWith('.ngfactory.ts')) {\r\n            if (!originalFileName) {\r\n                throw new Error(`Assertion error: require the original file for .ngfactory.ts stubs. File: ${genFileName}`);\r\n            }\r\n            const /** @type {?} */ originalFile = this._analyzeFile(originalFileName);\r\n            this._createNgFactoryStub(outputCtx, originalFile, StubEmitFlags.Basic);\r\n        }\r\n        else if (genFileName.endsWith('.ngsummary.ts')) {\r\n            if (this._options.enableSummariesForJit) {\r\n                if (!originalFileName) {\r\n                    throw new Error(`Assertion error: require the original file for .ngsummary.ts stubs. File: ${genFileName}`);\r\n                }\r\n                const /** @type {?} */ originalFile = this._analyzeFile(originalFileName);\r\n                _createEmptyStub(outputCtx);\r\n                originalFile.ngModules.forEach(ngModule => {\r\n                    // create exports that user code can reference\r\n                    createForJitStub(outputCtx, ngModule.type.reference);\r\n                });\r\n            }\r\n        }\r\n        else if (genFileName.endsWith('.ngstyle.ts')) {\r\n            _createEmptyStub(outputCtx);\r\n        }\r\n        // Note: for the stubs, we don't need a property srcFileUrl,\r\n        // as lateron in emitAllImpls we will create the proper GeneratedFiles with the\r\n        // correct srcFileUrl.\r\n        // This is good as e.g. for .ngstyle.ts files we can't derive\r\n        // the url of components based on the genFileUrl.\r\n        return this._codegenSourceModule('unknown', outputCtx);\r\n    }\r\n    /**\r\n     * @param {?} genFileName\r\n     * @param {?} originalFileName\r\n     * @return {?}\r\n     */\r\n    emitTypeCheckStub(genFileName, originalFileName) {\r\n        const /** @type {?} */ originalFile = this._analyzeFile(originalFileName);\r\n        const /** @type {?} */ outputCtx = this._createOutputContext(genFileName);\r\n        if (genFileName.endsWith('.ngfactory.ts')) {\r\n            this._createNgFactoryStub(outputCtx, originalFile, StubEmitFlags.TypeCheck);\r\n        }\r\n        return outputCtx.statements.length > 0 ?\r\n            this._codegenSourceModule(originalFile.fileName, outputCtx) :\r\n            null;\r\n    }\r\n    /**\r\n     * @param {?} fileNames\r\n     * @return {?}\r\n     */\r\n    loadFilesAsync(fileNames) {\r\n        const /** @type {?} */ files = fileNames.map(fileName => this._analyzeFile(fileName));\r\n        const /** @type {?} */ loadingPromises = [];\r\n        files.forEach(file => file.ngModules.forEach(ngModule => loadingPromises.push(this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false))));\r\n        return Promise.all(loadingPromises).then(_ => mergeAndValidateNgFiles(files));\r\n    }\r\n    /**\r\n     * @param {?} fileNames\r\n     * @return {?}\r\n     */\r\n    loadFilesSync(fileNames) {\r\n        const /** @type {?} */ files = fileNames.map(fileName => this._analyzeFile(fileName));\r\n        files.forEach(file => file.ngModules.forEach(ngModule => this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true)));\r\n        return mergeAndValidateNgFiles(files);\r\n    }\r\n    /**\r\n     * @param {?} outputCtx\r\n     * @param {?} file\r\n     * @param {?} emitFlags\r\n     * @return {?}\r\n     */\r\n    _createNgFactoryStub(outputCtx, file, emitFlags) {\r\n        let /** @type {?} */ componentId = 0;\r\n        file.ngModules.forEach((ngModuleMeta, ngModuleIndex) => {\r\n            // Note: the code below needs to executed for StubEmitFlags.Basic and StubEmitFlags.TypeCheck,\r\n            // so we don't change the .ngfactory file too much when adding the typecheck block.\r\n            // create exports that user code can reference\r\n            this._ngModuleCompiler.createStub(outputCtx, ngModuleMeta.type.reference);\r\n            // add references to the symbols from the metadata.\r\n            // These can be used by the type check block for components,\r\n            // and they also cause TypeScript to include these files into the program too,\r\n            // which will make them part of the analyzedFiles.\r\n            const /** @type {?} */ externalReferences = [\r\n                // Add references that are available from all the modules and imports.\r\n                ...ngModuleMeta.transitiveModule.directives.map(d => d.reference),\r\n                ...ngModuleMeta.transitiveModule.pipes.map(d => d.reference),\r\n                ...ngModuleMeta.importedModules.map(m => m.type.reference),\r\n                ...ngModuleMeta.exportedModules.map(m => m.type.reference),\r\n                // Add references that might be inserted by the template compiler.\r\n                ...this._externalIdentifierReferences([Identifiers.TemplateRef, Identifiers.ElementRef]),\r\n            ];\r\n            const /** @type {?} */ externalReferenceVars = new Map();\r\n            externalReferences.forEach((ref, typeIndex) => {\r\n                if (this._host.isSourceFile(ref.filePath)) {\r\n                    externalReferenceVars.set(ref, `_decl${ngModuleIndex}_${typeIndex}`);\r\n                }\r\n            });\r\n            externalReferenceVars.forEach((varName, reference) => {\r\n                outputCtx.statements.push(variable(varName)\r\n                    .set(NULL_EXPR.cast(DYNAMIC_TYPE))\r\n                    .toDeclStmt(expressionType(outputCtx.importExpr(reference))));\r\n            });\r\n            if (emitFlags & StubEmitFlags.TypeCheck) {\r\n                // add the typecheck block for all components of the NgModule\r\n                ngModuleMeta.declaredDirectives.forEach((dirId) => {\r\n                    const /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata(dirId.reference);\r\n                    if (!compMeta.isComponent) {\r\n                        return;\r\n                    }\r\n                    componentId++;\r\n                    this._createTypeCheckBlock(outputCtx, `${compMeta.type.reference.name}_Host_${componentId}`, ngModuleMeta, this._metadataResolver.getHostComponentMetadata(compMeta), [compMeta.type], externalReferenceVars);\r\n                    this._createTypeCheckBlock(outputCtx, `${compMeta.type.reference.name}_${componentId}`, ngModuleMeta, compMeta, ngModuleMeta.transitiveModule.directives, externalReferenceVars);\r\n                });\r\n            }\r\n        });\r\n        if (outputCtx.statements.length === 0) {\r\n            _createEmptyStub(outputCtx);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} references\r\n     * @return {?}\r\n     */\r\n    _externalIdentifierReferences(references) {\r\n        const /** @type {?} */ result = [];\r\n        for (let /** @type {?} */ reference of references) {\r\n            const /** @type {?} */ token = createTokenForExternalReference(this._reflector, reference);\r\n            if (token.identifier) {\r\n                result.push(token.identifier.reference);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} componentId\r\n     * @param {?} moduleMeta\r\n     * @param {?} compMeta\r\n     * @param {?} directives\r\n     * @param {?} externalReferenceVars\r\n     * @return {?}\r\n     */\r\n    _createTypeCheckBlock(ctx, componentId, moduleMeta, compMeta, directives, externalReferenceVars) {\r\n        const { template: parsedTemplate, pipes: usedPipes } = this._parseTemplate(compMeta, moduleMeta, directives);\r\n        ctx.statements.push(...this._typeCheckCompiler.compileComponent(componentId, compMeta, parsedTemplate, usedPipes, externalReferenceVars));\r\n    }\r\n    /**\r\n     * @param {?} analyzeResult\r\n     * @param {?} locale\r\n     * @return {?}\r\n     */\r\n    emitMessageBundle(analyzeResult, locale) {\r\n        const /** @type {?} */ errors = [];\r\n        const /** @type {?} */ htmlParser = new HtmlParser();\r\n        // TODO(vicb): implicit tags & attributes\r\n        const /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {}, locale);\r\n        analyzeResult.files.forEach(file => {\r\n            const /** @type {?} */ compMetas = [];\r\n            file.directives.forEach(directiveType => {\r\n                const /** @type {?} */ dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);\r\n                if (dirMeta && dirMeta.isComponent) {\r\n                    compMetas.push(dirMeta);\r\n                }\r\n            });\r\n            compMetas.forEach(compMeta => {\r\n                const /** @type {?} */ html = /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).template));\r\n                const /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((compMeta.template)).interpolation);\r\n                errors.push(.../** @type {?} */ ((messageBundle.updateFromTemplate(html, file.fileName, interpolationConfig))));\r\n            });\r\n        });\r\n        if (errors.length) {\r\n            throw new Error(errors.map(e => e.toString()).join('\\n'));\r\n        }\r\n        return messageBundle;\r\n    }\r\n    /**\r\n     * @param {?} analyzeResult\r\n     * @return {?}\r\n     */\r\n    emitAllImpls(analyzeResult) {\r\n        const { ngModuleByPipeOrDirective, files } = analyzeResult;\r\n        const /** @type {?} */ sourceModules = files.map(file => this._compileImplFile(file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables));\r\n        return flatten(sourceModules);\r\n    }\r\n    /**\r\n     * @param {?} srcFileUrl\r\n     * @param {?} ngModuleByPipeOrDirective\r\n     * @param {?} directives\r\n     * @param {?} pipes\r\n     * @param {?} ngModules\r\n     * @param {?} injectables\r\n     * @return {?}\r\n     */\r\n    _compileImplFile(srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {\r\n        const /** @type {?} */ fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(srcFileUrl, true)[1]);\r\n        const /** @type {?} */ generatedFiles = [];\r\n        const /** @type {?} */ outputCtx = this._createOutputContext(ngfactoryFilePath(srcFileUrl, true));\r\n        generatedFiles.push(...this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, outputCtx));\r\n        // compile all ng modules\r\n        ngModules.forEach((ngModuleMeta) => this._compileModule(outputCtx, ngModuleMeta));\r\n        // compile components\r\n        directives.forEach((dirType) => {\r\n            const /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata(/** @type {?} */ (dirType));\r\n            if (!compMeta.isComponent) {\r\n                return;\r\n            }\r\n            const /** @type {?} */ ngModule = ngModuleByPipeOrDirective.get(dirType);\r\n            if (!ngModule) {\r\n                throw new Error(`Internal Error: cannot determine the module for component ${identifierName(compMeta.type)}!`);\r\n            }\r\n            // compile styles\r\n            const /** @type {?} */ componentStylesheet = this._styleCompiler.compileComponent(outputCtx, compMeta); /** @type {?} */\r\n            ((\r\n            // Note: compMeta is a component and therefore template is non null.\r\n            compMeta.template)).externalStylesheets.forEach((stylesheetMeta) => {\r\n                // Note: fill non shim and shim style files as they might\r\n                // be shared by component with and without ViewEncapsulation.\r\n                const /** @type {?} */ shim = this._styleCompiler.needsStyleShim(compMeta);\r\n                generatedFiles.push(this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, shim, fileSuffix));\r\n                if (this._options.allowEmptyCodegenFiles) {\r\n                    generatedFiles.push(this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, !shim, fileSuffix));\r\n                }\r\n            });\r\n            // compile components\r\n            const /** @type {?} */ compViewVars = this._compileComponent(outputCtx, compMeta, ngModule, ngModule.transitiveModule.directives, componentStylesheet, fileSuffix);\r\n            this._compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix);\r\n        });\r\n        if (outputCtx.statements.length > 0 || this._options.allowEmptyCodegenFiles) {\r\n            const /** @type {?} */ srcModule = this._codegenSourceModule(srcFileUrl, outputCtx);\r\n            generatedFiles.unshift(srcModule);\r\n        }\r\n        return generatedFiles;\r\n    }\r\n    /**\r\n     * @param {?} srcFileName\r\n     * @param {?} directives\r\n     * @param {?} pipes\r\n     * @param {?} ngModules\r\n     * @param {?} injectables\r\n     * @param {?} ngFactoryCtx\r\n     * @return {?}\r\n     */\r\n    _createSummary(srcFileName, directives, pipes, ngModules, injectables, ngFactoryCtx) {\r\n        const /** @type {?} */ symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileName)\r\n            .map(symbol => this._symbolResolver.resolveSymbol(symbol));\r\n        const /** @type {?} */ typeData = [\r\n            ...ngModules.map(meta => ({\r\n                summary: /** @type {?} */ ((this._metadataResolver.getNgModuleSummary(meta.type.reference))),\r\n                metadata: /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(meta.type.reference)))\r\n            })),\r\n            ...directives.map(ref => ({\r\n                summary: /** @type {?} */ ((this._metadataResolver.getDirectiveSummary(ref))),\r\n                metadata: /** @type {?} */ ((this._metadataResolver.getDirectiveMetadata(ref)))\r\n            })),\r\n            ...pipes.map(ref => ({\r\n                summary: /** @type {?} */ ((this._metadataResolver.getPipeSummary(ref))),\r\n                metadata: /** @type {?} */ ((this._metadataResolver.getPipeMetadata(ref)))\r\n            })),\r\n            ...injectables.map(ref => ({\r\n                summary: /** @type {?} */ ((this._metadataResolver.getInjectableSummary(ref))),\r\n                metadata: /** @type {?} */ ((this._metadataResolver.getInjectableSummary(ref))).type\r\n            }))\r\n        ];\r\n        const /** @type {?} */ forJitOutputCtx = this._options.enableSummariesForJit ?\r\n            this._createOutputContext(summaryForJitFileName(srcFileName, true)) :\r\n            null;\r\n        const { json, exportAs } = serializeSummaries(srcFileName, forJitOutputCtx, this._summaryResolver, this._symbolResolver, symbolSummaries, typeData);\r\n        exportAs.forEach((entry) => {\r\n            ngFactoryCtx.statements.push(variable(entry.exportAs).set(ngFactoryCtx.importExpr(entry.symbol)).toDeclStmt(null, [\r\n                StmtModifier.Exported\r\n            ]));\r\n        });\r\n        const /** @type {?} */ summaryJson = new GeneratedFile(srcFileName, summaryFileName(srcFileName), json);\r\n        const /** @type {?} */ result = [summaryJson];\r\n        if (forJitOutputCtx) {\r\n            result.push(this._codegenSourceModule(srcFileName, forJitOutputCtx));\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} outputCtx\r\n     * @param {?} ngModule\r\n     * @return {?}\r\n     */\r\n    _compileModule(outputCtx, ngModule) {\r\n        const /** @type {?} */ providers = [];\r\n        if (this._options.locale) {\r\n            const /** @type {?} */ normalizedLocale = this._options.locale.replace(/_/g, '-');\r\n            providers.push({\r\n                token: createTokenForExternalReference(this._reflector, Identifiers.LOCALE_ID),\r\n                useValue: normalizedLocale,\r\n            });\r\n        }\r\n        if (this._options.i18nFormat) {\r\n            providers.push({\r\n                token: createTokenForExternalReference(this._reflector, Identifiers.TRANSLATIONS_FORMAT),\r\n                useValue: this._options.i18nFormat\r\n            });\r\n        }\r\n        this._ngModuleCompiler.compile(outputCtx, ngModule, providers);\r\n    }\r\n    /**\r\n     * @param {?} outputCtx\r\n     * @param {?} compMeta\r\n     * @param {?} ngModule\r\n     * @param {?} fileSuffix\r\n     * @return {?}\r\n     */\r\n    _compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix) {\r\n        const /** @type {?} */ hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta);\r\n        const /** @type {?} */ hostViewFactoryVar = this._compileComponent(outputCtx, hostMeta, ngModule, [compMeta.type], null, fileSuffix)\r\n            .viewClassVar;\r\n        const /** @type {?} */ compFactoryVar = componentFactoryName(compMeta.type.reference);\r\n        const /** @type {?} */ inputsExprs = [];\r\n        for (let /** @type {?} */ propName in compMeta.inputs) {\r\n            const /** @type {?} */ templateName = compMeta.inputs[propName];\r\n            // Don't quote so that the key gets minified...\r\n            inputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));\r\n        }\r\n        const /** @type {?} */ outputsExprs = [];\r\n        for (let /** @type {?} */ propName in compMeta.outputs) {\r\n            const /** @type {?} */ templateName = compMeta.outputs[propName];\r\n            // Don't quote so that the key gets minified...\r\n            outputsExprs.push(new LiteralMapEntry(propName, literal(templateName), false));\r\n        }\r\n        outputCtx.statements.push(variable(compFactoryVar)\r\n            .set(importExpr(Identifiers.createComponentFactory).callFn([\r\n            literal(compMeta.selector), outputCtx.importExpr(compMeta.type.reference),\r\n            variable(hostViewFactoryVar), new LiteralMapExpr(inputsExprs),\r\n            new LiteralMapExpr(outputsExprs),\r\n            literalArr(/** @type {?} */ ((compMeta.template)).ngContentSelectors.map(selector => literal(selector)))\r\n        ]))\r\n            .toDeclStmt(importType(Identifiers.ComponentFactory, [/** @type {?} */ ((expressionType(outputCtx.importExpr(compMeta.type.reference))))], [TypeModifier.Const]), [StmtModifier.Final, StmtModifier.Exported]));\r\n    }\r\n    /**\r\n     * @param {?} outputCtx\r\n     * @param {?} compMeta\r\n     * @param {?} ngModule\r\n     * @param {?} directiveIdentifiers\r\n     * @param {?} componentStyles\r\n     * @param {?} fileSuffix\r\n     * @return {?}\r\n     */\r\n    _compileComponent(outputCtx, compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix) {\r\n        const { template: parsedTemplate, pipes: usedPipes } = this._parseTemplate(compMeta, ngModule, directiveIdentifiers);\r\n        const /** @type {?} */ stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);\r\n        const /** @type {?} */ viewResult = this._viewCompiler.compileComponent(outputCtx, compMeta, parsedTemplate, stylesExpr, usedPipes);\r\n        if (componentStyles) {\r\n            _resolveStyleStatements(this._symbolResolver, componentStyles, this._styleCompiler.needsStyleShim(compMeta), fileSuffix);\r\n        }\r\n        return viewResult;\r\n    }\r\n    /**\r\n     * @param {?} compMeta\r\n     * @param {?} ngModule\r\n     * @param {?} directiveIdentifiers\r\n     * @return {?}\r\n     */\r\n    _parseTemplate(compMeta, ngModule, directiveIdentifiers) {\r\n        if (this._templateAstCache.has(compMeta.type.reference)) {\r\n            return /** @type {?} */ ((this._templateAstCache.get(compMeta.type.reference)));\r\n        }\r\n        const /** @type {?} */ preserveWhitespaces = /** @type {?} */ ((/** @type {?} */ ((compMeta)).template)).preserveWhitespaces;\r\n        const /** @type {?} */ directives = directiveIdentifiers.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));\r\n        const /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));\r\n        const /** @type {?} */ result = this._templateParser.parse(compMeta, /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).htmlAst)), directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, /** @type {?} */ ((compMeta.template))), preserveWhitespaces);\r\n        this._templateAstCache.set(compMeta.type.reference, result);\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} genFilePath\r\n     * @return {?}\r\n     */\r\n    _createOutputContext(genFilePath) {\r\n        const /** @type {?} */ importExpr$$1 = (symbol, typeParams = null) => {\r\n            if (!(symbol instanceof StaticSymbol)) {\r\n                throw new Error(`Internal error: unknown identifier ${JSON.stringify(symbol)}`);\r\n            }\r\n            const /** @type {?} */ arity = this._symbolResolver.getTypeArity(symbol) || 0;\r\n            const { filePath, name, members } = this._symbolResolver.getImportAs(symbol) || symbol;\r\n            const /** @type {?} */ importModule = this._fileNameToModuleName(filePath, genFilePath);\r\n            // It should be good enough to compare filePath to genFilePath and if they are equal\r\n            // there is a self reference. However, ngfactory files generate to .ts but their\r\n            // symbols have .d.ts so a simple compare is insufficient. They should be canonical\r\n            // and is tracked by #17705.\r\n            const /** @type {?} */ selfReference = this._fileNameToModuleName(genFilePath, genFilePath);\r\n            const /** @type {?} */ moduleName = importModule === selfReference ? null : importModule;\r\n            // If we are in a type expression that refers to a generic type then supply\r\n            // the required type parameters. If there were not enough type parameters\r\n            // supplied, supply any as the type. Outside a type expression the reference\r\n            // should not supply type parameters and be treated as a simple value reference\r\n            // to the constructor function itself.\r\n            const /** @type {?} */ suppliedTypeParams = typeParams || [];\r\n            const /** @type {?} */ missingTypeParamsCount = arity - suppliedTypeParams.length;\r\n            const /** @type {?} */ allTypeParams = suppliedTypeParams.concat(new Array(missingTypeParamsCount).fill(DYNAMIC_TYPE));\r\n            return members.reduce((expr, memberName) => expr.prop(memberName), /** @type {?} */ (importExpr(new ExternalReference(moduleName, name, null), allTypeParams)));\r\n        };\r\n        return { statements: [], genFilePath, importExpr: importExpr$$1 };\r\n    }\r\n    /**\r\n     * @param {?} importedFilePath\r\n     * @param {?} containingFilePath\r\n     * @return {?}\r\n     */\r\n    _fileNameToModuleName(importedFilePath, containingFilePath) {\r\n        return this._summaryResolver.getKnownModuleName(importedFilePath) ||\r\n            this._symbolResolver.getKnownModuleName(importedFilePath) ||\r\n            this._host.fileNameToModuleName(importedFilePath, containingFilePath);\r\n    }\r\n    /**\r\n     * @param {?} srcFileUrl\r\n     * @param {?} compMeta\r\n     * @param {?} stylesheetMetadata\r\n     * @param {?} isShimmed\r\n     * @param {?} fileSuffix\r\n     * @return {?}\r\n     */\r\n    _codegenStyles(srcFileUrl, compMeta, stylesheetMetadata, isShimmed, fileSuffix) {\r\n        const /** @type {?} */ outputCtx = this._createOutputContext(_stylesModuleUrl(/** @type {?} */ ((stylesheetMetadata.moduleUrl)), isShimmed, fileSuffix));\r\n        const /** @type {?} */ compiledStylesheet = this._styleCompiler.compileStyles(outputCtx, compMeta, stylesheetMetadata, isShimmed);\r\n        _resolveStyleStatements(this._symbolResolver, compiledStylesheet, isShimmed, fileSuffix);\r\n        return this._codegenSourceModule(srcFileUrl, outputCtx);\r\n    }\r\n    /**\r\n     * @param {?} srcFileUrl\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _codegenSourceModule(srcFileUrl, ctx) {\r\n        return new GeneratedFile(srcFileUrl, ctx.genFilePath, ctx.statements);\r\n    }\r\n    /**\r\n     * @param {?=} entryRoute\r\n     * @param {?=} analyzedModules\r\n     * @return {?}\r\n     */\r\n    listLazyRoutes(entryRoute, analyzedModules) {\r\n        const /** @type {?} */ self = this;\r\n        if (entryRoute) {\r\n            const /** @type {?} */ symbol = parseLazyRoute(entryRoute, this._reflector).referencedModule;\r\n            return visitLazyRoute(symbol);\r\n        }\r\n        else if (analyzedModules) {\r\n            const /** @type {?} */ allLazyRoutes = [];\r\n            for (const /** @type {?} */ ngModule of analyzedModules.ngModules) {\r\n                const /** @type {?} */ lazyRoutes = listLazyRoutes(ngModule, this._reflector);\r\n                for (const /** @type {?} */ lazyRoute of lazyRoutes) {\r\n                    allLazyRoutes.push(lazyRoute);\r\n                }\r\n            }\r\n            return allLazyRoutes;\r\n        }\r\n        else {\r\n            throw new Error(`Either route or analyzedModules has to be specified!`);\r\n        }\r\n        /**\r\n         * @param {?} symbol\r\n         * @param {?=} seenRoutes\r\n         * @param {?=} allLazyRoutes\r\n         * @return {?}\r\n         */\r\n        function visitLazyRoute(symbol, seenRoutes = new Set(), allLazyRoutes = []) {\r\n            // Support pointing to default exports, but stop recursing there,\r\n            // as the StaticReflector does not yet support default exports.\r\n            if (seenRoutes.has(symbol) || !symbol.name) {\r\n                return allLazyRoutes;\r\n            }\r\n            seenRoutes.add(symbol);\r\n            const /** @type {?} */ lazyRoutes = listLazyRoutes(/** @type {?} */ ((self._metadataResolver.getNgModuleMetadata(symbol, true))), self._reflector);\r\n            for (const /** @type {?} */ lazyRoute of lazyRoutes) {\r\n                allLazyRoutes.push(lazyRoute);\r\n                visitLazyRoute(lazyRoute.referencedModule, seenRoutes, allLazyRoutes);\r\n            }\r\n            return allLazyRoutes;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} outputCtx\r\n * @return {?}\r\n */\r\nfunction _createEmptyStub(outputCtx) {\r\n    // Note: We need to produce at least one import statement so that\r\n    // TypeScript knows that the file is an es6 module. Otherwise our generated\r\n    // exports / imports won't be emitted properly by TypeScript.\r\n    outputCtx.statements.push(importExpr(Identifiers.ComponentFactory).toStmt());\r\n}\r\n/**\r\n * @param {?} symbolResolver\r\n * @param {?} compileResult\r\n * @param {?} needsShim\r\n * @param {?} fileSuffix\r\n * @return {?}\r\n */\r\nfunction _resolveStyleStatements(symbolResolver, compileResult, needsShim, fileSuffix) {\r\n    compileResult.dependencies.forEach((dep) => {\r\n        dep.setValue(symbolResolver.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, needsShim, fileSuffix), dep.name));\r\n    });\r\n}\r\n/**\r\n * @param {?} stylesheetUrl\r\n * @param {?} shim\r\n * @param {?} suffix\r\n * @return {?}\r\n */\r\nfunction _stylesModuleUrl(stylesheetUrl, shim, suffix) {\r\n    return `${stylesheetUrl}${shim ? '.shim' : ''}.ngstyle${suffix}`;\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} fileNames\r\n * @param {?} host\r\n * @param {?} staticSymbolResolver\r\n * @param {?} metadataResolver\r\n * @return {?}\r\n */\r\nfunction analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {\r\n    const /** @type {?} */ files = _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver);\r\n    return mergeAnalyzedFiles(files);\r\n}\r\n/**\r\n * @param {?} fileNames\r\n * @param {?} host\r\n * @param {?} staticSymbolResolver\r\n * @param {?} metadataResolver\r\n * @return {?}\r\n */\r\nfunction analyzeAndValidateNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {\r\n    return validateAnalyzedModules(analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver));\r\n}\r\n/**\r\n * @param {?} analyzedModules\r\n * @return {?}\r\n */\r\nfunction validateAnalyzedModules(analyzedModules) {\r\n    if (analyzedModules.symbolsMissingModule && analyzedModules.symbolsMissingModule.length) {\r\n        const /** @type {?} */ messages = analyzedModules.symbolsMissingModule.map(s => `Cannot determine the module for class ${s.name} in ${s.filePath}! Add ${s.name} to the NgModule to fix it.`);\r\n        throw syntaxError(messages.join('\\n'));\r\n    }\r\n    return analyzedModules;\r\n}\r\n/**\r\n * @param {?} fileNames\r\n * @param {?} host\r\n * @param {?} staticSymbolResolver\r\n * @param {?} metadataResolver\r\n * @return {?}\r\n */\r\nfunction _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver) {\r\n    const /** @type {?} */ seenFiles = new Set();\r\n    const /** @type {?} */ files = [];\r\n    const /** @type {?} */ visitFile = (fileName) => {\r\n        if (seenFiles.has(fileName) || !host.isSourceFile(fileName)) {\r\n            return false;\r\n        }\r\n        seenFiles.add(fileName);\r\n        const /** @type {?} */ analyzedFile = analyzeFile(host, staticSymbolResolver, metadataResolver, fileName);\r\n        files.push(analyzedFile);\r\n        analyzedFile.ngModules.forEach(ngModule => {\r\n            ngModule.transitiveModule.modules.forEach(modMeta => visitFile(modMeta.reference.filePath));\r\n        });\r\n    };\r\n    fileNames.forEach((fileName) => visitFile(fileName));\r\n    return files;\r\n}\r\n/**\r\n * @param {?} host\r\n * @param {?} staticSymbolResolver\r\n * @param {?} metadataResolver\r\n * @param {?} fileName\r\n * @return {?}\r\n */\r\nfunction analyzeFile(host, staticSymbolResolver, metadataResolver, fileName) {\r\n    const /** @type {?} */ directives = [];\r\n    const /** @type {?} */ pipes = [];\r\n    const /** @type {?} */ injectables = [];\r\n    const /** @type {?} */ ngModules = [];\r\n    const /** @type {?} */ hasDecorators = staticSymbolResolver.hasDecorators(fileName);\r\n    let /** @type {?} */ exportsNonSourceFiles = false;\r\n    // Don't analyze .d.ts files that have no decorators as a shortcut\r\n    // to speed up the analysis. This prevents us from\r\n    // resolving the references in these files.\r\n    // Note: exportsNonSourceFiles is only needed when compiling with summaries,\r\n    // which is not the case when .d.ts files are treated as input files.\r\n    if (!fileName.endsWith('.d.ts') || hasDecorators) {\r\n        staticSymbolResolver.getSymbolsOf(fileName).forEach((symbol) => {\r\n            const /** @type {?} */ resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\r\n            const /** @type {?} */ symbolMeta = resolvedSymbol.metadata;\r\n            if (!symbolMeta || symbolMeta.__symbolic === 'error') {\r\n                return;\r\n            }\r\n            let /** @type {?} */ isNgSymbol = false;\r\n            if (symbolMeta.__symbolic === 'class') {\r\n                if (metadataResolver.isDirective(symbol)) {\r\n                    isNgSymbol = true;\r\n                    directives.push(symbol);\r\n                }\r\n                else if (metadataResolver.isPipe(symbol)) {\r\n                    isNgSymbol = true;\r\n                    pipes.push(symbol);\r\n                }\r\n                else if (metadataResolver.isNgModule(symbol)) {\r\n                    const /** @type {?} */ ngModule = metadataResolver.getNgModuleMetadata(symbol, false);\r\n                    if (ngModule) {\r\n                        isNgSymbol = true;\r\n                        ngModules.push(ngModule);\r\n                    }\r\n                }\r\n                else if (metadataResolver.isInjectable(symbol)) {\r\n                    isNgSymbol = true;\r\n                    injectables.push(symbol);\r\n                }\r\n            }\r\n            if (!isNgSymbol) {\r\n                exportsNonSourceFiles =\r\n                    exportsNonSourceFiles || isValueExportingNonSourceFile(host, symbolMeta);\r\n            }\r\n        });\r\n    }\r\n    return {\r\n        fileName, directives, pipes, ngModules, injectables, exportsNonSourceFiles,\r\n    };\r\n}\r\n/**\r\n * @param {?} host\r\n * @param {?} metadata\r\n * @return {?}\r\n */\r\nfunction isValueExportingNonSourceFile(host, metadata) {\r\n    let /** @type {?} */ exportsNonSourceFiles = false;\r\n    class Visitor {\r\n        /**\r\n         * @param {?} arr\r\n         * @param {?} context\r\n         * @return {?}\r\n         */\r\n        visitArray(arr, context) { arr.forEach(v => visitValue(v, this, context)); }\r\n        /**\r\n         * @param {?} map\r\n         * @param {?} context\r\n         * @return {?}\r\n         */\r\n        visitStringMap(map, context) {\r\n            Object.keys(map).forEach((key) => visitValue(map[key], this, context));\r\n        }\r\n        /**\r\n         * @param {?} value\r\n         * @param {?} context\r\n         * @return {?}\r\n         */\r\n        visitPrimitive(value, context) { }\r\n        /**\r\n         * @param {?} value\r\n         * @param {?} context\r\n         * @return {?}\r\n         */\r\n        visitOther(value, context) {\r\n            if (value instanceof StaticSymbol && !host.isSourceFile(value.filePath)) {\r\n                exportsNonSourceFiles = true;\r\n            }\r\n        }\r\n    }\r\n    visitValue(metadata, new Visitor(), null);\r\n    return exportsNonSourceFiles;\r\n}\r\n/**\r\n * @param {?} analyzedFiles\r\n * @return {?}\r\n */\r\nfunction mergeAnalyzedFiles(analyzedFiles) {\r\n    const /** @type {?} */ allNgModules = [];\r\n    const /** @type {?} */ ngModuleByPipeOrDirective = new Map();\r\n    const /** @type {?} */ allPipesAndDirectives = new Set();\r\n    analyzedFiles.forEach(af => {\r\n        af.ngModules.forEach(ngModule => {\r\n            allNgModules.push(ngModule);\r\n            ngModule.declaredDirectives.forEach(d => ngModuleByPipeOrDirective.set(d.reference, ngModule));\r\n            ngModule.declaredPipes.forEach(p => ngModuleByPipeOrDirective.set(p.reference, ngModule));\r\n        });\r\n        af.directives.forEach(d => allPipesAndDirectives.add(d));\r\n        af.pipes.forEach(p => allPipesAndDirectives.add(p));\r\n    });\r\n    const /** @type {?} */ symbolsMissingModule = [];\r\n    allPipesAndDirectives.forEach(ref => {\r\n        if (!ngModuleByPipeOrDirective.has(ref)) {\r\n            symbolsMissingModule.push(ref);\r\n        }\r\n    });\r\n    return {\r\n        ngModules: allNgModules,\r\n        ngModuleByPipeOrDirective,\r\n        symbolsMissingModule,\r\n        files: analyzedFiles\r\n    };\r\n}\r\n/**\r\n * @param {?} files\r\n * @return {?}\r\n */\r\nfunction mergeAndValidateNgFiles(files) {\r\n    return validateAnalyzedModules(mergeAnalyzedFiles(files));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\nconst FORMATTED_MESSAGE = 'ngFormattedMessage';\r\n/**\r\n * @param {?} level\r\n * @return {?}\r\n */\r\nfunction indentStr(level) {\r\n    if (level <= 0)\r\n        return '';\r\n    if (level < 6)\r\n        return ['', ' ', '  ', '   ', '    ', '     '][level];\r\n    const /** @type {?} */ half = indentStr(Math.floor(level / 2));\r\n    return half + half + (level % 2 === 1 ? ' ' : '');\r\n}\r\n/**\r\n * @param {?} chain\r\n * @param {?=} indent\r\n * @return {?}\r\n */\r\nfunction formatChain(chain, indent = 0) {\r\n    if (!chain)\r\n        return '';\r\n    const /** @type {?} */ position = chain.position ?\r\n        `${chain.position.fileName}(${chain.position.line + 1},${chain.position.column + 1})` :\r\n        '';\r\n    const /** @type {?} */ prefix = position && indent === 0 ? `${position}: ` : '';\r\n    const /** @type {?} */ postfix = position && indent !== 0 ? ` at ${position}` : '';\r\n    const /** @type {?} */ message = `${prefix}${chain.message}${postfix}`;\r\n    return `${indentStr(indent)}${message}${(chain.next && ('\\n' + formatChain(chain.next, indent + 2))) || ''}`;\r\n}\r\n/**\r\n * @param {?} chain\r\n * @return {?}\r\n */\r\nfunction formattedError(chain) {\r\n    const /** @type {?} */ message = formatChain(chain) + '.';\r\n    const /** @type {?} */ error = /** @type {?} */ (syntaxError(message));\r\n    (/** @type {?} */ (error))[FORMATTED_MESSAGE] = true;\r\n    error.chain = chain;\r\n    error.position = chain.position;\r\n    return error;\r\n}\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction isFormattedError(error) {\r\n    return !!(/** @type {?} */ (error))[FORMATTED_MESSAGE];\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst ANGULAR_CORE = '@angular/core';\r\nconst ANGULAR_ROUTER = '@angular/router';\r\nconst HIDDEN_KEY = /^\\$.*\\$$/;\r\nconst IGNORE = {\r\n    __symbolic: 'ignore'\r\n};\r\nconst USE_VALUE = 'useValue';\r\nconst PROVIDE = 'provide';\r\nconst REFERENCE_SET = new Set([USE_VALUE, 'useFactory', 'data']);\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction shouldIgnore(value) {\r\n    return value && value.__symbolic == 'ignore';\r\n}\r\n/**\r\n * A static reflector implements enough of the Reflector API that is necessary to compile\r\n * templates statically.\r\n */\r\nclass StaticReflector {\r\n    /**\r\n     * @param {?} summaryResolver\r\n     * @param {?} symbolResolver\r\n     * @param {?=} knownMetadataClasses\r\n     * @param {?=} knownMetadataFunctions\r\n     * @param {?=} errorRecorder\r\n     */\r\n    constructor(summaryResolver, symbolResolver, knownMetadataClasses = [], knownMetadataFunctions = [], errorRecorder) {\r\n        this.summaryResolver = summaryResolver;\r\n        this.symbolResolver = symbolResolver;\r\n        this.errorRecorder = errorRecorder;\r\n        this.annotationCache = new Map();\r\n        this.propertyCache = new Map();\r\n        this.parameterCache = new Map();\r\n        this.methodCache = new Map();\r\n        this.conversionMap = new Map();\r\n        this.annotationForParentClassWithSummaryKind = new Map();\r\n        this.initializeConversionMap();\r\n        knownMetadataClasses.forEach((kc) => this._registerDecoratorOrConstructor(this.getStaticSymbol(kc.filePath, kc.name), kc.ctor));\r\n        knownMetadataFunctions.forEach((kf) => this._registerFunction(this.getStaticSymbol(kf.filePath, kf.name), kf.fn));\r\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Directive, [createDirective, createComponent]);\r\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [createPipe]);\r\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [createNgModule]);\r\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Injectable, [createInjectable, createPipe, createDirective, createComponent, createNgModule]);\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    componentModuleUrl(typeOrFunc) {\r\n        const /** @type {?} */ staticSymbol = this.findSymbolDeclaration(typeOrFunc);\r\n        return this.symbolResolver.getResourcePath(staticSymbol);\r\n    }\r\n    /**\r\n     * @param {?} ref\r\n     * @param {?=} containingFile\r\n     * @return {?}\r\n     */\r\n    resolveExternalReference(ref, containingFile) {\r\n        const /** @type {?} */ refSymbol = this.symbolResolver.getSymbolByModule(/** @type {?} */ ((ref.moduleName)), /** @type {?} */ ((ref.name)), containingFile);\r\n        const /** @type {?} */ declarationSymbol = this.findSymbolDeclaration(refSymbol);\r\n        if (!containingFile) {\r\n            this.symbolResolver.recordModuleNameForFileName(refSymbol.filePath, /** @type {?} */ ((ref.moduleName)));\r\n            this.symbolResolver.recordImportAs(declarationSymbol, refSymbol);\r\n        }\r\n        return declarationSymbol;\r\n    }\r\n    /**\r\n     * @param {?} moduleUrl\r\n     * @param {?} name\r\n     * @param {?=} containingFile\r\n     * @return {?}\r\n     */\r\n    findDeclaration(moduleUrl, name, containingFile) {\r\n        return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));\r\n    }\r\n    /**\r\n     * @param {?} moduleUrl\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    tryFindDeclaration(moduleUrl, name) {\r\n        return this.symbolResolver.ignoreErrorsFor(() => this.findDeclaration(moduleUrl, name));\r\n    }\r\n    /**\r\n     * @param {?} symbol\r\n     * @return {?}\r\n     */\r\n    findSymbolDeclaration(symbol) {\r\n        const /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\r\n        if (resolvedSymbol) {\r\n            let /** @type {?} */ resolvedMetadata = resolvedSymbol.metadata;\r\n            if (resolvedMetadata && resolvedMetadata.__symbolic === 'resolved') {\r\n                resolvedMetadata = resolvedMetadata.symbol;\r\n            }\r\n            if (resolvedMetadata instanceof StaticSymbol) {\r\n                return this.findSymbolDeclaration(resolvedSymbol.metadata);\r\n            }\r\n        }\r\n        return symbol;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    annotations(type) {\r\n        let /** @type {?} */ annotations = this.annotationCache.get(type);\r\n        if (!annotations) {\r\n            annotations = [];\r\n            const /** @type {?} */ classMetadata = this.getTypeMetadata(type);\r\n            const /** @type {?} */ parentType = this.findParentType(type, classMetadata);\r\n            if (parentType) {\r\n                const /** @type {?} */ parentAnnotations = this.annotations(parentType);\r\n                annotations.push(...parentAnnotations);\r\n            }\r\n            let /** @type {?} */ ownAnnotations = [];\r\n            if (classMetadata['decorators']) {\r\n                ownAnnotations = this.simplify(type, classMetadata['decorators']);\r\n                annotations.push(...ownAnnotations);\r\n            }\r\n            if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) &&\r\n                this.summaryResolver.isLibraryFile(parentType.filePath)) {\r\n                const /** @type {?} */ summary = this.summaryResolver.resolveSummary(parentType);\r\n                if (summary && summary.type) {\r\n                    const /** @type {?} */ requiredAnnotationTypes = /** @type {?} */ ((this.annotationForParentClassWithSummaryKind.get(/** @type {?} */ ((summary.type.summaryKind)))));\r\n                    const /** @type {?} */ typeHasRequiredAnnotation = requiredAnnotationTypes.some((requiredType) => ownAnnotations.some(ann => requiredType.isTypeOf(ann)));\r\n                    if (!typeHasRequiredAnnotation) {\r\n                        this.reportError(formatMetadataError(metadataError(`Class ${type.name} in ${type.filePath} extends from a ${CompileSummaryKind[(/** @type {?} */ ((summary.type.summaryKind)))]} in another compilation unit without duplicating the decorator`, undefined, `Please add a ${requiredAnnotationTypes.map((type) => type.ngMetadataName).join(' or ')} decorator to the class`), type), type);\r\n                    }\r\n                }\r\n            }\r\n            this.annotationCache.set(type, annotations.filter(ann => !!ann));\r\n        }\r\n        return annotations;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    propMetadata(type) {\r\n        let /** @type {?} */ propMetadata = this.propertyCache.get(type);\r\n        if (!propMetadata) {\r\n            const /** @type {?} */ classMetadata = this.getTypeMetadata(type);\r\n            propMetadata = {};\r\n            const /** @type {?} */ parentType = this.findParentType(type, classMetadata);\r\n            if (parentType) {\r\n                const /** @type {?} */ parentPropMetadata = this.propMetadata(parentType);\r\n                Object.keys(parentPropMetadata).forEach((parentProp) => {\r\n                    /** @type {?} */ ((propMetadata))[parentProp] = parentPropMetadata[parentProp];\r\n                });\r\n            }\r\n            const /** @type {?} */ members = classMetadata['members'] || {};\r\n            Object.keys(members).forEach((propName) => {\r\n                const /** @type {?} */ propData = members[propName];\r\n                const /** @type {?} */ prop = (/** @type {?} */ (propData))\r\n                    .find(a => a['__symbolic'] == 'property' || a['__symbolic'] == 'method');\r\n                const /** @type {?} */ decorators = [];\r\n                if (/** @type {?} */ ((propMetadata))[propName]) {\r\n                    decorators.push(.../** @type {?} */ ((propMetadata))[propName]);\r\n                } /** @type {?} */\r\n                ((propMetadata))[propName] = decorators;\r\n                if (prop && prop['decorators']) {\r\n                    decorators.push(...this.simplify(type, prop['decorators']));\r\n                }\r\n            });\r\n            this.propertyCache.set(type, propMetadata);\r\n        }\r\n        return propMetadata;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    parameters(type) {\r\n        if (!(type instanceof StaticSymbol)) {\r\n            this.reportError(new Error(`parameters received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\r\n            return [];\r\n        }\r\n        try {\r\n            let /** @type {?} */ parameters = this.parameterCache.get(type);\r\n            if (!parameters) {\r\n                const /** @type {?} */ classMetadata = this.getTypeMetadata(type);\r\n                const /** @type {?} */ parentType = this.findParentType(type, classMetadata);\r\n                const /** @type {?} */ members = classMetadata ? classMetadata['members'] : null;\r\n                const /** @type {?} */ ctorData = members ? members['__ctor__'] : null;\r\n                if (ctorData) {\r\n                    const /** @type {?} */ ctor = (/** @type {?} */ (ctorData)).find(a => a['__symbolic'] == 'constructor');\r\n                    const /** @type {?} */ rawParameterTypes = /** @type {?} */ (ctor['parameters']) || [];\r\n                    const /** @type {?} */ parameterDecorators = /** @type {?} */ (this.simplify(type, ctor['parameterDecorators'] || []));\r\n                    parameters = [];\r\n                    rawParameterTypes.forEach((rawParamType, index) => {\r\n                        const /** @type {?} */ nestedResult = [];\r\n                        const /** @type {?} */ paramType = this.trySimplify(type, rawParamType);\r\n                        if (paramType)\r\n                            nestedResult.push(paramType);\r\n                        const /** @type {?} */ decorators = parameterDecorators ? parameterDecorators[index] : null;\r\n                        if (decorators) {\r\n                            nestedResult.push(...decorators);\r\n                        } /** @type {?} */\r\n                        ((parameters)).push(nestedResult);\r\n                    });\r\n                }\r\n                else if (parentType) {\r\n                    parameters = this.parameters(parentType);\r\n                }\r\n                if (!parameters) {\r\n                    parameters = [];\r\n                }\r\n                this.parameterCache.set(type, parameters);\r\n            }\r\n            return parameters;\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    _methodNames(type) {\r\n        let /** @type {?} */ methodNames = this.methodCache.get(type);\r\n        if (!methodNames) {\r\n            const /** @type {?} */ classMetadata = this.getTypeMetadata(type);\r\n            methodNames = {};\r\n            const /** @type {?} */ parentType = this.findParentType(type, classMetadata);\r\n            if (parentType) {\r\n                const /** @type {?} */ parentMethodNames = this._methodNames(parentType);\r\n                Object.keys(parentMethodNames).forEach((parentProp) => {\r\n                    /** @type {?} */ ((methodNames))[parentProp] = parentMethodNames[parentProp];\r\n                });\r\n            }\r\n            const /** @type {?} */ members = classMetadata['members'] || {};\r\n            Object.keys(members).forEach((propName) => {\r\n                const /** @type {?} */ propData = members[propName];\r\n                const /** @type {?} */ isMethod = (/** @type {?} */ (propData)).some(a => a['__symbolic'] == 'method'); /** @type {?} */\r\n                ((methodNames))[propName] = /** @type {?} */ ((methodNames))[propName] || isMethod;\r\n            });\r\n            this.methodCache.set(type, methodNames);\r\n        }\r\n        return methodNames;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} classMetadata\r\n     * @return {?}\r\n     */\r\n    findParentType(type, classMetadata) {\r\n        const /** @type {?} */ parentType = this.trySimplify(type, classMetadata['extends']);\r\n        if (parentType instanceof StaticSymbol) {\r\n            return parentType;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} lcProperty\r\n     * @return {?}\r\n     */\r\n    hasLifecycleHook(type, lcProperty) {\r\n        if (!(type instanceof StaticSymbol)) {\r\n            this.reportError(new Error(`hasLifecycleHook received ${JSON.stringify(type)} which is not a StaticSymbol`), type);\r\n        }\r\n        try {\r\n            return !!this._methodNames(type)[lcProperty];\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            console.error(`Failed on type ${JSON.stringify(type)} with error ${e}`);\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} ctor\r\n     * @return {?}\r\n     */\r\n    _registerDecoratorOrConstructor(type, ctor) {\r\n        this.conversionMap.set(type, (context, args) => new ctor(...args));\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    _registerFunction(type, fn) {\r\n        this.conversionMap.set(type, (context, args) => fn.apply(undefined, args));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    initializeConversionMap() {\r\n        this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');\r\n        this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');\r\n        this.ROUTES = this.tryFindDeclaration(ANGULAR_ROUTER, 'ROUTES');\r\n        this.ANALYZE_FOR_ENTRY_COMPONENTS =\r\n            this.findDeclaration(ANGULAR_CORE, 'ANALYZE_FOR_ENTRY_COMPONENTS');\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), createInjectable);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), createInject);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), createAttribute);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), createContentChild);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), createContentChildren);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), createViewChild);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), createViewChildren);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), createInput);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), createOutput);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), createPipe);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), createHostBinding);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), createHostListener);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), createDirective);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), createComponent);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), createNgModule);\r\n        // Note: Some metadata classes can be used directly with Provider.deps.\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\r\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\r\n    }\r\n    /**\r\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\r\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\r\n     *\r\n     * @param {?} declarationFile the absolute path of the file where the symbol is declared\r\n     * @param {?} name the name of the type.\r\n     * @param {?=} members\r\n     * @return {?}\r\n     */\r\n    getStaticSymbol(declarationFile, name, members) {\r\n        return this.symbolResolver.getStaticSymbol(declarationFile, name, members);\r\n    }\r\n    /**\r\n     * Simplify but discard any errors\r\n     * @param {?} context\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    trySimplify(context, value) {\r\n        const /** @type {?} */ originalRecorder = this.errorRecorder;\r\n        this.errorRecorder = (error, fileName) => { };\r\n        const /** @type {?} */ result = this.simplify(context, value);\r\n        this.errorRecorder = originalRecorder;\r\n        return result;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} context\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    simplify(context, value) {\r\n        const /** @type {?} */ self = this;\r\n        let /** @type {?} */ scope = BindingScope.empty;\r\n        const /** @type {?} */ calling = new Map();\r\n        const /** @type {?} */ rootContext = context;\r\n        /**\r\n         * @param {?} context\r\n         * @param {?} value\r\n         * @param {?} depth\r\n         * @param {?} references\r\n         * @return {?}\r\n         */\r\n        function simplifyInContext(context, value, depth, references) {\r\n            /**\r\n             * @param {?} staticSymbol\r\n             * @return {?}\r\n             */\r\n            function resolveReferenceValue(staticSymbol) {\r\n                const /** @type {?} */ resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);\r\n                return resolvedSymbol ? resolvedSymbol.metadata : null;\r\n            }\r\n            /**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function simplifyEagerly(value) {\r\n                return simplifyInContext(context, value, depth, 0);\r\n            }\r\n            /**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function simplifyLazily(value) {\r\n                return simplifyInContext(context, value, depth, references + 1);\r\n            }\r\n            /**\r\n             * @param {?} nestedContext\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function simplifyNested(nestedContext, value) {\r\n                if (nestedContext === context) {\r\n                    // If the context hasn't changed let the exception propagate unmodified.\r\n                    return simplifyInContext(nestedContext, value, depth + 1, references);\r\n                }\r\n                try {\r\n                    return simplifyInContext(nestedContext, value, depth + 1, references);\r\n                }\r\n                catch (/** @type {?} */ e) {\r\n                    if (isMetadataError(e)) {\r\n                        // Propagate the message text up but add a message to the chain that explains how we got\r\n                        // here.\r\n                        // e.chain implies e.symbol\r\n                        const /** @type {?} */ summaryMsg = e.chain ? 'references \\'' + /** @type {?} */ ((e.symbol)).name + '\\'' : errorSummary(e);\r\n                        const /** @type {?} */ summary = `'${nestedContext.name}' ${summaryMsg}`;\r\n                        const /** @type {?} */ chain = { message: summary, position: e.position, next: e.chain };\r\n                        // TODO(chuckj): retrieve the position information indirectly from the collectors node\r\n                        // map if the metadata is from a .ts file.\r\n                        self.error({\r\n                            message: e.message,\r\n                            advise: e.advise,\r\n                            context: e.context, chain,\r\n                            symbol: nestedContext\r\n                        }, context);\r\n                    }\r\n                    else {\r\n                        // It is probably an internal error.\r\n                        throw e;\r\n                    }\r\n                }\r\n            }\r\n            /**\r\n             * @param {?} functionSymbol\r\n             * @param {?} targetFunction\r\n             * @param {?} args\r\n             * @param {?} targetExpression\r\n             * @return {?}\r\n             */\r\n            function simplifyCall(functionSymbol, targetFunction, args, targetExpression) {\r\n                if (targetFunction && targetFunction['__symbolic'] == 'function') {\r\n                    if (calling.get(functionSymbol)) {\r\n                        self.error({\r\n                            message: 'Recursion is not supported',\r\n                            summary: `called '${functionSymbol.name}' recursively`,\r\n                            value: targetFunction\r\n                        }, functionSymbol);\r\n                    }\r\n                    try {\r\n                        const /** @type {?} */ value = targetFunction['value'];\r\n                        if (value && (depth != 0 || value.__symbolic != 'error')) {\r\n                            const /** @type {?} */ parameters = targetFunction['parameters'];\r\n                            const /** @type {?} */ defaults = targetFunction.defaults;\r\n                            args = args.map(arg => simplifyNested(context, arg))\r\n                                .map(arg => shouldIgnore(arg) ? undefined : arg);\r\n                            if (defaults && defaults.length > args.length) {\r\n                                args.push(...defaults.slice(args.length).map((value) => simplify(value)));\r\n                            }\r\n                            calling.set(functionSymbol, true);\r\n                            const /** @type {?} */ functionScope = BindingScope.build();\r\n                            for (let /** @type {?} */ i = 0; i < parameters.length; i++) {\r\n                                functionScope.define(parameters[i], args[i]);\r\n                            }\r\n                            const /** @type {?} */ oldScope = scope;\r\n                            let /** @type {?} */ result;\r\n                            try {\r\n                                scope = functionScope.done();\r\n                                result = simplifyNested(functionSymbol, value);\r\n                            }\r\n                            finally {\r\n                                scope = oldScope;\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                    finally {\r\n                        calling.delete(functionSymbol);\r\n                    }\r\n                }\r\n                if (depth === 0) {\r\n                    // If depth is 0 we are evaluating the top level expression that is describing element\r\n                    // decorator. In this case, it is a decorator we don't understand, such as a custom\r\n                    // non-angular decorator, and we should just ignore it.\r\n                    return IGNORE;\r\n                }\r\n                let /** @type {?} */ position = undefined;\r\n                if (targetExpression && targetExpression.__symbolic == 'resolved') {\r\n                    const /** @type {?} */ line = targetExpression.line;\r\n                    const /** @type {?} */ character = targetExpression.character;\r\n                    const /** @type {?} */ fileName = targetExpression.fileName;\r\n                    if (fileName != null && line != null && character != null) {\r\n                        position = { fileName, line, column: character };\r\n                    }\r\n                }\r\n                self.error({\r\n                    message: FUNCTION_CALL_NOT_SUPPORTED,\r\n                    context: functionSymbol,\r\n                    value: targetFunction, position\r\n                }, context);\r\n            }\r\n            /**\r\n             * @param {?} expression\r\n             * @return {?}\r\n             */\r\n            function simplify(expression) {\r\n                if (isPrimitive(expression)) {\r\n                    return expression;\r\n                }\r\n                if (expression instanceof Array) {\r\n                    const /** @type {?} */ result = [];\r\n                    for (const /** @type {?} */ item of (/** @type {?} */ (expression))) {\r\n                        // Check for a spread expression\r\n                        if (item && item.__symbolic === 'spread') {\r\n                            // We call with references as 0 because we require the actual value and cannot\r\n                            // tolerate a reference here.\r\n                            const /** @type {?} */ spreadArray = simplifyEagerly(item.expression);\r\n                            if (Array.isArray(spreadArray)) {\r\n                                for (const /** @type {?} */ spreadItem of spreadArray) {\r\n                                    result.push(spreadItem);\r\n                                }\r\n                                continue;\r\n                            }\r\n                        }\r\n                        const /** @type {?} */ value = simplify(item);\r\n                        if (shouldIgnore(value)) {\r\n                            continue;\r\n                        }\r\n                        result.push(value);\r\n                    }\r\n                    return result;\r\n                }\r\n                if (expression instanceof StaticSymbol) {\r\n                    // Stop simplification at builtin symbols or if we are in a reference context and\r\n                    // the symbol doesn't have members.\r\n                    if (expression === self.injectionToken || self.conversionMap.has(expression) ||\r\n                        (references > 0 && !expression.members.length)) {\r\n                        return expression;\r\n                    }\r\n                    else {\r\n                        const /** @type {?} */ staticSymbol = expression;\r\n                        const /** @type {?} */ declarationValue = resolveReferenceValue(staticSymbol);\r\n                        if (declarationValue != null) {\r\n                            return simplifyNested(staticSymbol, declarationValue);\r\n                        }\r\n                        else {\r\n                            return staticSymbol;\r\n                        }\r\n                    }\r\n                }\r\n                if (expression) {\r\n                    if (expression['__symbolic']) {\r\n                        let /** @type {?} */ staticSymbol;\r\n                        switch (expression['__symbolic']) {\r\n                            case 'binop':\r\n                                let /** @type {?} */ left = simplify(expression['left']);\r\n                                if (shouldIgnore(left))\r\n                                    return left;\r\n                                let /** @type {?} */ right = simplify(expression['right']);\r\n                                if (shouldIgnore(right))\r\n                                    return right;\r\n                                switch (expression['operator']) {\r\n                                    case '&&':\r\n                                        return left && right;\r\n                                    case '||':\r\n                                        return left || right;\r\n                                    case '|':\r\n                                        return left | right;\r\n                                    case '^':\r\n                                        return left ^ right;\r\n                                    case '&':\r\n                                        return left & right;\r\n                                    case '==':\r\n                                        return left == right;\r\n                                    case '!=':\r\n                                        return left != right;\r\n                                    case '===':\r\n                                        return left === right;\r\n                                    case '!==':\r\n                                        return left !== right;\r\n                                    case '<':\r\n                                        return left < right;\r\n                                    case '>':\r\n                                        return left > right;\r\n                                    case '<=':\r\n                                        return left <= right;\r\n                                    case '>=':\r\n                                        return left >= right;\r\n                                    case '<<':\r\n                                        return left << right;\r\n                                    case '>>':\r\n                                        return left >> right;\r\n                                    case '+':\r\n                                        return left + right;\r\n                                    case '-':\r\n                                        return left - right;\r\n                                    case '*':\r\n                                        return left * right;\r\n                                    case '/':\r\n                                        return left / right;\r\n                                    case '%':\r\n                                        return left % right;\r\n                                }\r\n                                return null;\r\n                            case 'if':\r\n                                let /** @type {?} */ condition = simplify(expression['condition']);\r\n                                return condition ? simplify(expression['thenExpression']) :\r\n                                    simplify(expression['elseExpression']);\r\n                            case 'pre':\r\n                                let /** @type {?} */ operand = simplify(expression['operand']);\r\n                                if (shouldIgnore(operand))\r\n                                    return operand;\r\n                                switch (expression['operator']) {\r\n                                    case '+':\r\n                                        return operand;\r\n                                    case '-':\r\n                                        return -operand;\r\n                                    case '!':\r\n                                        return !operand;\r\n                                    case '~':\r\n                                        return ~operand;\r\n                                }\r\n                                return null;\r\n                            case 'index':\r\n                                let /** @type {?} */ indexTarget = simplifyEagerly(expression['expression']);\r\n                                let /** @type {?} */ index = simplifyEagerly(expression['index']);\r\n                                if (indexTarget && isPrimitive(index))\r\n                                    return indexTarget[index];\r\n                                return null;\r\n                            case 'select':\r\n                                const /** @type {?} */ member = expression['member'];\r\n                                let /** @type {?} */ selectContext = context;\r\n                                let /** @type {?} */ selectTarget = simplify(expression['expression']);\r\n                                if (selectTarget instanceof StaticSymbol) {\r\n                                    const /** @type {?} */ members = selectTarget.members.concat(member);\r\n                                    selectContext =\r\n                                        self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);\r\n                                    const /** @type {?} */ declarationValue = resolveReferenceValue(selectContext);\r\n                                    if (declarationValue != null) {\r\n                                        return simplifyNested(selectContext, declarationValue);\r\n                                    }\r\n                                    else {\r\n                                        return selectContext;\r\n                                    }\r\n                                }\r\n                                if (selectTarget && isPrimitive(member))\r\n                                    return simplifyNested(selectContext, selectTarget[member]);\r\n                                return null;\r\n                            case 'reference':\r\n                                // Note: This only has to deal with variable references, as symbol references have\r\n                                // been converted into 'resolved'\r\n                                // in the StaticSymbolResolver.\r\n                                const /** @type {?} */ name = expression['name'];\r\n                                const /** @type {?} */ localValue = scope.resolve(name);\r\n                                if (localValue != BindingScope.missing) {\r\n                                    return localValue;\r\n                                }\r\n                                break;\r\n                            case 'resolved':\r\n                                try {\r\n                                    return simplify(expression.symbol);\r\n                                }\r\n                                catch (/** @type {?} */ e) {\r\n                                    // If an error is reported evaluating the symbol record the position of the\r\n                                    // reference in the error so it can\r\n                                    // be reported in the error message generated from the exception.\r\n                                    if (isMetadataError(e) && expression.fileName != null &&\r\n                                        expression.line != null && expression.character != null) {\r\n                                        e.position = {\r\n                                            fileName: expression.fileName,\r\n                                            line: expression.line,\r\n                                            column: expression.character\r\n                                        };\r\n                                    }\r\n                                    throw e;\r\n                                }\r\n                            case 'class':\r\n                                return context;\r\n                            case 'function':\r\n                                return context;\r\n                            case 'new':\r\n                            case 'call':\r\n                                // Determine if the function is a built-in conversion\r\n                                staticSymbol = simplifyInContext(context, expression['expression'], depth + 1, /* references */ 0);\r\n                                if (staticSymbol instanceof StaticSymbol) {\r\n                                    if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {\r\n                                        // if somebody calls new InjectionToken, don't create an InjectionToken,\r\n                                        // but rather return the symbol to which the InjectionToken is assigned to.\r\n                                        // OpaqueToken is supported too as it is required by the language service to\r\n                                        // support v4 and prior versions of Angular.\r\n                                        return context;\r\n                                    }\r\n                                    const /** @type {?} */ argExpressions = expression['arguments'] || [];\r\n                                    let /** @type {?} */ converter = self.conversionMap.get(staticSymbol);\r\n                                    if (converter) {\r\n                                        const /** @type {?} */ args = argExpressions.map(arg => simplifyNested(context, arg))\r\n                                            .map(arg => shouldIgnore(arg) ? undefined : arg);\r\n                                        return converter(context, args);\r\n                                    }\r\n                                    else {\r\n                                        // Determine if the function is one we can simplify.\r\n                                        const /** @type {?} */ targetFunction = resolveReferenceValue(staticSymbol);\r\n                                        return simplifyCall(staticSymbol, targetFunction, argExpressions, expression['expression']);\r\n                                    }\r\n                                }\r\n                                return IGNORE;\r\n                            case 'error':\r\n                                let /** @type {?} */ message = expression.message;\r\n                                if (expression['line'] != null) {\r\n                                    self.error({\r\n                                        message,\r\n                                        context: expression.context,\r\n                                        value: expression,\r\n                                        position: {\r\n                                            fileName: expression['fileName'],\r\n                                            line: expression['line'],\r\n                                            column: expression['character']\r\n                                        }\r\n                                    }, context);\r\n                                }\r\n                                else {\r\n                                    self.error({ message, context: expression.context }, context);\r\n                                }\r\n                                return IGNORE;\r\n                            case 'ignore':\r\n                                return expression;\r\n                        }\r\n                        return null;\r\n                    }\r\n                    return mapStringMap(expression, (value, name) => {\r\n                        if (REFERENCE_SET.has(name)) {\r\n                            if (name === USE_VALUE && PROVIDE in expression) {\r\n                                // If this is a provider expression, check for special tokens that need the value\r\n                                // during analysis.\r\n                                const /** @type {?} */ provide = simplify(expression.provide);\r\n                                if (provide === self.ROUTES || provide == self.ANALYZE_FOR_ENTRY_COMPONENTS) {\r\n                                    return simplify(value);\r\n                                }\r\n                            }\r\n                            return simplifyLazily(value);\r\n                        }\r\n                        return simplify(value);\r\n                    });\r\n                }\r\n                return IGNORE;\r\n            }\r\n            return simplify(value);\r\n        }\r\n        let /** @type {?} */ result;\r\n        try {\r\n            result = simplifyInContext(context, value, 0, 0);\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            if (this.errorRecorder) {\r\n                this.reportError(e, context);\r\n            }\r\n            else {\r\n                throw formatMetadataError(e, context);\r\n            }\r\n        }\r\n        if (shouldIgnore(result)) {\r\n            return undefined;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    getTypeMetadata(type) {\r\n        const /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(type);\r\n        return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :\r\n            { __symbolic: 'class' };\r\n    }\r\n    /**\r\n     * @param {?} error\r\n     * @param {?} context\r\n     * @param {?=} path\r\n     * @return {?}\r\n     */\r\n    reportError(error, context, path) {\r\n        if (this.errorRecorder) {\r\n            this.errorRecorder(formatMetadataError(error, context), (context && context.filePath) || path);\r\n        }\r\n        else {\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} __0\r\n     * @param {?} reportingContext\r\n     * @return {?}\r\n     */\r\n    error({ message, summary, advise, position, context, value, symbol, chain }, reportingContext) {\r\n        this.reportError(metadataError(message, summary, advise, position, symbol, context, chain), reportingContext);\r\n    }\r\n}\r\nconst METADATA_ERROR = 'ngMetadataError';\r\n/**\r\n * @param {?} message\r\n * @param {?=} summary\r\n * @param {?=} advise\r\n * @param {?=} position\r\n * @param {?=} symbol\r\n * @param {?=} context\r\n * @param {?=} chain\r\n * @return {?}\r\n */\r\nfunction metadataError(message, summary, advise, position, symbol, context, chain) {\r\n    const /** @type {?} */ error = /** @type {?} */ (syntaxError(message));\r\n    (/** @type {?} */ (error))[METADATA_ERROR] = true;\r\n    if (advise)\r\n        error.advise = advise;\r\n    if (position)\r\n        error.position = position;\r\n    if (summary)\r\n        error.summary = summary;\r\n    if (context)\r\n        error.context = context;\r\n    if (chain)\r\n        error.chain = chain;\r\n    if (symbol)\r\n        error.symbol = symbol;\r\n    return error;\r\n}\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction isMetadataError(error) {\r\n    return !!(/** @type {?} */ (error))[METADATA_ERROR];\r\n}\r\nconst REFERENCE_TO_NONEXPORTED_CLASS = 'Reference to non-exported class';\r\nconst VARIABLE_NOT_INITIALIZED = 'Variable not initialized';\r\nconst DESTRUCTURE_NOT_SUPPORTED = 'Destructuring not supported';\r\nconst COULD_NOT_RESOLVE_TYPE = 'Could not resolve type';\r\nconst FUNCTION_CALL_NOT_SUPPORTED = 'Function call not supported';\r\nconst REFERENCE_TO_LOCAL_SYMBOL = 'Reference to a local symbol';\r\nconst LAMBDA_NOT_SUPPORTED = 'Lambda not supported';\r\n/**\r\n * @param {?} message\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction expandedMessage(message, context) {\r\n    switch (message) {\r\n        case REFERENCE_TO_NONEXPORTED_CLASS:\r\n            if (context && context.className) {\r\n                return `References to a non-exported class are not supported in decorators but ${context.className} was referenced.`;\r\n            }\r\n            break;\r\n        case VARIABLE_NOT_INITIALIZED:\r\n            return 'Only initialized variables and constants can be referenced in decorators because the value of this variable is needed by the template compiler';\r\n        case DESTRUCTURE_NOT_SUPPORTED:\r\n            return 'Referencing an exported destructured variable or constant is not supported in decorators and this value is needed by the template compiler';\r\n        case COULD_NOT_RESOLVE_TYPE:\r\n            if (context && context.typeName) {\r\n                return `Could not resolve type ${context.typeName}`;\r\n            }\r\n            break;\r\n        case FUNCTION_CALL_NOT_SUPPORTED:\r\n            if (context && context.name) {\r\n                return `Function calls are not supported in decorators but '${context.name}' was called`;\r\n            }\r\n            return 'Function calls are not supported in decorators';\r\n        case REFERENCE_TO_LOCAL_SYMBOL:\r\n            if (context && context.name) {\r\n                return `Reference to a local (non-exported) symbols are not supported in decorators but '${context.name}' was referenced`;\r\n            }\r\n            break;\r\n        case LAMBDA_NOT_SUPPORTED:\r\n            return `Function expressions are not supported in decorators`;\r\n    }\r\n    return message;\r\n}\r\n/**\r\n * @param {?} message\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction messageAdvise(message, context) {\r\n    switch (message) {\r\n        case REFERENCE_TO_NONEXPORTED_CLASS:\r\n            if (context && context.className) {\r\n                return `Consider exporting '${context.className}'`;\r\n            }\r\n            break;\r\n        case DESTRUCTURE_NOT_SUPPORTED:\r\n            return 'Consider simplifying to avoid destructuring';\r\n        case REFERENCE_TO_LOCAL_SYMBOL:\r\n            if (context && context.name) {\r\n                return `Consider exporting '${context.name}'`;\r\n            }\r\n            break;\r\n        case LAMBDA_NOT_SUPPORTED:\r\n            return `Consider changing the function expression into an exported function`;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction errorSummary(error) {\r\n    if (error.summary) {\r\n        return error.summary;\r\n    }\r\n    switch (error.message) {\r\n        case REFERENCE_TO_NONEXPORTED_CLASS:\r\n            if (error.context && error.context.className) {\r\n                return `references non-exported class ${error.context.className}`;\r\n            }\r\n            break;\r\n        case VARIABLE_NOT_INITIALIZED:\r\n            return 'is not initialized';\r\n        case DESTRUCTURE_NOT_SUPPORTED:\r\n            return 'is a destructured variable';\r\n        case COULD_NOT_RESOLVE_TYPE:\r\n            return 'could not be resolved';\r\n        case FUNCTION_CALL_NOT_SUPPORTED:\r\n            if (error.context && error.context.name) {\r\n                return `calls '${error.context.name}'`;\r\n            }\r\n            return `calls a function`;\r\n        case REFERENCE_TO_LOCAL_SYMBOL:\r\n            if (error.context && error.context.name) {\r\n                return `references local variable ${error.context.name}`;\r\n            }\r\n            return `references a local variable`;\r\n    }\r\n    return 'contains the error';\r\n}\r\n/**\r\n * @param {?} input\r\n * @param {?} transform\r\n * @return {?}\r\n */\r\nfunction mapStringMap(input, transform) {\r\n    if (!input)\r\n        return {};\r\n    const /** @type {?} */ result = {};\r\n    Object.keys(input).forEach((key) => {\r\n        const /** @type {?} */ value = transform(input[key], key);\r\n        if (!shouldIgnore(value)) {\r\n            if (HIDDEN_KEY.test(key)) {\r\n                Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });\r\n            }\r\n            else {\r\n                result[key] = value;\r\n            }\r\n        }\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * @param {?} o\r\n * @return {?}\r\n */\r\nfunction isPrimitive(o) {\r\n    return o === null || (typeof o !== 'function' && typeof o !== 'object');\r\n}\r\n/**\r\n * @abstract\r\n */\r\nclass BindingScope {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static build() {\r\n        const /** @type {?} */ current = new Map();\r\n        return {\r\n            define: function (name, value) {\r\n                current.set(name, value);\r\n                return this;\r\n            },\r\n            done: function () {\r\n                return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;\r\n            }\r\n        };\r\n    }\r\n}\r\nBindingScope.missing = {};\r\nBindingScope.empty = { resolve: name => BindingScope.missing };\r\nclass PopulatedScope extends BindingScope {\r\n    /**\r\n     * @param {?} bindings\r\n     */\r\n    constructor(bindings) {\r\n        super();\r\n        this.bindings = bindings;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    resolve(name) {\r\n        return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;\r\n    }\r\n}\r\n/**\r\n * @param {?} chain\r\n * @param {?} advise\r\n * @return {?}\r\n */\r\nfunction formatMetadataMessageChain(chain, advise) {\r\n    const /** @type {?} */ expanded = expandedMessage(chain.message, chain.context);\r\n    const /** @type {?} */ nesting = chain.symbol ? ` in '${chain.symbol.name}'` : '';\r\n    const /** @type {?} */ message = `${expanded}${nesting}`;\r\n    const /** @type {?} */ position = chain.position;\r\n    const /** @type {?} */ next = chain.next ?\r\n        formatMetadataMessageChain(chain.next, advise) :\r\n        advise ? { message: advise } : undefined;\r\n    return { message, position, next };\r\n}\r\n/**\r\n * @param {?} e\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction formatMetadataError(e, context) {\r\n    if (isMetadataError(e)) {\r\n        // Produce a formatted version of the and leaving enough information in the original error\r\n        // to recover the formatting information to eventually produce a diagnostic error message.\r\n        const /** @type {?} */ position = e.position;\r\n        const /** @type {?} */ chain = {\r\n            message: `Error during template compile of '${context.name}'`,\r\n            position: position,\r\n            next: { message: e.message, next: e.chain, context: e.context, symbol: e.symbol }\r\n        };\r\n        const /** @type {?} */ advise = e.advise || messageAdvise(e.message, e.context);\r\n        return formattedError(formatMetadataMessageChain(chain, advise));\r\n    }\r\n    return e;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\nclass AotSummaryResolver {\r\n    /**\r\n     * @param {?} host\r\n     * @param {?} staticSymbolCache\r\n     */\r\n    constructor(host, staticSymbolCache) {\r\n        this.host = host;\r\n        this.staticSymbolCache = staticSymbolCache;\r\n        this.summaryCache = new Map();\r\n        this.loadedFilePaths = new Map();\r\n        this.importAs = new Map();\r\n        this.knownFileNameToModuleNames = new Map();\r\n    }\r\n    /**\r\n     * @param {?} filePath\r\n     * @return {?}\r\n     */\r\n    isLibraryFile(filePath) {\r\n        // Note: We need to strip the .ngfactory. file path,\r\n        // so this method also works for generated files\r\n        // (for which host.isSourceFile will always return false).\r\n        return !this.host.isSourceFile(stripGeneratedFileSuffix(filePath));\r\n    }\r\n    /**\r\n     * @param {?} filePath\r\n     * @param {?} referringSrcFileName\r\n     * @return {?}\r\n     */\r\n    toSummaryFileName(filePath, referringSrcFileName) {\r\n        return this.host.toSummaryFileName(filePath, referringSrcFileName);\r\n    }\r\n    /**\r\n     * @param {?} fileName\r\n     * @param {?} referringLibFileName\r\n     * @return {?}\r\n     */\r\n    fromSummaryFileName(fileName, referringLibFileName) {\r\n        return this.host.fromSummaryFileName(fileName, referringLibFileName);\r\n    }\r\n    /**\r\n     * @param {?} staticSymbol\r\n     * @return {?}\r\n     */\r\n    resolveSummary(staticSymbol) {\r\n        const /** @type {?} */ rootSymbol = staticSymbol.members.length ?\r\n            this.staticSymbolCache.get(staticSymbol.filePath, staticSymbol.name) :\r\n            staticSymbol;\r\n        let /** @type {?} */ summary = this.summaryCache.get(rootSymbol);\r\n        if (!summary) {\r\n            this._loadSummaryFile(staticSymbol.filePath);\r\n            summary = /** @type {?} */ ((this.summaryCache.get(staticSymbol)));\r\n        }\r\n        return (rootSymbol === staticSymbol && summary) || null;\r\n    }\r\n    /**\r\n     * @param {?} filePath\r\n     * @return {?}\r\n     */\r\n    getSymbolsOf(filePath) {\r\n        if (this._loadSummaryFile(filePath)) {\r\n            return Array.from(this.summaryCache.keys()).filter((symbol) => symbol.filePath === filePath);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} staticSymbol\r\n     * @return {?}\r\n     */\r\n    getImportAs(staticSymbol) {\r\n        staticSymbol.assertNoMembers();\r\n        return /** @type {?} */ ((this.importAs.get(staticSymbol)));\r\n    }\r\n    /**\r\n     * Converts a file path to a module name that can be used as an `import`.\r\n     * @param {?} importedFilePath\r\n     * @return {?}\r\n     */\r\n    getKnownModuleName(importedFilePath) {\r\n        return this.knownFileNameToModuleNames.get(importedFilePath) || null;\r\n    }\r\n    /**\r\n     * @param {?} summary\r\n     * @return {?}\r\n     */\r\n    addSummary(summary) { this.summaryCache.set(summary.symbol, summary); }\r\n    /**\r\n     * @param {?} filePath\r\n     * @return {?}\r\n     */\r\n    _loadSummaryFile(filePath) {\r\n        let /** @type {?} */ hasSummary = this.loadedFilePaths.get(filePath);\r\n        if (hasSummary != null) {\r\n            return hasSummary;\r\n        }\r\n        let /** @type {?} */ json = null;\r\n        if (this.isLibraryFile(filePath)) {\r\n            const /** @type {?} */ summaryFilePath = summaryFileName(filePath);\r\n            try {\r\n                json = this.host.loadSummary(summaryFilePath);\r\n            }\r\n            catch (/** @type {?} */ e) {\r\n                console.error(`Error loading summary file ${summaryFilePath}`);\r\n                throw e;\r\n            }\r\n        }\r\n        hasSummary = json != null;\r\n        this.loadedFilePaths.set(filePath, hasSummary);\r\n        if (json) {\r\n            const { moduleName, summaries, importAs } = deserializeSummaries(this.staticSymbolCache, this, filePath, json);\r\n            summaries.forEach((summary) => this.summaryCache.set(summary.symbol, summary));\r\n            if (moduleName) {\r\n                this.knownFileNameToModuleNames.set(filePath, moduleName);\r\n            }\r\n            importAs.forEach((importAs) => { this.importAs.set(importAs.symbol, importAs.importAs); });\r\n        }\r\n        return hasSummary;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} host\r\n * @return {?}\r\n */\r\nfunction createAotUrlResolver(host) {\r\n    return {\r\n        resolve: (basePath, url) => {\r\n            const /** @type {?} */ filePath = host.resourceNameToFileName(url, basePath);\r\n            if (!filePath) {\r\n                throw syntaxError(`Couldn't resolve resource ${url} from ${basePath}`);\r\n            }\r\n            return filePath;\r\n        }\r\n    };\r\n}\r\n/**\r\n * Creates a new AotCompiler based on options and a host.\r\n * @param {?} compilerHost\r\n * @param {?} options\r\n * @param {?=} errorCollector\r\n * @return {?}\r\n */\r\nfunction createAotCompiler(compilerHost, options, errorCollector) {\r\n    let /** @type {?} */ translations = options.translations || '';\r\n    const /** @type {?} */ urlResolver = createAotUrlResolver(compilerHost);\r\n    const /** @type {?} */ symbolCache = new StaticSymbolCache();\r\n    const /** @type {?} */ summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\r\n    const /** @type {?} */ symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\r\n    const /** @type {?} */ staticReflector = new StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);\r\n    const /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);\r\n    const /** @type {?} */ config = new CompilerConfig({\r\n        defaultEncapsulation: ViewEncapsulation.Emulated,\r\n        useJit: false,\r\n        enableLegacyTemplate: options.enableLegacyTemplate === true,\r\n        missingTranslation: options.missingTranslation,\r\n        preserveWhitespaces: options.preserveWhitespaces,\r\n        strictInjectionParameters: options.strictInjectionParameters,\r\n    });\r\n    const /** @type {?} */ normalizer = new DirectiveNormalizer({ get: (url) => compilerHost.loadResource(url) }, urlResolver, htmlParser, config);\r\n    const /** @type {?} */ expressionParser = new Parser(new Lexer());\r\n    const /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();\r\n    const /** @type {?} */ tmplParser = new TemplateParser(config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);\r\n    const /** @type {?} */ resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector);\r\n    // TODO(vicb): do not pass options.i18nFormat here\r\n    const /** @type {?} */ viewCompiler = new ViewCompiler(staticReflector);\r\n    const /** @type {?} */ typeCheckCompiler = new TypeCheckCompiler(options, staticReflector);\r\n    const /** @type {?} */ compiler = new AotCompiler(config, options, compilerHost, staticReflector, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler, new NgModuleCompiler(staticReflector), new TypeScriptEmitter(), summaryResolver, symbolResolver);\r\n    return { compiler, reflector: staticReflector };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @abstract\r\n */\r\nclass SummaryResolver {\r\n}\r\nclass JitSummaryResolver {\r\n    constructor() {\r\n        this._summaries = new Map();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isLibraryFile() { return false; }\r\n    /**\r\n     * @param {?} fileName\r\n     * @return {?}\r\n     */\r\n    toSummaryFileName(fileName) { return fileName; }\r\n    /**\r\n     * @param {?} fileName\r\n     * @return {?}\r\n     */\r\n    fromSummaryFileName(fileName) { return fileName; }\r\n    /**\r\n     * @param {?} reference\r\n     * @return {?}\r\n     */\r\n    resolveSummary(reference) {\r\n        return this._summaries.get(reference) || null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getSymbolsOf() { return []; }\r\n    /**\r\n     * @param {?} reference\r\n     * @return {?}\r\n     */\r\n    getImportAs(reference) { return reference; }\r\n    /**\r\n     * @param {?} fileName\r\n     * @return {?}\r\n     */\r\n    getKnownModuleName(fileName) { return null; }\r\n    /**\r\n     * @param {?} summary\r\n     * @return {?}\r\n     */\r\n    addSummary(summary) { this._summaries.set(summary.symbol, summary); }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} statements\r\n * @param {?} reflector\r\n * @return {?}\r\n */\r\nfunction interpretStatements(statements, reflector) {\r\n    const /** @type {?} */ ctx = new _ExecutionContext(null, null, null, new Map());\r\n    const /** @type {?} */ visitor = new StatementInterpreter(reflector);\r\n    visitor.visitAllStatements(statements, ctx);\r\n    const /** @type {?} */ result = {};\r\n    ctx.exports.forEach((exportName) => { result[exportName] = ctx.vars.get(exportName); });\r\n    return result;\r\n}\r\n/**\r\n * @param {?} varNames\r\n * @param {?} varValues\r\n * @param {?} statements\r\n * @param {?} ctx\r\n * @param {?} visitor\r\n * @return {?}\r\n */\r\nfunction _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {\r\n    const /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();\r\n    for (let /** @type {?} */ i = 0; i < varNames.length; i++) {\r\n        childCtx.vars.set(varNames[i], varValues[i]);\r\n    }\r\n    const /** @type {?} */ result = visitor.visitAllStatements(statements, childCtx);\r\n    return result ? result.value : null;\r\n}\r\nclass _ExecutionContext {\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} instance\r\n     * @param {?} className\r\n     * @param {?} vars\r\n     */\r\n    constructor(parent, instance, className, vars) {\r\n        this.parent = parent;\r\n        this.instance = instance;\r\n        this.className = className;\r\n        this.vars = vars;\r\n        this.exports = [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    createChildWihtLocalVars() {\r\n        return new _ExecutionContext(this, this.instance, this.className, new Map());\r\n    }\r\n}\r\nclass ReturnValue {\r\n    /**\r\n     * @param {?} value\r\n     */\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n}\r\n/**\r\n * @param {?} _classStmt\r\n * @param {?} _ctx\r\n * @param {?} _visitor\r\n * @return {?}\r\n */\r\nfunction createDynamicClass(_classStmt, _ctx, _visitor) {\r\n    const /** @type {?} */ propertyDescriptors = {};\r\n    _classStmt.getters.forEach((getter) => {\r\n        // Note: use `function` instead of arrow function to capture `this`\r\n        propertyDescriptors[getter.name] = {\r\n            configurable: false,\r\n            get: function () {\r\n                const /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\r\n                return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\r\n            }\r\n        };\r\n    });\r\n    _classStmt.methods.forEach(function (method) {\r\n        const /** @type {?} */ paramNames = method.params.map(param => param.name);\r\n        // Note: use `function` instead of arrow function to capture `this`\r\n        propertyDescriptors[/** @type {?} */ ((method.name))] = {\r\n            writable: false,\r\n            configurable: false,\r\n            value: function (...args) {\r\n                const /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\r\n                return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\r\n            }\r\n        };\r\n    });\r\n    const /** @type {?} */ ctorParamNames = _classStmt.constructorMethod.params.map(param => param.name);\r\n    // Note: use `function` instead of arrow function to capture `this`\r\n    const /** @type {?} */ ctor = function (...args) {\r\n        const /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\r\n        _classStmt.fields.forEach((field) => { this[field.name] = undefined; });\r\n        _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\r\n    };\r\n    const /** @type {?} */ superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;\r\n    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\r\n    return ctor;\r\n}\r\nclass StatementInterpreter {\r\n    /**\r\n     * @param {?} reflector\r\n     */\r\n    constructor(reflector) {\r\n        this.reflector = reflector;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @return {?}\r\n     */\r\n    debugAst(ast) { return debugOutputAstAsTypeScript(ast); }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareVarStmt(stmt, ctx) {\r\n        ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));\r\n        if (stmt.hasModifier(StmtModifier.Exported)) {\r\n            ctx.exports.push(stmt.name);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitWriteVarExpr(expr, ctx) {\r\n        const /** @type {?} */ value = expr.value.visitExpression(this, ctx);\r\n        let /** @type {?} */ currCtx = ctx;\r\n        while (currCtx != null) {\r\n            if (currCtx.vars.has(expr.name)) {\r\n                currCtx.vars.set(expr.name, value);\r\n                return value;\r\n            }\r\n            currCtx = /** @type {?} */ ((currCtx.parent));\r\n        }\r\n        throw new Error(`Not declared variable ${expr.name}`);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitReadVarExpr(ast, ctx) {\r\n        let /** @type {?} */ varName = /** @type {?} */ ((ast.name));\r\n        if (ast.builtin != null) {\r\n            switch (ast.builtin) {\r\n                case BuiltinVar.Super:\r\n                    return ctx.instance.__proto__;\r\n                case BuiltinVar.This:\r\n                    return ctx.instance;\r\n                case BuiltinVar.CatchError:\r\n                    varName = CATCH_ERROR_VAR$2;\r\n                    break;\r\n                case BuiltinVar.CatchStack:\r\n                    varName = CATCH_STACK_VAR$2;\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unknown builtin variable ${ast.builtin}`);\r\n            }\r\n        }\r\n        let /** @type {?} */ currCtx = ctx;\r\n        while (currCtx != null) {\r\n            if (currCtx.vars.has(varName)) {\r\n                return currCtx.vars.get(varName);\r\n            }\r\n            currCtx = /** @type {?} */ ((currCtx.parent));\r\n        }\r\n        throw new Error(`Not declared variable ${varName}`);\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitWriteKeyExpr(expr, ctx) {\r\n        const /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\r\n        const /** @type {?} */ index = expr.index.visitExpression(this, ctx);\r\n        const /** @type {?} */ value = expr.value.visitExpression(this, ctx);\r\n        receiver[index] = value;\r\n        return value;\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitWritePropExpr(expr, ctx) {\r\n        const /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\r\n        const /** @type {?} */ value = expr.value.visitExpression(this, ctx);\r\n        receiver[expr.name] = value;\r\n        return value;\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitInvokeMethodExpr(expr, ctx) {\r\n        const /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\r\n        const /** @type {?} */ args = this.visitAllExpressions(expr.args, ctx);\r\n        let /** @type {?} */ result;\r\n        if (expr.builtin != null) {\r\n            switch (expr.builtin) {\r\n                case BuiltinMethod.ConcatArray:\r\n                    result = receiver.concat(...args);\r\n                    break;\r\n                case BuiltinMethod.SubscribeObservable:\r\n                    result = receiver.subscribe({ next: args[0] });\r\n                    break;\r\n                case BuiltinMethod.Bind:\r\n                    result = receiver.bind(...args);\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unknown builtin method ${expr.builtin}`);\r\n            }\r\n        }\r\n        else {\r\n            result = receiver[/** @type {?} */ ((expr.name))].apply(receiver, args);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitInvokeFunctionExpr(stmt, ctx) {\r\n        const /** @type {?} */ args = this.visitAllExpressions(stmt.args, ctx);\r\n        const /** @type {?} */ fnExpr = stmt.fn;\r\n        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\r\n            ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\r\n            return null;\r\n        }\r\n        else {\r\n            const /** @type {?} */ fn$$1 = stmt.fn.visitExpression(this, ctx);\r\n            return fn$$1.apply(null, args);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitReturnStmt(stmt, ctx) {\r\n        return new ReturnValue(stmt.value.visitExpression(this, ctx));\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareClassStmt(stmt, ctx) {\r\n        const /** @type {?} */ clazz = createDynamicClass(stmt, ctx, this);\r\n        ctx.vars.set(stmt.name, clazz);\r\n        if (stmt.hasModifier(StmtModifier.Exported)) {\r\n            ctx.exports.push(stmt.name);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitExpressionStmt(stmt, ctx) {\r\n        return stmt.expr.visitExpression(this, ctx);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitIfStmt(stmt, ctx) {\r\n        const /** @type {?} */ condition = stmt.condition.visitExpression(this, ctx);\r\n        if (condition) {\r\n            return this.visitAllStatements(stmt.trueCase, ctx);\r\n        }\r\n        else if (stmt.falseCase != null) {\r\n            return this.visitAllStatements(stmt.falseCase, ctx);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitTryCatchStmt(stmt, ctx) {\r\n        try {\r\n            return this.visitAllStatements(stmt.bodyStmts, ctx);\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            const /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();\r\n            childCtx.vars.set(CATCH_ERROR_VAR$2, e);\r\n            childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);\r\n            return this.visitAllStatements(stmt.catchStmts, childCtx);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitThrowStmt(stmt, ctx) {\r\n        throw stmt.error.visitExpression(this, ctx);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    visitCommentStmt(stmt, context) { return null; }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitInstantiateExpr(ast, ctx) {\r\n        const /** @type {?} */ args = this.visitAllExpressions(ast.args, ctx);\r\n        const /** @type {?} */ clazz = ast.classExpr.visitExpression(this, ctx);\r\n        return new clazz(...args);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitLiteralExpr(ast, ctx) { return ast.value; }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitExternalExpr(ast, ctx) {\r\n        return this.reflector.resolveExternalReference(ast.value);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitConditionalExpr(ast, ctx) {\r\n        if (ast.condition.visitExpression(this, ctx)) {\r\n            return ast.trueCase.visitExpression(this, ctx);\r\n        }\r\n        else if (ast.falseCase != null) {\r\n            return ast.falseCase.visitExpression(this, ctx);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitNotExpr(ast, ctx) {\r\n        return !ast.condition.visitExpression(this, ctx);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitAssertNotNullExpr(ast, ctx) {\r\n        return ast.condition.visitExpression(this, ctx);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitCastExpr(ast, ctx) {\r\n        return ast.value.visitExpression(this, ctx);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitFunctionExpr(ast, ctx) {\r\n        const /** @type {?} */ paramNames = ast.params.map((param) => param.name);\r\n        return _declareFn(paramNames, ast.statements, ctx, this);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareFunctionStmt(stmt, ctx) {\r\n        const /** @type {?} */ paramNames = stmt.params.map((param) => param.name);\r\n        ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\r\n        if (stmt.hasModifier(StmtModifier.Exported)) {\r\n            ctx.exports.push(stmt.name);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitBinaryOperatorExpr(ast, ctx) {\r\n        const /** @type {?} */ lhs = () => ast.lhs.visitExpression(this, ctx);\r\n        const /** @type {?} */ rhs = () => ast.rhs.visitExpression(this, ctx);\r\n        switch (ast.operator) {\r\n            case BinaryOperator.Equals:\r\n                return lhs() == rhs();\r\n            case BinaryOperator.Identical:\r\n                return lhs() === rhs();\r\n            case BinaryOperator.NotEquals:\r\n                return lhs() != rhs();\r\n            case BinaryOperator.NotIdentical:\r\n                return lhs() !== rhs();\r\n            case BinaryOperator.And:\r\n                return lhs() && rhs();\r\n            case BinaryOperator.Or:\r\n                return lhs() || rhs();\r\n            case BinaryOperator.Plus:\r\n                return lhs() + rhs();\r\n            case BinaryOperator.Minus:\r\n                return lhs() - rhs();\r\n            case BinaryOperator.Divide:\r\n                return lhs() / rhs();\r\n            case BinaryOperator.Multiply:\r\n                return lhs() * rhs();\r\n            case BinaryOperator.Modulo:\r\n                return lhs() % rhs();\r\n            case BinaryOperator.Lower:\r\n                return lhs() < rhs();\r\n            case BinaryOperator.LowerEquals:\r\n                return lhs() <= rhs();\r\n            case BinaryOperator.Bigger:\r\n                return lhs() > rhs();\r\n            case BinaryOperator.BiggerEquals:\r\n                return lhs() >= rhs();\r\n            default:\r\n                throw new Error(`Unknown operator ${ast.operator}`);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitReadPropExpr(ast, ctx) {\r\n        let /** @type {?} */ result;\r\n        const /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);\r\n        result = receiver[ast.name];\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitReadKeyExpr(ast, ctx) {\r\n        const /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);\r\n        const /** @type {?} */ prop = ast.index.visitExpression(this, ctx);\r\n        return receiver[prop];\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitLiteralArrayExpr(ast, ctx) {\r\n        return this.visitAllExpressions(ast.entries, ctx);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitLiteralMapExpr(ast, ctx) {\r\n        const /** @type {?} */ result = {};\r\n        ast.entries.forEach(entry => result[entry.key] = entry.value.visitExpression(this, ctx));\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    visitCommaExpr(ast, context) {\r\n        const /** @type {?} */ values = this.visitAllExpressions(ast.parts, context);\r\n        return values[values.length - 1];\r\n    }\r\n    /**\r\n     * @param {?} expressions\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitAllExpressions(expressions, ctx) {\r\n        return expressions.map((expr) => expr.visitExpression(this, ctx));\r\n    }\r\n    /**\r\n     * @param {?} statements\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitAllStatements(statements, ctx) {\r\n        for (let /** @type {?} */ i = 0; i < statements.length; i++) {\r\n            const /** @type {?} */ stmt = statements[i];\r\n            const /** @type {?} */ val = stmt.visitStatement(this, ctx);\r\n            if (val instanceof ReturnValue) {\r\n                return val;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @param {?} varNames\r\n * @param {?} statements\r\n * @param {?} ctx\r\n * @param {?} visitor\r\n * @return {?}\r\n */\r\nfunction _declareFn(varNames, statements, ctx, visitor) {\r\n    return (...args) => _executeFunctionStatements(varNames, args, statements, ctx, visitor);\r\n}\r\nconst CATCH_ERROR_VAR$2 = 'error';\r\nconst CATCH_STACK_VAR$2 = 'stack';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass AbstractJsEmitterVisitor extends AbstractEmitterVisitor {\r\n    constructor() { super(false); }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareClassStmt(stmt, ctx) {\r\n        ctx.pushClass(stmt);\r\n        this._visitClassConstructor(stmt, ctx);\r\n        if (stmt.parent != null) {\r\n            ctx.print(stmt, `${stmt.name}.prototype = Object.create(`);\r\n            stmt.parent.visitExpression(this, ctx);\r\n            ctx.println(stmt, `.prototype);`);\r\n        }\r\n        stmt.getters.forEach((getter) => this._visitClassGetter(stmt, getter, ctx));\r\n        stmt.methods.forEach((method) => this._visitClassMethod(stmt, method, ctx));\r\n        ctx.popClass();\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _visitClassConstructor(stmt, ctx) {\r\n        ctx.print(stmt, `function ${stmt.name}(`);\r\n        if (stmt.constructorMethod != null) {\r\n            this._visitParams(stmt.constructorMethod.params, ctx);\r\n        }\r\n        ctx.println(stmt, `) {`);\r\n        ctx.incIndent();\r\n        if (stmt.constructorMethod != null) {\r\n            if (stmt.constructorMethod.body.length > 0) {\r\n                ctx.println(stmt, `var self = this;`);\r\n                this.visitAllStatements(stmt.constructorMethod.body, ctx);\r\n            }\r\n        }\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `}`);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} getter\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _visitClassGetter(stmt, getter, ctx) {\r\n        ctx.println(stmt, `Object.defineProperty(${stmt.name}.prototype, '${getter.name}', { get: function() {`);\r\n        ctx.incIndent();\r\n        if (getter.body.length > 0) {\r\n            ctx.println(stmt, `var self = this;`);\r\n            this.visitAllStatements(getter.body, ctx);\r\n        }\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `}});`);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} method\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _visitClassMethod(stmt, method, ctx) {\r\n        ctx.print(stmt, `${stmt.name}.prototype.${method.name} = function(`);\r\n        this._visitParams(method.params, ctx);\r\n        ctx.println(stmt, `) {`);\r\n        ctx.incIndent();\r\n        if (method.body.length > 0) {\r\n            ctx.println(stmt, `var self = this;`);\r\n            this.visitAllStatements(method.body, ctx);\r\n        }\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `};`);\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitReadVarExpr(ast, ctx) {\r\n        if (ast.builtin === BuiltinVar.This) {\r\n            ctx.print(ast, 'self');\r\n        }\r\n        else if (ast.builtin === BuiltinVar.Super) {\r\n            throw new Error(`'super' needs to be handled at a parent ast node, not at the variable level!`);\r\n        }\r\n        else {\r\n            super.visitReadVarExpr(ast, ctx);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareVarStmt(stmt, ctx) {\r\n        ctx.print(stmt, `var ${stmt.name} = `);\r\n        stmt.value.visitExpression(this, ctx);\r\n        ctx.println(stmt, `;`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitCastExpr(ast, ctx) {\r\n        ast.value.visitExpression(this, ctx);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} expr\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitInvokeFunctionExpr(expr, ctx) {\r\n        const /** @type {?} */ fnExpr = expr.fn;\r\n        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {\r\n            /** @type {?} */ ((/** @type {?} */ ((ctx.currentClass)).parent)).visitExpression(this, ctx);\r\n            ctx.print(expr, `.call(this`);\r\n            if (expr.args.length > 0) {\r\n                ctx.print(expr, `, `);\r\n                this.visitAllExpressions(expr.args, ctx, ',');\r\n            }\r\n            ctx.print(expr, `)`);\r\n        }\r\n        else {\r\n            super.visitInvokeFunctionExpr(expr, ctx);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitFunctionExpr(ast, ctx) {\r\n        ctx.print(ast, `function(`);\r\n        this._visitParams(ast.params, ctx);\r\n        ctx.println(ast, `) {`);\r\n        ctx.incIndent();\r\n        this.visitAllStatements(ast.statements, ctx);\r\n        ctx.decIndent();\r\n        ctx.print(ast, `}`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareFunctionStmt(stmt, ctx) {\r\n        ctx.print(stmt, `function ${stmt.name}(`);\r\n        this._visitParams(stmt.params, ctx);\r\n        ctx.println(stmt, `) {`);\r\n        ctx.incIndent();\r\n        this.visitAllStatements(stmt.statements, ctx);\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `}`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitTryCatchStmt(stmt, ctx) {\r\n        ctx.println(stmt, `try {`);\r\n        ctx.incIndent();\r\n        this.visitAllStatements(stmt.bodyStmts, ctx);\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `} catch (${CATCH_ERROR_VAR$1.name}) {`);\r\n        ctx.incIndent();\r\n        const /** @type {?} */ catchStmts = [/** @type {?} */ (CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [\r\n                StmtModifier.Final\r\n            ]))].concat(stmt.catchStmts);\r\n        this.visitAllStatements(catchStmts, ctx);\r\n        ctx.decIndent();\r\n        ctx.println(stmt, `}`);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} params\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    _visitParams(params, ctx) {\r\n        this.visitAllObjects(param => ctx.print(null, param.name), params, ctx, ',');\r\n    }\r\n    /**\r\n     * @param {?} method\r\n     * @return {?}\r\n     */\r\n    getBuiltinMethodName(method) {\r\n        let /** @type {?} */ name;\r\n        switch (method) {\r\n            case BuiltinMethod.ConcatArray:\r\n                name = 'concat';\r\n                break;\r\n            case BuiltinMethod.SubscribeObservable:\r\n                name = 'subscribe';\r\n                break;\r\n            case BuiltinMethod.Bind:\r\n                name = 'bind';\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown builtin method: ${method}`);\r\n        }\r\n        return name;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} sourceUrl\r\n * @param {?} ctx\r\n * @param {?} vars\r\n * @param {?} createSourceMap\r\n * @return {?}\r\n */\r\nfunction evalExpression(sourceUrl, ctx, vars, createSourceMap) {\r\n    let /** @type {?} */ fnBody = `${ctx.toSource()}\\n//# sourceURL=${sourceUrl}`;\r\n    const /** @type {?} */ fnArgNames = [];\r\n    const /** @type {?} */ fnArgValues = [];\r\n    for (const /** @type {?} */ argName in vars) {\r\n        fnArgNames.push(argName);\r\n        fnArgValues.push(vars[argName]);\r\n    }\r\n    if (createSourceMap) {\r\n        // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\r\n        // E.g. ```\r\n        // function anonymous(a,b,c\r\n        // /**/) { ... }```\r\n        // We don't want to hard code this fact, so we auto detect it via an empty function first.\r\n        const /** @type {?} */ emptyFn = new Function(...fnArgNames.concat('return null;')).toString();\r\n        const /** @type {?} */ headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\r\n        fnBody += `\\n${ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment()}`;\r\n    }\r\n    return new Function(...fnArgNames.concat(fnBody))(...fnArgValues);\r\n}\r\n/**\r\n * @param {?} sourceUrl\r\n * @param {?} statements\r\n * @param {?} reflector\r\n * @param {?} createSourceMaps\r\n * @return {?}\r\n */\r\nfunction jitStatements(sourceUrl, statements, reflector, createSourceMaps) {\r\n    const /** @type {?} */ converter = new JitEmitterVisitor(reflector);\r\n    const /** @type {?} */ ctx = EmitterVisitorContext.createRoot();\r\n    converter.visitAllStatements(statements, ctx);\r\n    converter.createReturnStmt(ctx);\r\n    return evalExpression(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\r\n}\r\nclass JitEmitterVisitor extends AbstractJsEmitterVisitor {\r\n    /**\r\n     * @param {?} reflector\r\n     */\r\n    constructor(reflector) {\r\n        super();\r\n        this.reflector = reflector;\r\n        this._evalArgNames = [];\r\n        this._evalArgValues = [];\r\n        this._evalExportedVars = [];\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    createReturnStmt(ctx) {\r\n        const /** @type {?} */ stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map(resultVar => new LiteralMapEntry(resultVar, variable(resultVar), false))));\r\n        stmt.visitStatement(this, ctx);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getArgs() {\r\n        const /** @type {?} */ result = {};\r\n        for (let /** @type {?} */ i = 0; i < this._evalArgNames.length; i++) {\r\n            result[this._evalArgNames[i]] = this._evalArgValues[i];\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} ast\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitExternalExpr(ast, ctx) {\r\n        const /** @type {?} */ value = this.reflector.resolveExternalReference(ast.value);\r\n        let /** @type {?} */ id = this._evalArgValues.indexOf(value);\r\n        if (id === -1) {\r\n            id = this._evalArgValues.length;\r\n            this._evalArgValues.push(value);\r\n            const /** @type {?} */ name = identifierName({ reference: value }) || 'val';\r\n            this._evalArgNames.push(`jit_${name}_${id}`);\r\n        }\r\n        ctx.print(ast, this._evalArgNames[id]);\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareVarStmt(stmt, ctx) {\r\n        if (stmt.hasModifier(StmtModifier.Exported)) {\r\n            this._evalExportedVars.push(stmt.name);\r\n        }\r\n        return super.visitDeclareVarStmt(stmt, ctx);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareFunctionStmt(stmt, ctx) {\r\n        if (stmt.hasModifier(StmtModifier.Exported)) {\r\n            this._evalExportedVars.push(stmt.name);\r\n        }\r\n        return super.visitDeclareFunctionStmt(stmt, ctx);\r\n    }\r\n    /**\r\n     * @param {?} stmt\r\n     * @param {?} ctx\r\n     * @return {?}\r\n     */\r\n    visitDeclareClassStmt(stmt, ctx) {\r\n        if (stmt.hasModifier(StmtModifier.Exported)) {\r\n            this._evalExportedVars.push(stmt.name);\r\n        }\r\n        return super.visitDeclareClassStmt(stmt, ctx);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * An internal module of the Angular compiler that begins with component types,\r\n * extracts templates, and eventually produces a compiled version of the component\r\n * ready for linking into an application.\r\n *\r\n * \\@security When compiling templates at runtime, you must ensure that the entire template comes\r\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\r\n * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\r\n */\r\nclass JitCompiler {\r\n    /**\r\n     * @param {?} _metadataResolver\r\n     * @param {?} _templateParser\r\n     * @param {?} _styleCompiler\r\n     * @param {?} _viewCompiler\r\n     * @param {?} _ngModuleCompiler\r\n     * @param {?} _summaryResolver\r\n     * @param {?} _reflector\r\n     * @param {?} _compilerConfig\r\n     * @param {?} _console\r\n     * @param {?} getExtraNgModuleProviders\r\n     */\r\n    constructor(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _summaryResolver, _reflector, _compilerConfig, _console, getExtraNgModuleProviders) {\r\n        this._metadataResolver = _metadataResolver;\r\n        this._templateParser = _templateParser;\r\n        this._styleCompiler = _styleCompiler;\r\n        this._viewCompiler = _viewCompiler;\r\n        this._ngModuleCompiler = _ngModuleCompiler;\r\n        this._summaryResolver = _summaryResolver;\r\n        this._reflector = _reflector;\r\n        this._compilerConfig = _compilerConfig;\r\n        this._console = _console;\r\n        this.getExtraNgModuleProviders = getExtraNgModuleProviders;\r\n        this._compiledTemplateCache = new Map();\r\n        this._compiledHostTemplateCache = new Map();\r\n        this._compiledDirectiveWrapperCache = new Map();\r\n        this._compiledNgModuleCache = new Map();\r\n        this._sharedStylesheetCount = 0;\r\n        this._addedAotSummaries = new Set();\r\n    }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleSync(moduleType) {\r\n        return SyncAsync.assertSync(this._compileModuleAndComponents(moduleType, true));\r\n    }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAsync(moduleType) {\r\n        return Promise.resolve(this._compileModuleAndComponents(moduleType, false));\r\n    }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAndAllComponentsSync(moduleType) {\r\n        return SyncAsync.assertSync(this._compileModuleAndAllComponents(moduleType, true));\r\n    }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAndAllComponentsAsync(moduleType) {\r\n        return Promise.resolve(this._compileModuleAndAllComponents(moduleType, false));\r\n    }\r\n    /**\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    getComponentFactory(component) {\r\n        const /** @type {?} */ summary = this._metadataResolver.getDirectiveSummary(component);\r\n        return /** @type {?} */ (summary.componentFactory);\r\n    }\r\n    /**\r\n     * @param {?} summaries\r\n     * @return {?}\r\n     */\r\n    loadAotSummaries(summaries) {\r\n        this.clearCache();\r\n        this._addAotSummaries(summaries);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    _addAotSummaries(fn$$1) {\r\n        if (this._addedAotSummaries.has(fn$$1)) {\r\n            return;\r\n        }\r\n        this._addedAotSummaries.add(fn$$1);\r\n        const /** @type {?} */ summaries = fn$$1();\r\n        for (let /** @type {?} */ i = 0; i < summaries.length; i++) {\r\n            const /** @type {?} */ entry = summaries[i];\r\n            if (typeof entry === 'function') {\r\n                this._addAotSummaries(entry);\r\n            }\r\n            else {\r\n                const /** @type {?} */ summary = /** @type {?} */ (entry);\r\n                this._summaryResolver.addSummary({ symbol: summary.type.reference, metadata: null, type: summary });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} ref\r\n     * @return {?}\r\n     */\r\n    hasAotSummary(ref) { return !!this._summaryResolver.resolveSummary(ref); }\r\n    /**\r\n     * @param {?} ids\r\n     * @return {?}\r\n     */\r\n    _filterJitIdentifiers(ids) {\r\n        return ids.map(mod => mod.reference).filter((ref) => !this.hasAotSummary(ref));\r\n    }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @param {?} isSync\r\n     * @return {?}\r\n     */\r\n    _compileModuleAndComponents(moduleType, isSync) {\r\n        return SyncAsync.then(this._loadModules(moduleType, isSync), () => {\r\n            this._compileComponents(moduleType, null);\r\n            return this._compileModule(moduleType);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @param {?} isSync\r\n     * @return {?}\r\n     */\r\n    _compileModuleAndAllComponents(moduleType, isSync) {\r\n        return SyncAsync.then(this._loadModules(moduleType, isSync), () => {\r\n            const /** @type {?} */ componentFactories = [];\r\n            this._compileComponents(moduleType, componentFactories);\r\n            return {\r\n                ngModuleFactory: this._compileModule(moduleType),\r\n                componentFactories: componentFactories\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} mainModule\r\n     * @param {?} isSync\r\n     * @return {?}\r\n     */\r\n    _loadModules(mainModule, isSync) {\r\n        const /** @type {?} */ loading = [];\r\n        const /** @type {?} */ mainNgModule = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(mainModule)));\r\n        // Note: for runtime compilation, we want to transitively compile all modules,\r\n        // so we also need to load the declared directives / pipes for all nested modules.\r\n        this._filterJitIdentifiers(mainNgModule.transitiveModule.modules).forEach((nestedNgModule) => {\r\n            // getNgModuleMetadata only returns null if the value passed in is not an NgModule\r\n            const /** @type {?} */ moduleMeta = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(nestedNgModule)));\r\n            this._filterJitIdentifiers(moduleMeta.declaredDirectives).forEach((ref) => {\r\n                const /** @type {?} */ promise = this._metadataResolver.loadDirectiveMetadata(moduleMeta.type.reference, ref, isSync);\r\n                if (promise) {\r\n                    loading.push(promise);\r\n                }\r\n            });\r\n            this._filterJitIdentifiers(moduleMeta.declaredPipes)\r\n                .forEach((ref) => this._metadataResolver.getOrLoadPipeMetadata(ref));\r\n        });\r\n        return SyncAsync.all(loading);\r\n    }\r\n    /**\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    _compileModule(moduleType) {\r\n        let /** @type {?} */ ngModuleFactory = /** @type {?} */ ((this._compiledNgModuleCache.get(moduleType)));\r\n        if (!ngModuleFactory) {\r\n            const /** @type {?} */ moduleMeta = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(moduleType)));\r\n            // Always provide a bound Compiler\r\n            const /** @type {?} */ extraProviders = this.getExtraNgModuleProviders(moduleMeta.type.reference);\r\n            const /** @type {?} */ outputCtx = createOutputContext();\r\n            const /** @type {?} */ compileResult = this._ngModuleCompiler.compile(outputCtx, moduleMeta, extraProviders);\r\n            ngModuleFactory = this._interpretOrJit(ngModuleJitUrl(moduleMeta), outputCtx.statements)[compileResult.ngModuleFactoryVar];\r\n            this._compiledNgModuleCache.set(moduleMeta.type.reference, ngModuleFactory);\r\n        }\r\n        return ngModuleFactory;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} mainModule\r\n     * @param {?} allComponentFactories\r\n     * @return {?}\r\n     */\r\n    _compileComponents(mainModule, allComponentFactories) {\r\n        const /** @type {?} */ ngModule = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(mainModule)));\r\n        const /** @type {?} */ moduleByJitDirective = new Map();\r\n        const /** @type {?} */ templates = new Set();\r\n        const /** @type {?} */ transJitModules = this._filterJitIdentifiers(ngModule.transitiveModule.modules);\r\n        transJitModules.forEach((localMod) => {\r\n            const /** @type {?} */ localModuleMeta = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(localMod)));\r\n            this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach((dirRef) => {\r\n                moduleByJitDirective.set(dirRef, localModuleMeta);\r\n                const /** @type {?} */ dirMeta = this._metadataResolver.getDirectiveMetadata(dirRef);\r\n                if (dirMeta.isComponent) {\r\n                    templates.add(this._createCompiledTemplate(dirMeta, localModuleMeta));\r\n                    if (allComponentFactories) {\r\n                        const /** @type {?} */ template = this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);\r\n                        templates.add(template);\r\n                        allComponentFactories.push(/** @type {?} */ (dirMeta.componentFactory));\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        transJitModules.forEach((localMod) => {\r\n            const /** @type {?} */ localModuleMeta = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(localMod)));\r\n            this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach((dirRef) => {\r\n                const /** @type {?} */ dirMeta = this._metadataResolver.getDirectiveMetadata(dirRef);\r\n                if (dirMeta.isComponent) {\r\n                    dirMeta.entryComponents.forEach((entryComponentType) => {\r\n                        const /** @type {?} */ moduleMeta = /** @type {?} */ ((moduleByJitDirective.get(entryComponentType.componentType)));\r\n                        templates.add(this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\r\n                    });\r\n                }\r\n            });\r\n            localModuleMeta.entryComponents.forEach((entryComponentType) => {\r\n                if (!this.hasAotSummary(entryComponentType.componentType.reference)) {\r\n                    const /** @type {?} */ moduleMeta = /** @type {?} */ ((moduleByJitDirective.get(entryComponentType.componentType)));\r\n                    templates.add(this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\r\n                }\r\n            });\r\n        });\r\n        templates.forEach((template) => this._compileTemplate(template));\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    clearCacheFor(type) {\r\n        this._compiledNgModuleCache.delete(type);\r\n        this._metadataResolver.clearCacheFor(type);\r\n        this._compiledHostTemplateCache.delete(type);\r\n        const /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(type);\r\n        if (compiledTemplate) {\r\n            this._compiledTemplateCache.delete(type);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearCache() {\r\n        // Note: don't clear the _addedAotSummaries, as they don't change!\r\n        this._metadataResolver.clearCache();\r\n        this._compiledTemplateCache.clear();\r\n        this._compiledHostTemplateCache.clear();\r\n        this._compiledNgModuleCache.clear();\r\n    }\r\n    /**\r\n     * @param {?} compType\r\n     * @param {?} ngModule\r\n     * @return {?}\r\n     */\r\n    _createCompiledHostTemplate(compType, ngModule) {\r\n        if (!ngModule) {\r\n            throw new Error(`Component ${stringify(compType)} is not part of any NgModule or the module has not been imported into your module.`);\r\n        }\r\n        let /** @type {?} */ compiledTemplate = this._compiledHostTemplateCache.get(compType);\r\n        if (!compiledTemplate) {\r\n            const /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata(compType);\r\n            assertComponent(compMeta);\r\n            const /** @type {?} */ hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta, (/** @type {?} */ (compMeta.componentFactory)).viewDefFactory);\r\n            compiledTemplate =\r\n                new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);\r\n            this._compiledHostTemplateCache.set(compType, compiledTemplate);\r\n        }\r\n        return compiledTemplate;\r\n    }\r\n    /**\r\n     * @param {?} compMeta\r\n     * @param {?} ngModule\r\n     * @return {?}\r\n     */\r\n    _createCompiledTemplate(compMeta, ngModule) {\r\n        let /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);\r\n        if (!compiledTemplate) {\r\n            assertComponent(compMeta);\r\n            compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);\r\n            this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);\r\n        }\r\n        return compiledTemplate;\r\n    }\r\n    /**\r\n     * @param {?} template\r\n     * @return {?}\r\n     */\r\n    _compileTemplate(template) {\r\n        if (template.isCompiled) {\r\n            return;\r\n        }\r\n        const /** @type {?} */ compMeta = template.compMeta;\r\n        const /** @type {?} */ externalStylesheetsByModuleUrl = new Map();\r\n        const /** @type {?} */ outputContext = createOutputContext();\r\n        const /** @type {?} */ componentStylesheet = this._styleCompiler.compileComponent(outputContext, compMeta); /** @type {?} */\r\n        ((compMeta.template)).externalStylesheets.forEach((stylesheetMeta) => {\r\n            const /** @type {?} */ compiledStylesheet = this._styleCompiler.compileStyles(createOutputContext(), compMeta, stylesheetMeta);\r\n            externalStylesheetsByModuleUrl.set(/** @type {?} */ ((stylesheetMeta.moduleUrl)), compiledStylesheet);\r\n        });\r\n        this._resolveStylesCompileResult(componentStylesheet, externalStylesheetsByModuleUrl);\r\n        const /** @type {?} */ pipes = template.ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));\r\n        const { template: parsedTemplate, pipes: usedPipes } = this._parseTemplate(compMeta, template.ngModule, template.directives);\r\n        const /** @type {?} */ compileResult = this._viewCompiler.compileComponent(outputContext, compMeta, parsedTemplate, variable(componentStylesheet.stylesVar), usedPipes);\r\n        const /** @type {?} */ evalResult = this._interpretOrJit(templateJitUrl(template.ngModule.type, template.compMeta), outputContext.statements);\r\n        const /** @type {?} */ viewClass = evalResult[compileResult.viewClassVar];\r\n        const /** @type {?} */ rendererType = evalResult[compileResult.rendererTypeVar];\r\n        template.compiled(viewClass, rendererType);\r\n    }\r\n    /**\r\n     * @param {?} compMeta\r\n     * @param {?} ngModule\r\n     * @param {?} directiveIdentifiers\r\n     * @return {?}\r\n     */\r\n    _parseTemplate(compMeta, ngModule, directiveIdentifiers) {\r\n        // Note: ! is ok here as components always have a template.\r\n        const /** @type {?} */ preserveWhitespaces = /** @type {?} */ ((compMeta.template)).preserveWhitespaces;\r\n        const /** @type {?} */ directives = directiveIdentifiers.map(dir => this._metadataResolver.getDirectiveSummary(dir.reference));\r\n        const /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(pipe => this._metadataResolver.getPipeSummary(pipe.reference));\r\n        return this._templateParser.parse(compMeta, /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).htmlAst)), directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, /** @type {?} */ ((compMeta.template))), preserveWhitespaces);\r\n    }\r\n    /**\r\n     * @param {?} result\r\n     * @param {?} externalStylesheetsByModuleUrl\r\n     * @return {?}\r\n     */\r\n    _resolveStylesCompileResult(result, externalStylesheetsByModuleUrl) {\r\n        result.dependencies.forEach((dep, i) => {\r\n            const /** @type {?} */ nestedCompileResult = /** @type {?} */ ((externalStylesheetsByModuleUrl.get(dep.moduleUrl)));\r\n            const /** @type {?} */ nestedStylesArr = this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);\r\n            dep.setValue(nestedStylesArr);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} result\r\n     * @param {?} externalStylesheetsByModuleUrl\r\n     * @return {?}\r\n     */\r\n    _resolveAndEvalStylesCompileResult(result, externalStylesheetsByModuleUrl) {\r\n        this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);\r\n        return this._interpretOrJit(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.outputCtx.statements)[result.stylesVar];\r\n    }\r\n    /**\r\n     * @param {?} sourceUrl\r\n     * @param {?} statements\r\n     * @return {?}\r\n     */\r\n    _interpretOrJit(sourceUrl, statements) {\r\n        if (!this._compilerConfig.useJit) {\r\n            return interpretStatements(statements, this._reflector);\r\n        }\r\n        else {\r\n            return jitStatements(sourceUrl, statements, this._reflector, this._compilerConfig.jitDevMode);\r\n        }\r\n    }\r\n}\r\nclass CompiledTemplate {\r\n    /**\r\n     * @param {?} isHost\r\n     * @param {?} compType\r\n     * @param {?} compMeta\r\n     * @param {?} ngModule\r\n     * @param {?} directives\r\n     */\r\n    constructor(isHost, compType, compMeta, ngModule, directives) {\r\n        this.isHost = isHost;\r\n        this.compType = compType;\r\n        this.compMeta = compMeta;\r\n        this.ngModule = ngModule;\r\n        this.directives = directives;\r\n        this._viewClass = /** @type {?} */ ((null));\r\n        this.isCompiled = false;\r\n    }\r\n    /**\r\n     * @param {?} viewClass\r\n     * @param {?} rendererType\r\n     * @return {?}\r\n     */\r\n    compiled(viewClass, rendererType) {\r\n        this._viewClass = viewClass;\r\n        (/** @type {?} */ (this.compMeta.componentViewType)).setDelegate(viewClass);\r\n        for (let /** @type {?} */ prop in rendererType) {\r\n            (/** @type {?} */ (this.compMeta.rendererType))[prop] = rendererType[prop];\r\n        }\r\n        this.isCompiled = true;\r\n    }\r\n}\r\n/**\r\n * @param {?} meta\r\n * @return {?}\r\n */\r\nfunction assertComponent(meta) {\r\n    if (!meta.isComponent) {\r\n        throw new Error(`Could not compile '${identifierName(meta.type)}' because it is not a component.`);\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createOutputContext() {\r\n    const /** @type {?} */ importExpr$$1 = (symbol) => importExpr({ name: identifierName(symbol), moduleName: null, runtime: symbol });\r\n    return { statements: [], genFilePath: '', importExpr: importExpr$$1 };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides access to reflection data about symbols that the compiler needs.\r\n * @abstract\r\n */\r\nclass CompileReflector {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Create a {\\@link UrlResolver} with no package prefix.\r\n * @return {?}\r\n */\r\nfunction createUrlResolverWithoutPackagePrefix() {\r\n    return new UrlResolver();\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createOfflineCompileUrlResolver() {\r\n    return new UrlResolver('.');\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\nconst UrlResolver = class UrlResolverImpl {\r\n    /**\r\n     * @param {?=} _packagePrefix\r\n     */\r\n    constructor(_packagePrefix = null) {\r\n        this._packagePrefix = _packagePrefix;\r\n    }\r\n    /**\r\n     * Resolves the `url` given the `baseUrl`:\r\n     * - when the `url` is null, the `baseUrl` is returned,\r\n     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\r\n     * `baseUrl` and `url`,\r\n     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\r\n     * returned as is (ignoring the `baseUrl`)\r\n     * @param {?} baseUrl\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    resolve(baseUrl, url) {\r\n        let /** @type {?} */ resolvedUrl = url;\r\n        if (baseUrl != null && baseUrl.length > 0) {\r\n            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);\r\n        }\r\n        const /** @type {?} */ resolvedParts = _split(resolvedUrl);\r\n        let /** @type {?} */ prefix = this._packagePrefix;\r\n        if (prefix != null && resolvedParts != null &&\r\n            resolvedParts[_ComponentIndex.Scheme] == 'package') {\r\n            let /** @type {?} */ path = resolvedParts[_ComponentIndex.Path];\r\n            prefix = prefix.replace(/\\/+$/, '');\r\n            path = path.replace(/^\\/+/, '');\r\n            return `${prefix}/${path}`;\r\n        }\r\n        return resolvedUrl;\r\n    }\r\n};\r\n/**\r\n * Extract the scheme of a URL.\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction getUrlScheme(url) {\r\n    const /** @type {?} */ match = _split(url);\r\n    return (match && match[_ComponentIndex.Scheme]) || '';\r\n}\r\n/**\r\n * Builds a URI string from already-encoded parts.\r\n *\r\n * No encoding is performed.  Any component may be omitted as either null or\r\n * undefined.\r\n *\r\n * @param {?=} opt_scheme The scheme such as 'http'.\r\n * @param {?=} opt_userInfo The user name before the '\\@'.\r\n * @param {?=} opt_domain The domain such as 'www.google.com', already\r\n *     URI-encoded.\r\n * @param {?=} opt_port The port number.\r\n * @param {?=} opt_path The path, already URI-encoded.  If it is not\r\n *     empty, it must begin with a slash.\r\n * @param {?=} opt_queryData The URI-encoded query data.\r\n * @param {?=} opt_fragment The URI-encoded fragment identifier.\r\n * @return {?} The fully combined URI.\r\n */\r\nfunction _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {\r\n    const /** @type {?} */ out = [];\r\n    if (opt_scheme != null) {\r\n        out.push(opt_scheme + ':');\r\n    }\r\n    if (opt_domain != null) {\r\n        out.push('//');\r\n        if (opt_userInfo != null) {\r\n            out.push(opt_userInfo + '@');\r\n        }\r\n        out.push(opt_domain);\r\n        if (opt_port != null) {\r\n            out.push(':' + opt_port);\r\n        }\r\n    }\r\n    if (opt_path != null) {\r\n        out.push(opt_path);\r\n    }\r\n    if (opt_queryData != null) {\r\n        out.push('?' + opt_queryData);\r\n    }\r\n    if (opt_fragment != null) {\r\n        out.push('#' + opt_fragment);\r\n    }\r\n    return out.join('');\r\n}\r\n/**\r\n * A regular expression for breaking a URI into its component parts.\r\n *\r\n * {\\@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says\r\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\r\n * disambiguation method used by POSIX regular expressions, it is natural and\r\n * commonplace to use a regular expression for parsing the potential five\r\n * components of a URI reference.\r\n *\r\n * The following line is the regular expression for breaking-down a\r\n * well-formed URI reference into its components.\r\n *\r\n * <pre>\r\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\r\n *  12            3  4          5       6  7        8 9\r\n * </pre>\r\n *\r\n * The numbers in the second line above are only to assist readability; they\r\n * indicate the reference points for each subexpression (i.e., each paired\r\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\r\n * For example, matching the above expression to\r\n * <pre>\r\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\r\n * </pre>\r\n * results in the following subexpression matches:\r\n * <pre>\r\n *    $1 = http:\r\n *    $2 = http\r\n *    $3 = //www.ics.uci.edu\r\n *    $4 = www.ics.uci.edu\r\n *    $5 = /pub/ietf/uri/\r\n *    $6 = <undefined>\r\n *    $7 = <undefined>\r\n *    $8 = #Related\r\n *    $9 = Related\r\n * </pre>\r\n * where <undefined> indicates that the component is not present, as is the\r\n * case for the query component in the above example. Therefore, we can\r\n * determine the value of the five components as\r\n * <pre>\r\n *    scheme    = $2\r\n *    authority = $4\r\n *    path      = $5\r\n *    query     = $7\r\n *    fragment  = $9\r\n * </pre>\r\n *\r\n * The regular expression has been modified slightly to expose the\r\n * userInfo, domain, and port separately from the authority.\r\n * The modified version yields\r\n * <pre>\r\n *    $1 = http              scheme\r\n *    $2 = <undefined>       userInfo -\\\r\n *    $3 = www.ics.uci.edu   domain     | authority\r\n *    $4 = <undefined>       port     -/\r\n *    $5 = /pub/ietf/uri/    path\r\n *    $6 = <undefined>       query without ?\r\n *    $7 = Related           fragment without #\r\n * </pre>\r\n * \\@internal\r\n */\r\nconst _splitRe = new RegExp('^' +\r\n    '(?:' +\r\n    '([^:/?#.]+)' + // scheme - ignore special characters\r\n    ':)?' +\r\n    '(?://' +\r\n    '(?:([^/?#]*)@)?' + // userInfo\r\n    '([\\\\w\\\\d\\\\-\\\\u0100-\\\\uffff.%]*)' + // domain - restrict to letters,\r\n    '(?::([0-9]+))?' + // port\r\n    ')?' +\r\n    '([^?#]+)?' + // path\r\n    '(?:\\\\?([^#]*))?' + // query\r\n    '(?:#(.*))?' + // fragment\r\n    '$');\r\n/** @enum {number} */\r\nconst _ComponentIndex = {\r\n    Scheme: 1,\r\n    UserInfo: 2,\r\n    Domain: 3,\r\n    Port: 4,\r\n    Path: 5,\r\n    QueryData: 6,\r\n    Fragment: 7,\r\n};\r\n_ComponentIndex[_ComponentIndex.Scheme] = \"Scheme\";\r\n_ComponentIndex[_ComponentIndex.UserInfo] = \"UserInfo\";\r\n_ComponentIndex[_ComponentIndex.Domain] = \"Domain\";\r\n_ComponentIndex[_ComponentIndex.Port] = \"Port\";\r\n_ComponentIndex[_ComponentIndex.Path] = \"Path\";\r\n_ComponentIndex[_ComponentIndex.QueryData] = \"QueryData\";\r\n_ComponentIndex[_ComponentIndex.Fragment] = \"Fragment\";\r\n/**\r\n * Splits a URI into its component parts.\r\n *\r\n * Each component can be accessed via the component indices; for example:\r\n * <pre>\r\n * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\r\n * </pre>\r\n *\r\n * @param {?} uri The URI string to examine.\r\n * @return {?} Each component still URI-encoded.\r\n *     Each component that is present will contain the encoded value, whereas\r\n *     components that are not present will be undefined or empty, depending\r\n *     on the browser's regular expression implementation.  Never null, since\r\n *     arbitrary strings may still look like path names.\r\n */\r\nfunction _split(uri) {\r\n    return /** @type {?} */ ((uri.match(_splitRe)));\r\n}\r\n/**\r\n * Removes dot segments in given path component, as described in\r\n * RFC 3986, section 5.2.4.\r\n *\r\n * @param {?} path A non-empty path component.\r\n * @return {?} Path component with removed dot segments.\r\n */\r\nfunction _removeDotSegments(path) {\r\n    if (path == '/')\r\n        return '/';\r\n    const /** @type {?} */ leadingSlash = path[0] == '/' ? '/' : '';\r\n    const /** @type {?} */ trailingSlash = path[path.length - 1] === '/' ? '/' : '';\r\n    const /** @type {?} */ segments = path.split('/');\r\n    const /** @type {?} */ out = [];\r\n    let /** @type {?} */ up = 0;\r\n    for (let /** @type {?} */ pos = 0; pos < segments.length; pos++) {\r\n        const /** @type {?} */ segment = segments[pos];\r\n        switch (segment) {\r\n            case '':\r\n            case '.':\r\n                break;\r\n            case '..':\r\n                if (out.length > 0) {\r\n                    out.pop();\r\n                }\r\n                else {\r\n                    up++;\r\n                }\r\n                break;\r\n            default:\r\n                out.push(segment);\r\n        }\r\n    }\r\n    if (leadingSlash == '') {\r\n        while (up-- > 0) {\r\n            out.unshift('..');\r\n        }\r\n        if (out.length === 0)\r\n            out.push('.');\r\n    }\r\n    return leadingSlash + out.join('/') + trailingSlash;\r\n}\r\n/**\r\n * Takes an array of the parts from split and canonicalizes the path part\r\n * and then joins all the parts.\r\n * @param {?} parts\r\n * @return {?}\r\n */\r\nfunction _joinAndCanonicalizePath(parts) {\r\n    let /** @type {?} */ path = parts[_ComponentIndex.Path];\r\n    path = path == null ? '' : _removeDotSegments(path);\r\n    parts[_ComponentIndex.Path] = path;\r\n    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);\r\n}\r\n/**\r\n * Resolves a URL.\r\n * @param {?} base The URL acting as the base URL.\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction _resolveUrl(base, url) {\r\n    const /** @type {?} */ parts = _split(encodeURI(url));\r\n    const /** @type {?} */ baseParts = _split(base);\r\n    if (parts[_ComponentIndex.Scheme] != null) {\r\n        return _joinAndCanonicalizePath(parts);\r\n    }\r\n    else {\r\n        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];\r\n    }\r\n    for (let /** @type {?} */ i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {\r\n        if (parts[i] == null) {\r\n            parts[i] = baseParts[i];\r\n        }\r\n    }\r\n    if (parts[_ComponentIndex.Path][0] == '/') {\r\n        return _joinAndCanonicalizePath(parts);\r\n    }\r\n    let /** @type {?} */ path = baseParts[_ComponentIndex.Path];\r\n    if (path == null)\r\n        path = '/';\r\n    const /** @type {?} */ index = path.lastIndexOf('/');\r\n    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];\r\n    parts[_ComponentIndex.Path] = path;\r\n    return _joinAndCanonicalizePath(parts);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An interface for retrieving documents by URL that the compiler uses\r\n * to load templates.\r\n */\r\nclass ResourceLoader {\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    get(url) { return ''; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Extract i18n messages from source code\r\n */\r\n/**\r\n * The host of the Extractor disconnects the implementation from TypeScript / other language\r\n * services and from underlying file systems.\r\n * @record\r\n */\r\n\r\nclass Extractor {\r\n    /**\r\n     * @param {?} host\r\n     * @param {?} staticSymbolResolver\r\n     * @param {?} messageBundle\r\n     * @param {?} metadataResolver\r\n     */\r\n    constructor(host, staticSymbolResolver, messageBundle, metadataResolver) {\r\n        this.host = host;\r\n        this.staticSymbolResolver = staticSymbolResolver;\r\n        this.messageBundle = messageBundle;\r\n        this.metadataResolver = metadataResolver;\r\n    }\r\n    /**\r\n     * @param {?} rootFiles\r\n     * @return {?}\r\n     */\r\n    extract(rootFiles) {\r\n        const { files, ngModules } = analyzeAndValidateNgModules(rootFiles, this.host, this.staticSymbolResolver, this.metadataResolver);\r\n        return Promise\r\n            .all(ngModules.map(ngModule => this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false)))\r\n            .then(() => {\r\n            const /** @type {?} */ errors = [];\r\n            files.forEach(file => {\r\n                const /** @type {?} */ compMetas = [];\r\n                file.directives.forEach(directiveType => {\r\n                    const /** @type {?} */ dirMeta = this.metadataResolver.getDirectiveMetadata(directiveType);\r\n                    if (dirMeta && dirMeta.isComponent) {\r\n                        compMetas.push(dirMeta);\r\n                    }\r\n                });\r\n                compMetas.forEach(compMeta => {\r\n                    const /** @type {?} */ html = /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).template));\r\n                    const /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((compMeta.template)).interpolation);\r\n                    errors.push(.../** @type {?} */ ((this.messageBundle.updateFromTemplate(html, file.fileName, interpolationConfig))));\r\n                });\r\n            });\r\n            if (errors.length) {\r\n                throw new Error(errors.map(e => e.toString()).join('\\n'));\r\n            }\r\n            return this.messageBundle;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} host\r\n     * @param {?} locale\r\n     * @return {?}\r\n     */\r\n    static create(host, locale) {\r\n        const /** @type {?} */ htmlParser = new HtmlParser();\r\n        const /** @type {?} */ urlResolver = createAotUrlResolver(host);\r\n        const /** @type {?} */ symbolCache = new StaticSymbolCache();\r\n        const /** @type {?} */ summaryResolver = new AotSummaryResolver(host, symbolCache);\r\n        const /** @type {?} */ staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\r\n        const /** @type {?} */ staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);\r\n        const /** @type {?} */ config = new CompilerConfig({ defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false });\r\n        const /** @type {?} */ normalizer = new DirectiveNormalizer({ get: (url) => host.loadResource(url) }, urlResolver, htmlParser, config);\r\n        const /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();\r\n        const /** @type {?} */ resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector);\r\n        // TODO(vicb): implicit tags & attributes\r\n        const /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {}, locale);\r\n        const /** @type {?} */ extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\r\n        return { extractor, staticReflector };\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all APIs of the compiler package.\r\n *\r\n * <div class=\"callout is-critical\">\r\n *   <header>Unstable APIs</header>\r\n *   <p>\r\n *     All compiler apis are currently considered experimental and private!\r\n *   </p>\r\n *   <p>\r\n *     We expect the APIs in this package to keep on changing. Do not rely on them.\r\n *   </p>\r\n * </div>\r\n */\r\n\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\r\n\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This file is not used to build this module. It is only used during editing\r\n// by the TypeScript language service and during build for verification. `ngc`\r\n// replaces this file with production index.ts when it rewrites private symbol\r\n// names.\r\n\r\nexport { core, CompilerConfig, preserveWhitespacesDefault, isLoweredSymbol, createLoweredSymbol, Identifiers, JitCompiler, DirectiveResolver, PipeResolver, NgModuleResolver, DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig, NgModuleCompiler, AssertNotNull, BinaryOperator, BinaryOperatorExpr, BuiltinMethod, BuiltinVar, CastExpr, ClassStmt, CommaExpr, CommentStmt, ConditionalExpr, DeclareFunctionStmt, DeclareVarStmt, ExpressionStatement, ExternalExpr, ExternalReference, FunctionExpr, IfStmt, InstantiateExpr, InvokeFunctionExpr, InvokeMethodExpr, LiteralArrayExpr, LiteralExpr, LiteralMapExpr, NotExpr, ReadKeyExpr, ReadPropExpr, ReadVarExpr, ReturnStatement, ThrowStmt, TryCatchStmt, WriteKeyExpr, WritePropExpr, WriteVarExpr, StmtModifier, Statement, collectExternalReferences, EmitterVisitorContext, ViewCompiler, getParseErrors, isSyntaxError, syntaxError, Version, VERSION, TextAst, BoundTextAst, AttrAst, BoundElementPropertyAst, BoundEventAst, ReferenceAst, VariableAst, ElementAst, EmbeddedTemplateAst, BoundDirectivePropertyAst, DirectiveAst, ProviderAst, ProviderAstType, NgContentAst, PropertyBindingType, NullTemplateVisitor, RecursiveTemplateAstVisitor, templateVisitAll, identifierName, identifierModuleUrl, viewClassName, rendererTypeName, hostViewClassName, componentFactoryName, CompileSummaryKind, tokenName, tokenReference, CompileStylesheetMetadata, CompileTemplateMetadata, CompileDirectiveMetadata, CompilePipeMetadata, CompileNgModuleMetadata, TransitiveCompileNgModuleMetadata, ProviderMeta, flatten, templateSourceUrl, sharedStylesheetJitUrl, ngModuleJitUrl, templateJitUrl, createAotUrlResolver, createAotCompiler, AotCompiler, analyzeNgModules, analyzeAndValidateNgModules, analyzeFile, mergeAnalyzedFiles, GeneratedFile, toTypeScript, formattedError, isFormattedError, StaticReflector, StaticSymbol, StaticSymbolCache, ResolvedStaticSymbol, StaticSymbolResolver, unescapeIdentifier, unwrapResolvedMetadata, AotSummaryResolver, AstPath, SummaryResolver, JitSummaryResolver, CompileReflector, createUrlResolverWithoutPackagePrefix, createOfflineCompileUrlResolver, UrlResolver, getUrlScheme, ResourceLoader, ElementSchemaRegistry, Extractor, I18NHtmlParser, MessageBundle, Serializer, Xliff, Xliff2, Xmb, Xtb, DirectiveNormalizer, ParserError, ParseSpan, AST, Quote, EmptyExpr, ImplicitReceiver, Chain, Conditional, PropertyRead, PropertyWrite, SafePropertyRead, KeyedRead, KeyedWrite, BindingPipe, LiteralPrimitive, LiteralArray, LiteralMap, Interpolation, Binary, PrefixNot, NonNullAssert, MethodCall, SafeMethodCall, FunctionCall, ASTWithSource, TemplateBinding, NullAstVisitor, RecursiveAstVisitor, AstTransformer, visitAstChildren, TokenType, Lexer, Token, EOF, isIdentifier, isQuote, SplitInterpolation, TemplateBindingParseResult, Parser, _ParseAST, ERROR_COMPONENT_TYPE, CompileMetadataResolver, Text, Expansion, ExpansionCase, Attribute$1 as Attribute, Element, Comment, visitAll, RecursiveVisitor, findNode, ParseTreeResult, TreeError, HtmlParser, HtmlTagDefinition, getHtmlTagDefinition, TagContentType, splitNsName, isNgContainer, isNgContent, isNgTemplate, getNsPrefix, mergeNsAndName, NAMED_ENTITIES, NGSP_UNICODE, debugOutputAstAsTypeScript, TypeScriptEmitter, ParseLocation, ParseSourceFile, ParseSourceSpan, ParseErrorLevel, ParseError, typeSourceSpan, DomElementSchemaRegistry, CssSelector, SelectorMatcher, SelectorListContext, SelectorContext, StylesCompileDependency, CompiledStylesheet, StyleCompiler, TemplateParseError, TemplateParseResult, TemplateParser, splitClasses, createElementCssSelector, removeSummaryDuplicates };\r\n//# sourceMappingURL=compiler.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/compiler/esm2015/compiler.js\n// module id = ../../../compiler/esm2015/compiler.js\n// module chunks = vendor","/**\r\n * @license Angular v5.1.3\r\n * (c) 2010-2017 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { merge } from 'rxjs/observable/merge';\r\nimport { share } from 'rxjs/operator/share';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Creates a token that can be used in a DI Provider.\r\n *\r\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\r\n * runtime representation) such as when injecting an interface, callable type, array or\r\n * parametrized type.\r\n *\r\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\r\n * the `Injector`. This provides additional level of type safety.\r\n *\r\n * ```\r\n * interface MyInterface {...}\r\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\r\n * // myInterface is inferred to be MyInterface.\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\r\n *\r\n * \\@stable\r\n */\r\nclass InjectionToken {\r\n    /**\r\n     * @param {?} _desc\r\n     */\r\n    constructor(_desc) {\r\n        this._desc = _desc;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this.ngMetadataName = 'InjectionToken';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return `InjectionToken ${this._desc}`; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\r\n * decorators as well as\r\n * Angular DSL syntax.\r\n *\r\n * ES7 syntax:\r\n *\r\n * ```\r\n * \\@ng.Component({...})\r\n * class MyClass {...}\r\n * ```\r\n * \\@stable\r\n * @record\r\n */\r\n\r\nconst ANNOTATIONS = '__annotations__';\r\nconst PARAMETERS = '__paramaters__';\r\nconst PROP_METADATA = '__prop__metadata__';\r\n/**\r\n * @suppress {globalThis}\r\n * @param {?} name\r\n * @param {?=} props\r\n * @param {?=} parentClass\r\n * @param {?=} chainFn\r\n * @return {?}\r\n */\r\nfunction makeDecorator(name, props, parentClass, chainFn) {\r\n    const /** @type {?} */ metaCtor = makeMetadataCtor(props);\r\n    /**\r\n     * @param {?} objOrType\r\n     * @return {?}\r\n     */\r\n    function DecoratorFactory(objOrType) {\r\n        if (this instanceof DecoratorFactory) {\r\n            metaCtor.call(this, objOrType);\r\n            return this;\r\n        }\r\n        const /** @type {?} */ annotationInstance = new (/** @type {?} */ (DecoratorFactory))(objOrType);\r\n        const /** @type {?} */ TypeDecorator = /** @type {?} */ (function TypeDecorator(cls) {\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const /** @type {?} */ annotations = cls.hasOwnProperty(ANNOTATIONS) ?\r\n                (/** @type {?} */ (cls))[ANNOTATIONS] :\r\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\r\n            annotations.push(annotationInstance);\r\n            return cls;\r\n        });\r\n        if (chainFn)\r\n            chainFn(TypeDecorator);\r\n        return TypeDecorator;\r\n    }\r\n    if (parentClass) {\r\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    DecoratorFactory.prototype.ngMetadataName = name;\r\n    (/** @type {?} */ (DecoratorFactory)).annotationCls = DecoratorFactory;\r\n    return /** @type {?} */ (DecoratorFactory);\r\n}\r\n/**\r\n * @param {?=} props\r\n * @return {?}\r\n */\r\nfunction makeMetadataCtor(props) {\r\n    return function ctor(...args) {\r\n        if (props) {\r\n            const /** @type {?} */ values = props(...args);\r\n            for (const /** @type {?} */ propName in values) {\r\n                this[propName] = values[propName];\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * @param {?} name\r\n * @param {?=} props\r\n * @param {?=} parentClass\r\n * @return {?}\r\n */\r\nfunction makeParamDecorator(name, props, parentClass) {\r\n    const /** @type {?} */ metaCtor = makeMetadataCtor(props);\r\n    /**\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    function ParamDecoratorFactory(...args) {\r\n        if (this instanceof ParamDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        const /** @type {?} */ annotationInstance = new (/** @type {?} */ (ParamDecoratorFactory))(...args);\r\n        (/** @type {?} */ (ParamDecorator)).annotation = annotationInstance;\r\n        return ParamDecorator;\r\n        /**\r\n         * @param {?} cls\r\n         * @param {?} unusedKey\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        function ParamDecorator(cls, unusedKey, index) {\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const /** @type {?} */ parameters = cls.hasOwnProperty(PARAMETERS) ?\r\n                (/** @type {?} */ (cls))[PARAMETERS] :\r\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\r\n            // there might be gaps if some in between parameters do not have annotations.\r\n            // we pad with nulls.\r\n            while (parameters.length <= index) {\r\n                parameters.push(null);\r\n            }\r\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\r\n            return cls;\r\n        }\r\n    }\r\n    if (parentClass) {\r\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\r\n    (/** @type {?} */ (ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\r\n    return ParamDecoratorFactory;\r\n}\r\n/**\r\n * @param {?} name\r\n * @param {?=} props\r\n * @param {?=} parentClass\r\n * @return {?}\r\n */\r\nfunction makePropDecorator(name, props, parentClass) {\r\n    const /** @type {?} */ metaCtor = makeMetadataCtor(props);\r\n    /**\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    function PropDecoratorFactory(...args) {\r\n        if (this instanceof PropDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        const /** @type {?} */ decoratorInstance = new (/** @type {?} */ (PropDecoratorFactory))(...args);\r\n        return function PropDecorator(target, name) {\r\n            const /** @type {?} */ constructor = target.constructor;\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const /** @type {?} */ meta = constructor.hasOwnProperty(PROP_METADATA) ?\r\n                (/** @type {?} */ (constructor))[PROP_METADATA] :\r\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\r\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\r\n            meta[name].unshift(decoratorInstance);\r\n        };\r\n    }\r\n    if (parentClass) {\r\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    PropDecoratorFactory.prototype.ngMetadataName = name;\r\n    (/** @type {?} */ (PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\r\n    return PropDecoratorFactory;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * This token can be used to create a virtual provider that will populate the\r\n * `entryComponents` fields of components and ng modules based on its `useValue`.\r\n * All components that are referenced in the `useValue` value (either directly\r\n * or in a nested array or map) will be added to the `entryComponents` property.\r\n *\r\n * ### Example\r\n * The following example shows how the router can populate the `entryComponents`\r\n * field of an NgModule based on the router configuration which refers\r\n * to components.\r\n *\r\n * ```typescript\r\n * // helper function inside the router\r\n * function provideRoutes(routes) {\r\n *   return [\r\n *     {provide: ROUTES, useValue: routes},\r\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\r\n *   ];\r\n * }\r\n *\r\n * // user code\r\n * let routes = [\r\n *   {path: '/root', component: RootComp},\r\n *   {path: '/teams', component: TeamsComp}\r\n * ];\r\n *\r\n * \\@NgModule({\r\n *   providers: [provideRoutes(routes)]\r\n * })\r\n * class ModuleWithRoutes {}\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nconst ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\r\n/**\r\n * Type of the Attribute decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Attribute decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Attribute = makeParamDecorator('Attribute', (attributeName) => ({ attributeName }));\r\n/**\r\n * Base class for query metadata.\r\n *\r\n * See {\\@link ContentChildren}, {\\@link ContentChild}, {\\@link ViewChildren}, {\\@link ViewChild} for\r\n * more information.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass Query {\r\n}\r\n/**\r\n * Type of the ContentChildren decorator / constructor function.\r\n *\r\n * See {\\@link ContentChildren}.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * ContentChildren decorator and metadata.\r\n *\r\n *  \\@stable\r\n *  \\@Annotation\r\n */\r\nconst ContentChildren = makePropDecorator('ContentChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: false, descendants: false }, data)), Query);\r\n/**\r\n * Type of the ContentChild decorator / constructor function.\r\n *\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * ContentChild decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst ContentChild = makePropDecorator('ContentChild', (selector, data = {}) => (Object.assign({ selector, first: true, isViewQuery: false, descendants: true }, data)), Query);\r\n/**\r\n * Type of the ViewChildren decorator / constructor function.\r\n *\r\n * See {\\@link ViewChildren}.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * ViewChildren decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst ViewChildren = makePropDecorator('ViewChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: true, descendants: true }, data)), Query);\r\n/**\r\n * Type of the ViewChild decorator / constructor function.\r\n *\r\n * See {\\@link ViewChild}\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * ViewChild decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst ViewChild = makePropDecorator('ViewChild', (selector, data) => (Object.assign({ selector, first: true, isViewQuery: true, descendants: true }, data)), Query);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst ChangeDetectionStrategy = {\r\n    /**\r\n       * `OnPush` means that the change detector's mode will be initially set to `CheckOnce`.\r\n       */\r\n    OnPush: 0,\r\n    /**\r\n       * `Default` means that the change detector's mode will be initially set to `CheckAlways`.\r\n       */\r\n    Default: 1,\r\n};\r\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\r\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\r\n/** @enum {number} */\r\nconst ChangeDetectorStatus = {\r\n    /**\r\n       * `CheckOnce` means that after calling detectChanges the mode of the change detector\r\n       * will become `Checked`.\r\n       */\r\n    CheckOnce: 0,\r\n    /**\r\n       * `Checked` means that the change detector should be skipped until its mode changes to\r\n       * `CheckOnce`.\r\n       */\r\n    Checked: 1,\r\n    /**\r\n       * `CheckAlways` means that after calling detectChanges the mode of the change detector\r\n       * will remain `CheckAlways`.\r\n       */\r\n    CheckAlways: 2,\r\n    /**\r\n       * `Detached` means that the change detector sub tree is not a part of the main tree and\r\n       * should be skipped.\r\n       */\r\n    Detached: 3,\r\n    /**\r\n       * `Errored` means that the change detector encountered an error checking a binding\r\n       * or calling a directive lifecycle method and is now in an inconsistent state. Change\r\n       * detectors in this state will no longer detect changes.\r\n       */\r\n    Errored: 4,\r\n    /**\r\n       * `Destroyed` means that the change detector is destroyed.\r\n       */\r\n    Destroyed: 5,\r\n};\r\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\r\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\r\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\r\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\r\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\r\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\r\n/**\r\n * @param {?} changeDetectionStrategy\r\n * @return {?}\r\n */\r\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\r\n    return changeDetectionStrategy == null ||\r\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Type of the Directive decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Directive decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Directive = makeDecorator('Directive', (dir = {}) => dir);\r\n/**\r\n * Type of the Component decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Component decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Component = makeDecorator('Component', (c = {}) => (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c)), Directive);\r\n/**\r\n * Type of the Pipe decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Pipe decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Pipe = makeDecorator('Pipe', (p) => (Object.assign({ pure: true }, p)));\r\n/**\r\n * Type of the Input decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Input decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Input = makePropDecorator('Input', (bindingPropertyName) => ({ bindingPropertyName }));\r\n/**\r\n * Type of the Output decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Output decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Output = makePropDecorator('Output', (bindingPropertyName) => ({ bindingPropertyName }));\r\n/**\r\n * Type of the HostBinding decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * HostBinding decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst HostBinding = makePropDecorator('HostBinding', (hostPropertyName) => ({ hostPropertyName }));\r\n/**\r\n * Type of the HostListener decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * HostListener decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst HostListener = makePropDecorator('HostListener', (eventName, args) => ({ eventName, args }));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A wrapper around a module that also includes the providers.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Interface for schema definitions in \\@NgModules.\r\n *\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * Defines a schema that will allow:\r\n * - any non-Angular elements with a `-` in their name,\r\n * - any properties on elements with a `-` in their name which is the common rule for custom\r\n * elements.\r\n *\r\n * \\@stable\r\n */\r\nconst CUSTOM_ELEMENTS_SCHEMA = {\r\n    name: 'custom-elements'\r\n};\r\n/**\r\n * Defines a schema that will allow any property on any element.\r\n *\r\n * \\@experimental\r\n */\r\nconst NO_ERRORS_SCHEMA = {\r\n    name: 'no-errors-schema'\r\n};\r\n/**\r\n * Type of the NgModule decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * NgModule decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst NgModule = makeDecorator('NgModule', (ngModule) => ngModule);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst ViewEncapsulation = {\r\n    /**\r\n       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\r\n       * Element and pre-processing the style rules provided via {@link Component#styles styles} or\r\n       * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\r\n       * selectors.\r\n       *\r\n       * This is the default option.\r\n       */\r\n    Emulated: 0,\r\n    /**\r\n       * Use the native encapsulation mechanism of the renderer.\r\n       *\r\n       * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\r\n       * creating a ShadowRoot for Component's Host Element.\r\n       */\r\n    Native: 1,\r\n    /**\r\n       * Don't provide any template or style encapsulation.\r\n       */\r\n    None: 2,\r\n};\r\nViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\r\nViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\r\nViewEncapsulation[ViewEncapsulation.None] = \"None\";\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Represents the version of Angular\r\n *\r\n * \\@stable\r\n */\r\nclass Version {\r\n    /**\r\n     * @param {?} full\r\n     */\r\n    constructor(full) {\r\n        this.full = full;\r\n        this.major = full.split('.')[0];\r\n        this.minor = full.split('.')[1];\r\n        this.patch = full.split('.').slice(2).join('.');\r\n    }\r\n}\r\n/**\r\n * \\@stable\r\n */\r\nconst VERSION = new Version('5.1.3');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Type of the Inject decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Inject decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Inject = makeParamDecorator('Inject', (token) => ({ token }));\r\n/**\r\n * Type of the Optional decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Optional decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Optional = makeParamDecorator('Optional');\r\n/**\r\n * Type of the Injectable decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Injectable decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Injectable = makeDecorator('Injectable');\r\n/**\r\n * Type of the Self decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Self decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Self = makeParamDecorator('Self');\r\n/**\r\n * Type of the SkipSelf decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * SkipSelf decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst SkipSelf = makeParamDecorator('SkipSelf');\r\n/**\r\n * Type of the Host decorator / constructor function.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Host decorator and metadata.\r\n *\r\n * \\@stable\r\n * \\@Annotation\r\n */\r\nconst Host = makeParamDecorator('Host');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst __window = typeof window !== 'undefined' && window;\r\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\r\n    self instanceof WorkerGlobalScope && self;\r\nconst __global = typeof global !== 'undefined' && global;\r\nconst _global = __window || __global || __self;\r\nlet _symbolIterator = null;\r\n/**\r\n * @return {?}\r\n */\r\nfunction getSymbolIterator() {\r\n    if (!_symbolIterator) {\r\n        const /** @type {?} */ Symbol = _global['Symbol'];\r\n        if (Symbol && Symbol.iterator) {\r\n            _symbolIterator = Symbol.iterator;\r\n        }\r\n        else {\r\n            // es6-shim specific logic\r\n            const /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);\r\n            for (let /** @type {?} */ i = 0; i < keys.length; ++i) {\r\n                const /** @type {?} */ key = keys[i];\r\n                if (key !== 'entries' && key !== 'size' &&\r\n                    (/** @type {?} */ (Map)).prototype[key] === Map.prototype['entries']) {\r\n                    _symbolIterator = key;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return _symbolIterator;\r\n}\r\n/**\r\n * @param {?} fn\r\n * @return {?}\r\n */\r\nfunction scheduleMicroTask(fn) {\r\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction looseIdentical(a, b) {\r\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\r\n}\r\n/**\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction stringify(token) {\r\n    if (typeof token === 'string') {\r\n        return token;\r\n    }\r\n    if (token instanceof Array) {\r\n        return '[' + token.map(stringify).join(', ') + ']';\r\n    }\r\n    if (token == null) {\r\n        return '' + token;\r\n    }\r\n    if (token.overriddenName) {\r\n        return `${token.overriddenName}`;\r\n    }\r\n    if (token.name) {\r\n        return `${token.name}`;\r\n    }\r\n    const /** @type {?} */ res = token.toString();\r\n    if (res == null) {\r\n        return '' + res;\r\n    }\r\n    const /** @type {?} */ newLineIndex = res.indexOf('\\n');\r\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An interface that a function passed into {\\@link forwardRef} has to implement.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * Allows to refer to references which are not yet defined.\r\n *\r\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\r\n * DI is declared,\r\n * but not yet defined. It is also used when the `token` which we use when creating a query is not\r\n * yet defined.\r\n *\r\n * ### Example\r\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\r\n * \\@experimental\r\n * @param {?} forwardRefFn\r\n * @return {?}\r\n */\r\nfunction forwardRef(forwardRefFn) {\r\n    (/** @type {?} */ (forwardRefFn)).__forward_ref__ = forwardRef;\r\n    (/** @type {?} */ (forwardRefFn)).toString = function () { return stringify(this()); };\r\n    return (/** @type {?} */ (/** @type {?} */ (forwardRefFn)));\r\n}\r\n/**\r\n * Lazily retrieves the reference value from a forwardRef.\r\n *\r\n * Acts as the identity function when given a non-forward-ref value.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\r\n *\r\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\r\n *\r\n * See: {\\@link forwardRef}\r\n * \\@experimental\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction resolveForwardRef(type) {\r\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\r\n        type.__forward_ref__ === forwardRef) {\r\n        return (/** @type {?} */ (type))();\r\n    }\r\n    else {\r\n        return type;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _THROW_IF_NOT_FOUND = new Object();\r\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\r\nclass _NullInjector {\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    get(token, notFoundValue = _THROW_IF_NOT_FOUND) {\r\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\r\n            throw new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\r\n        }\r\n        return notFoundValue;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Injector interface\r\n * \\@howToUse\r\n * ```\r\n * const injector: Injector = ...;\r\n * injector.get(...);\r\n * ```\r\n *\r\n * \\@description\r\n * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\r\n *\r\n * `Injector` returns itself when given `Injector` as a token:\r\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass Injector {\r\n    /**\r\n     * Create a new Injector which is configure using `StaticProvider`s.\r\n     *\r\n     * ### Example\r\n     *\r\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\r\n     * @param {?} providers\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    static create(providers, parent) {\r\n        return new StaticInjector(providers, parent);\r\n    }\r\n}\r\nInjector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\r\nInjector.NULL = new _NullInjector();\r\nconst IDENT = function (value) {\r\n    return value;\r\n};\r\nconst EMPTY = /** @type {?} */ ([]);\r\nconst CIRCULAR = IDENT;\r\nconst MULTI_PROVIDER_FN = function () {\r\n    return Array.prototype.slice.call(arguments);\r\n};\r\nconst GET_PROPERTY_NAME = /** @type {?} */ ({});\r\nconst ɵ2 = GET_PROPERTY_NAME;\r\nconst USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ2 });\r\nconst NG_TOKEN_PATH = 'ngTokenPath';\r\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\r\nconst NULL_INJECTOR = Injector.NULL;\r\nconst NEW_LINE = /\\n/gm;\r\nconst NO_NEW_LINE = 'ɵ';\r\nclass StaticInjector {\r\n    /**\r\n     * @param {?} providers\r\n     * @param {?=} parent\r\n     */\r\n    constructor(providers, parent = NULL_INJECTOR) {\r\n        this.parent = parent;\r\n        const /** @type {?} */ records = this._records = new Map();\r\n        records.set(Injector, /** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\r\n        recursivelyProcessProviders(records, providers);\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    get(token, notFoundValue) {\r\n        const /** @type {?} */ record = this._records.get(token);\r\n        try {\r\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue);\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            const /** @type {?} */ tokenPath = e[NG_TEMP_TOKEN_PATH];\r\n            e.message = formatError('\\n' + e.message, tokenPath);\r\n            e[NG_TOKEN_PATH] = tokenPath;\r\n            e[NG_TEMP_TOKEN_PATH] = null;\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        const /** @type {?} */ tokens = /** @type {?} */ ([]), /** @type {?} */ records = this._records;\r\n        records.forEach((v, token) => tokens.push(stringify(token)));\r\n        return `StaticInjector[${tokens.join(', ')}]`;\r\n    }\r\n}\r\n/**\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction resolveProvider(provider) {\r\n    const /** @type {?} */ deps = computeDeps(provider);\r\n    let /** @type {?} */ fn = IDENT;\r\n    let /** @type {?} */ value = EMPTY;\r\n    let /** @type {?} */ useNew = false;\r\n    let /** @type {?} */ provide = resolveForwardRef(provider.provide);\r\n    if (USE_VALUE in provider) {\r\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\r\n        value = (/** @type {?} */ (provider)).useValue;\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useFactory) {\r\n        fn = (/** @type {?} */ (provider)).useFactory;\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useExisting) {\r\n        // Just use IDENT\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useClass) {\r\n        useNew = true;\r\n        fn = resolveForwardRef((/** @type {?} */ (provider)).useClass);\r\n    }\r\n    else if (typeof provide == 'function') {\r\n        useNew = true;\r\n        fn = provide;\r\n    }\r\n    else {\r\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\r\n    }\r\n    return { deps, fn, useNew, value };\r\n}\r\n/**\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction multiProviderMixError(token) {\r\n    return staticError('Cannot mix multi providers and regular providers', token);\r\n}\r\n/**\r\n * @param {?} records\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction recursivelyProcessProviders(records, provider) {\r\n    if (provider) {\r\n        provider = resolveForwardRef(provider);\r\n        if (provider instanceof Array) {\r\n            // if we have an array recurse into the array\r\n            for (let /** @type {?} */ i = 0; i < provider.length; i++) {\r\n                recursivelyProcessProviders(records, provider[i]);\r\n            }\r\n        }\r\n        else if (typeof provider === 'function') {\r\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\r\n            // error messages\r\n            throw staticError('Function/Class not supported', provider);\r\n        }\r\n        else if (provider && typeof provider === 'object' && provider.provide) {\r\n            // At this point we have what looks like a provider: {provide: ?, ....}\r\n            let /** @type {?} */ token = resolveForwardRef(provider.provide);\r\n            const /** @type {?} */ resolvedProvider = resolveProvider(provider);\r\n            if (provider.multi === true) {\r\n                // This is a multi provider.\r\n                let /** @type {?} */ multiProvider = records.get(token);\r\n                if (multiProvider) {\r\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\r\n                        throw multiProviderMixError(token);\r\n                    }\r\n                }\r\n                else {\r\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\r\n                    records.set(token, multiProvider = /** @type {?} */ ({\r\n                        token: provider.provide,\r\n                        deps: [],\r\n                        useNew: false,\r\n                        fn: MULTI_PROVIDER_FN,\r\n                        value: EMPTY\r\n                    }));\r\n                }\r\n                // Treat the provider as the token.\r\n                token = provider;\r\n                multiProvider.deps.push({ token, options: 6 /* Default */ });\r\n            }\r\n            const /** @type {?} */ record = records.get(token);\r\n            if (record && record.fn == MULTI_PROVIDER_FN) {\r\n                throw multiProviderMixError(token);\r\n            }\r\n            records.set(token, resolvedProvider);\r\n        }\r\n        else {\r\n            throw staticError('Unexpected provider', provider);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} token\r\n * @param {?} record\r\n * @param {?} records\r\n * @param {?} parent\r\n * @param {?} notFoundValue\r\n * @return {?}\r\n */\r\nfunction tryResolveToken(token, record, records, parent, notFoundValue) {\r\n    try {\r\n        return resolveToken(token, record, records, parent, notFoundValue);\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        // ensure that 'e' is of type Error.\r\n        if (!(e instanceof Error)) {\r\n            e = new Error(e);\r\n        }\r\n        const /** @type {?} */ path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\r\n        path.unshift(token);\r\n        if (record && record.value == CIRCULAR) {\r\n            // Reset the Circular flag.\r\n            record.value = EMPTY;\r\n        }\r\n        throw e;\r\n    }\r\n}\r\n/**\r\n * @param {?} token\r\n * @param {?} record\r\n * @param {?} records\r\n * @param {?} parent\r\n * @param {?} notFoundValue\r\n * @return {?}\r\n */\r\nfunction resolveToken(token, record, records, parent, notFoundValue) {\r\n    let /** @type {?} */ value;\r\n    if (record) {\r\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\r\n        // to resolve it.\r\n        value = record.value;\r\n        if (value == CIRCULAR) {\r\n            throw Error(NO_NEW_LINE + 'Circular dependency');\r\n        }\r\n        else if (value === EMPTY) {\r\n            record.value = CIRCULAR;\r\n            let /** @type {?} */ obj = undefined;\r\n            let /** @type {?} */ useNew = record.useNew;\r\n            let /** @type {?} */ fn = record.fn;\r\n            let /** @type {?} */ depRecords = record.deps;\r\n            let /** @type {?} */ deps = EMPTY;\r\n            if (depRecords.length) {\r\n                deps = [];\r\n                for (let /** @type {?} */ i = 0; i < depRecords.length; i++) {\r\n                    const /** @type {?} */ depRecord = depRecords[i];\r\n                    const /** @type {?} */ options = depRecord.options;\r\n                    const /** @type {?} */ childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\r\n                    deps.push(tryResolveToken(\r\n                    // Current Token to resolve\r\n                    depRecord.token, childRecord, records, \r\n                    // If we don't know how to resolve dependency and we should not check parent for it,\r\n                    // than pass in Null injector.\r\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND));\r\n                }\r\n            }\r\n            record.value = value = useNew ? new (/** @type {?} */ (fn))(...deps) : fn.apply(obj, deps);\r\n        }\r\n    }\r\n    else {\r\n        value = parent.get(token, notFoundValue);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction computeDeps(provider) {\r\n    let /** @type {?} */ deps = EMPTY;\r\n    const /** @type {?} */ providerDeps = (/** @type {?} */ (provider)).deps;\r\n    if (providerDeps && providerDeps.length) {\r\n        deps = [];\r\n        for (let /** @type {?} */ i = 0; i < providerDeps.length; i++) {\r\n            let /** @type {?} */ options = 6;\r\n            let /** @type {?} */ token = resolveForwardRef(providerDeps[i]);\r\n            if (token instanceof Array) {\r\n                for (let /** @type {?} */ j = 0, /** @type {?} */ annotations = token; j < annotations.length; j++) {\r\n                    const /** @type {?} */ annotation = annotations[j];\r\n                    if (annotation instanceof Optional || annotation == Optional) {\r\n                        options = options | 1 /* Optional */;\r\n                    }\r\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\r\n                        options = options & ~2 /* CheckSelf */;\r\n                    }\r\n                    else if (annotation instanceof Self || annotation == Self) {\r\n                        options = options & ~4 /* CheckParent */;\r\n                    }\r\n                    else if (annotation instanceof Inject) {\r\n                        token = (/** @type {?} */ (annotation)).token;\r\n                    }\r\n                    else {\r\n                        token = resolveForwardRef(annotation);\r\n                    }\r\n                }\r\n            }\r\n            deps.push({ token, options });\r\n        }\r\n    }\r\n    else if ((/** @type {?} */ (provider)).useExisting) {\r\n        const /** @type {?} */ token = resolveForwardRef((/** @type {?} */ (provider)).useExisting);\r\n        deps = [{ token, options: 6 /* Default */ }];\r\n    }\r\n    else if (!providerDeps && !(USE_VALUE in provider)) {\r\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\r\n        throw staticError('\\'deps\\' required', provider);\r\n    }\r\n    return deps;\r\n}\r\n/**\r\n * @param {?} text\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction formatError(text, obj) {\r\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\r\n    let /** @type {?} */ context = stringify(obj);\r\n    if (obj instanceof Array) {\r\n        context = obj.map(stringify).join(' -> ');\r\n    }\r\n    else if (typeof obj === 'object') {\r\n        let /** @type {?} */ parts = /** @type {?} */ ([]);\r\n        for (let /** @type {?} */ key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                let /** @type {?} */ value = obj[key];\r\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\r\n            }\r\n        }\r\n        context = `{${parts.join(', ')}}`;\r\n    }\r\n    return `StaticInjectorError[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\r\n}\r\n/**\r\n * @param {?} text\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction staticError(text, obj) {\r\n    return new Error(formatError(text, obj));\r\n}\r\n/**\r\n * @template T\r\n * @param {?} objWithPropertyToExtract\r\n * @return {?}\r\n */\r\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\r\n    for (let /** @type {?} */ key in objWithPropertyToExtract) {\r\n        if (objWithPropertyToExtract[key] === GET_PROPERTY_NAME) {\r\n            return key;\r\n        }\r\n    }\r\n    throw Error('!prop');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nconst ERROR_DEBUG_CONTEXT = 'ngDebugContext';\r\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\r\nconst ERROR_LOGGER = 'ngErrorLogger';\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction getDebugContext(error) {\r\n    return (/** @type {?} */ (error))[ERROR_DEBUG_CONTEXT];\r\n}\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction getOriginalError(error) {\r\n    return (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR];\r\n}\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction getErrorLogger(error) {\r\n    return (/** @type {?} */ (error))[ERROR_LOGGER] || defaultErrorLogger;\r\n}\r\n/**\r\n * @param {?} console\r\n * @param {...?} values\r\n * @return {?}\r\n */\r\nfunction defaultErrorLogger(console, ...values) {\r\n    (/** @type {?} */ (console.error))(...values);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Provides a hook for centralized exception handling.\r\n *\r\n * \\@description\r\n *\r\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\r\n * intercept error handling, write a custom exception handler that replaces this default as\r\n * appropriate for your app.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * class MyErrorHandler implements ErrorHandler {\r\n *   handleError(error) {\r\n *     // do something with the exception\r\n *   }\r\n * }\r\n *\r\n * \\@NgModule({\r\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\r\n * })\r\n * class MyModule {}\r\n * ```\r\n *\r\n * \\@stable\r\n */\r\nclass ErrorHandler {\r\n    constructor() {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._console = console;\r\n    }\r\n    /**\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    handleError(error) {\r\n        const /** @type {?} */ originalError = this._findOriginalError(error);\r\n        const /** @type {?} */ context = this._findContext(error);\r\n        // Note: Browser consoles show the place from where console.error was called.\r\n        // We can use this to give users additional information about the error.\r\n        const /** @type {?} */ errorLogger = getErrorLogger(error);\r\n        errorLogger(this._console, `ERROR`, error);\r\n        if (originalError) {\r\n            errorLogger(this._console, `ORIGINAL ERROR`, originalError);\r\n        }\r\n        if (context) {\r\n            errorLogger(this._console, 'ERROR CONTEXT', context);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    _findContext(error) {\r\n        if (error) {\r\n            return getDebugContext(error) ? getDebugContext(error) :\r\n                this._findContext(getOriginalError(error));\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    _findOriginalError(error) {\r\n        let /** @type {?} */ e = getOriginalError(error);\r\n        while (e && getOriginalError(e)) {\r\n            e = getOriginalError(e);\r\n        }\r\n        return e;\r\n    }\r\n}\r\n/**\r\n * @param {?} message\r\n * @param {?} originalError\r\n * @return {?}\r\n */\r\nfunction wrappedError(message, originalError) {\r\n    const /** @type {?} */ msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\r\n    const /** @type {?} */ error = Error(msg);\r\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\r\n    return error;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} keys\r\n * @return {?}\r\n */\r\nfunction findFirstClosedCycle(keys) {\r\n    const /** @type {?} */ res = [];\r\n    for (let /** @type {?} */ i = 0; i < keys.length; ++i) {\r\n        if (res.indexOf(keys[i]) > -1) {\r\n            res.push(keys[i]);\r\n            return res;\r\n        }\r\n        res.push(keys[i]);\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * @param {?} keys\r\n * @return {?}\r\n */\r\nfunction constructResolvingPath(keys) {\r\n    if (keys.length > 1) {\r\n        const /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\r\n        const /** @type {?} */ tokenStrs = reversed.map(k => stringify(k.token));\r\n        return ' (' + tokenStrs.join(' -> ') + ')';\r\n    }\r\n    return '';\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} injector\r\n * @param {?} key\r\n * @param {?} constructResolvingMessage\r\n * @param {?=} originalError\r\n * @return {?}\r\n */\r\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\r\n    const /** @type {?} */ keys = [key];\r\n    const /** @type {?} */ errMsg = constructResolvingMessage(keys);\r\n    const /** @type {?} */ error = /** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));\r\n    error.addKey = addKey;\r\n    error.keys = keys;\r\n    error.injectors = [injector];\r\n    error.constructResolvingMessage = constructResolvingMessage;\r\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\r\n    return error;\r\n}\r\n/**\r\n * @this {?}\r\n * @param {?} injector\r\n * @param {?} key\r\n * @return {?}\r\n */\r\nfunction addKey(injector, key) {\r\n    this.injectors.push(injector);\r\n    this.keys.push(key);\r\n    // Note: This updated message won't be reflected in the `.stack` property\r\n    this.message = this.constructResolvingMessage(this.keys);\r\n}\r\n/**\r\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\r\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\r\n *\r\n * ```typescript\r\n * class A {\r\n *   constructor(b:B) {}\r\n * }\r\n *\r\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\r\n * ```\r\n * @param {?} injector\r\n * @param {?} key\r\n * @return {?}\r\n */\r\nfunction noProviderError(injector, key) {\r\n    return injectionError(injector, key, function (keys) {\r\n        const /** @type {?} */ first = stringify(keys[0].token);\r\n        return `No provider for ${first}!${constructResolvingPath(keys)}`;\r\n    });\r\n}\r\n/**\r\n * Thrown when dependencies form a cycle.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\r\n *\r\n * ```typescript\r\n * var injector = Injector.resolveAndCreate([\r\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\r\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\r\n * ]);\r\n *\r\n * expect(() => injector.get(\"one\")).toThrowError();\r\n * ```\r\n *\r\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\r\n * @param {?} injector\r\n * @param {?} key\r\n * @return {?}\r\n */\r\nfunction cyclicDependencyError(injector, key) {\r\n    return injectionError(injector, key, function (keys) {\r\n        return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\r\n    });\r\n}\r\n/**\r\n * Thrown when a constructing type returns with an Error.\r\n *\r\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\r\n * this object to be instantiated.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\r\n *\r\n * ```typescript\r\n * class A {\r\n *   constructor() {\r\n *     throw new Error('message');\r\n *   }\r\n * }\r\n *\r\n * var injector = Injector.resolveAndCreate([A]);\r\n * try {\r\n *   injector.get(A);\r\n * } catch (e) {\r\n *   expect(e instanceof InstantiationError).toBe(true);\r\n *   expect(e.originalException.message).toEqual(\"message\");\r\n *   expect(e.originalStack).toBeDefined();\r\n * }\r\n * ```\r\n * @param {?} injector\r\n * @param {?} originalException\r\n * @param {?} originalStack\r\n * @param {?} key\r\n * @return {?}\r\n */\r\nfunction instantiationError(injector, originalException, originalStack, key) {\r\n    return injectionError(injector, key, function (keys) {\r\n        const /** @type {?} */ first = stringify(keys[0].token);\r\n        return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\r\n    }, originalException);\r\n}\r\n/**\r\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\r\n * creation.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\r\n *\r\n * ```typescript\r\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\r\n * ```\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction invalidProviderError(provider) {\r\n    return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\r\n}\r\n/**\r\n * Thrown when the class has no annotation information.\r\n *\r\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\r\n * need to be injected into the constructor.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\r\n *\r\n * ```typescript\r\n * class A {\r\n *   constructor(b) {}\r\n * }\r\n *\r\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\r\n * ```\r\n *\r\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\r\n *\r\n * ```typescript\r\n * class B {}\r\n *\r\n * class A {\r\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\r\n * }\r\n *\r\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\r\n * ```\r\n * \\@stable\r\n * @param {?} typeOrFunc\r\n * @param {?} params\r\n * @return {?}\r\n */\r\nfunction noAnnotationError(typeOrFunc, params) {\r\n    const /** @type {?} */ signature = [];\r\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\r\n        const /** @type {?} */ parameter = params[i];\r\n        if (!parameter || parameter.length == 0) {\r\n            signature.push('?');\r\n        }\r\n        else {\r\n            signature.push(parameter.map(stringify).join(' '));\r\n        }\r\n    }\r\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\r\n        signature.join(', ') + '). ' +\r\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\r\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\r\n}\r\n/**\r\n * Thrown when getting an object by index.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\r\n *\r\n * ```typescript\r\n * class A {}\r\n *\r\n * var injector = Injector.resolveAndCreate([A]);\r\n *\r\n * expect(() => injector.getAt(100)).toThrowError();\r\n * ```\r\n * \\@stable\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction outOfBoundsError(index) {\r\n    return Error(`Index ${index} is out-of-bounds.`);\r\n}\r\n/**\r\n * Thrown when a multi provider and a regular provider are bound to the same token.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * expect(() => Injector.resolveAndCreate([\r\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\r\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\r\n * ])).toThrowError();\r\n * ```\r\n * @param {?} provider1\r\n * @param {?} provider2\r\n * @return {?}\r\n */\r\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\r\n    return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\r\n *\r\n * Keys have:\r\n * - a system-wide unique `id`.\r\n * - a `token`.\r\n *\r\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\r\n * the\r\n * injector to store created objects in a more efficient way.\r\n *\r\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\r\n * resolving\r\n * providers.\r\n * @deprecated No replacement\r\n */\r\nclass ReflectiveKey {\r\n    /**\r\n     * Private\r\n     * @param {?} token\r\n     * @param {?} id\r\n     */\r\n    constructor(token, id) {\r\n        this.token = token;\r\n        this.id = id;\r\n        if (!token) {\r\n            throw new Error('Token must be defined!');\r\n        }\r\n        this.displayName = stringify(this.token);\r\n    }\r\n    /**\r\n     * Retrieves a `Key` for a token.\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    static get(token) {\r\n        return _globalKeyRegistry.get(resolveForwardRef(token));\r\n    }\r\n    /**\r\n     * @return {?} the number of keys registered in the system.\r\n     */\r\n    static get numberOfKeys() { return _globalKeyRegistry.numberOfKeys; }\r\n}\r\nclass KeyRegistry {\r\n    constructor() {\r\n        this._allKeys = new Map();\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @return {?}\r\n     */\r\n    get(token) {\r\n        if (token instanceof ReflectiveKey)\r\n            return token;\r\n        if (this._allKeys.has(token)) {\r\n            return /** @type {?} */ ((this._allKeys.get(token)));\r\n        }\r\n        const /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\r\n        this._allKeys.set(token, newKey);\r\n        return newKey;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get numberOfKeys() { return this._allKeys.size; }\r\n}\r\nconst _globalKeyRegistry = new KeyRegistry();\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Represents a type that a Component or other object is instances of.\r\n *\r\n * \\@description\r\n *\r\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\r\n * the `MyCustomComponent` constructor function.\r\n *\r\n * \\@stable\r\n */\r\nconst Type = Function;\r\n/**\r\n * @param {?} v\r\n * @return {?}\r\n */\r\nfunction isType(v) {\r\n    return typeof v === 'function';\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Attention: This regex has to hold even if the code is minified!\r\n */\r\nconst DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\r\nclass ReflectionCapabilities {\r\n    /**\r\n     * @param {?=} reflect\r\n     */\r\n    constructor(reflect) { this._reflect = reflect || _global['Reflect']; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isReflectionEnabled() { return true; }\r\n    /**\r\n     * @template T\r\n     * @param {?} t\r\n     * @return {?}\r\n     */\r\n    factory(t) { return (...args) => new t(...args); }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} paramTypes\r\n     * @param {?} paramAnnotations\r\n     * @return {?}\r\n     */\r\n    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\r\n        let /** @type {?} */ result;\r\n        if (typeof paramTypes === 'undefined') {\r\n            result = new Array(paramAnnotations.length);\r\n        }\r\n        else {\r\n            result = new Array(paramTypes.length);\r\n        }\r\n        for (let /** @type {?} */ i = 0; i < result.length; i++) {\r\n            // TS outputs Object for parameters without types, while Traceur omits\r\n            // the annotations. For now we preserve the Traceur behavior to aid\r\n            // migration, but this can be revisited.\r\n            if (typeof paramTypes === 'undefined') {\r\n                result[i] = [];\r\n            }\r\n            else if (paramTypes[i] != Object) {\r\n                result[i] = [paramTypes[i]];\r\n            }\r\n            else {\r\n                result[i] = [];\r\n            }\r\n            if (paramAnnotations && paramAnnotations[i] != null) {\r\n                result[i] = result[i].concat(paramAnnotations[i]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} parentCtor\r\n     * @return {?}\r\n     */\r\n    _ownParameters(type, parentCtor) {\r\n        // If we have no decorators, we only have function.length as metadata.\r\n        // In that case, to detect whether a child class declared an own constructor or not,\r\n        // we need to look inside of that constructor to check whether it is\r\n        // just calling the parent.\r\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\r\n        // that sets 'design:paramtypes' to []\r\n        // if a class inherits from another class but has no ctor declared itself.\r\n        if (DELEGATE_CTOR.exec(type.toString())) {\r\n            return null;\r\n        }\r\n        // Prefer the direct API.\r\n        if ((/** @type {?} */ (type)).parameters && (/** @type {?} */ (type)).parameters !== parentCtor.parameters) {\r\n            return (/** @type {?} */ (type)).parameters;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        const /** @type {?} */ tsickleCtorParams = (/** @type {?} */ (type)).ctorParameters;\r\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\r\n            // Newer tsickle uses a function closure\r\n            // Retain the non-function case for compatibility with older tsickle\r\n            const /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\r\n            const /** @type {?} */ paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);\r\n            const /** @type {?} */ paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\r\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        const /** @type {?} */ paramAnnotations = type.hasOwnProperty(PARAMETERS) && (/** @type {?} */ (type))[PARAMETERS];\r\n        const /** @type {?} */ paramTypes = this._reflect && this._reflect.getOwnMetadata &&\r\n            this._reflect.getOwnMetadata('design:paramtypes', type);\r\n        if (paramTypes || paramAnnotations) {\r\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\r\n        }\r\n        // If a class has no decorators, at least create metadata\r\n        // based on function.length.\r\n        // Note: We know that this is a real constructor as we checked\r\n        // the content of the constructor above.\r\n        return new Array((/** @type {?} */ (type.length))).fill(undefined);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    parameters(type) {\r\n        // Note: only report metadata if we have at least one class decorator\r\n        // to stay in sync with the static reflector.\r\n        if (!isType(type)) {\r\n            return [];\r\n        }\r\n        const /** @type {?} */ parentCtor = getParentCtor(type);\r\n        let /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\r\n        if (!parameters && parentCtor !== Object) {\r\n            parameters = this.parameters(parentCtor);\r\n        }\r\n        return parameters || [];\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @param {?} parentCtor\r\n     * @return {?}\r\n     */\r\n    _ownAnnotations(typeOrFunc, parentCtor) {\r\n        // Prefer the direct API.\r\n        if ((/** @type {?} */ (typeOrFunc)).annotations && (/** @type {?} */ (typeOrFunc)).annotations !== parentCtor.annotations) {\r\n            let /** @type {?} */ annotations = (/** @type {?} */ (typeOrFunc)).annotations;\r\n            if (typeof annotations === 'function' && annotations.annotations) {\r\n                annotations = annotations.annotations;\r\n            }\r\n            return annotations;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        if ((/** @type {?} */ (typeOrFunc)).decorators && (/** @type {?} */ (typeOrFunc)).decorators !== parentCtor.decorators) {\r\n            return convertTsickleDecoratorIntoMetadata((/** @type {?} */ (typeOrFunc)).decorators);\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\r\n            return (/** @type {?} */ (typeOrFunc))[ANNOTATIONS];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    annotations(typeOrFunc) {\r\n        if (!isType(typeOrFunc)) {\r\n            return [];\r\n        }\r\n        const /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\r\n        const /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\r\n        const /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\r\n        return parentAnnotations.concat(ownAnnotations);\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @param {?} parentCtor\r\n     * @return {?}\r\n     */\r\n    _ownPropMetadata(typeOrFunc, parentCtor) {\r\n        // Prefer the direct API.\r\n        if ((/** @type {?} */ (typeOrFunc)).propMetadata &&\r\n            (/** @type {?} */ (typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\r\n            let /** @type {?} */ propMetadata = (/** @type {?} */ (typeOrFunc)).propMetadata;\r\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\r\n                propMetadata = propMetadata.propMetadata;\r\n            }\r\n            return propMetadata;\r\n        }\r\n        // API of tsickle for lowering decorators to properties on the class.\r\n        if ((/** @type {?} */ (typeOrFunc)).propDecorators &&\r\n            (/** @type {?} */ (typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\r\n            const /** @type {?} */ propDecorators = (/** @type {?} */ (typeOrFunc)).propDecorators;\r\n            const /** @type {?} */ propMetadata = /** @type {?} */ ({});\r\n            Object.keys(propDecorators).forEach(prop => {\r\n                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\r\n            });\r\n            return propMetadata;\r\n        }\r\n        // API for metadata created by invoking the decorators.\r\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\r\n            return (/** @type {?} */ (typeOrFunc))[PROP_METADATA];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    propMetadata(typeOrFunc) {\r\n        if (!isType(typeOrFunc)) {\r\n            return {};\r\n        }\r\n        const /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\r\n        const /** @type {?} */ propMetadata = {};\r\n        if (parentCtor !== Object) {\r\n            const /** @type {?} */ parentPropMetadata = this.propMetadata(parentCtor);\r\n            Object.keys(parentPropMetadata).forEach((propName) => {\r\n                propMetadata[propName] = parentPropMetadata[propName];\r\n            });\r\n        }\r\n        const /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\r\n        if (ownPropMetadata) {\r\n            Object.keys(ownPropMetadata).forEach((propName) => {\r\n                const /** @type {?} */ decorators = [];\r\n                if (propMetadata.hasOwnProperty(propName)) {\r\n                    decorators.push(...propMetadata[propName]);\r\n                }\r\n                decorators.push(...ownPropMetadata[propName]);\r\n                propMetadata[propName] = decorators;\r\n            });\r\n        }\r\n        return propMetadata;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} lcProperty\r\n     * @return {?}\r\n     */\r\n    hasLifecycleHook(type, lcProperty) {\r\n        return type instanceof Type && lcProperty in type.prototype;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getter(name) { return /** @type {?} */ (new Function('o', 'return o.' + name + ';')); }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    setter(name) {\r\n        return /** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;'));\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    method(name) {\r\n        const /** @type {?} */ functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\r\n        return o.${name}.apply(o, args);`;\r\n        return /** @type {?} */ (new Function('o', 'args', functionBody));\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    importUri(type) {\r\n        // StaticSymbol\r\n        if (typeof type === 'object' && type['filePath']) {\r\n            return type['filePath'];\r\n        }\r\n        // Runtime type\r\n        return `./${stringify(type)}`;\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    resourceUri(type) { return `./${stringify(type)}`; }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} moduleUrl\r\n     * @param {?} members\r\n     * @param {?} runtime\r\n     * @return {?}\r\n     */\r\n    resolveIdentifier(name, moduleUrl, members, runtime) {\r\n        return runtime;\r\n    }\r\n    /**\r\n     * @param {?} enumIdentifier\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    resolveEnum(enumIdentifier, name) { return enumIdentifier[name]; }\r\n}\r\n/**\r\n * @param {?} decoratorInvocations\r\n * @return {?}\r\n */\r\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\r\n    if (!decoratorInvocations) {\r\n        return [];\r\n    }\r\n    return decoratorInvocations.map(decoratorInvocation => {\r\n        const /** @type {?} */ decoratorType = decoratorInvocation.type;\r\n        const /** @type {?} */ annotationCls = decoratorType.annotationCls;\r\n        const /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\r\n        return new annotationCls(...annotationArgs);\r\n    });\r\n}\r\n/**\r\n * @param {?} ctor\r\n * @return {?}\r\n */\r\nfunction getParentCtor(ctor) {\r\n    const /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);\r\n    const /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\r\n    // Note: We always use `Object` as the null value\r\n    // to simplify checking later on.\r\n    return parentCtor || Object;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides access to reflection data about symbols. Used internally by Angular\r\n * to power dependency injection and compilation.\r\n */\r\nclass Reflector {\r\n    /**\r\n     * @param {?} reflectionCapabilities\r\n     */\r\n    constructor(reflectionCapabilities) {\r\n        this.reflectionCapabilities = reflectionCapabilities;\r\n    }\r\n    /**\r\n     * @param {?} caps\r\n     * @return {?}\r\n     */\r\n    updateCapabilities(caps) { this.reflectionCapabilities = caps; }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    factory(type) { return this.reflectionCapabilities.factory(type); }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    parameters(typeOrFunc) {\r\n        return this.reflectionCapabilities.parameters(typeOrFunc);\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    annotations(typeOrFunc) {\r\n        return this.reflectionCapabilities.annotations(typeOrFunc);\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    propMetadata(typeOrFunc) {\r\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} lcProperty\r\n     * @return {?}\r\n     */\r\n    hasLifecycleHook(type, lcProperty) {\r\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getter(name) { return this.reflectionCapabilities.getter(name); }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    setter(name) { return this.reflectionCapabilities.setter(name); }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    method(name) { return this.reflectionCapabilities.method(name); }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    importUri(type) { return this.reflectionCapabilities.importUri(type); }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    resourceUri(type) { return this.reflectionCapabilities.resourceUri(type); }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} moduleUrl\r\n     * @param {?} members\r\n     * @param {?} runtime\r\n     * @return {?}\r\n     */\r\n    resolveIdentifier(name, moduleUrl, members, runtime) {\r\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\r\n    }\r\n    /**\r\n     * @param {?} identifier\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    resolveEnum(identifier, name) {\r\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The {\\@link Reflector} used internally in Angular to access metadata\r\n * about symbols.\r\n */\r\nconst reflector = new Reflector(new ReflectionCapabilities());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `Dependency` is used by the framework to extend DI.\r\n * This is internal to Angular and should not be used directly.\r\n */\r\nclass ReflectiveDependency {\r\n    /**\r\n     * @param {?} key\r\n     * @param {?} optional\r\n     * @param {?} visibility\r\n     */\r\n    constructor(key, optional, visibility) {\r\n        this.key = key;\r\n        this.optional = optional;\r\n        this.visibility = visibility;\r\n    }\r\n    /**\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    static fromKey(key) {\r\n        return new ReflectiveDependency(key, false, null);\r\n    }\r\n}\r\nconst _EMPTY_LIST = [];\r\n/**\r\n * An internal resolved representation of a {\\@link Provider} used by the {\\@link Injector}.\r\n *\r\n * It is usually created automatically by `Injector.resolveAndCreate`.\r\n *\r\n * It can be created manually, as follows:\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&p=preview))\r\n *\r\n * ```typescript\r\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\r\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\r\n *\r\n * expect(injector.get('message')).toEqual('Hello');\r\n * ```\r\n *\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\nclass ResolvedReflectiveProvider_ {\r\n    /**\r\n     * @param {?} key\r\n     * @param {?} resolvedFactories\r\n     * @param {?} multiProvider\r\n     */\r\n    constructor(key, resolvedFactories, multiProvider) {\r\n        this.key = key;\r\n        this.resolvedFactories = resolvedFactories;\r\n        this.multiProvider = multiProvider;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get resolvedFactory() { return this.resolvedFactories[0]; }\r\n}\r\n/**\r\n * An internal resolved representation of a factory function created by resolving {\\@link\r\n * Provider}.\r\n * \\@experimental\r\n */\r\nclass ResolvedReflectiveFactory {\r\n    /**\r\n     * @param {?} factory\r\n     * @param {?} dependencies\r\n     */\r\n    constructor(factory, dependencies) {\r\n        this.factory = factory;\r\n        this.dependencies = dependencies;\r\n    }\r\n}\r\n/**\r\n * Resolve a single provider.\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction resolveReflectiveFactory(provider) {\r\n    let /** @type {?} */ factoryFn;\r\n    let /** @type {?} */ resolvedDeps;\r\n    if (provider.useClass) {\r\n        const /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\r\n        factoryFn = reflector.factory(useClass);\r\n        resolvedDeps = _dependenciesFor(useClass);\r\n    }\r\n    else if (provider.useExisting) {\r\n        factoryFn = (aliasInstance) => aliasInstance;\r\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\r\n    }\r\n    else if (provider.useFactory) {\r\n        factoryFn = provider.useFactory;\r\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\r\n    }\r\n    else {\r\n        factoryFn = () => provider.useValue;\r\n        resolvedDeps = _EMPTY_LIST;\r\n    }\r\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\r\n}\r\n/**\r\n * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\r\n *\r\n * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\r\n * convenience provider syntax.\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction resolveReflectiveProvider(provider) {\r\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\r\n}\r\n/**\r\n * Resolve a list of Providers.\r\n * @param {?} providers\r\n * @return {?}\r\n */\r\nfunction resolveReflectiveProviders(providers) {\r\n    const /** @type {?} */ normalized = _normalizeProviders(providers, []);\r\n    const /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\r\n    const /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\r\n    return Array.from(resolvedProviderMap.values());\r\n}\r\n/**\r\n * Merges a list of ResolvedProviders into a list where\r\n * each key is contained exactly once and multi providers\r\n * have been merged.\r\n * @param {?} providers\r\n * @param {?} normalizedProvidersMap\r\n * @return {?}\r\n */\r\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\r\n    for (let /** @type {?} */ i = 0; i < providers.length; i++) {\r\n        const /** @type {?} */ provider = providers[i];\r\n        const /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\r\n        if (existing) {\r\n            if (provider.multiProvider !== existing.multiProvider) {\r\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\r\n            }\r\n            if (provider.multiProvider) {\r\n                for (let /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\r\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\r\n                }\r\n            }\r\n            else {\r\n                normalizedProvidersMap.set(provider.key.id, provider);\r\n            }\r\n        }\r\n        else {\r\n            let /** @type {?} */ resolvedProvider;\r\n            if (provider.multiProvider) {\r\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\r\n            }\r\n            else {\r\n                resolvedProvider = provider;\r\n            }\r\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\r\n        }\r\n    }\r\n    return normalizedProvidersMap;\r\n}\r\n/**\r\n * @param {?} providers\r\n * @param {?} res\r\n * @return {?}\r\n */\r\nfunction _normalizeProviders(providers, res) {\r\n    providers.forEach(b => {\r\n        if (b instanceof Type) {\r\n            res.push({ provide: b, useClass: b });\r\n        }\r\n        else if (b && typeof b == 'object' && (/** @type {?} */ (b)).provide !== undefined) {\r\n            res.push(/** @type {?} */ (b));\r\n        }\r\n        else if (b instanceof Array) {\r\n            _normalizeProviders(b, res);\r\n        }\r\n        else {\r\n            throw invalidProviderError(b);\r\n        }\r\n    });\r\n    return res;\r\n}\r\n/**\r\n * @param {?} typeOrFunc\r\n * @param {?=} dependencies\r\n * @return {?}\r\n */\r\nfunction constructDependencies(typeOrFunc, dependencies) {\r\n    if (!dependencies) {\r\n        return _dependenciesFor(typeOrFunc);\r\n    }\r\n    else {\r\n        const /** @type {?} */ params = dependencies.map(t => [t]);\r\n        return dependencies.map(t => _extractToken(typeOrFunc, t, params));\r\n    }\r\n}\r\n/**\r\n * @param {?} typeOrFunc\r\n * @return {?}\r\n */\r\nfunction _dependenciesFor(typeOrFunc) {\r\n    const /** @type {?} */ params = reflector.parameters(typeOrFunc);\r\n    if (!params)\r\n        return [];\r\n    if (params.some(p => p == null)) {\r\n        throw noAnnotationError(typeOrFunc, params);\r\n    }\r\n    return params.map(p => _extractToken(typeOrFunc, p, params));\r\n}\r\n/**\r\n * @param {?} typeOrFunc\r\n * @param {?} metadata\r\n * @param {?} params\r\n * @return {?}\r\n */\r\nfunction _extractToken(typeOrFunc, metadata, params) {\r\n    let /** @type {?} */ token = null;\r\n    let /** @type {?} */ optional = false;\r\n    if (!Array.isArray(metadata)) {\r\n        if (metadata instanceof Inject) {\r\n            return _createDependency(metadata.token, optional, null);\r\n        }\r\n        else {\r\n            return _createDependency(metadata, optional, null);\r\n        }\r\n    }\r\n    let /** @type {?} */ visibility = null;\r\n    for (let /** @type {?} */ i = 0; i < metadata.length; ++i) {\r\n        const /** @type {?} */ paramMetadata = metadata[i];\r\n        if (paramMetadata instanceof Type) {\r\n            token = paramMetadata;\r\n        }\r\n        else if (paramMetadata instanceof Inject) {\r\n            token = paramMetadata.token;\r\n        }\r\n        else if (paramMetadata instanceof Optional) {\r\n            optional = true;\r\n        }\r\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\r\n            visibility = paramMetadata;\r\n        }\r\n        else if (paramMetadata instanceof InjectionToken) {\r\n            token = paramMetadata;\r\n        }\r\n    }\r\n    token = resolveForwardRef(token);\r\n    if (token != null) {\r\n        return _createDependency(token, optional, visibility);\r\n    }\r\n    else {\r\n        throw noAnnotationError(typeOrFunc, params);\r\n    }\r\n}\r\n/**\r\n * @param {?} token\r\n * @param {?} optional\r\n * @param {?} visibility\r\n * @return {?}\r\n */\r\nfunction _createDependency(token, optional, visibility) {\r\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Threshold for the dynamic version\r\nconst UNDEFINED = new Object();\r\n/**\r\n * A ReflectiveDependency injection container used for instantiating objects and resolving\r\n * dependencies.\r\n *\r\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\r\n * constructor dependencies.\r\n *\r\n * In typical use, application code asks for the dependencies in the constructor and they are\r\n * resolved by the `Injector`.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\r\n *\r\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\r\n *\r\n * ```typescript\r\n * \\@Injectable()\r\n * class Engine {\r\n * }\r\n *\r\n * \\@Injectable()\r\n * class Car {\r\n *   constructor(public engine:Engine) {}\r\n * }\r\n *\r\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\r\n * var car = injector.get(Car);\r\n * expect(car instanceof Car).toBe(true);\r\n * expect(car.engine instanceof Engine).toBe(true);\r\n * ```\r\n *\r\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\r\n * resolve all of the object's dependencies automatically.\r\n *\r\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\r\n * @abstract\r\n */\r\nclass ReflectiveInjector {\r\n    /**\r\n     * Turns an array of provider definitions into an array of resolved providers.\r\n     *\r\n     * A resolution is a process of flattening multiple nested arrays and converting individual\r\n     * providers into an array of {\\@link ResolvedReflectiveProvider}s.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\r\n     *\r\n     * ```typescript\r\n     * \\@Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * \\@Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\r\n     *\r\n     * expect(providers.length).toEqual(2);\r\n     *\r\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\r\n     * expect(providers[0].key.displayName).toBe(\"Car\");\r\n     * expect(providers[0].dependencies.length).toEqual(1);\r\n     * expect(providers[0].factory).toBeDefined();\r\n     *\r\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\r\n     * });\r\n     * ```\r\n     *\r\n     * See {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders} for more info.\r\n     * @param {?} providers\r\n     * @return {?}\r\n     */\r\n    static resolve(providers) {\r\n        return resolveReflectiveProviders(providers);\r\n    }\r\n    /**\r\n     * Resolves an array of providers and creates an injector from those providers.\r\n     *\r\n     * The passed-in providers can be an array of `Type`, {\\@link Provider},\r\n     * or a recursive array of more providers.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\r\n     *\r\n     * ```typescript\r\n     * \\@Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * \\@Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\r\n     * expect(injector.get(Car) instanceof Car).toBe(true);\r\n     * ```\r\n     *\r\n     * This function is slower than the corresponding `fromResolvedProviders`\r\n     * because it needs to resolve the passed-in providers first.\r\n     * See {\\@link ReflectiveInjector#resolve resolve} and\r\n     * {\\@link ReflectiveInjector#fromResolvedProviders fromResolvedProviders}.\r\n     * @param {?} providers\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    static resolveAndCreate(providers, parent) {\r\n        const /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\r\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\r\n    }\r\n    /**\r\n     * Creates an injector from previously resolved providers.\r\n     *\r\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\r\n     *\r\n     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\r\n     *\r\n     * ```typescript\r\n     * \\@Injectable()\r\n     * class Engine {\r\n     * }\r\n     *\r\n     * \\@Injectable()\r\n     * class Car {\r\n     *   constructor(public engine:Engine) {}\r\n     * }\r\n     *\r\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\r\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\r\n     * expect(injector.get(Car) instanceof Car).toBe(true);\r\n     * ```\r\n     * \\@experimental\r\n     * @param {?} providers\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    static fromResolvedProviders(providers, parent) {\r\n        return new ReflectiveInjector_(providers, parent);\r\n    }\r\n}\r\nclass ReflectiveInjector_ {\r\n    /**\r\n     * Private\r\n     * @param {?} _providers\r\n     * @param {?=} _parent\r\n     */\r\n    constructor(_providers, _parent) {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._constructionCounter = 0;\r\n        this._providers = _providers;\r\n        this.parent = _parent || null;\r\n        const /** @type {?} */ len = _providers.length;\r\n        this.keyIds = new Array(len);\r\n        this.objs = new Array(len);\r\n        for (let /** @type {?} */ i = 0; i < len; i++) {\r\n            this.keyIds[i] = _providers[i].key.id;\r\n            this.objs[i] = UNDEFINED;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\r\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\r\n    }\r\n    /**\r\n     * @param {?} providers\r\n     * @return {?}\r\n     */\r\n    resolveAndCreateChild(providers) {\r\n        const /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\r\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\r\n    }\r\n    /**\r\n     * @param {?} providers\r\n     * @return {?}\r\n     */\r\n    createChildFromResolved(providers) {\r\n        const /** @type {?} */ inj = new ReflectiveInjector_(providers);\r\n        (/** @type {?} */ (inj)).parent = this;\r\n        return inj;\r\n    }\r\n    /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    resolveAndInstantiate(provider) {\r\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\r\n    }\r\n    /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    instantiateResolved(provider) {\r\n        return this._instantiateProvider(provider);\r\n    }\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    getProviderAtIndex(index) {\r\n        if (index < 0 || index >= this._providers.length) {\r\n            throw outOfBoundsError(index);\r\n        }\r\n        return this._providers[index];\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    _new(provider) {\r\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\r\n            throw cyclicDependencyError(this, provider.key);\r\n        }\r\n        return this._instantiateProvider(provider);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _getMaxNumberOfObjects() { return this.objs.length; }\r\n    /**\r\n     * @param {?} provider\r\n     * @return {?}\r\n     */\r\n    _instantiateProvider(provider) {\r\n        if (provider.multiProvider) {\r\n            const /** @type {?} */ res = new Array(provider.resolvedFactories.length);\r\n            for (let /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\r\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\r\n            }\r\n            return res;\r\n        }\r\n        else {\r\n            return this._instantiate(provider, provider.resolvedFactories[0]);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} provider\r\n     * @param {?} ResolvedReflectiveFactory\r\n     * @return {?}\r\n     */\r\n    _instantiate(provider, ResolvedReflectiveFactory$$1) {\r\n        const /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;\r\n        let /** @type {?} */ deps;\r\n        try {\r\n            deps =\r\n                ResolvedReflectiveFactory$$1.dependencies.map(dep => this._getByReflectiveDependency(dep));\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            if (e.addKey) {\r\n                e.addKey(this, provider.key);\r\n            }\r\n            throw e;\r\n        }\r\n        let /** @type {?} */ obj;\r\n        try {\r\n            obj = factory(...deps);\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            throw instantiationError(this, e, e.stack, provider.key);\r\n        }\r\n        return obj;\r\n    }\r\n    /**\r\n     * @param {?} dep\r\n     * @return {?}\r\n     */\r\n    _getByReflectiveDependency(dep) {\r\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\r\n    }\r\n    /**\r\n     * @param {?} key\r\n     * @param {?} visibility\r\n     * @param {?} notFoundValue\r\n     * @return {?}\r\n     */\r\n    _getByKey(key, visibility, notFoundValue) {\r\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\r\n            return this;\r\n        }\r\n        if (visibility instanceof Self) {\r\n            return this._getByKeySelf(key, notFoundValue);\r\n        }\r\n        else {\r\n            return this._getByKeyDefault(key, notFoundValue, visibility);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} keyId\r\n     * @return {?}\r\n     */\r\n    _getObjByKeyId(keyId) {\r\n        for (let /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\r\n            if (this.keyIds[i] === keyId) {\r\n                if (this.objs[i] === UNDEFINED) {\r\n                    this.objs[i] = this._new(this._providers[i]);\r\n                }\r\n                return this.objs[i];\r\n            }\r\n        }\r\n        return UNDEFINED;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} key\r\n     * @param {?} notFoundValue\r\n     * @return {?}\r\n     */\r\n    _throwOrNull(key, notFoundValue) {\r\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\r\n            return notFoundValue;\r\n        }\r\n        else {\r\n            throw noProviderError(this, key);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} key\r\n     * @param {?} notFoundValue\r\n     * @return {?}\r\n     */\r\n    _getByKeySelf(key, notFoundValue) {\r\n        const /** @type {?} */ obj = this._getObjByKeyId(key.id);\r\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} key\r\n     * @param {?} notFoundValue\r\n     * @param {?} visibility\r\n     * @return {?}\r\n     */\r\n    _getByKeyDefault(key, notFoundValue, visibility) {\r\n        let /** @type {?} */ inj;\r\n        if (visibility instanceof SkipSelf) {\r\n            inj = this.parent;\r\n        }\r\n        else {\r\n            inj = this;\r\n        }\r\n        while (inj instanceof ReflectiveInjector_) {\r\n            const /** @type {?} */ inj_ = /** @type {?} */ (inj);\r\n            const /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\r\n            if (obj !== UNDEFINED)\r\n                return obj;\r\n            inj = inj_.parent;\r\n        }\r\n        if (inj !== null) {\r\n            return inj.get(key.token, notFoundValue);\r\n        }\r\n        else {\r\n            return this._throwOrNull(key, notFoundValue);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get displayName() {\r\n        const /** @type {?} */ providers = _mapProviders(this, (b) => ' \"' + b.key.displayName + '\" ')\r\n            .join(', ');\r\n        return `ReflectiveInjector(providers: [${providers}])`;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return this.displayName; }\r\n}\r\nReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\r\n/**\r\n * @param {?} injector\r\n * @param {?} fn\r\n * @return {?}\r\n */\r\nfunction _mapProviders(injector, fn) {\r\n    const /** @type {?} */ res = new Array(injector._providers.length);\r\n    for (let /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\r\n        res[i] = fn(injector.getProviderAtIndex(i));\r\n    }\r\n    return res;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * The `di` module provides dependency injection container services.\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine if the argument is shaped like a Promise\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction isPromise(obj) {\r\n    // allow any Promise/A+ compliant thenable.\r\n    // It's up to the caller to ensure that obj.then conforms to the spec\r\n    return !!obj && typeof obj.then === 'function';\r\n}\r\n/**\r\n * Determine if the argument is an Observable\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction isObservable(obj) {\r\n    // TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved\r\n    return !!obj && typeof obj.subscribe === 'function';\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A function that will be executed when an application is initialized.\r\n * \\@experimental\r\n */\r\nconst APP_INITIALIZER = new InjectionToken('Application Initializer');\r\n/**\r\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\r\n *\r\n * \\@experimental\r\n */\r\nclass ApplicationInitStatus {\r\n    /**\r\n     * @param {?} appInits\r\n     */\r\n    constructor(appInits) {\r\n        this.appInits = appInits;\r\n        this.initialized = false;\r\n        this.done = false;\r\n        this.donePromise = new Promise((res, rej) => {\r\n            this.resolve = res;\r\n            this.reject = rej;\r\n        });\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    runInitializers() {\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n        const /** @type {?} */ asyncInitPromises = [];\r\n        const /** @type {?} */ complete = () => {\r\n            (/** @type {?} */ (this)).done = true;\r\n            this.resolve();\r\n        };\r\n        if (this.appInits) {\r\n            for (let /** @type {?} */ i = 0; i < this.appInits.length; i++) {\r\n                const /** @type {?} */ initResult = this.appInits[i]();\r\n                if (isPromise(initResult)) {\r\n                    asyncInitPromises.push(initResult);\r\n                }\r\n            }\r\n        }\r\n        Promise.all(asyncInitPromises).then(() => { complete(); }).catch(e => { this.reject(e); });\r\n        if (asyncInitPromises.length === 0) {\r\n            complete();\r\n        }\r\n        this.initialized = true;\r\n    }\r\n}\r\nApplicationInitStatus.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nApplicationInitStatus.ctorParameters = () => [\r\n    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A DI Token representing a unique string id assigned to the application by Angular and used\r\n * primarily for prefixing application attributes and CSS styles when\r\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\r\n *\r\n * If you need to avoid randomly generated value to be used as an application id, you can provide\r\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\r\n * using this token.\r\n * \\@experimental\r\n */\r\nconst APP_ID = new InjectionToken('AppId');\r\n/**\r\n * @return {?}\r\n */\r\nfunction _appIdRandomProviderFactory() {\r\n    return `${_randomChar()}${_randomChar()}${_randomChar()}`;\r\n}\r\n/**\r\n * Providers that will generate a random APP_ID_TOKEN.\r\n * \\@experimental\r\n */\r\nconst APP_ID_RANDOM_PROVIDER = {\r\n    provide: APP_ID,\r\n    useFactory: _appIdRandomProviderFactory,\r\n    deps: /** @type {?} */ ([]),\r\n};\r\n/**\r\n * @return {?}\r\n */\r\nfunction _randomChar() {\r\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\r\n}\r\n/**\r\n * A function that will be executed when a platform is initialized.\r\n * \\@experimental\r\n */\r\nconst PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\r\n/**\r\n * A token that indicates an opaque platform id.\r\n * \\@experimental\r\n */\r\nconst PLATFORM_ID = new InjectionToken('Platform ID');\r\n/**\r\n * All callbacks provided via this token will be called for every component that is bootstrapped.\r\n * Signature of the callback:\r\n *\r\n * `(componentRef: ComponentRef) => void`.\r\n *\r\n * \\@experimental\r\n */\r\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\r\n/**\r\n * A token which indicates the root directory of the application\r\n * \\@experimental\r\n */\r\nconst PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass Console {\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    log(message) {\r\n        // tslint:disable-next-line:no-console\r\n        console.log(message);\r\n    }\r\n    /**\r\n     * @param {?} message\r\n     * @return {?}\r\n     */\r\n    warn(message) {\r\n        // tslint:disable-next-line:no-console\r\n        console.warn(message);\r\n    }\r\n}\r\nConsole.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nConsole.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Combination of NgModuleFactory and ComponentFactorys.\r\n *\r\n * \\@experimental\r\n */\r\nclass ModuleWithComponentFactories {\r\n    /**\r\n     * @param {?} ngModuleFactory\r\n     * @param {?} componentFactories\r\n     */\r\n    constructor(ngModuleFactory, componentFactories) {\r\n        this.ngModuleFactory = ngModuleFactory;\r\n        this.componentFactories = componentFactories;\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction _throwError() {\r\n    throw new Error(`Runtime compiler is not loaded`);\r\n}\r\n/**\r\n * Low-level service for running the angular compiler during runtime\r\n * to create {\\@link ComponentFactory}s, which\r\n * can later be used to create and render a Component instance.\r\n *\r\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\r\n * that will use the directives/pipes of the ng module for compilation\r\n * of components.\r\n * \\@stable\r\n */\r\nclass Compiler {\r\n    /**\r\n     * Compiles the given NgModule and all of its components. All templates of the components listed\r\n     * in `entryComponents` have to be inlined.\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleSync(moduleType) { throw _throwError(); }\r\n    /**\r\n     * Compiles the given NgModule and all of its components\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAsync(moduleType) { throw _throwError(); }\r\n    /**\r\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAndAllComponentsSync(moduleType) {\r\n        throw _throwError();\r\n    }\r\n    /**\r\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAndAllComponentsAsync(moduleType) {\r\n        throw _throwError();\r\n    }\r\n    /**\r\n     * Clears all caches.\r\n     * @return {?}\r\n     */\r\n    clearCache() { }\r\n    /**\r\n     * Clears the cache for the given component/ngModule.\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    clearCacheFor(type) { }\r\n}\r\nCompiler.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nCompiler.ctorParameters = () => [];\r\n/**\r\n * Token to provide CompilerOptions in the platform injector.\r\n *\r\n * \\@experimental\r\n */\r\nconst COMPILER_OPTIONS = new InjectionToken('compilerOptions');\r\n/**\r\n * A factory for creating a Compiler\r\n *\r\n * \\@experimental\r\n * @abstract\r\n */\r\nclass CompilerFactory {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\r\n *\r\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\r\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\r\n * method.\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass ComponentRef {\r\n}\r\n/**\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass ComponentFactory {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} component\r\n * @return {?}\r\n */\r\nfunction noComponentFactoryError(component) {\r\n    const /** @type {?} */ error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\r\n    (/** @type {?} */ (error))[ERROR_COMPONENT] = component;\r\n    return error;\r\n}\r\nconst ERROR_COMPONENT = 'ngComponent';\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\n\r\nclass _NullComponentFactoryResolver {\r\n    /**\r\n     * @template T\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    resolveComponentFactory(component) {\r\n        throw noComponentFactoryError(component);\r\n    }\r\n}\r\n/**\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass ComponentFactoryResolver {\r\n}\r\nComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\r\nclass CodegenComponentFactoryResolver {\r\n    /**\r\n     * @param {?} factories\r\n     * @param {?} _parent\r\n     * @param {?} _ngModule\r\n     */\r\n    constructor(factories, _parent, _ngModule) {\r\n        this._parent = _parent;\r\n        this._ngModule = _ngModule;\r\n        this._factories = new Map();\r\n        for (let /** @type {?} */ i = 0; i < factories.length; i++) {\r\n            const /** @type {?} */ factory = factories[i];\r\n            this._factories.set(factory.componentType, factory);\r\n        }\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    resolveComponentFactory(component) {\r\n        let /** @type {?} */ factory = this._factories.get(component);\r\n        if (!factory && this._parent) {\r\n            factory = this._parent.resolveComponentFactory(component);\r\n        }\r\n        if (!factory) {\r\n            throw noComponentFactoryError(component);\r\n        }\r\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\r\n    }\r\n}\r\nclass ComponentFactoryBoundToModule extends ComponentFactory {\r\n    /**\r\n     * @param {?} factory\r\n     * @param {?} ngModule\r\n     */\r\n    constructor(factory, ngModule) {\r\n        super();\r\n        this.factory = factory;\r\n        this.ngModule = ngModule;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get selector() { return this.factory.selector; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get componentType() { return this.factory.componentType; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get ngContentSelectors() { return this.factory.ngContentSelectors; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get inputs() { return this.factory.inputs; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get outputs() { return this.factory.outputs; }\r\n    /**\r\n     * @param {?} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} rootSelectorOrNode\r\n     * @param {?=} ngModule\r\n     * @return {?}\r\n     */\r\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\r\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\r\n *\r\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\r\n * NgModule Instance.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass NgModuleRef {\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@experimental\r\n * @abstract\r\n */\r\nclass NgModuleFactory {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A scope function for the Web Tracing Framework (WTF).\r\n *\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\nlet trace;\r\nlet events;\r\n/**\r\n * @return {?}\r\n */\r\nfunction detectWTF() {\r\n    const /** @type {?} */ wtf = (/** @type {?} */ (_global /** TODO #9100 */) /** TODO #9100 */)['wtf'];\r\n    if (wtf) {\r\n        trace = wtf['trace'];\r\n        if (trace) {\r\n            events = trace['events'];\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @param {?} signature\r\n * @param {?=} flags\r\n * @return {?}\r\n */\r\nfunction createScope$1(signature, flags = null) {\r\n    return events.createScope(signature, flags);\r\n}\r\n/**\r\n * @template T\r\n * @param {?} scope\r\n * @param {?=} returnValue\r\n * @return {?}\r\n */\r\nfunction leave(scope, returnValue) {\r\n    trace.leaveScope(scope, returnValue);\r\n    return returnValue;\r\n}\r\n/**\r\n * @param {?} rangeType\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction startTimeRange(rangeType, action) {\r\n    return trace.beginTimeRange(rangeType, action);\r\n}\r\n/**\r\n * @param {?} range\r\n * @return {?}\r\n */\r\nfunction endTimeRange(range) {\r\n    trace.endTimeRange(range);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * True if WTF is enabled.\r\n */\r\nconst wtfEnabled = detectWTF();\r\n/**\r\n * @param {?=} arg0\r\n * @param {?=} arg1\r\n * @return {?}\r\n */\r\nfunction noopScope(arg0, arg1) {\r\n    return null;\r\n}\r\n/**\r\n * Create trace scope.\r\n *\r\n * Scopes must be strictly nested and are analogous to stack frames, but\r\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\r\n * nesting. You may want to use\r\n * [Event\r\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\r\n * as they are defined in WTF.\r\n *\r\n * Used to mark scope entry. The return value is used to leave the scope.\r\n *\r\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\r\n *\r\n *     someMethod() {\r\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\r\n *        // DO SOME WORK HERE\r\n *        return wtfLeave(s, 123); // Return value 123\r\n *     }\r\n *\r\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\r\n * negatively impact the performance of your application. For this reason we recommend that\r\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\r\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\r\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\r\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\r\n * an exception is expected during normal execution while profiling.\r\n *\r\n * \\@experimental\r\n */\r\nconst wtfCreateScope = wtfEnabled ? createScope$1 : (signature, flags) => noopScope;\r\n/**\r\n * Used to mark end of Scope.\r\n *\r\n * - `scope` to end.\r\n * - `returnValue` (optional) to be passed to the WTF.\r\n *\r\n * Returns the `returnValue for easy chaining.\r\n * \\@experimental\r\n */\r\nconst wtfLeave = wtfEnabled ? leave : (s, r) => r;\r\n/**\r\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\r\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\r\n * enabled.\r\n *\r\n *     someMethod() {\r\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\r\n *        var future = new Future.delay(5).then((_) {\r\n *          wtfEndTimeRange(s);\r\n *        });\r\n *     }\r\n * \\@experimental\r\n */\r\nconst wtfStartTimeRange = wtfEnabled ? startTimeRange : (rangeType, action) => null;\r\n/**\r\n * Ends a async time range operation.\r\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\r\n * enabled.\r\n * \\@experimental\r\n */\r\nconst wtfEndTimeRange = wtfEnabled ? endTimeRange : (r) => null;\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Use by directives and components to emit custom Events.\r\n *\r\n * ### Examples\r\n *\r\n * In the following example, `Zippy` alternatively emits `open` and `close` events when its\r\n * title gets clicked:\r\n *\r\n * ```\r\n * \\@Component({\r\n *   selector: 'zippy',\r\n *   template: `\r\n *   <div class=\"zippy\">\r\n *     <div (click)=\"toggle()\">Toggle</div>\r\n *     <div [hidden]=\"!visible\">\r\n *       <ng-content></ng-content>\r\n *     </div>\r\n *  </div>`})\r\n * export class Zippy {\r\n *   visible: boolean = true;\r\n *   \\@Output() open: EventEmitter<any> = new EventEmitter();\r\n *   \\@Output() close: EventEmitter<any> = new EventEmitter();\r\n *\r\n *   toggle() {\r\n *     this.visible = !this.visible;\r\n *     if (this.visible) {\r\n *       this.open.emit(null);\r\n *     } else {\r\n *       this.close.emit(null);\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * The events payload can be accessed by the parameter `$event` on the components output event\r\n * handler:\r\n *\r\n * ```\r\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\r\n * ```\r\n *\r\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\r\n * https://github.com/jhusain/observable-spec\r\n *\r\n * Once a reference implementation of the spec is available, switch to it.\r\n * \\@stable\r\n */\r\nclass EventEmitter extends Subject {\r\n    /**\r\n     * Creates an instance of {\\@link EventEmitter}, which depending on `isAsync`,\r\n     * delivers events synchronously or asynchronously.\r\n     *\r\n     * @param {?=} isAsync By default, events are delivered synchronously (default value: `false`).\r\n     * Set to `true` for asynchronous event delivery.\r\n     */\r\n    constructor(isAsync = false) {\r\n        super();\r\n        this.__isAsync = isAsync;\r\n    }\r\n    /**\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    emit(value) { super.next(value); }\r\n    /**\r\n     * @param {?=} generatorOrNext\r\n     * @param {?=} error\r\n     * @param {?=} complete\r\n     * @return {?}\r\n     */\r\n    subscribe(generatorOrNext, error, complete) {\r\n        let /** @type {?} */ schedulerFn;\r\n        let /** @type {?} */ errorFn = (err) => null;\r\n        let /** @type {?} */ completeFn = () => null;\r\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\r\n            schedulerFn = this.__isAsync ? (value) => {\r\n                setTimeout(() => generatorOrNext.next(value));\r\n            } : (value) => { generatorOrNext.next(value); };\r\n            if (generatorOrNext.error) {\r\n                errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\r\n                    (err) => { generatorOrNext.error(err); };\r\n            }\r\n            if (generatorOrNext.complete) {\r\n                completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\r\n                    () => { generatorOrNext.complete(); };\r\n            }\r\n        }\r\n        else {\r\n            schedulerFn = this.__isAsync ? (value) => { setTimeout(() => generatorOrNext(value)); } :\r\n                (value) => { generatorOrNext(value); };\r\n            if (error) {\r\n                errorFn =\r\n                    this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\r\n            }\r\n            if (complete) {\r\n                completeFn =\r\n                    this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\r\n            }\r\n        }\r\n        return super.subscribe(schedulerFn, errorFn, completeFn);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An injectable service for executing work inside or outside of the Angular zone.\r\n *\r\n * The most common use of this service is to optimize performance when starting a work consisting of\r\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\r\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\r\n * can reenter the Angular zone via {\\@link #run}.\r\n *\r\n * <!-- TODO: add/fix links to:\r\n *   - docs explaining zones and the use of zones in Angular and change-detection\r\n *   - link to runOutsideAngular/run (throughout this file!)\r\n *   -->\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * import {Component, NgZone} from '\\@angular/core';\r\n * import {NgIf} from '\\@angular/common';\r\n *\r\n * \\@Component({\r\n *   selector: 'ng-zone-demo',\r\n *   template: `\r\n *     <h2>Demo: NgZone</h2>\r\n *\r\n *     <p>Progress: {{progress}}%</p>\r\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\r\n *\r\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\r\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\r\n *   `,\r\n * })\r\n * export class NgZoneDemo {\r\n *   progress: number = 0;\r\n *   label: string;\r\n *\r\n *   constructor(private _ngZone: NgZone) {}\r\n *\r\n *   // Loop inside the Angular zone\r\n *   // so the UI DOES refresh after each setTimeout cycle\r\n *   processWithinAngularZone() {\r\n *     this.label = 'inside';\r\n *     this.progress = 0;\r\n *     this._increaseProgress(() => console.log('Inside Done!'));\r\n *   }\r\n *\r\n *   // Loop outside of the Angular zone\r\n *   // so the UI DOES NOT refresh after each setTimeout cycle\r\n *   processOutsideOfAngularZone() {\r\n *     this.label = 'outside';\r\n *     this.progress = 0;\r\n *     this._ngZone.runOutsideAngular(() => {\r\n *       this._increaseProgress(() => {\r\n *         // reenter the Angular zone and display done\r\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\r\n *       });\r\n *     });\r\n *   }\r\n *\r\n *   _increaseProgress(doneCallback: () => void) {\r\n *     this.progress += 1;\r\n *     console.log(`Current progress: ${this.progress}%`);\r\n *\r\n *     if (this.progress < 100) {\r\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\r\n *     } else {\r\n *       doneCallback();\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nclass NgZone {\r\n    /**\r\n     * @param {?} __0\r\n     */\r\n    constructor({ enableLongStackTrace = false }) {\r\n        this.hasPendingMicrotasks = false;\r\n        this.hasPendingMacrotasks = false;\r\n        /**\r\n         * Whether there are no outstanding microtasks or macrotasks.\r\n         */\r\n        this.isStable = true;\r\n        /**\r\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\r\n         */\r\n        this.onUnstable = new EventEmitter(false);\r\n        /**\r\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\r\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\r\n         * For this reason this event can fire multiple times per VM Turn.\r\n         */\r\n        this.onMicrotaskEmpty = new EventEmitter(false);\r\n        /**\r\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\r\n         * implies we are about to relinquish VM turn.\r\n         * This event gets called just once.\r\n         */\r\n        this.onStable = new EventEmitter(false);\r\n        /**\r\n         * Notifies that an error has been delivered.\r\n         */\r\n        this.onError = new EventEmitter(false);\r\n        if (typeof Zone == 'undefined') {\r\n            throw new Error(`In this configuration Angular requires Zone.js`);\r\n        }\r\n        Zone.assertZonePatched();\r\n        const /** @type {?} */ self = /** @type {?} */ ((this));\r\n        self._nesting = 0;\r\n        self._outer = self._inner = Zone.current;\r\n        if ((/** @type {?} */ (Zone))['wtfZoneSpec']) {\r\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['wtfZoneSpec']);\r\n        }\r\n        if (enableLongStackTrace && (/** @type {?} */ (Zone))['longStackTraceZoneSpec']) {\r\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['longStackTraceZoneSpec']);\r\n        }\r\n        forkInnerZoneWithAngularBehavior(self);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static isInAngularZone() { return Zone.current.get('isAngularZone') === true; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static assertInAngularZone() {\r\n        if (!NgZone.isInAngularZone()) {\r\n            throw new Error('Expected to be in Angular Zone, but it is not!');\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static assertNotInAngularZone() {\r\n        if (NgZone.isInAngularZone()) {\r\n            throw new Error('Expected to not be in Angular Zone, but it is!');\r\n        }\r\n    }\r\n    /**\r\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @param {?=} applyThis\r\n     * @param {?=} applyArgs\r\n     * @return {?}\r\n     */\r\n    run(fn, applyThis, applyArgs) {\r\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.run(fn, applyThis, applyArgs));\r\n    }\r\n    /**\r\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\r\n     * returned by the function.\r\n     *\r\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\r\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * within the Angular zone.\r\n     *\r\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @param {?=} applyThis\r\n     * @param {?=} applyArgs\r\n     * @param {?=} name\r\n     * @return {?}\r\n     */\r\n    runTask(fn, applyThis, applyArgs, name) {\r\n        const /** @type {?} */ zone = (/** @type {?} */ ((this)))._inner;\r\n        const /** @type {?} */ task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\r\n        try {\r\n            return /** @type {?} */ (zone.runTask(task, applyThis, applyArgs));\r\n        }\r\n        finally {\r\n            zone.cancelTask(task);\r\n        }\r\n    }\r\n    /**\r\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\r\n     * rethrown.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @param {?=} applyThis\r\n     * @param {?=} applyArgs\r\n     * @return {?}\r\n     */\r\n    runGuarded(fn, applyThis, applyArgs) {\r\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.runGuarded(fn, applyThis, applyArgs));\r\n    }\r\n    /**\r\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\r\n     * the function.\r\n     *\r\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\r\n     * work that\r\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\r\n     *\r\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\r\n     * outside of the Angular zone.\r\n     *\r\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\r\n     * @template T\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    runOutsideAngular(fn) {\r\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._outer.run(fn));\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction noop() { }\r\nconst EMPTY_PAYLOAD = {};\r\n/**\r\n * @param {?} zone\r\n * @return {?}\r\n */\r\nfunction checkStable(zone) {\r\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\r\n        try {\r\n            zone._nesting++;\r\n            zone.onMicrotaskEmpty.emit(null);\r\n        }\r\n        finally {\r\n            zone._nesting--;\r\n            if (!zone.hasPendingMicrotasks) {\r\n                try {\r\n                    zone.runOutsideAngular(() => zone.onStable.emit(null));\r\n                }\r\n                finally {\r\n                    zone.isStable = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} zone\r\n * @return {?}\r\n */\r\nfunction forkInnerZoneWithAngularBehavior(zone) {\r\n    zone._inner = zone._inner.fork({\r\n        name: 'angular',\r\n        properties: /** @type {?} */ ({ 'isAngularZone': true }),\r\n        onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {\r\n            try {\r\n                onEnter(zone);\r\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\r\n            }\r\n            finally {\r\n                onLeave(zone);\r\n            }\r\n        },\r\n        onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {\r\n            try {\r\n                onEnter(zone);\r\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\r\n            }\r\n            finally {\r\n                onLeave(zone);\r\n            }\r\n        },\r\n        onHasTask: (delegate, current, target, hasTaskState) => {\r\n            delegate.hasTask(target, hasTaskState);\r\n            if (current === target) {\r\n                // We are only interested in hasTask events which originate from our zone\r\n                // (A child hasTask event is not interesting to us)\r\n                if (hasTaskState.change == 'microTask') {\r\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\r\n                    checkStable(zone);\r\n                }\r\n                else if (hasTaskState.change == 'macroTask') {\r\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\r\n                }\r\n            }\r\n        },\r\n        onHandleError: (delegate, current, target, error) => {\r\n            delegate.handleError(target, error);\r\n            zone.runOutsideAngular(() => zone.onError.emit(error));\r\n            return false;\r\n        }\r\n    });\r\n}\r\n/**\r\n * @param {?} zone\r\n * @return {?}\r\n */\r\nfunction onEnter(zone) {\r\n    zone._nesting++;\r\n    if (zone.isStable) {\r\n        zone.isStable = false;\r\n        zone.onUnstable.emit(null);\r\n    }\r\n}\r\n/**\r\n * @param {?} zone\r\n * @return {?}\r\n */\r\nfunction onLeave(zone) {\r\n    zone._nesting--;\r\n    checkStable(zone);\r\n}\r\n/**\r\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\r\n * to framework to perform rendering.\r\n */\r\nclass NoopNgZone {\r\n    constructor() {\r\n        this.hasPendingMicrotasks = false;\r\n        this.hasPendingMacrotasks = false;\r\n        this.isStable = true;\r\n        this.onUnstable = new EventEmitter();\r\n        this.onMicrotaskEmpty = new EventEmitter();\r\n        this.onStable = new EventEmitter();\r\n        this.onError = new EventEmitter();\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    run(fn) { return fn(); }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    runGuarded(fn) { return fn(); }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    runOutsideAngular(fn) { return fn(); }\r\n    /**\r\n     * @template T\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    runTask(fn) { return fn(); }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The Testability service provides testing hooks that can be accessed from\r\n * the browser and by services such as Protractor. Each bootstrapped Angular\r\n * application on the page will have an instance of Testability.\r\n * \\@experimental\r\n */\r\nclass Testability {\r\n    /**\r\n     * @param {?} _ngZone\r\n     */\r\n    constructor(_ngZone) {\r\n        this._ngZone = _ngZone;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._pendingCount = 0;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._isZoneStable = true;\r\n        /**\r\n         * Whether any work was done since the last 'whenStable' callback. This is\r\n         * useful to detect if this could have potentially destabilized another\r\n         * component while it is stabilizing.\r\n         * \\@internal\r\n         */\r\n        this._didWork = false;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._callbacks = [];\r\n        this._watchAngularEvents();\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _watchAngularEvents() {\r\n        this._ngZone.onUnstable.subscribe({\r\n            next: () => {\r\n                this._didWork = true;\r\n                this._isZoneStable = false;\r\n            }\r\n        });\r\n        this._ngZone.runOutsideAngular(() => {\r\n            this._ngZone.onStable.subscribe({\r\n                next: () => {\r\n                    NgZone.assertNotInAngularZone();\r\n                    scheduleMicroTask(() => {\r\n                        this._isZoneStable = true;\r\n                        this._runCallbacksIfReady();\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Increases the number of pending request\r\n     * @return {?}\r\n     */\r\n    increasePendingRequestCount() {\r\n        this._pendingCount += 1;\r\n        this._didWork = true;\r\n        return this._pendingCount;\r\n    }\r\n    /**\r\n     * Decreases the number of pending request\r\n     * @return {?}\r\n     */\r\n    decreasePendingRequestCount() {\r\n        this._pendingCount -= 1;\r\n        if (this._pendingCount < 0) {\r\n            throw new Error('pending async requests below zero');\r\n        }\r\n        this._runCallbacksIfReady();\r\n        return this._pendingCount;\r\n    }\r\n    /**\r\n     * Whether an associated application is stable\r\n     * @return {?}\r\n     */\r\n    isStable() {\r\n        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _runCallbacksIfReady() {\r\n        if (this.isStable()) {\r\n            // Schedules the call backs in a new frame so that it is always async.\r\n            scheduleMicroTask(() => {\r\n                while (this._callbacks.length !== 0) {\r\n                    (/** @type {?} */ ((this._callbacks.pop())))(this._didWork);\r\n                }\r\n                this._didWork = false;\r\n            });\r\n        }\r\n        else {\r\n            // Not Ready\r\n            this._didWork = true;\r\n        }\r\n    }\r\n    /**\r\n     * Run callback when the application is stable\r\n     * @param {?} callback function to be called after the application is stable\r\n     * @return {?}\r\n     */\r\n    whenStable(callback) {\r\n        this._callbacks.push(callback);\r\n        this._runCallbacksIfReady();\r\n    }\r\n    /**\r\n     * Get the number of pending requests\r\n     * @return {?}\r\n     */\r\n    getPendingRequestCount() { return this._pendingCount; }\r\n    /**\r\n     * Find providers by name\r\n     * @param {?} using The root element to search from\r\n     * @param {?} provider The name of binding variable\r\n     * @param {?} exactMatch Whether using exactMatch\r\n     * @return {?}\r\n     */\r\n    findProviders(using, provider, exactMatch) {\r\n        // TODO(juliemr): implement.\r\n        return [];\r\n    }\r\n}\r\nTestability.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nTestability.ctorParameters = () => [\r\n    { type: NgZone, },\r\n];\r\n/**\r\n * A global registry of {\\@link Testability} instances for specific elements.\r\n * \\@experimental\r\n */\r\nclass TestabilityRegistry {\r\n    constructor() {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._applications = new Map();\r\n        _testabilityGetter.addToWindow(this);\r\n    }\r\n    /**\r\n     * Registers an application with a testability hook so that it can be tracked\r\n     * @param {?} token token of application, root element\r\n     * @param {?} testability Testability hook\r\n     * @return {?}\r\n     */\r\n    registerApplication(token, testability) {\r\n        this._applications.set(token, testability);\r\n    }\r\n    /**\r\n     * Unregisters an application.\r\n     * @param {?} token token of application, root element\r\n     * @return {?}\r\n     */\r\n    unregisterApplication(token) { this._applications.delete(token); }\r\n    /**\r\n     * Unregisters all applications\r\n     * @return {?}\r\n     */\r\n    unregisterAllApplications() { this._applications.clear(); }\r\n    /**\r\n     * Get a testability hook associated with the application\r\n     * @param {?} elem root element\r\n     * @return {?}\r\n     */\r\n    getTestability(elem) { return this._applications.get(elem) || null; }\r\n    /**\r\n     * Get all registered testabilities\r\n     * @return {?}\r\n     */\r\n    getAllTestabilities() { return Array.from(this._applications.values()); }\r\n    /**\r\n     * Get all registered applications(root elements)\r\n     * @return {?}\r\n     */\r\n    getAllRootElements() { return Array.from(this._applications.keys()); }\r\n    /**\r\n     * Find testability of a node in the Tree\r\n     * @param {?} elem node\r\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\r\n     * current node\r\n     * @return {?}\r\n     */\r\n    findTestabilityInTree(elem, findInAncestors = true) {\r\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\r\n    }\r\n}\r\nTestabilityRegistry.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nTestabilityRegistry.ctorParameters = () => [];\r\n/**\r\n * Adapter interface for retrieving the `Testability` service associated for a\r\n * particular context.\r\n *\r\n * \\@experimental Testability apis are primarily intended to be used by e2e test tool vendors like\r\n * the Protractor team.\r\n * @record\r\n */\r\n\r\nclass _NoopGetTestability {\r\n    /**\r\n     * @param {?} registry\r\n     * @return {?}\r\n     */\r\n    addToWindow(registry) { }\r\n    /**\r\n     * @param {?} registry\r\n     * @param {?} elem\r\n     * @param {?} findInAncestors\r\n     * @return {?}\r\n     */\r\n    findTestabilityInTree(registry, elem, findInAncestors) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\r\n * \\@experimental\r\n * @param {?} getter\r\n * @return {?}\r\n */\r\nfunction setTestabilityGetter(getter) {\r\n    _testabilityGetter = getter;\r\n}\r\nlet _testabilityGetter = new _NoopGetTestability();\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nlet _devMode = true;\r\nlet _runModeLocked = false;\r\nlet _platform;\r\nconst ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\r\n/**\r\n * Disable Angular's development mode, which turns off assertions and other\r\n * checks within the framework.\r\n *\r\n * One important assertion this disables verifies that a change detection pass\r\n * does not result in additional changes to any bindings (also known as\r\n * unidirectional data flow).\r\n *\r\n * \\@stable\r\n * @return {?}\r\n */\r\nfunction enableProdMode() {\r\n    if (_runModeLocked) {\r\n        throw new Error('Cannot enable prod mode after platform setup.');\r\n    }\r\n    _devMode = false;\r\n}\r\n/**\r\n * Returns whether Angular is in development mode. After called once,\r\n * the value is locked and won't change any more.\r\n *\r\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @return {?}\r\n */\r\nfunction isDevMode() {\r\n    _runModeLocked = true;\r\n    return _devMode;\r\n}\r\n/**\r\n * A token for third-party components that can register themselves with NgProbe.\r\n *\r\n * \\@experimental\r\n */\r\nclass NgProbeToken {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} token\r\n     */\r\n    constructor(name, token) {\r\n        this.name = name;\r\n        this.token = token;\r\n    }\r\n}\r\n/**\r\n * Creates a platform.\r\n * Platforms have to be eagerly created via this function.\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @param {?} injector\r\n * @return {?}\r\n */\r\nfunction createPlatform(injector) {\r\n    if (_platform && !_platform.destroyed &&\r\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\r\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\r\n    }\r\n    _platform = injector.get(PlatformRef);\r\n    const /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);\r\n    if (inits)\r\n        inits.forEach((init) => init());\r\n    return _platform;\r\n}\r\n/**\r\n * Creates a factory for a platform\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @param {?} parentPlatformFactory\r\n * @param {?} name\r\n * @param {?=} providers\r\n * @return {?}\r\n */\r\nfunction createPlatformFactory(parentPlatformFactory, name, providers = []) {\r\n    const /** @type {?} */ marker = new InjectionToken(`Platform: ${name}`);\r\n    return (extraProviders = []) => {\r\n        let /** @type {?} */ platform = getPlatform();\r\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\r\n            if (parentPlatformFactory) {\r\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\r\n            }\r\n            else {\r\n                createPlatform(Injector.create(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));\r\n            }\r\n        }\r\n        return assertPlatform(marker);\r\n    };\r\n}\r\n/**\r\n * Checks that there currently is a platform which contains the given token as a provider.\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @param {?} requiredToken\r\n * @return {?}\r\n */\r\nfunction assertPlatform(requiredToken) {\r\n    const /** @type {?} */ platform = getPlatform();\r\n    if (!platform) {\r\n        throw new Error('No platform exists!');\r\n    }\r\n    if (!platform.injector.get(requiredToken, null)) {\r\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\r\n    }\r\n    return platform;\r\n}\r\n/**\r\n * Destroy the existing platform.\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @return {?}\r\n */\r\nfunction destroyPlatform() {\r\n    if (_platform && !_platform.destroyed) {\r\n        _platform.destroy();\r\n    }\r\n}\r\n/**\r\n * Returns the current platform.\r\n *\r\n * \\@experimental APIs related to application bootstrap are currently under review.\r\n * @return {?}\r\n */\r\nfunction getPlatform() {\r\n    return _platform && !_platform.destroyed ? _platform : null;\r\n}\r\n/**\r\n * Provides additional options to the bootstraping process.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * The Angular platform is the entry point for Angular on a web page. Each page\r\n * has exactly one platform, and services (such as reflection) which are common\r\n * to every Angular application running on the page are bound in its scope.\r\n *\r\n * A page's platform is initialized implicitly when a platform is created via a platform factory\r\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\r\n *\r\n * \\@stable\r\n */\r\nclass PlatformRef {\r\n    /**\r\n     * \\@internal\r\n     * @param {?} _injector\r\n     */\r\n    constructor(_injector) {\r\n        this._injector = _injector;\r\n        this._modules = [];\r\n        this._destroyListeners = [];\r\n        this._destroyed = false;\r\n    }\r\n    /**\r\n     * Creates an instance of an `\\@NgModule` for the given platform\r\n     * for offline compilation.\r\n     *\r\n     * ## Simple Example\r\n     *\r\n     * ```typescript\r\n     * my_module.ts:\r\n     *\r\n     * \\@NgModule({\r\n     *   imports: [BrowserModule]\r\n     * })\r\n     * class MyModule {}\r\n     *\r\n     * main.ts:\r\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\r\n     * import {platformBrowser} from '\\@angular/platform-browser';\r\n     *\r\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\r\n     * ```\r\n     *\r\n     * \\@experimental APIs related to application bootstrap are currently under review.\r\n     * @template M\r\n     * @param {?} moduleFactory\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    bootstrapModuleFactory(moduleFactory, options) {\r\n        // Note: We need to create the NgZone _before_ we instantiate the module,\r\n        // as instantiating the module creates some providers eagerly.\r\n        // So we create a mini parent injector that just contains the new NgZone and\r\n        // pass that as parent to the NgModuleFactory.\r\n        const /** @type {?} */ ngZoneOption = options ? options.ngZone : undefined;\r\n        const /** @type {?} */ ngZone = getNgZone(ngZoneOption);\r\n        // Attention: Don't use ApplicationRef.run here,\r\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\r\n        return ngZone.run(() => {\r\n            const /** @type {?} */ ngZoneInjector = Injector.create([{ provide: NgZone, useValue: ngZone }], this.injector);\r\n            const /** @type {?} */ moduleRef = /** @type {?} */ (moduleFactory.create(ngZoneInjector));\r\n            const /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\r\n            if (!exceptionHandler) {\r\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\r\n            }\r\n            moduleRef.onDestroy(() => remove(this._modules, moduleRef)); /** @type {?} */\r\n            ((ngZone)).runOutsideAngular(() => /** @type {?} */ ((ngZone)).onError.subscribe({ next: (error) => { exceptionHandler.handleError(error); } }));\r\n            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), () => {\r\n                const /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);\r\n                initStatus.runInitializers();\r\n                return initStatus.donePromise.then(() => {\r\n                    this._moduleDoBootstrap(moduleRef);\r\n                    return moduleRef;\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\r\n     *\r\n     * ## Simple Example\r\n     *\r\n     * ```typescript\r\n     * \\@NgModule({\r\n     *   imports: [BrowserModule]\r\n     * })\r\n     * class MyModule {}\r\n     *\r\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\r\n     * ```\r\n     * \\@stable\r\n     * @template M\r\n     * @param {?} moduleType\r\n     * @param {?=} compilerOptions\r\n     * @return {?}\r\n     */\r\n    bootstrapModule(moduleType, compilerOptions = []) {\r\n        const /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);\r\n        const /** @type {?} */ options = optionsReducer({}, compilerOptions);\r\n        const /** @type {?} */ compiler = compilerFactory.createCompiler([options]);\r\n        return compiler.compileModuleAsync(moduleType)\r\n            .then((moduleFactory) => this.bootstrapModuleFactory(moduleFactory, options));\r\n    }\r\n    /**\r\n     * @param {?} moduleRef\r\n     * @return {?}\r\n     */\r\n    _moduleDoBootstrap(moduleRef) {\r\n        const /** @type {?} */ appRef = /** @type {?} */ (moduleRef.injector.get(ApplicationRef));\r\n        if (moduleRef._bootstrapComponents.length > 0) {\r\n            moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\r\n        }\r\n        else if (moduleRef.instance.ngDoBootstrap) {\r\n            moduleRef.instance.ngDoBootstrap(appRef);\r\n        }\r\n        else {\r\n            throw new Error(`The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\r\n                `Please define one of these.`);\r\n        }\r\n        this._modules.push(moduleRef);\r\n    }\r\n    /**\r\n     * Register a listener to be called when the platform is disposed.\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    onDestroy(callback) { this._destroyListeners.push(callback); }\r\n    /**\r\n     * Retrieve the platform {\\@link Injector}, which is the parent injector for\r\n     * every Angular application on the page and provides singleton providers.\r\n     * @return {?}\r\n     */\r\n    get injector() { return this._injector; }\r\n    /**\r\n     * Destroy the Angular platform and all Angular applications on the page.\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        if (this._destroyed) {\r\n            throw new Error('The platform has already been destroyed!');\r\n        }\r\n        this._modules.slice().forEach(module => module.destroy());\r\n        this._destroyListeners.forEach(listener => listener());\r\n        this._destroyed = true;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get destroyed() { return this._destroyed; }\r\n}\r\nPlatformRef.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nPlatformRef.ctorParameters = () => [\r\n    { type: Injector, },\r\n];\r\n/**\r\n * @param {?=} ngZoneOption\r\n * @return {?}\r\n */\r\nfunction getNgZone(ngZoneOption) {\r\n    let /** @type {?} */ ngZone;\r\n    if (ngZoneOption === 'noop') {\r\n        ngZone = new NoopNgZone();\r\n    }\r\n    else {\r\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\r\n            new NgZone({ enableLongStackTrace: isDevMode() });\r\n    }\r\n    return ngZone;\r\n}\r\n/**\r\n * @param {?} errorHandler\r\n * @param {?} ngZone\r\n * @param {?} callback\r\n * @return {?}\r\n */\r\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\r\n    try {\r\n        const /** @type {?} */ result = callback();\r\n        if (isPromise(result)) {\r\n            return result.catch((e) => {\r\n                ngZone.runOutsideAngular(() => errorHandler.handleError(e));\r\n                // rethrow as the exception handler might not do it\r\n                throw e;\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\r\n        // rethrow as the exception handler might not do it\r\n        throw e;\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} dst\r\n * @param {?} objs\r\n * @return {?}\r\n */\r\nfunction optionsReducer(dst, objs) {\r\n    if (Array.isArray(objs)) {\r\n        dst = objs.reduce(optionsReducer, dst);\r\n    }\r\n    else {\r\n        dst = Object.assign({}, dst, (/** @type {?} */ (objs)));\r\n    }\r\n    return dst;\r\n}\r\n/**\r\n * A reference to an Angular application running on a page.\r\n *\r\n * \\@stable\r\n */\r\nclass ApplicationRef {\r\n    /**\r\n     * \\@internal\r\n     * @param {?} _zone\r\n     * @param {?} _console\r\n     * @param {?} _injector\r\n     * @param {?} _exceptionHandler\r\n     * @param {?} _componentFactoryResolver\r\n     * @param {?} _initStatus\r\n     */\r\n    constructor(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\r\n        this._zone = _zone;\r\n        this._console = _console;\r\n        this._injector = _injector;\r\n        this._exceptionHandler = _exceptionHandler;\r\n        this._componentFactoryResolver = _componentFactoryResolver;\r\n        this._initStatus = _initStatus;\r\n        this._bootstrapListeners = [];\r\n        this._views = [];\r\n        this._runningTick = false;\r\n        this._enforceNoNewChanges = false;\r\n        this._stable = true;\r\n        /**\r\n         * Get a list of component types registered to this application.\r\n         * This list is populated even before the component is created.\r\n         */\r\n        this.componentTypes = [];\r\n        /**\r\n         * Get a list of components registered to this application.\r\n         */\r\n        this.components = [];\r\n        this._enforceNoNewChanges = isDevMode();\r\n        this._zone.onMicrotaskEmpty.subscribe({ next: () => { this._zone.run(() => { this.tick(); }); } });\r\n        const /** @type {?} */ isCurrentlyStable = new Observable((observer) => {\r\n            this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\r\n                !this._zone.hasPendingMicrotasks;\r\n            this._zone.runOutsideAngular(() => {\r\n                observer.next(this._stable);\r\n                observer.complete();\r\n            });\r\n        });\r\n        const /** @type {?} */ isStable = new Observable((observer) => {\r\n            // Create the subscription to onStable outside the Angular Zone so that\r\n            // the callback is run outside the Angular Zone.\r\n            let /** @type {?} */ stableSub;\r\n            this._zone.runOutsideAngular(() => {\r\n                stableSub = this._zone.onStable.subscribe(() => {\r\n                    NgZone.assertNotInAngularZone();\r\n                    // Check whether there are no pending macro/micro tasks in the next tick\r\n                    // to allow for NgZone to update the state.\r\n                    scheduleMicroTask(() => {\r\n                        if (!this._stable && !this._zone.hasPendingMacrotasks &&\r\n                            !this._zone.hasPendingMicrotasks) {\r\n                            this._stable = true;\r\n                            observer.next(true);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n            const /** @type {?} */ unstableSub = this._zone.onUnstable.subscribe(() => {\r\n                NgZone.assertInAngularZone();\r\n                if (this._stable) {\r\n                    this._stable = false;\r\n                    this._zone.runOutsideAngular(() => { observer.next(false); });\r\n                }\r\n            });\r\n            return () => {\r\n                stableSub.unsubscribe();\r\n                unstableSub.unsubscribe();\r\n            };\r\n        });\r\n        (/** @type {?} */ (this)).isStable =\r\n            merge(isCurrentlyStable, share.call(isStable));\r\n    }\r\n    /**\r\n     * Bootstrap a new component at the root level of the application.\r\n     *\r\n     * ### Bootstrap process\r\n     *\r\n     * When bootstrapping a new root component into an application, Angular mounts the\r\n     * specified application component onto DOM elements identified by the [componentType]'s\r\n     * selector and kicks off automatic change detection to finish initializing the component.\r\n     *\r\n     * Optionally, a component can be mounted onto a DOM element that does not match the\r\n     * [componentType]'s selector.\r\n     *\r\n     * ### Example\r\n     * {\\@example core/ts/platform/platform.ts region='longform'}\r\n     * @template C\r\n     * @param {?} componentOrFactory\r\n     * @param {?=} rootSelectorOrNode\r\n     * @return {?}\r\n     */\r\n    bootstrap(componentOrFactory, rootSelectorOrNode) {\r\n        if (!this._initStatus.done) {\r\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\r\n        }\r\n        let /** @type {?} */ componentFactory;\r\n        if (componentOrFactory instanceof ComponentFactory) {\r\n            componentFactory = componentOrFactory;\r\n        }\r\n        else {\r\n            componentFactory =\r\n                /** @type {?} */ ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\r\n        }\r\n        this.componentTypes.push(componentFactory.componentType);\r\n        // Create a factory associated with the current module if it's not bound to some other\r\n        const /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\r\n            null :\r\n            this._injector.get(NgModuleRef);\r\n        const /** @type {?} */ selectorOrNode = rootSelectorOrNode || componentFactory.selector;\r\n        const /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\r\n        compRef.onDestroy(() => { this._unloadComponent(compRef); });\r\n        const /** @type {?} */ testability = compRef.injector.get(Testability, null);\r\n        if (testability) {\r\n            compRef.injector.get(TestabilityRegistry)\r\n                .registerApplication(compRef.location.nativeElement, testability);\r\n        }\r\n        this._loadComponent(compRef);\r\n        if (isDevMode()) {\r\n            this._console.log(`Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\r\n        }\r\n        return compRef;\r\n    }\r\n    /**\r\n     * Invoke this method to explicitly process change detection and its side-effects.\r\n     *\r\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\r\n     * further changes are detected. If additional changes are picked up during this second cycle,\r\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\r\n     * pass.\r\n     * In this case, Angular throws an error, since an Angular application can only have one change\r\n     * detection pass during which all change detection must complete.\r\n     * @return {?}\r\n     */\r\n    tick() {\r\n        if (this._runningTick) {\r\n            throw new Error('ApplicationRef.tick is called recursively');\r\n        }\r\n        const /** @type {?} */ scope = ApplicationRef._tickScope();\r\n        try {\r\n            this._runningTick = true;\r\n            this._views.forEach((view) => view.detectChanges());\r\n            if (this._enforceNoNewChanges) {\r\n                this._views.forEach((view) => view.checkNoChanges());\r\n            }\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\r\n            this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\r\n        }\r\n        finally {\r\n            this._runningTick = false;\r\n            wtfLeave(scope);\r\n        }\r\n    }\r\n    /**\r\n     * Attaches a view so that it will be dirty checked.\r\n     * The view will be automatically detached when it is destroyed.\r\n     * This will throw if the view is already attached to a ViewContainer.\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    attachView(viewRef) {\r\n        const /** @type {?} */ view = (/** @type {?} */ (viewRef));\r\n        this._views.push(view);\r\n        view.attachToAppRef(this);\r\n    }\r\n    /**\r\n     * Detaches a view from dirty checking again.\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    detachView(viewRef) {\r\n        const /** @type {?} */ view = (/** @type {?} */ (viewRef));\r\n        remove(this._views, view);\r\n        view.detachFromAppRef();\r\n    }\r\n    /**\r\n     * @param {?} componentRef\r\n     * @return {?}\r\n     */\r\n    _loadComponent(componentRef) {\r\n        this.attachView(componentRef.hostView);\r\n        this.tick();\r\n        this.components.push(componentRef);\r\n        // Get the listeners lazily to prevent DI cycles.\r\n        const /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\r\n        listeners.forEach((listener) => listener(componentRef));\r\n    }\r\n    /**\r\n     * @param {?} componentRef\r\n     * @return {?}\r\n     */\r\n    _unloadComponent(componentRef) {\r\n        this.detachView(componentRef.hostView);\r\n        remove(this.components, componentRef);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        // TODO(alxhub): Dispose of the NgZone.\r\n        this._views.slice().forEach((view) => view.destroy());\r\n    }\r\n    /**\r\n     * Returns the number of attached views.\r\n     * @return {?}\r\n     */\r\n    get viewCount() { return this._views.length; }\r\n}\r\n/**\r\n * \\@internal\r\n */\r\nApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\r\nApplicationRef.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nApplicationRef.ctorParameters = () => [\r\n    { type: NgZone, },\r\n    { type: Console, },\r\n    { type: Injector, },\r\n    { type: ErrorHandler, },\r\n    { type: ComponentFactoryResolver, },\r\n    { type: ApplicationInitStatus, },\r\n];\r\n/**\r\n * @template T\r\n * @param {?} list\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction remove(list, el) {\r\n    const /** @type {?} */ index = list.indexOf(el);\r\n    if (index > -1) {\r\n        list.splice(index, 1);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Public API for Zone\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\r\n */\r\nclass RenderComponentType {\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} templateUrl\r\n     * @param {?} slotCount\r\n     * @param {?} encapsulation\r\n     * @param {?} styles\r\n     * @param {?} animations\r\n     */\r\n    constructor(id, templateUrl, slotCount, encapsulation, styles, animations) {\r\n        this.id = id;\r\n        this.templateUrl = templateUrl;\r\n        this.slotCount = slotCount;\r\n        this.encapsulation = encapsulation;\r\n        this.styles = styles;\r\n        this.animations = animations;\r\n    }\r\n}\r\n/**\r\n * @deprecated Debug info is handeled internally in the view engine now.\r\n * @abstract\r\n */\r\nclass RenderDebugInfo {\r\n}\r\n/**\r\n * @deprecated Use the `Renderer2` instead.\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated Use the `Renderer2` instead.\r\n * @abstract\r\n */\r\nclass Renderer {\r\n}\r\nconst Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\r\n/**\r\n * Injectable service that provides a low-level interface for modifying the UI.\r\n *\r\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\r\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\r\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\r\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\r\n *\r\n * If you are implementing a custom renderer, you must implement this interface.\r\n *\r\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\r\n *\r\n * @deprecated Use `RendererFactory2` instead.\r\n * @abstract\r\n */\r\nclass RootRenderer {\r\n}\r\n/**\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@experimental\r\n * @abstract\r\n */\r\nclass RendererFactory2 {\r\n}\r\n/** @enum {number} */\r\nconst RendererStyleFlags2 = {\r\n    Important: 1,\r\n    DashCase: 2,\r\n};\r\nRendererStyleFlags2[RendererStyleFlags2.Important] = \"Important\";\r\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = \"DashCase\";\r\n/**\r\n * \\@experimental\r\n * @abstract\r\n */\r\nclass Renderer2 {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Public API for render\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A wrapper around a native element inside of a View.\r\n *\r\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\r\n * element.\r\n *\r\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\r\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\r\n * [Security Guide](http://g.co/ng/security).\r\n *\r\n * \\@stable\r\n */\r\nclass ElementRef {\r\n    /**\r\n     * @param {?} nativeElement\r\n     */\r\n    constructor(nativeElement) { this.nativeElement = nativeElement; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Used to load ng module factories.\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass NgModuleFactoryLoader {\r\n}\r\nlet moduleFactories = new Map();\r\n/**\r\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\r\n * \\@experimental\r\n * @param {?} id\r\n * @param {?} factory\r\n * @return {?}\r\n */\r\nfunction registerModuleFactory(id, factory) {\r\n    const /** @type {?} */ existing = moduleFactories.get(id);\r\n    if (existing) {\r\n        throw new Error(`Duplicate module registered for ${id} - ${existing.moduleType.name} vs ${factory.moduleType.name}`);\r\n    }\r\n    moduleFactories.set(id, factory);\r\n}\r\n/**\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\r\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\r\n * cannot be found.\r\n * \\@experimental\r\n * @param {?} id\r\n * @return {?}\r\n */\r\nfunction getModuleFactory(id) {\r\n    const /** @type {?} */ factory = moduleFactories.get(id);\r\n    if (!factory)\r\n        throw new Error(`No module with ID ${id} loaded`);\r\n    return factory;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An unmodifiable list of items that Angular keeps up to date when the state\r\n * of the application changes.\r\n *\r\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\r\n * provide.\r\n *\r\n * Implements an iterable interface, therefore it can be used in both ES6\r\n * javascript `for (var i of items)` loops as well as in Angular templates with\r\n * `*ngFor=\"let i of myList\"`.\r\n *\r\n * Changes can be observed by subscribing to the changes `Observable`.\r\n *\r\n * NOTE: In the future this class will implement an `Observable` interface.\r\n *\r\n * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\r\n * ```typescript\r\n * \\@Component({...})\r\n * class Container {\r\n *   \\@ViewChildren(Item) items:QueryList<Item>;\r\n * }\r\n * ```\r\n * \\@stable\r\n */\r\nclass QueryList {\r\n    constructor() {\r\n        this.dirty = true;\r\n        this._results = [];\r\n        this.changes = new EventEmitter();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get length() { return this._results.length; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get first() { return this._results[0]; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get last() { return this._results[this.length - 1]; }\r\n    /**\r\n     * See\r\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n     * @template U\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    map(fn) { return this._results.map(fn); }\r\n    /**\r\n     * See\r\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    filter(fn) {\r\n        return this._results.filter(fn);\r\n    }\r\n    /**\r\n     * See\r\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    find(fn) {\r\n        return this._results.find(fn);\r\n    }\r\n    /**\r\n     * See\r\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\r\n     * @template U\r\n     * @param {?} fn\r\n     * @param {?} init\r\n     * @return {?}\r\n     */\r\n    reduce(fn, init) {\r\n        return this._results.reduce(fn, init);\r\n    }\r\n    /**\r\n     * See\r\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEach(fn) { this._results.forEach(fn); }\r\n    /**\r\n     * See\r\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    some(fn) {\r\n        return this._results.some(fn);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toArray() { return this._results.slice(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    [getSymbolIterator()]() { return (/** @type {?} */ (this._results))[getSymbolIterator()](); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return this._results.toString(); }\r\n    /**\r\n     * @param {?} res\r\n     * @return {?}\r\n     */\r\n    reset(res) {\r\n        this._results = flatten(res);\r\n        (/** @type {?} */ (this)).dirty = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    notifyOnChanges() { (/** @type {?} */ (this.changes)).emit(this); }\r\n    /**\r\n     * internal\r\n     * @return {?}\r\n     */\r\n    setDirty() { (/** @type {?} */ (this)).dirty = true; }\r\n    /**\r\n     * internal\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        (/** @type {?} */ (this.changes)).complete();\r\n        (/** @type {?} */ (this.changes)).unsubscribe();\r\n    }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} list\r\n * @return {?}\r\n */\r\nfunction flatten(list) {\r\n    return list.reduce((flat, item) => {\r\n        const /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;\r\n        return (/** @type {?} */ (flat)).concat(flatItem);\r\n    }, []);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _SEPARATOR = '#';\r\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\r\n/**\r\n * Configuration for SystemJsNgModuleLoader.\r\n * token.\r\n *\r\n * \\@experimental\r\n * @abstract\r\n */\r\nclass SystemJsNgModuleLoaderConfig {\r\n}\r\nconst DEFAULT_CONFIG = {\r\n    factoryPathPrefix: '',\r\n    factoryPathSuffix: '.ngfactory',\r\n};\r\n/**\r\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\r\n * \\@experimental\r\n */\r\nclass SystemJsNgModuleLoader {\r\n    /**\r\n     * @param {?} _compiler\r\n     * @param {?=} config\r\n     */\r\n    constructor(_compiler, config) {\r\n        this._compiler = _compiler;\r\n        this._config = config || DEFAULT_CONFIG;\r\n    }\r\n    /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    load(path) {\r\n        const /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\r\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\r\n    }\r\n    /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    loadAndCompile(path) {\r\n        let [module, exportName] = path.split(_SEPARATOR);\r\n        if (exportName === undefined) {\r\n            exportName = 'default';\r\n        }\r\n        return System.import(module)\r\n            .then((module) => module[exportName])\r\n            .then((type) => checkNotEmpty(type, module, exportName))\r\n            .then((type) => this._compiler.compileModuleAsync(type));\r\n    }\r\n    /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    loadFactory(path) {\r\n        let [module, exportName] = path.split(_SEPARATOR);\r\n        let /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;\r\n        if (exportName === undefined) {\r\n            exportName = 'default';\r\n            factoryClassSuffix = '';\r\n        }\r\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\r\n            .then((module) => module[exportName + factoryClassSuffix])\r\n            .then((factory) => checkNotEmpty(factory, module, exportName));\r\n    }\r\n}\r\nSystemJsNgModuleLoader.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nSystemJsNgModuleLoader.ctorParameters = () => [\r\n    { type: Compiler, },\r\n    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\r\n];\r\n/**\r\n * @param {?} value\r\n * @param {?} modulePath\r\n * @param {?} exportName\r\n * @return {?}\r\n */\r\nfunction checkNotEmpty(value, modulePath, exportName) {\r\n    if (!value) {\r\n        throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\r\n    }\r\n    return value;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents an Embedded Template that can be used to instantiate Embedded Views.\r\n *\r\n * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element\r\n * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into\r\n * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for\r\n * the `TemplateRef` from a Component or a Directive via {\\@link Query}.\r\n *\r\n * To instantiate Embedded Views based on a Template, use {\\@link ViewContainerRef#\r\n * createEmbeddedView}, which will create the View and attach it to the View Container.\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass TemplateRef {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents a container where one or more Views can be attached.\r\n *\r\n * The container can contain two kinds of Views. Host Views, created by instantiating a\r\n * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\r\n * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\r\n *\r\n * The location of the View Container within the containing View is specified by the Anchor\r\n * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\r\n * have a single View Container.\r\n *\r\n * Root elements of Views attached to this container become siblings of the Anchor Element in\r\n * the Rendered View.\r\n *\r\n * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\r\n * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass ViewContainerRef {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass ChangeDetectorRef {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass ViewRef extends ChangeDetectorRef {\r\n}\r\n/**\r\n * Represents an Angular View.\r\n *\r\n * <!-- TODO: move the next two paragraphs to the dev guide -->\r\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\r\n * Elements which are created and destroyed together.\r\n *\r\n * Properties of elements in a View can change, but the structure (number and order) of elements in\r\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\r\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\r\n * <!-- /TODO -->\r\n *\r\n * ### Example\r\n *\r\n * Given this template...\r\n *\r\n * ```\r\n * Count: {{items.length}}\r\n * <ul>\r\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\r\n * </ul>\r\n * ```\r\n *\r\n * We have two {\\@link TemplateRef}s:\r\n *\r\n * Outer {\\@link TemplateRef}:\r\n * ```\r\n * Count: {{items.length}}\r\n * <ul>\r\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\r\n * </ul>\r\n * ```\r\n *\r\n * Inner {\\@link TemplateRef}:\r\n * ```\r\n *   <li>{{item}}</li>\r\n * ```\r\n *\r\n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\r\n *\r\n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\r\n *\r\n * ```\r\n * <!-- ViewRef: outer-0 -->\r\n * Count: 2\r\n * <ul>\r\n *   <ng-template view-container-ref></ng-template>\r\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\r\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\r\n * </ul>\r\n * <!-- /ViewRef: outer-0 -->\r\n * ```\r\n * \\@experimental\r\n * @abstract\r\n */\r\nclass EmbeddedViewRef extends ViewRef {\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Public API for compiler\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass EventListener {\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} callback\r\n     */\r\n    constructor(name, callback) {\r\n        this.name = name;\r\n        this.callback = callback;\r\n    }\r\n}\r\n/**\r\n * \\@experimental All debugging apis are currently experimental.\r\n */\r\nclass DebugNode {\r\n    /**\r\n     * @param {?} nativeNode\r\n     * @param {?} parent\r\n     * @param {?} _debugContext\r\n     */\r\n    constructor(nativeNode, parent, _debugContext) {\r\n        this._debugContext = _debugContext;\r\n        this.nativeNode = nativeNode;\r\n        if (parent && parent instanceof DebugElement) {\r\n            parent.addChild(this);\r\n        }\r\n        else {\r\n            this.parent = null;\r\n        }\r\n        this.listeners = [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get injector() { return this._debugContext.injector; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get componentInstance() { return this._debugContext.component; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get context() { return this._debugContext.context; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get references() { return this._debugContext.references; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get providerTokens() { return this._debugContext.providerTokens; }\r\n}\r\n/**\r\n * \\@experimental All debugging apis are currently experimental.\r\n */\r\nclass DebugElement extends DebugNode {\r\n    /**\r\n     * @param {?} nativeNode\r\n     * @param {?} parent\r\n     * @param {?} _debugContext\r\n     */\r\n    constructor(nativeNode, parent, _debugContext) {\r\n        super(nativeNode, parent, _debugContext);\r\n        this.properties = {};\r\n        this.attributes = {};\r\n        this.classes = {};\r\n        this.styles = {};\r\n        this.childNodes = [];\r\n        this.nativeElement = nativeNode;\r\n    }\r\n    /**\r\n     * @param {?} child\r\n     * @return {?}\r\n     */\r\n    addChild(child) {\r\n        if (child) {\r\n            this.childNodes.push(child);\r\n            child.parent = this;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} child\r\n     * @return {?}\r\n     */\r\n    removeChild(child) {\r\n        const /** @type {?} */ childIndex = this.childNodes.indexOf(child);\r\n        if (childIndex !== -1) {\r\n            child.parent = null;\r\n            this.childNodes.splice(childIndex, 1);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} child\r\n     * @param {?} newChildren\r\n     * @return {?}\r\n     */\r\n    insertChildrenAfter(child, newChildren) {\r\n        const /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\r\n        if (siblingIndex !== -1) {\r\n            this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\r\n            newChildren.forEach(c => {\r\n                if (c.parent) {\r\n                    c.parent.removeChild(c);\r\n                }\r\n                c.parent = this;\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} refChild\r\n     * @param {?} newChild\r\n     * @return {?}\r\n     */\r\n    insertBefore(refChild, newChild) {\r\n        const /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);\r\n        if (refIndex === -1) {\r\n            this.addChild(newChild);\r\n        }\r\n        else {\r\n            if (newChild.parent) {\r\n                newChild.parent.removeChild(newChild);\r\n            }\r\n            newChild.parent = this;\r\n            this.childNodes.splice(refIndex, 0, newChild);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} predicate\r\n     * @return {?}\r\n     */\r\n    query(predicate) {\r\n        const /** @type {?} */ results = this.queryAll(predicate);\r\n        return results[0] || null;\r\n    }\r\n    /**\r\n     * @param {?} predicate\r\n     * @return {?}\r\n     */\r\n    queryAll(predicate) {\r\n        const /** @type {?} */ matches = [];\r\n        _queryElementChildren(this, predicate, matches);\r\n        return matches;\r\n    }\r\n    /**\r\n     * @param {?} predicate\r\n     * @return {?}\r\n     */\r\n    queryAllNodes(predicate) {\r\n        const /** @type {?} */ matches = [];\r\n        _queryNodeChildren(this, predicate, matches);\r\n        return matches;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get children() {\r\n        return /** @type {?} */ (this.childNodes.filter((node) => node instanceof DebugElement));\r\n    }\r\n    /**\r\n     * @param {?} eventName\r\n     * @param {?} eventObj\r\n     * @return {?}\r\n     */\r\n    triggerEventHandler(eventName, eventObj) {\r\n        this.listeners.forEach((listener) => {\r\n            if (listener.name == eventName) {\r\n                listener.callback(eventObj);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * \\@experimental\r\n * @param {?} debugEls\r\n * @return {?}\r\n */\r\nfunction asNativeElements(debugEls) {\r\n    return debugEls.map((el) => el.nativeElement);\r\n}\r\n/**\r\n * @param {?} element\r\n * @param {?} predicate\r\n * @param {?} matches\r\n * @return {?}\r\n */\r\nfunction _queryElementChildren(element, predicate, matches) {\r\n    element.childNodes.forEach(node => {\r\n        if (node instanceof DebugElement) {\r\n            if (predicate(node)) {\r\n                matches.push(node);\r\n            }\r\n            _queryElementChildren(node, predicate, matches);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @param {?} parentNode\r\n * @param {?} predicate\r\n * @param {?} matches\r\n * @return {?}\r\n */\r\nfunction _queryNodeChildren(parentNode, predicate, matches) {\r\n    if (parentNode instanceof DebugElement) {\r\n        parentNode.childNodes.forEach(node => {\r\n            if (predicate(node)) {\r\n                matches.push(node);\r\n            }\r\n            if (node instanceof DebugElement) {\r\n                _queryNodeChildren(node, predicate, matches);\r\n            }\r\n        });\r\n    }\r\n}\r\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\r\nconst _nativeNodeToDebugNode = new Map();\r\n/**\r\n * \\@experimental\r\n * @param {?} nativeNode\r\n * @return {?}\r\n */\r\nfunction getDebugNode(nativeNode) {\r\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction indexDebugNode(node) {\r\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\r\n}\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction removeDebugNodeFromIndex(node) {\r\n    _nativeNodeToDebugNode.delete(node.nativeNode);\r\n}\r\n/**\r\n * A boolean-valued function over a value, possibly including context information\r\n * regarding that value's position in an array.\r\n *\r\n * \\@experimental All debugging apis are currently experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction devModeEqual(a, b) {\r\n    const /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);\r\n    const /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);\r\n    if (isListLikeIterableA && isListLikeIterableB) {\r\n        return areIterablesEqual(a, b, devModeEqual);\r\n    }\r\n    else {\r\n        const /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');\r\n        const /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');\r\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\r\n            return true;\r\n        }\r\n        else {\r\n            return looseIdentical(a, b);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\r\n * reference\r\n * has not changed.\r\n *\r\n * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * if (this._latestValue === this._latestReturnedValue) {\r\n *    return this._latestReturnedValue;\r\n *  } else {\r\n *    this._latestReturnedValue = this._latestValue;\r\n *    return WrappedValue.wrap(this._latestValue); // this will force update\r\n *  }\r\n * ```\r\n * \\@stable\r\n */\r\nclass WrappedValue {\r\n    /**\r\n     * @param {?} wrapped\r\n     */\r\n    constructor(wrapped) {\r\n        this.wrapped = wrapped;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    static wrap(value) { return new WrappedValue(value); }\r\n}\r\n/**\r\n * Helper class for unwrapping WrappedValue s\r\n */\r\nclass ValueUnwrapper {\r\n    constructor() {\r\n        this.hasWrappedValue = false;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    unwrap(value) {\r\n        if (value instanceof WrappedValue) {\r\n            this.hasWrappedValue = true;\r\n            return value.wrapped;\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reset() { this.hasWrappedValue = false; }\r\n}\r\n/**\r\n * Represents a basic change from a previous to a new value.\r\n * \\@stable\r\n */\r\nclass SimpleChange {\r\n    /**\r\n     * @param {?} previousValue\r\n     * @param {?} currentValue\r\n     * @param {?} firstChange\r\n     */\r\n    constructor(previousValue, currentValue, firstChange) {\r\n        this.previousValue = previousValue;\r\n        this.currentValue = currentValue;\r\n        this.firstChange = firstChange;\r\n    }\r\n    /**\r\n     * Check whether the new value is the first value assigned.\r\n     * @return {?}\r\n     */\r\n    isFirstChange() { return this.firstChange; }\r\n}\r\n/**\r\n * @param {?} obj\r\n * @return {?}\r\n */\r\nfunction isListLikeIterable(obj) {\r\n    if (!isJsObject(obj))\r\n        return false;\r\n    return Array.isArray(obj) ||\r\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\r\n            // JS Map are iterables but return entries as [k, v]\r\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @param {?} comparator\r\n * @return {?}\r\n */\r\nfunction areIterablesEqual(a, b, comparator) {\r\n    const /** @type {?} */ iterator1 = a[getSymbolIterator()]();\r\n    const /** @type {?} */ iterator2 = b[getSymbolIterator()]();\r\n    while (true) {\r\n        const /** @type {?} */ item1 = iterator1.next();\r\n        const /** @type {?} */ item2 = iterator2.next();\r\n        if (item1.done && item2.done)\r\n            return true;\r\n        if (item1.done || item2.done)\r\n            return false;\r\n        if (!comparator(item1.value, item2.value))\r\n            return false;\r\n    }\r\n}\r\n/**\r\n * @param {?} obj\r\n * @param {?} fn\r\n * @return {?}\r\n */\r\nfunction iterateListLike(obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (let /** @type {?} */ i = 0; i < obj.length; i++) {\r\n            fn(obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        const /** @type {?} */ iterator = obj[getSymbolIterator()]();\r\n        let /** @type {?} */ item;\r\n        while (!((item = iterator.next()).done)) {\r\n            fn(item.value);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} o\r\n * @return {?}\r\n */\r\nfunction isJsObject(o) {\r\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass DefaultIterableDifferFactory {\r\n    constructor() { }\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    supports(obj) { return isListLikeIterable(obj); }\r\n    /**\r\n     * @template V\r\n     * @param {?=} trackByFn\r\n     * @return {?}\r\n     */\r\n    create(trackByFn) {\r\n        return new DefaultIterableDiffer(trackByFn);\r\n    }\r\n}\r\nconst trackByIdentity = (index, item) => item;\r\n/**\r\n * @deprecated v4.0.0 - Should not be part of public API.\r\n */\r\nclass DefaultIterableDiffer {\r\n    /**\r\n     * @param {?=} trackByFn\r\n     */\r\n    constructor(trackByFn) {\r\n        this.length = 0;\r\n        this._linkedRecords = null;\r\n        this._unlinkedRecords = null;\r\n        this._previousItHead = null;\r\n        this._itHead = null;\r\n        this._itTail = null;\r\n        this._additionsHead = null;\r\n        this._additionsTail = null;\r\n        this._movesHead = null;\r\n        this._movesTail = null;\r\n        this._removalsHead = null;\r\n        this._removalsTail = null;\r\n        this._identityChangesHead = null;\r\n        this._identityChangesTail = null;\r\n        this._trackByFn = trackByFn || trackByIdentity;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachItem(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._itHead; record !== null; record = record._next) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachOperation(fn) {\r\n        let /** @type {?} */ nextIt = this._itHead;\r\n        let /** @type {?} */ nextRemove = this._removalsHead;\r\n        let /** @type {?} */ addRemoveOffset = 0;\r\n        let /** @type {?} */ moveOffsets = null;\r\n        while (nextIt || nextRemove) {\r\n            // Figure out which is the next record to process\r\n            // Order: remove, add, move\r\n            const /** @type {?} */ record = !nextRemove ||\r\n                nextIt && /** @type {?} */ ((nextIt.currentIndex)) < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */\r\n                ((nextIt)) :\r\n                nextRemove;\r\n            const /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\r\n            const /** @type {?} */ currentIndex = record.currentIndex;\r\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\r\n            if (record === nextRemove) {\r\n                addRemoveOffset--;\r\n                nextRemove = nextRemove._nextRemoved;\r\n            }\r\n            else {\r\n                nextIt = /** @type {?} */ ((nextIt))._next;\r\n                if (record.previousIndex == null) {\r\n                    addRemoveOffset++;\r\n                }\r\n                else {\r\n                    // INVARIANT:  currentIndex < previousIndex\r\n                    if (!moveOffsets)\r\n                        moveOffsets = [];\r\n                    const /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\r\n                    const /** @type {?} */ localCurrentIndex = /** @type {?} */ ((currentIndex)) - addRemoveOffset;\r\n                    if (localMovePreviousIndex != localCurrentIndex) {\r\n                        for (let /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\r\n                            const /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\r\n                            const /** @type {?} */ index = offset + i;\r\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\r\n                                moveOffsets[i] = offset + 1;\r\n                            }\r\n                        }\r\n                        const /** @type {?} */ previousIndex = record.previousIndex;\r\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\r\n                    }\r\n                }\r\n            }\r\n            if (adjPreviousIndex !== currentIndex) {\r\n                fn(record, adjPreviousIndex, currentIndex);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachPreviousItem(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachAddedItem(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachMovedItem(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachRemovedItem(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachIdentityChange(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} collection\r\n     * @return {?}\r\n     */\r\n    diff(collection) {\r\n        if (collection == null)\r\n            collection = [];\r\n        if (!isListLikeIterable(collection)) {\r\n            throw new Error(`Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\r\n        }\r\n        if (this.check(collection)) {\r\n            return this;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    onDestroy() { }\r\n    /**\r\n     * @param {?} collection\r\n     * @return {?}\r\n     */\r\n    check(collection) {\r\n        this._reset();\r\n        let /** @type {?} */ record = this._itHead;\r\n        let /** @type {?} */ mayBeDirty = false;\r\n        let /** @type {?} */ index;\r\n        let /** @type {?} */ item;\r\n        let /** @type {?} */ itemTrackBy;\r\n        if (Array.isArray(collection)) {\r\n            (/** @type {?} */ (this)).length = collection.length;\r\n            for (let /** @type {?} */ index = 0; index < this.length; index++) {\r\n                item = collection[index];\r\n                itemTrackBy = this._trackByFn(index, item);\r\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\r\n                    record = this._mismatch(record, item, itemTrackBy, index);\r\n                    mayBeDirty = true;\r\n                }\r\n                else {\r\n                    if (mayBeDirty) {\r\n                        // TODO(misko): can we limit this to duplicates only?\r\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\r\n                    }\r\n                    if (!looseIdentical(record.item, item))\r\n                        this._addIdentityChange(record, item);\r\n                }\r\n                record = record._next;\r\n            }\r\n        }\r\n        else {\r\n            index = 0;\r\n            iterateListLike(collection, (item) => {\r\n                itemTrackBy = this._trackByFn(index, item);\r\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\r\n                    record = this._mismatch(record, item, itemTrackBy, index);\r\n                    mayBeDirty = true;\r\n                }\r\n                else {\r\n                    if (mayBeDirty) {\r\n                        // TODO(misko): can we limit this to duplicates only?\r\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\r\n                    }\r\n                    if (!looseIdentical(record.item, item))\r\n                        this._addIdentityChange(record, item);\r\n                }\r\n                record = record._next;\r\n                index++;\r\n            });\r\n            (/** @type {?} */ (this)).length = index;\r\n        }\r\n        this._truncate(record);\r\n        (/** @type {?} */ (this)).collection = collection;\r\n        return this.isDirty;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isDirty() {\r\n        return this._additionsHead !== null || this._movesHead !== null ||\r\n            this._removalsHead !== null || this._identityChangesHead !== null;\r\n    }\r\n    /**\r\n     * Reset the state of the change objects to show no changes. This means set previousKey to\r\n     * currentKey, and clear all of the queues (additions, moves, removals).\r\n     * Set the previousIndexes of moved and added items to their currentIndexes\r\n     * Reset the list of additions, moves and removals\r\n     *\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _reset() {\r\n        if (this.isDirty) {\r\n            let /** @type {?} */ record;\r\n            let /** @type {?} */ nextRecord;\r\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\r\n                record._nextPrevious = record._next;\r\n            }\r\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n                record.previousIndex = record.currentIndex;\r\n            }\r\n            this._additionsHead = this._additionsTail = null;\r\n            for (record = this._movesHead; record !== null; record = nextRecord) {\r\n                record.previousIndex = record.currentIndex;\r\n                nextRecord = record._nextMoved;\r\n            }\r\n            this._movesHead = this._movesTail = null;\r\n            this._removalsHead = this._removalsTail = null;\r\n            this._identityChangesHead = this._identityChangesTail = null;\r\n            // todo(vicb) when assert gets supported\r\n            // assert(!this.isDirty);\r\n        }\r\n    }\r\n    /**\r\n     * This is the core function which handles differences between collections.\r\n     *\r\n     * - `record` is the record which we saw at this position last time. If null then it is a new\r\n     *   item.\r\n     * - `item` is the current item in the collection\r\n     * - `index` is the position of the item in the collection\r\n     *\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} item\r\n     * @param {?} itemTrackBy\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _mismatch(record, item, itemTrackBy, index) {\r\n        // The previous record after which we will append the current one.\r\n        let /** @type {?} */ previousRecord;\r\n        if (record === null) {\r\n            previousRecord = this._itTail;\r\n        }\r\n        else {\r\n            previousRecord = record._prev;\r\n            // Remove the record from the collection since we know it does not match the item.\r\n            this._remove(record);\r\n        }\r\n        // Attempt to see if we have seen the item before.\r\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\r\n        if (record !== null) {\r\n            // We have seen this before, we need to move it forward in the collection.\r\n            // But first we need to check if identity changed, so we can update in view if necessary\r\n            if (!looseIdentical(record.item, item))\r\n                this._addIdentityChange(record, item);\r\n            this._moveAfter(record, previousRecord, index);\r\n        }\r\n        else {\r\n            // Never seen it, check evicted list.\r\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\r\n            if (record !== null) {\r\n                // It is an item which we have evicted earlier: reinsert it back into the list.\r\n                // But first we need to check if identity changed, so we can update in view if necessary\r\n                if (!looseIdentical(record.item, item))\r\n                    this._addIdentityChange(record, item);\r\n                this._reinsertAfter(record, previousRecord, index);\r\n            }\r\n            else {\r\n                // It is a new item: add it.\r\n                record =\r\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\r\n            }\r\n        }\r\n        return record;\r\n    }\r\n    /**\r\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\r\n     *\r\n     * Use case: `[a, a]` => `[b, a, a]`\r\n     *\r\n     * If we did not have this check then the insertion of `b` would:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\r\n     *   3) reinsert `a` at index 2. <-- this is wrong!\r\n     *\r\n     * The correct behavior is:\r\n     *   1) evict first `a`\r\n     *   2) insert `b` at `0` index.\r\n     *   3) reinsert `a` at index 1.\r\n     *   3) move `a` at from `1` to `2`.\r\n     *\r\n     *\r\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\r\n     * have already been removed:\r\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\r\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\r\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\r\n     * at the end.\r\n     *\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} item\r\n     * @param {?} itemTrackBy\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _verifyReinsertion(record, item, itemTrackBy, index) {\r\n        let /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\r\n        if (reinsertRecord !== null) {\r\n            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);\r\n        }\r\n        else if (record.currentIndex != index) {\r\n            record.currentIndex = index;\r\n            this._addToMoves(record, index);\r\n        }\r\n        return record;\r\n    }\r\n    /**\r\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\r\n     *\r\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\r\n     *\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _truncate(record) {\r\n        // Anything after that needs to be removed;\r\n        while (record !== null) {\r\n            const /** @type {?} */ nextRecord = record._next;\r\n            this._addToRemovals(this._unlink(record));\r\n            record = nextRecord;\r\n        }\r\n        if (this._unlinkedRecords !== null) {\r\n            this._unlinkedRecords.clear();\r\n        }\r\n        if (this._additionsTail !== null) {\r\n            this._additionsTail._nextAdded = null;\r\n        }\r\n        if (this._movesTail !== null) {\r\n            this._movesTail._nextMoved = null;\r\n        }\r\n        if (this._itTail !== null) {\r\n            this._itTail._next = null;\r\n        }\r\n        if (this._removalsTail !== null) {\r\n            this._removalsTail._nextRemoved = null;\r\n        }\r\n        if (this._identityChangesTail !== null) {\r\n            this._identityChangesTail._nextIdentityChange = null;\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _reinsertAfter(record, prevRecord, index) {\r\n        if (this._unlinkedRecords !== null) {\r\n            this._unlinkedRecords.remove(record);\r\n        }\r\n        const /** @type {?} */ prev = record._prevRemoved;\r\n        const /** @type {?} */ next = record._nextRemoved;\r\n        if (prev === null) {\r\n            this._removalsHead = next;\r\n        }\r\n        else {\r\n            prev._nextRemoved = next;\r\n        }\r\n        if (next === null) {\r\n            this._removalsTail = prev;\r\n        }\r\n        else {\r\n            next._prevRemoved = prev;\r\n        }\r\n        this._insertAfter(record, prevRecord, index);\r\n        this._addToMoves(record, index);\r\n        return record;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _moveAfter(record, prevRecord, index) {\r\n        this._unlink(record);\r\n        this._insertAfter(record, prevRecord, index);\r\n        this._addToMoves(record, index);\r\n        return record;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _addAfter(record, prevRecord, index) {\r\n        this._insertAfter(record, prevRecord, index);\r\n        if (this._additionsTail === null) {\r\n            // todo(vicb)\r\n            // assert(this._additionsHead === null);\r\n            this._additionsTail = this._additionsHead = record;\r\n        }\r\n        else {\r\n            // todo(vicb)\r\n            // assert(_additionsTail._nextAdded === null);\r\n            // assert(record._nextAdded === null);\r\n            this._additionsTail = this._additionsTail._nextAdded = record;\r\n        }\r\n        return record;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} prevRecord\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _insertAfter(record, prevRecord, index) {\r\n        // todo(vicb)\r\n        // assert(record != prevRecord);\r\n        // assert(record._next === null);\r\n        // assert(record._prev === null);\r\n        const /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;\r\n        // todo(vicb)\r\n        // assert(next != record);\r\n        // assert(prevRecord != record);\r\n        record._next = next;\r\n        record._prev = prevRecord;\r\n        if (next === null) {\r\n            this._itTail = record;\r\n        }\r\n        else {\r\n            next._prev = record;\r\n        }\r\n        if (prevRecord === null) {\r\n            this._itHead = record;\r\n        }\r\n        else {\r\n            prevRecord._next = record;\r\n        }\r\n        if (this._linkedRecords === null) {\r\n            this._linkedRecords = new _DuplicateMap();\r\n        }\r\n        this._linkedRecords.put(record);\r\n        record.currentIndex = index;\r\n        return record;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _remove(record) {\r\n        return this._addToRemovals(this._unlink(record));\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _unlink(record) {\r\n        if (this._linkedRecords !== null) {\r\n            this._linkedRecords.remove(record);\r\n        }\r\n        const /** @type {?} */ prev = record._prev;\r\n        const /** @type {?} */ next = record._next;\r\n        // todo(vicb)\r\n        // assert((record._prev = null) === null);\r\n        // assert((record._next = null) === null);\r\n        if (prev === null) {\r\n            this._itHead = next;\r\n        }\r\n        else {\r\n            prev._next = next;\r\n        }\r\n        if (next === null) {\r\n            this._itTail = prev;\r\n        }\r\n        else {\r\n            next._prev = prev;\r\n        }\r\n        return record;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} toIndex\r\n     * @return {?}\r\n     */\r\n    _addToMoves(record, toIndex) {\r\n        // todo(vicb)\r\n        // assert(record._nextMoved === null);\r\n        if (record.previousIndex === toIndex) {\r\n            return record;\r\n        }\r\n        if (this._movesTail === null) {\r\n            // todo(vicb)\r\n            // assert(_movesHead === null);\r\n            this._movesTail = this._movesHead = record;\r\n        }\r\n        else {\r\n            // todo(vicb)\r\n            // assert(_movesTail._nextMoved === null);\r\n            this._movesTail = this._movesTail._nextMoved = record;\r\n        }\r\n        return record;\r\n    }\r\n    /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _addToRemovals(record) {\r\n        if (this._unlinkedRecords === null) {\r\n            this._unlinkedRecords = new _DuplicateMap();\r\n        }\r\n        this._unlinkedRecords.put(record);\r\n        record.currentIndex = null;\r\n        record._nextRemoved = null;\r\n        if (this._removalsTail === null) {\r\n            // todo(vicb)\r\n            // assert(_removalsHead === null);\r\n            this._removalsTail = this._removalsHead = record;\r\n            record._prevRemoved = null;\r\n        }\r\n        else {\r\n            // todo(vicb)\r\n            // assert(_removalsTail._nextRemoved === null);\r\n            // assert(record._nextRemoved === null);\r\n            record._prevRemoved = this._removalsTail;\r\n            this._removalsTail = this._removalsTail._nextRemoved = record;\r\n        }\r\n        return record;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} record\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    _addIdentityChange(record, item) {\r\n        record.item = item;\r\n        if (this._identityChangesTail === null) {\r\n            this._identityChangesTail = this._identityChangesHead = record;\r\n        }\r\n        else {\r\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\r\n        }\r\n        return record;\r\n    }\r\n}\r\n/**\r\n * \\@stable\r\n */\r\nclass IterableChangeRecord_ {\r\n    /**\r\n     * @param {?} item\r\n     * @param {?} trackById\r\n     */\r\n    constructor(item, trackById) {\r\n        this.item = item;\r\n        this.trackById = trackById;\r\n        this.currentIndex = null;\r\n        this.previousIndex = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextPrevious = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._prev = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._next = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._prevDup = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextDup = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._prevRemoved = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextRemoved = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextAdded = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextMoved = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextIdentityChange = null;\r\n    }\r\n}\r\nclass _DuplicateItemRecordList {\r\n    constructor() {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._head = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._tail = null;\r\n    }\r\n    /**\r\n     * Append the record to the list of duplicates.\r\n     *\r\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    add(record) {\r\n        if (this._head === null) {\r\n            this._head = this._tail = record;\r\n            record._nextDup = null;\r\n            record._prevDup = null;\r\n        }\r\n        else {\r\n            /** @type {?} */ ((\r\n            // todo(vicb)\r\n            // assert(record.item ==  _head.item ||\r\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\r\n            this._tail))._nextDup = record;\r\n            record._prevDup = this._tail;\r\n            record._nextDup = null;\r\n            this._tail = record;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} trackById\r\n     * @param {?} atOrAfterIndex\r\n     * @return {?}\r\n     */\r\n    get(trackById, atOrAfterIndex) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._head; record !== null; record = record._nextDup) {\r\n            if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */ ((record.currentIndex))) &&\r\n                looseIdentical(record.trackById, trackById)) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\r\n     *\r\n     * Returns whether the list of duplicates is empty.\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    remove(record) {\r\n        // todo(vicb)\r\n        // assert(() {\r\n        //  // verify that the record being removed is in the list.\r\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\r\n        //    if (identical(cursor, record)) return true;\r\n        //  }\r\n        //  return false;\r\n        //});\r\n        const /** @type {?} */ prev = record._prevDup;\r\n        const /** @type {?} */ next = record._nextDup;\r\n        if (prev === null) {\r\n            this._head = next;\r\n        }\r\n        else {\r\n            prev._nextDup = next;\r\n        }\r\n        if (next === null) {\r\n            this._tail = prev;\r\n        }\r\n        else {\r\n            next._prevDup = prev;\r\n        }\r\n        return this._head === null;\r\n    }\r\n}\r\nclass _DuplicateMap {\r\n    constructor() {\r\n        this.map = new Map();\r\n    }\r\n    /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    put(record) {\r\n        const /** @type {?} */ key = record.trackById;\r\n        let /** @type {?} */ duplicates = this.map.get(key);\r\n        if (!duplicates) {\r\n            duplicates = new _DuplicateItemRecordList();\r\n            this.map.set(key, duplicates);\r\n        }\r\n        duplicates.add(record);\r\n    }\r\n    /**\r\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\r\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\r\n     *\r\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\r\n     * have any more `a`s needs to return the second `a`.\r\n     * @param {?} trackById\r\n     * @param {?} atOrAfterIndex\r\n     * @return {?}\r\n     */\r\n    get(trackById, atOrAfterIndex) {\r\n        const /** @type {?} */ key = trackById;\r\n        const /** @type {?} */ recordList = this.map.get(key);\r\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\r\n    }\r\n    /**\r\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\r\n     *\r\n     * The list of duplicates also is removed from the map if it gets empty.\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    remove(record) {\r\n        const /** @type {?} */ key = record.trackById;\r\n        const /** @type {?} */ recordList = /** @type {?} */ ((this.map.get(key)));\r\n        // Remove the list of duplicates when it gets empty\r\n        if (recordList.remove(record)) {\r\n            this.map.delete(key);\r\n        }\r\n        return record;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isEmpty() { return this.map.size === 0; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clear() { this.map.clear(); }\r\n}\r\n/**\r\n * @param {?} item\r\n * @param {?} addRemoveOffset\r\n * @param {?} moveOffsets\r\n * @return {?}\r\n */\r\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\r\n    const /** @type {?} */ previousIndex = item.previousIndex;\r\n    if (previousIndex === null)\r\n        return previousIndex;\r\n    let /** @type {?} */ moveOffset = 0;\r\n    if (moveOffsets && previousIndex < moveOffsets.length) {\r\n        moveOffset = moveOffsets[previousIndex];\r\n    }\r\n    return previousIndex + addRemoveOffset + moveOffset;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass DefaultKeyValueDifferFactory {\r\n    constructor() { }\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    supports(obj) { return obj instanceof Map || isJsObject(obj); }\r\n    /**\r\n     * @template K, V\r\n     * @return {?}\r\n     */\r\n    create() { return new DefaultKeyValueDiffer(); }\r\n}\r\nclass DefaultKeyValueDiffer {\r\n    constructor() {\r\n        this._records = new Map();\r\n        this._mapHead = null;\r\n        this._appendAfter = null;\r\n        this._previousMapHead = null;\r\n        this._changesHead = null;\r\n        this._changesTail = null;\r\n        this._additionsHead = null;\r\n        this._additionsTail = null;\r\n        this._removalsHead = null;\r\n        this._removalsTail = null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isDirty() {\r\n        return this._additionsHead !== null || this._changesHead !== null ||\r\n            this._removalsHead !== null;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachItem(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._mapHead; record !== null; record = record._next) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachPreviousItem(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachChangedItem(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachAddedItem(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    forEachRemovedItem(fn) {\r\n        let /** @type {?} */ record;\r\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\r\n            fn(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?=} map\r\n     * @return {?}\r\n     */\r\n    diff(map) {\r\n        if (!map) {\r\n            map = new Map();\r\n        }\r\n        else if (!(map instanceof Map || isJsObject(map))) {\r\n            throw new Error(`Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\r\n        }\r\n        return this.check(map) ? this : null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    onDestroy() { }\r\n    /**\r\n     * Check the current state of the map vs the previous.\r\n     * The algorithm is optimised for when the keys do no change.\r\n     * @param {?} map\r\n     * @return {?}\r\n     */\r\n    check(map) {\r\n        this._reset();\r\n        let /** @type {?} */ insertBefore = this._mapHead;\r\n        this._appendAfter = null;\r\n        this._forEach(map, (value, key) => {\r\n            if (insertBefore && insertBefore.key === key) {\r\n                this._maybeAddToChanges(insertBefore, value);\r\n                this._appendAfter = insertBefore;\r\n                insertBefore = insertBefore._next;\r\n            }\r\n            else {\r\n                const /** @type {?} */ record = this._getOrCreateRecordForKey(key, value);\r\n                insertBefore = this._insertBeforeOrAppend(insertBefore, record);\r\n            }\r\n        });\r\n        // Items remaining at the end of the list have been deleted\r\n        if (insertBefore) {\r\n            if (insertBefore._prev) {\r\n                insertBefore._prev._next = null;\r\n            }\r\n            this._removalsHead = insertBefore;\r\n            for (let /** @type {?} */ record = insertBefore; record !== null; record = record._nextRemoved) {\r\n                if (record === this._mapHead) {\r\n                    this._mapHead = null;\r\n                }\r\n                this._records.delete(record.key);\r\n                record._nextRemoved = record._next;\r\n                record.previousValue = record.currentValue;\r\n                record.currentValue = null;\r\n                record._prev = null;\r\n                record._next = null;\r\n            }\r\n        }\r\n        // Make sure tails have no next records from previous runs\r\n        if (this._changesTail)\r\n            this._changesTail._nextChanged = null;\r\n        if (this._additionsTail)\r\n            this._additionsTail._nextAdded = null;\r\n        return this.isDirty;\r\n    }\r\n    /**\r\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\r\n     *\r\n     * Notes:\r\n     * - This method appends at `this._appendAfter`,\r\n     * - This method updates `this._appendAfter`,\r\n     * - The return value is the new value for the insertion pointer.\r\n     * @param {?} before\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _insertBeforeOrAppend(before, record) {\r\n        if (before) {\r\n            const /** @type {?} */ prev = before._prev;\r\n            record._next = before;\r\n            record._prev = prev;\r\n            before._prev = record;\r\n            if (prev) {\r\n                prev._next = record;\r\n            }\r\n            if (before === this._mapHead) {\r\n                this._mapHead = record;\r\n            }\r\n            this._appendAfter = before;\r\n            return before;\r\n        }\r\n        if (this._appendAfter) {\r\n            this._appendAfter._next = record;\r\n            record._prev = this._appendAfter;\r\n        }\r\n        else {\r\n            this._mapHead = record;\r\n        }\r\n        this._appendAfter = record;\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} key\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _getOrCreateRecordForKey(key, value) {\r\n        if (this._records.has(key)) {\r\n            const /** @type {?} */ record = /** @type {?} */ ((this._records.get(key)));\r\n            this._maybeAddToChanges(record, value);\r\n            const /** @type {?} */ prev = record._prev;\r\n            const /** @type {?} */ next = record._next;\r\n            if (prev) {\r\n                prev._next = next;\r\n            }\r\n            if (next) {\r\n                next._prev = prev;\r\n            }\r\n            record._next = null;\r\n            record._prev = null;\r\n            return record;\r\n        }\r\n        const /** @type {?} */ record = new KeyValueChangeRecord_(key);\r\n        this._records.set(key, record);\r\n        record.currentValue = value;\r\n        this._addToAdditions(record);\r\n        return record;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _reset() {\r\n        if (this.isDirty) {\r\n            let /** @type {?} */ record;\r\n            // let `_previousMapHead` contain the state of the map before the changes\r\n            this._previousMapHead = this._mapHead;\r\n            for (record = this._previousMapHead; record !== null; record = record._next) {\r\n                record._nextPrevious = record._next;\r\n            }\r\n            // Update `record.previousValue` with the value of the item before the changes\r\n            // We need to update all changed items (that's those which have been added and changed)\r\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\r\n                record.previousValue = record.currentValue;\r\n            }\r\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\r\n                record.previousValue = record.currentValue;\r\n            }\r\n            this._changesHead = this._changesTail = null;\r\n            this._additionsHead = this._additionsTail = null;\r\n            this._removalsHead = null;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} record\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    _maybeAddToChanges(record, newValue) {\r\n        if (!looseIdentical(newValue, record.currentValue)) {\r\n            record.previousValue = record.currentValue;\r\n            record.currentValue = newValue;\r\n            this._addToChanges(record);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _addToAdditions(record) {\r\n        if (this._additionsHead === null) {\r\n            this._additionsHead = this._additionsTail = record;\r\n        }\r\n        else {\r\n            /** @type {?} */ ((this._additionsTail))._nextAdded = record;\r\n            this._additionsTail = record;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} record\r\n     * @return {?}\r\n     */\r\n    _addToChanges(record) {\r\n        if (this._changesHead === null) {\r\n            this._changesHead = this._changesTail = record;\r\n        }\r\n        else {\r\n            /** @type {?} */ ((this._changesTail))._nextChanged = record;\r\n            this._changesTail = record;\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @template K, V\r\n     * @param {?} obj\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    _forEach(obj, fn) {\r\n        if (obj instanceof Map) {\r\n            obj.forEach(fn);\r\n        }\r\n        else {\r\n            Object.keys(obj).forEach(k => fn(obj[k], k));\r\n        }\r\n    }\r\n}\r\n/**\r\n * \\@stable\r\n */\r\nclass KeyValueChangeRecord_ {\r\n    /**\r\n     * @param {?} key\r\n     */\r\n    constructor(key) {\r\n        this.key = key;\r\n        this.previousValue = null;\r\n        this.currentValue = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextPrevious = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._next = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._prev = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextAdded = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextRemoved = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._nextChanged = null;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A strategy for tracking changes over time to an iterable. Used by {\\@link NgForOf} to\r\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * An object describing the changes in the `Iterable` collection since last time\r\n * `IterableDiffer#diff()` was invoked.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Record representing the item change information.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\r\n * @record\r\n */\r\n\r\n/**\r\n * An optional function passed into {\\@link NgForOf} that defines how to track\r\n * items in an iterable (e.g. fby index or id)\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Provides a factory for {\\@link IterableDiffer}.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\r\n * \\@stable\r\n */\r\nclass IterableDiffers {\r\n    /**\r\n     * @param {?} factories\r\n     */\r\n    constructor(factories) { this.factories = factories; }\r\n    /**\r\n     * @param {?} factories\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    static create(factories, parent) {\r\n        if (parent != null) {\r\n            const /** @type {?} */ copied = parent.factories.slice();\r\n            factories = factories.concat(copied);\r\n            return new IterableDiffers(factories);\r\n        }\r\n        else {\r\n            return new IterableDiffers(factories);\r\n        }\r\n    }\r\n    /**\r\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\r\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\r\n     * {\\@link IterableDiffers} instance.\r\n     *\r\n     * The following example shows how to extend an existing list of factories,\r\n     * which will only be applied to the injector for this component and its children.\r\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * \\@Component({\r\n     *   viewProviders: [\r\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\r\n     *   ]\r\n     * })\r\n     * ```\r\n     * @param {?} factories\r\n     * @return {?}\r\n     */\r\n    static extend(factories) {\r\n        return {\r\n            provide: IterableDiffers,\r\n            useFactory: (parent) => {\r\n                if (!parent) {\r\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\r\n                    // to\r\n                    // bootstrap(), which would override default pipes instead of extending them.\r\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\r\n                }\r\n                return IterableDiffers.create(factories, parent);\r\n            },\r\n            // Dependency technically isn't optional, but we can provide a better error message this way.\r\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} iterable\r\n     * @return {?}\r\n     */\r\n    find(iterable) {\r\n        const /** @type {?} */ factory = this.factories.find(f => f.supports(iterable));\r\n        if (factory != null) {\r\n            return factory;\r\n        }\r\n        else {\r\n            throw new Error(`Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} type\r\n * @return {?}\r\n */\r\nfunction getTypeNameForDebugging(type) {\r\n    return type['name'] || typeof type;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A differ that tracks changes made to an object over time.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\r\n * `KeyValueDiffer#diff()` was invoked.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Record representing the item change information.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Provides a factory for {\\@link KeyValueDiffer}.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\r\n * \\@stable\r\n */\r\nclass KeyValueDiffers {\r\n    /**\r\n     * @param {?} factories\r\n     */\r\n    constructor(factories) { this.factories = factories; }\r\n    /**\r\n     * @template S\r\n     * @param {?} factories\r\n     * @param {?=} parent\r\n     * @return {?}\r\n     */\r\n    static create(factories, parent) {\r\n        if (parent) {\r\n            const /** @type {?} */ copied = parent.factories.slice();\r\n            factories = factories.concat(copied);\r\n        }\r\n        return new KeyValueDiffers(factories);\r\n    }\r\n    /**\r\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\r\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\r\n     * {\\@link KeyValueDiffers} instance.\r\n     *\r\n     * The following example shows how to extend an existing list of factories,\r\n     * which will only be applied to the injector for this component and its children.\r\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * \\@Component({\r\n     *   viewProviders: [\r\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\r\n     *   ]\r\n     * })\r\n     * ```\r\n     * @template S\r\n     * @param {?} factories\r\n     * @return {?}\r\n     */\r\n    static extend(factories) {\r\n        return {\r\n            provide: KeyValueDiffers,\r\n            useFactory: (parent) => {\r\n                if (!parent) {\r\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\r\n                    // to bootstrap(), which would override default pipes instead of extending them.\r\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\r\n                }\r\n                return KeyValueDiffers.create(factories, parent);\r\n            },\r\n            // Dependency technically isn't optional, but we can provide a better error message this way.\r\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} kv\r\n     * @return {?}\r\n     */\r\n    find(kv) {\r\n        const /** @type {?} */ factory = this.factories.find(f => f.supports(kv));\r\n        if (factory) {\r\n            return factory;\r\n        }\r\n        throw new Error(`Cannot find a differ supporting object '${kv}'`);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Structural diffing for `Object`s and `Map`s.\r\n */\r\nconst keyValDiff = [new DefaultKeyValueDifferFactory()];\r\n/**\r\n * Structural diffing for `Iterable` types such as `Array`s.\r\n */\r\nconst iterableDiff = [new DefaultIterableDifferFactory()];\r\nconst defaultIterableDiffers = new IterableDiffers(iterableDiff);\r\nconst defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Change detection enables data binding in Angular.\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _CORE_PLATFORM_PROVIDERS = [\r\n    // Set a default platform name for platforms that don't set it explicitly.\r\n    { provide: PLATFORM_ID, useValue: 'unknown' },\r\n    { provide: PlatformRef, deps: [Injector] },\r\n    { provide: TestabilityRegistry, deps: [] },\r\n    { provide: Console, deps: [] },\r\n];\r\n/**\r\n * This platform has to be included in any other platform\r\n *\r\n * \\@experimental\r\n */\r\nconst platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provide this token to set the locale of your application.\r\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\r\n * DecimalPipe and PercentPipe) and by ICU expressions.\r\n *\r\n * See the {\\@linkDocs guide/i18n#setting-up-locale i18n guide} for more information.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import { LOCALE_ID } from '\\@angular/core';\r\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\r\n * });\r\n * ```\r\n *\r\n * \\@experimental i18n support is experimental.\r\n */\r\nconst LOCALE_ID = new InjectionToken('LocaleId');\r\n/**\r\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\r\n * `xlf` or `xlf2`) when you want to translate your application in another language.\r\n *\r\n * See the {\\@linkDocs guide/i18n#merge i18n guide} for more information.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import { TRANSLATIONS } from '\\@angular/core';\r\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * // content of your translation file\r\n * const translations = '....';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\r\n * });\r\n * ```\r\n *\r\n * \\@experimental i18n support is experimental.\r\n */\r\nconst TRANSLATIONS = new InjectionToken('Translations');\r\n/**\r\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\r\n * `xlf` or `xlf2`.\r\n *\r\n * See the {\\@linkDocs guide/i18n#merge i18n guide} for more information.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\r\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\r\n * import { AppModule } from './app/app.module';\r\n *\r\n * platformBrowserDynamic().bootstrapModule(AppModule, {\r\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\r\n * });\r\n * ```\r\n *\r\n * \\@experimental i18n support is experimental.\r\n */\r\nconst TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\r\n/** @enum {number} */\r\nconst MissingTranslationStrategy = {\r\n    Error: 0,\r\n    Warning: 1,\r\n    Ignore: 2,\r\n};\r\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = \"Error\";\r\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = \"Warning\";\r\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = \"Ignore\";\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction _iterableDiffersFactory() {\r\n    return defaultIterableDiffers;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction _keyValueDiffersFactory() {\r\n    return defaultKeyValueDiffers;\r\n}\r\n/**\r\n * @param {?=} locale\r\n * @return {?}\r\n */\r\nfunction _localeFactory(locale) {\r\n    return locale || 'en-US';\r\n}\r\n/**\r\n * This module includes the providers of \\@angular/core that are needed\r\n * to bootstrap components via `ApplicationRef`.\r\n *\r\n * \\@experimental\r\n */\r\nclass ApplicationModule {\r\n    /**\r\n     * @param {?} appRef\r\n     */\r\n    constructor(appRef) { }\r\n}\r\nApplicationModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                providers: [\r\n                    ApplicationRef,\r\n                    ApplicationInitStatus,\r\n                    Compiler,\r\n                    APP_ID_RANDOM_PROVIDER,\r\n                    { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\r\n                    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\r\n                    {\r\n                        provide: LOCALE_ID,\r\n                        useFactory: _localeFactory,\r\n                        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\r\n                    },\r\n                ]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nApplicationModule.ctorParameters = () => [\r\n    { type: ApplicationRef, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** @enum {number} */\r\nconst SecurityContext = {\r\n    NONE: 0,\r\n    HTML: 1,\r\n    STYLE: 2,\r\n    SCRIPT: 3,\r\n    URL: 4,\r\n    RESOURCE_URL: 5,\r\n};\r\nSecurityContext[SecurityContext.NONE] = \"NONE\";\r\nSecurityContext[SecurityContext.HTML] = \"HTML\";\r\nSecurityContext[SecurityContext.STYLE] = \"STYLE\";\r\nSecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\r\nSecurityContext[SecurityContext.URL] = \"URL\";\r\nSecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\r\n/**\r\n * Sanitizer is used by the views to sanitize potentially dangerous values.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass Sanitizer {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Factory for ViewDefinitions/NgModuleDefinitions.\r\n * We use a function so we can reexeute it in case an error happens and use the given logger\r\n * function to log the error from the definition of the node, which is shown in all browser\r\n * logs.\r\n * @record\r\n */\r\n\r\n/**\r\n * Function to call console.error at the right source location. This is an indirection\r\n * via another function as browser will log the location that actually called\r\n * `console.error`.\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * A node definition in the view.\r\n *\r\n * Note: We use one type for all nodes so that loops that loop over all nodes\r\n * of a ViewDefinition stay monomorphic!\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * View instance data.\r\n * Attention: Adding fields to this is performance sensitive!\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} view\r\n * @param {?} priorInitState\r\n * @param {?} newInitState\r\n * @return {?}\r\n */\r\nfunction shiftInitState(view, priorInitState, newInitState) {\r\n    // Only update the InitState if we are currently in the prior state.\r\n    // For example, only move into CallingInit if we are in BeforeInit. Only\r\n    // move into CallingContentInit if we are in CallingInit. Normally this will\r\n    // always be true because of how checkCycle is called in checkAndUpdateView.\r\n    // However, if checkAndUpdateView is called recursively or if an exception is\r\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\r\n    // from the beginning. This ensures the state is monotonically increasing,\r\n    // terminating in the AfterInit state, which ensures the Init methods are called\r\n    // at least once and only once.\r\n    const /** @type {?} */ state = view.state;\r\n    const /** @type {?} */ initState = state & 1792;\r\n    if (initState === priorInitState) {\r\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\r\n        view.initIndex = -1;\r\n        return true;\r\n    }\r\n    return initState === newInitState;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} initState\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction shouldCallLifecycleInitHook(view, initState, index) {\r\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\r\n        view.initIndex = index + 1;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * Node instance data.\r\n *\r\n * We have a separate type per NodeType to save memory\r\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\r\n *\r\n * To keep our code monomorphic,\r\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\r\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\r\n * purposes.\r\n */\r\n\r\n/**\r\n * Data for an instantiated NodeType.Text.\r\n *\r\n * Attention: Adding fields to this is performance sensitive!\r\n * @record\r\n */\r\n\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction asTextData(view, index) {\r\n    return /** @type {?} */ (view.nodes[index]);\r\n}\r\n/**\r\n * Data for an instantiated NodeType.Element.\r\n *\r\n * Attention: Adding fields to this is performance sensitive!\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction asElementData(view, index) {\r\n    return /** @type {?} */ (view.nodes[index]);\r\n}\r\n/**\r\n * Data for an instantiated NodeType.Provider.\r\n *\r\n * Attention: Adding fields to this is performance sensitive!\r\n * @record\r\n */\r\n\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction asProviderData(view, index) {\r\n    return /** @type {?} */ (view.nodes[index]);\r\n}\r\n/**\r\n * Data for an instantiated NodeType.PureExpression.\r\n *\r\n * Attention: Adding fields to this is performance sensitive!\r\n * @record\r\n */\r\n\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction asPureExpressionData(view, index) {\r\n    return /** @type {?} */ (view.nodes[index]);\r\n}\r\n/**\r\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction asQueryList(view, index) {\r\n    return /** @type {?} */ (view.nodes[index]);\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @abstract\r\n */\r\nclass DebugContext {\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * This object is used to prevent cycles in the source files and to have a place where\r\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\r\n */\r\nconst Services = {\r\n    setCurrentNode: /** @type {?} */ ((undefined)),\r\n    createRootView: /** @type {?} */ ((undefined)),\r\n    createEmbeddedView: /** @type {?} */ ((undefined)),\r\n    createComponentView: /** @type {?} */ ((undefined)),\r\n    createNgModuleRef: /** @type {?} */ ((undefined)),\r\n    overrideProvider: /** @type {?} */ ((undefined)),\r\n    overrideComponentView: /** @type {?} */ ((undefined)),\r\n    clearOverrides: /** @type {?} */ ((undefined)),\r\n    checkAndUpdateView: /** @type {?} */ ((undefined)),\r\n    checkNoChangesView: /** @type {?} */ ((undefined)),\r\n    destroyView: /** @type {?} */ ((undefined)),\r\n    resolveDep: /** @type {?} */ ((undefined)),\r\n    createDebugContext: /** @type {?} */ ((undefined)),\r\n    handleEvent: /** @type {?} */ ((undefined)),\r\n    updateDirectives: /** @type {?} */ ((undefined)),\r\n    updateRenderer: /** @type {?} */ ((undefined)),\r\n    dirtyParentQueries: /** @type {?} */ ((undefined)),\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} context\r\n * @param {?} oldValue\r\n * @param {?} currValue\r\n * @param {?} isFirstCheck\r\n * @return {?}\r\n */\r\nfunction expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\r\n    let /** @type {?} */ msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\r\n    if (isFirstCheck) {\r\n        msg +=\r\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\r\n                ` Has it been created in a change detection hook ?`;\r\n    }\r\n    return viewDebugError(msg, context);\r\n}\r\n/**\r\n * @param {?} err\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction viewWrappedDebugError(err, context) {\r\n    if (!(err instanceof Error)) {\r\n        // errors that are not Error instances don't have a stack,\r\n        // so it is ok to wrap them into a new Error object...\r\n        err = new Error(err.toString());\r\n    }\r\n    _addDebugContext(err, context);\r\n    return err;\r\n}\r\n/**\r\n * @param {?} msg\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction viewDebugError(msg, context) {\r\n    const /** @type {?} */ err = new Error(msg);\r\n    _addDebugContext(err, context);\r\n    return err;\r\n}\r\n/**\r\n * @param {?} err\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction _addDebugContext(err, context) {\r\n    (/** @type {?} */ (err))[ERROR_DEBUG_CONTEXT] = context;\r\n    (/** @type {?} */ (err))[ERROR_LOGGER] = context.logError.bind(context);\r\n}\r\n/**\r\n * @param {?} err\r\n * @return {?}\r\n */\r\nfunction isViewDebugError(err) {\r\n    return !!getDebugContext(err);\r\n}\r\n/**\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction viewDestroyedError(action) {\r\n    return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst NOOP = () => { };\r\nconst _tokenKeyCache = new Map();\r\n/**\r\n * @param {?} token\r\n * @return {?}\r\n */\r\nfunction tokenKey(token) {\r\n    let /** @type {?} */ key = _tokenKeyCache.get(token);\r\n    if (!key) {\r\n        key = stringify(token) + '_' + _tokenKeyCache.size;\r\n        _tokenKeyCache.set(token, key);\r\n    }\r\n    return key;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIdx\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction unwrapValue(view, nodeIdx, bindingIdx, value) {\r\n    if (value instanceof WrappedValue) {\r\n        value = value.wrapped;\r\n        let /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\r\n        let /** @type {?} */ oldValue = view.oldValues[globalBindingIdx];\r\n        if (oldValue instanceof WrappedValue) {\r\n            oldValue = oldValue.wrapped;\r\n        }\r\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\r\n    }\r\n    return value;\r\n}\r\nconst UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\r\nconst EMPTY_RENDERER_TYPE_ID = '$$empty';\r\n/**\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction createRendererType2(values) {\r\n    return {\r\n        id: UNDEFINED_RENDERER_TYPE_ID,\r\n        styles: values.styles,\r\n        encapsulation: values.encapsulation,\r\n        data: values.data\r\n    };\r\n}\r\nlet _renderCompCount = 0;\r\n/**\r\n * @param {?=} type\r\n * @return {?}\r\n */\r\nfunction resolveRendererType2(type) {\r\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\r\n        // first time we see this RendererType2. Initialize it...\r\n        const /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\r\n            type.styles.length || Object.keys(type.data).length);\r\n        if (isFilled) {\r\n            type.id = `c${_renderCompCount++}`;\r\n        }\r\n        else {\r\n            type.id = EMPTY_RENDERER_TYPE_ID;\r\n        }\r\n    }\r\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\r\n        type = null;\r\n    }\r\n    return type || null;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction checkBinding(view, def, bindingIdx, value) {\r\n    const /** @type {?} */ oldValues = view.oldValues;\r\n    if ((view.state & 2 /* FirstCheck */) ||\r\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateBinding(view, def, bindingIdx, value) {\r\n    if (checkBinding(view, def, bindingIdx, value)) {\r\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction checkBindingNoChanges(view, def, bindingIdx, value) {\r\n    const /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];\r\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\r\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), oldValue, value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction markParentViewsForCheck(view) {\r\n    let /** @type {?} */ currView = view;\r\n    while (currView) {\r\n        if (currView.def.flags & 2 /* OnPush */) {\r\n            currView.state |= 8 /* ChecksEnabled */;\r\n        }\r\n        currView = currView.viewContainerParent || currView.parent;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} endView\r\n * @return {?}\r\n */\r\nfunction markParentViewsForCheckProjectedViews(view, endView) {\r\n    let /** @type {?} */ currView = view;\r\n    while (currView && currView !== endView) {\r\n        currView.state |= 64 /* CheckProjectedViews */;\r\n        currView = currView.viewContainerParent || currView.parent;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIndex\r\n * @param {?} eventName\r\n * @param {?} event\r\n * @return {?}\r\n */\r\nfunction dispatchEvent(view, nodeIndex, eventName, event) {\r\n    try {\r\n        const /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\r\n        const /** @type {?} */ startView = nodeDef.flags & 33554432 /* ComponentView */ ?\r\n            asElementData(view, nodeIndex).componentView :\r\n            view;\r\n        markParentViewsForCheck(startView);\r\n        return Services.handleEvent(view, nodeIndex, eventName, event);\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\r\n        view.root.errorHandler.handleError(e);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction declaredViewContainer(view) {\r\n    if (view.parent) {\r\n        const /** @type {?} */ parentView = view.parent;\r\n        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * for component views, this is the host element.\r\n * for embedded views, this is the index of the parent node\r\n * that contains the view container.\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction viewParentEl(view) {\r\n    const /** @type {?} */ parentView = view.parent;\r\n    if (parentView) {\r\n        return /** @type {?} */ ((view.parentNodeDef)).parent;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction renderNode(view, def) {\r\n    switch (def.flags & 201347067 /* Types */) {\r\n        case 1 /* TypeElement */:\r\n            return asElementData(view, def.nodeIndex).renderElement;\r\n        case 2 /* TypeText */:\r\n            return asTextData(view, def.nodeIndex).renderText;\r\n    }\r\n}\r\n/**\r\n * @param {?} target\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction elementEventFullName(target, name) {\r\n    return target ? `${target}:${name}` : name;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction isComponentView(view) {\r\n    return !!view.parent && !!(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction isEmbeddedView(view) {\r\n    return !!view.parent && !(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\r\n}\r\n/**\r\n * @param {?} queryId\r\n * @return {?}\r\n */\r\nfunction filterQueryId(queryId) {\r\n    return 1 << (queryId % 32);\r\n}\r\n/**\r\n * @param {?} matchedQueriesDsl\r\n * @return {?}\r\n */\r\nfunction splitMatchedQueriesDsl(matchedQueriesDsl) {\r\n    const /** @type {?} */ matchedQueries = {};\r\n    let /** @type {?} */ matchedQueryIds = 0;\r\n    const /** @type {?} */ references = {};\r\n    if (matchedQueriesDsl) {\r\n        matchedQueriesDsl.forEach(([queryId, valueType]) => {\r\n            if (typeof queryId === 'number') {\r\n                matchedQueries[queryId] = valueType;\r\n                matchedQueryIds |= filterQueryId(queryId);\r\n            }\r\n            else {\r\n                references[queryId] = valueType;\r\n            }\r\n        });\r\n    }\r\n    return { matchedQueries, references, matchedQueryIds };\r\n}\r\n/**\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction splitDepsDsl(deps) {\r\n    return deps.map(value => {\r\n        let /** @type {?} */ token;\r\n        let /** @type {?} */ flags;\r\n        if (Array.isArray(value)) {\r\n            [flags, token] = value;\r\n        }\r\n        else {\r\n            flags = 0 /* None */;\r\n            token = value;\r\n        }\r\n        return { flags, token, tokenKey: tokenKey(token) };\r\n    });\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderHost\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction getParentRenderElement(view, renderHost, def) {\r\n    let /** @type {?} */ renderParent = def.renderParent;\r\n    if (renderParent) {\r\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\r\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\r\n            (/** @type {?} */ ((renderParent.element)).componentRendererType && /** @type {?} */ ((/** @type {?} */ ((renderParent.element)).componentRendererType)).encapsulation === ViewEncapsulation.Native)) {\r\n            // only children of non components, or children of components with native encapsulation should\r\n            // be attached.\r\n            return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;\r\n        }\r\n    }\r\n    else {\r\n        return renderHost;\r\n    }\r\n}\r\nconst DEFINITION_CACHE = new WeakMap();\r\n/**\r\n * @template D\r\n * @param {?} factory\r\n * @return {?}\r\n */\r\nfunction resolveDefinition(factory) {\r\n    let /** @type {?} */ value = /** @type {?} */ (((DEFINITION_CACHE.get(factory))));\r\n    if (!value) {\r\n        value = factory(() => NOOP);\r\n        value.factory = factory;\r\n        DEFINITION_CACHE.set(factory, value);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction rootRenderNodes(view) {\r\n    const /** @type {?} */ renderNodes = [];\r\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\r\n    return renderNodes;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @param {?} parentNode\r\n * @param {?} nextSibling\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\r\n    // We need to re-compute the parent node in case the nodes have been moved around manually\r\n    if (action === 3 /* RemoveChild */) {\r\n        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));\r\n    }\r\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @param {?} startIndex\r\n * @param {?} endIndex\r\n * @param {?} parentNode\r\n * @param {?} nextSibling\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\r\n    for (let /** @type {?} */ i = startIndex; i <= endIndex; i++) {\r\n        const /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\r\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\r\n        }\r\n        // jump to next sibling\r\n        i += nodeDef.childCount;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} ngContentIndex\r\n * @param {?} action\r\n * @param {?} parentNode\r\n * @param {?} nextSibling\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\r\n    let /** @type {?} */ compView = view;\r\n    while (compView && !isComponentView(compView)) {\r\n        compView = compView.parent;\r\n    }\r\n    const /** @type {?} */ hostView = /** @type {?} */ ((compView)).parent;\r\n    const /** @type {?} */ hostElDef = viewParentEl(/** @type {?} */ ((compView)));\r\n    const /** @type {?} */ startIndex = /** @type {?} */ ((hostElDef)).nodeIndex + 1;\r\n    const /** @type {?} */ endIndex = /** @type {?} */ ((hostElDef)).nodeIndex + /** @type {?} */ ((hostElDef)).childCount;\r\n    for (let /** @type {?} */ i = startIndex; i <= endIndex; i++) {\r\n        const /** @type {?} */ nodeDef = /** @type {?} */ ((hostView)).def.nodes[i];\r\n        if (nodeDef.ngContentIndex === ngContentIndex) {\r\n            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);\r\n        }\r\n        // jump to next sibling\r\n        i += nodeDef.childCount;\r\n    }\r\n    if (!/** @type {?} */ ((hostView)).parent) {\r\n        // a root view\r\n        const /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];\r\n        if (projectedNodes) {\r\n            for (let /** @type {?} */ i = 0; i < projectedNodes.length; i++) {\r\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} action\r\n * @param {?} parentNode\r\n * @param {?} nextSibling\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\r\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\r\n        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\r\n    }\r\n    else {\r\n        const /** @type {?} */ rn = renderNode(view, nodeDef);\r\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\r\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\r\n            // Note: we might need to do both actions.\r\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\r\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\r\n            }\r\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\r\n                const /** @type {?} */ compView = asElementData(view, nodeDef.nodeIndex).componentView;\r\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\r\n            }\r\n        }\r\n        else {\r\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\r\n        }\r\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n            const /** @type {?} */ embeddedViews = /** @type {?} */ ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\r\n            for (let /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\r\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\r\n            }\r\n        }\r\n        if (nodeDef.flags & 1 /* TypeElement */ && !/** @type {?} */ ((nodeDef.element)).name) {\r\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderNode\r\n * @param {?} action\r\n * @param {?} parentNode\r\n * @param {?} nextSibling\r\n * @param {?=} target\r\n * @return {?}\r\n */\r\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\r\n    const /** @type {?} */ renderer = view.renderer;\r\n    switch (action) {\r\n        case 1 /* AppendChild */:\r\n            renderer.appendChild(parentNode, renderNode);\r\n            break;\r\n        case 2 /* InsertBefore */:\r\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\r\n            break;\r\n        case 3 /* RemoveChild */:\r\n            renderer.removeChild(parentNode, renderNode);\r\n            break;\r\n        case 0 /* Collect */:\r\n            /** @type {?} */ ((target)).push(renderNode);\r\n            break;\r\n    }\r\n}\r\nconst NS_PREFIX_RE = /^:([^:]+):(.+)$/;\r\n/**\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction splitNamespace(name) {\r\n    if (name[0] === ':') {\r\n        const /** @type {?} */ match = /** @type {?} */ ((name.match(NS_PREFIX_RE)));\r\n        return [match[1], match[2]];\r\n    }\r\n    return ['', name];\r\n}\r\n/**\r\n * @param {?} bindings\r\n * @return {?}\r\n */\r\nfunction calcBindingFlags(bindings) {\r\n    let /** @type {?} */ flags = 0;\r\n    for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\r\n        flags |= bindings[i].flags;\r\n    }\r\n    return flags;\r\n}\r\n/**\r\n * @param {?} valueCount\r\n * @param {?} constAndInterp\r\n * @return {?}\r\n */\r\nfunction interpolate(valueCount, constAndInterp) {\r\n    let /** @type {?} */ result = '';\r\n    for (let /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {\r\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\r\n    }\r\n    return result + constAndInterp[valueCount * 2];\r\n}\r\n/**\r\n * @param {?} valueCount\r\n * @param {?} c0\r\n * @param {?} a1\r\n * @param {?} c1\r\n * @param {?=} a2\r\n * @param {?=} c2\r\n * @param {?=} a3\r\n * @param {?=} c3\r\n * @param {?=} a4\r\n * @param {?=} c4\r\n * @param {?=} a5\r\n * @param {?=} c5\r\n * @param {?=} a6\r\n * @param {?=} c6\r\n * @param {?=} a7\r\n * @param {?=} c7\r\n * @param {?=} a8\r\n * @param {?=} c8\r\n * @param {?=} a9\r\n * @param {?=} c9\r\n * @return {?}\r\n */\r\nfunction inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\r\n    switch (valueCount) {\r\n        case 1:\r\n            return c0 + _toStringWithNull(a1) + c1;\r\n        case 2:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\r\n        case 3:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3;\r\n        case 4:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4;\r\n        case 5:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\r\n        case 6:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\r\n        case 7:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\r\n                c6 + _toStringWithNull(a7) + c7;\r\n        case 8:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\r\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\r\n        case 9:\r\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\r\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\r\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\r\n        default:\r\n            throw new Error(`Does not support more than 9 expressions`);\r\n    }\r\n}\r\n/**\r\n * @param {?} v\r\n * @return {?}\r\n */\r\nfunction _toStringWithNull(v) {\r\n    return v != null ? v.toString() : '';\r\n}\r\nconst EMPTY_ARRAY = [];\r\nconst EMPTY_MAP = {};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} flags\r\n * @param {?} matchedQueriesDsl\r\n * @param {?} ngContentIndex\r\n * @param {?} childCount\r\n * @param {?=} handleEvent\r\n * @param {?=} templateFactory\r\n * @return {?}\r\n */\r\nfunction anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\r\n    flags |= 1 /* TypeElement */;\r\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\r\n    const /** @type {?} */ template = templateFactory ? resolveDefinition(templateFactory) : null;\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        flags,\r\n        checkIndex: -1,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\r\n        bindings: [],\r\n        bindingFlags: 0,\r\n        outputs: [],\r\n        element: {\r\n            ns: null,\r\n            name: null,\r\n            attrs: null, template,\r\n            componentProvider: null,\r\n            componentView: null,\r\n            componentRendererType: null,\r\n            publicProviders: null,\r\n            allProviders: null,\r\n            handleEvent: handleEvent || NOOP\r\n        },\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n}\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} flags\r\n * @param {?} matchedQueriesDsl\r\n * @param {?} ngContentIndex\r\n * @param {?} childCount\r\n * @param {?} namespaceAndName\r\n * @param {?=} fixedAttrs\r\n * @param {?=} bindings\r\n * @param {?=} outputs\r\n * @param {?=} handleEvent\r\n * @param {?=} componentView\r\n * @param {?=} componentRendererType\r\n * @return {?}\r\n */\r\nfunction elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs = [], bindings, outputs, handleEvent, componentView, componentRendererType) {\r\n    if (!handleEvent) {\r\n        handleEvent = NOOP;\r\n    }\r\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\r\n    let /** @type {?} */ ns = /** @type {?} */ ((null));\r\n    let /** @type {?} */ name = /** @type {?} */ ((null));\r\n    if (namespaceAndName) {\r\n        [ns, name] = splitNamespace(namespaceAndName);\r\n    }\r\n    bindings = bindings || [];\r\n    const /** @type {?} */ bindingDefs = new Array(bindings.length);\r\n    for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\r\n        const [bindingFlags, namespaceAndName, suffixOrSecurityContext] = bindings[i];\r\n        const [ns, name] = splitNamespace(namespaceAndName);\r\n        let /** @type {?} */ securityContext = /** @type {?} */ ((undefined));\r\n        let /** @type {?} */ suffix = /** @type {?} */ ((undefined));\r\n        switch (bindingFlags & 15 /* Types */) {\r\n            case 4 /* TypeElementStyle */:\r\n                suffix = /** @type {?} */ (suffixOrSecurityContext);\r\n                break;\r\n            case 1 /* TypeElementAttribute */:\r\n            case 8 /* TypeProperty */:\r\n                securityContext = /** @type {?} */ (suffixOrSecurityContext);\r\n                break;\r\n        }\r\n        bindingDefs[i] =\r\n            { flags: bindingFlags, ns, name, nonMinifiedName: name, securityContext, suffix };\r\n    }\r\n    outputs = outputs || [];\r\n    const /** @type {?} */ outputDefs = new Array(outputs.length);\r\n    for (let /** @type {?} */ i = 0; i < outputs.length; i++) {\r\n        const [target, eventName] = outputs[i];\r\n        outputDefs[i] = {\r\n            type: 0 /* ElementOutput */,\r\n            target: /** @type {?} */ (target), eventName,\r\n            propName: null\r\n        };\r\n    }\r\n    fixedAttrs = fixedAttrs || [];\r\n    const /** @type {?} */ attrs = /** @type {?} */ (fixedAttrs.map(([namespaceAndName, value]) => {\r\n        const [ns, name] = splitNamespace(namespaceAndName);\r\n        return [ns, name, value];\r\n    }));\r\n    componentRendererType = resolveRendererType2(componentRendererType);\r\n    if (componentView) {\r\n        flags |= 33554432 /* ComponentView */;\r\n    }\r\n    flags |= 1 /* TypeElement */;\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex,\r\n        flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\r\n        bindings: bindingDefs,\r\n        bindingFlags: calcBindingFlags(bindingDefs),\r\n        outputs: outputDefs,\r\n        element: {\r\n            ns,\r\n            name,\r\n            attrs,\r\n            template: null,\r\n            // will bet set by the view definition\r\n            componentProvider: null,\r\n            componentView: componentView || null,\r\n            componentRendererType: componentRendererType,\r\n            publicProviders: null,\r\n            allProviders: null,\r\n            handleEvent: handleEvent || NOOP,\r\n        },\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderHost\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createElement(view, renderHost, def) {\r\n    const /** @type {?} */ elDef = /** @type {?} */ ((def.element));\r\n    const /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;\r\n    const /** @type {?} */ renderer = view.renderer;\r\n    let /** @type {?} */ el;\r\n    if (view.parent || !rootSelectorOrNode) {\r\n        if (elDef.name) {\r\n            el = renderer.createElement(elDef.name, elDef.ns);\r\n        }\r\n        else {\r\n            el = renderer.createComment('');\r\n        }\r\n        const /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\r\n        if (parentEl) {\r\n            renderer.appendChild(parentEl, el);\r\n        }\r\n    }\r\n    else {\r\n        el = renderer.selectRootElement(rootSelectorOrNode);\r\n    }\r\n    if (elDef.attrs) {\r\n        for (let /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {\r\n            const [ns, name, value] = elDef.attrs[i];\r\n            renderer.setAttribute(el, name, value, ns);\r\n        }\r\n    }\r\n    return el;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} compView\r\n * @param {?} def\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction listenToElementOutputs(view, compView, def, el) {\r\n    for (let /** @type {?} */ i = 0; i < def.outputs.length; i++) {\r\n        const /** @type {?} */ output = def.outputs[i];\r\n        const /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\r\n        let /** @type {?} */ listenTarget = output.target;\r\n        let /** @type {?} */ listenerView = view;\r\n        if (output.target === 'component') {\r\n            listenTarget = null;\r\n            listenerView = compView;\r\n        }\r\n        const /** @type {?} */ disposable = /** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */\r\n        ((view.disposables))[def.outputIndex + i] = disposable;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} index\r\n * @param {?} eventName\r\n * @return {?}\r\n */\r\nfunction renderEventHandlerClosure(view, index, eventName) {\r\n    return (event) => dispatchEvent(view, index, eventName, event);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} v0\r\n * @param {?} v1\r\n * @param {?} v2\r\n * @param {?} v3\r\n * @param {?} v4\r\n * @param {?} v5\r\n * @param {?} v6\r\n * @param {?} v7\r\n * @param {?} v8\r\n * @param {?} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    const /** @type {?} */ bindLen = def.bindings.length;\r\n    let /** @type {?} */ changed = false;\r\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\r\n        changed = true;\r\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\r\n        changed = true;\r\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\r\n        changed = true;\r\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\r\n        changed = true;\r\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\r\n        changed = true;\r\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\r\n        changed = true;\r\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\r\n        changed = true;\r\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\r\n        changed = true;\r\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\r\n        changed = true;\r\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\r\n        changed = true;\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateElementDynamic(view, def, values) {\r\n    let /** @type {?} */ changed = false;\r\n    for (let /** @type {?} */ i = 0; i < values.length; i++) {\r\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\r\n            changed = true;\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\r\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\r\n        return false;\r\n    }\r\n    const /** @type {?} */ binding = def.bindings[bindingIdx];\r\n    const /** @type {?} */ elData = asElementData(view, def.nodeIndex);\r\n    const /** @type {?} */ renderNode$$1 = elData.renderElement;\r\n    const /** @type {?} */ name = /** @type {?} */ ((binding.name));\r\n    switch (binding.flags & 15 /* Types */) {\r\n        case 1 /* TypeElementAttribute */:\r\n            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);\r\n            break;\r\n        case 2 /* TypeElementClass */:\r\n            setElementClass(view, renderNode$$1, name, value);\r\n            break;\r\n        case 4 /* TypeElementStyle */:\r\n            setElementStyle(view, binding, renderNode$$1, name, value);\r\n            break;\r\n        case 8 /* TypeProperty */:\r\n            const /** @type {?} */ bindView = (def.flags & 33554432 /* ComponentView */ &&\r\n                binding.flags & 32 /* SyntheticHostProperty */) ?\r\n                elData.componentView :\r\n                view;\r\n            setElementProperty(bindView, binding, renderNode$$1, name, value);\r\n            break;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} binding\r\n * @param {?} renderNode\r\n * @param {?} ns\r\n * @param {?} name\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setElementAttribute(view, binding, renderNode$$1, ns, name, value) {\r\n    const /** @type {?} */ securityContext = binding.securityContext;\r\n    let /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\r\n    renderValue = renderValue != null ? renderValue.toString() : null;\r\n    const /** @type {?} */ renderer = view.renderer;\r\n    if (value != null) {\r\n        renderer.setAttribute(renderNode$$1, name, renderValue, ns);\r\n    }\r\n    else {\r\n        renderer.removeAttribute(renderNode$$1, name, ns);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderNode\r\n * @param {?} name\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setElementClass(view, renderNode$$1, name, value) {\r\n    const /** @type {?} */ renderer = view.renderer;\r\n    if (value) {\r\n        renderer.addClass(renderNode$$1, name);\r\n    }\r\n    else {\r\n        renderer.removeClass(renderNode$$1, name);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} binding\r\n * @param {?} renderNode\r\n * @param {?} name\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setElementStyle(view, binding, renderNode$$1, name, value) {\r\n    let /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));\r\n    if (renderValue != null) {\r\n        renderValue = renderValue.toString();\r\n        const /** @type {?} */ unit = binding.suffix;\r\n        if (unit != null) {\r\n            renderValue = renderValue + unit;\r\n        }\r\n    }\r\n    else {\r\n        renderValue = null;\r\n    }\r\n    const /** @type {?} */ renderer = view.renderer;\r\n    if (renderValue != null) {\r\n        renderer.setStyle(renderNode$$1, name, renderValue);\r\n    }\r\n    else {\r\n        renderer.removeStyle(renderNode$$1, name);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} binding\r\n * @param {?} renderNode\r\n * @param {?} name\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction setElementProperty(view, binding, renderNode$$1, name, value) {\r\n    const /** @type {?} */ securityContext = binding.securityContext;\r\n    let /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\r\n    view.renderer.setProperty(renderNode$$1, name, renderValue);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst UNDEFINED_VALUE = new Object();\r\nconst InjectorRefTokenKey$1 = tokenKey(Injector);\r\nconst NgModuleRefTokenKey = tokenKey(NgModuleRef);\r\n/**\r\n * @param {?} flags\r\n * @param {?} token\r\n * @param {?} value\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction moduleProvideDef(flags, token, value, deps) {\r\n    // Need to resolve forwardRefs as e.g. for `useValue` we\r\n    // lowered the expression and then stopped evaluating it,\r\n    // i.e. also didn't unwrap it.\r\n    value = resolveForwardRef(value);\r\n    const /** @type {?} */ depDefs = splitDepsDsl(deps);\r\n    return {\r\n        // will bet set by the module definition\r\n        index: -1,\r\n        deps: depDefs, flags, token, value\r\n    };\r\n}\r\n/**\r\n * @param {?} providers\r\n * @return {?}\r\n */\r\nfunction moduleDef(providers) {\r\n    const /** @type {?} */ providersByKey = {};\r\n    for (let /** @type {?} */ i = 0; i < providers.length; i++) {\r\n        const /** @type {?} */ provider = providers[i];\r\n        provider.index = i;\r\n        providersByKey[tokenKey(provider.token)] = provider;\r\n    }\r\n    return {\r\n        // Will be filled later...\r\n        factory: null,\r\n        providersByKey,\r\n        providers\r\n    };\r\n}\r\n/**\r\n * @param {?} data\r\n * @return {?}\r\n */\r\nfunction initNgModule(data) {\r\n    const /** @type {?} */ def = data._def;\r\n    const /** @type {?} */ providers = data._providers = new Array(def.providers.length);\r\n    for (let /** @type {?} */ i = 0; i < def.providers.length; i++) {\r\n        const /** @type {?} */ provDef = def.providers[i];\r\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\r\n            providers[i] = _createProviderInstance$1(data, provDef);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} data\r\n * @param {?} depDef\r\n * @param {?=} notFoundValue\r\n * @return {?}\r\n */\r\nfunction resolveNgModuleDep(data, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\r\n    if (depDef.flags & 8 /* Value */) {\r\n        return depDef.token;\r\n    }\r\n    if (depDef.flags & 2 /* Optional */) {\r\n        notFoundValue = null;\r\n    }\r\n    if (depDef.flags & 1 /* SkipSelf */) {\r\n        return data._parent.get(depDef.token, notFoundValue);\r\n    }\r\n    const /** @type {?} */ tokenKey$$1 = depDef.tokenKey;\r\n    switch (tokenKey$$1) {\r\n        case InjectorRefTokenKey$1:\r\n        case NgModuleRefTokenKey:\r\n            return data;\r\n    }\r\n    const /** @type {?} */ providerDef = data._def.providersByKey[tokenKey$$1];\r\n    if (providerDef) {\r\n        let /** @type {?} */ providerInstance = data._providers[providerDef.index];\r\n        if (providerInstance === undefined) {\r\n            providerInstance = data._providers[providerDef.index] =\r\n                _createProviderInstance$1(data, providerDef);\r\n        }\r\n        return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\r\n    }\r\n    return data._parent.get(depDef.token, notFoundValue);\r\n}\r\n/**\r\n * @param {?} ngModule\r\n * @param {?} providerDef\r\n * @return {?}\r\n */\r\nfunction _createProviderInstance$1(ngModule, providerDef) {\r\n    let /** @type {?} */ injectable;\r\n    switch (providerDef.flags & 201347067 /* Types */) {\r\n        case 512 /* TypeClassProvider */:\r\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\r\n            break;\r\n        case 1024 /* TypeFactoryProvider */:\r\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\r\n            break;\r\n        case 2048 /* TypeUseExistingProvider */:\r\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\r\n            break;\r\n        case 256 /* TypeValueProvider */:\r\n            injectable = providerDef.value;\r\n            break;\r\n    }\r\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\r\n}\r\n/**\r\n * @param {?} ngModule\r\n * @param {?} ctor\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction _createClass(ngModule, ctor, deps) {\r\n    const /** @type {?} */ len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return new ctor();\r\n        case 1:\r\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\r\n        case 2:\r\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\r\n        case 3:\r\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\r\n        default:\r\n            const /** @type {?} */ depValues = new Array(len);\r\n            for (let /** @type {?} */ i = 0; i < len; i++) {\r\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\r\n            }\r\n            return new ctor(...depValues);\r\n    }\r\n}\r\n/**\r\n * @param {?} ngModule\r\n * @param {?} factory\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction _callFactory(ngModule, factory, deps) {\r\n    const /** @type {?} */ len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return factory();\r\n        case 1:\r\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\r\n        case 2:\r\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\r\n        case 3:\r\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\r\n        default:\r\n            const /** @type {?} */ depValues = Array(len);\r\n            for (let /** @type {?} */ i = 0; i < len; i++) {\r\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\r\n            }\r\n            return factory(...depValues);\r\n    }\r\n}\r\n/**\r\n * @param {?} ngModule\r\n * @param {?} lifecycles\r\n * @return {?}\r\n */\r\nfunction callNgModuleLifecycle(ngModule, lifecycles) {\r\n    const /** @type {?} */ def = ngModule._def;\r\n    for (let /** @type {?} */ i = 0; i < def.providers.length; i++) {\r\n        const /** @type {?} */ provDef = def.providers[i];\r\n        if (provDef.flags & 131072 /* OnDestroy */) {\r\n            const /** @type {?} */ instance = ngModule._providers[i];\r\n            if (instance && instance !== UNDEFINED_VALUE) {\r\n                instance.ngOnDestroy();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} parentView\r\n * @param {?} elementData\r\n * @param {?} viewIndex\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\r\n    let /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\r\n    if (viewIndex === null || viewIndex === undefined) {\r\n        viewIndex = embeddedViews.length;\r\n    }\r\n    view.viewContainerParent = parentView;\r\n    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);\r\n    attachProjectedView(elementData, view);\r\n    Services.dirtyParentQueries(view);\r\n    const /** @type {?} */ prevView = /** @type {?} */ ((viewIndex)) > 0 ? embeddedViews[/** @type {?} */ ((viewIndex)) - 1] : null;\r\n    renderAttachEmbeddedView(elementData, prevView, view);\r\n}\r\n/**\r\n * @param {?} vcElementData\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction attachProjectedView(vcElementData, view) {\r\n    const /** @type {?} */ dvcElementData = declaredViewContainer(view);\r\n    if (!dvcElementData || dvcElementData === vcElementData ||\r\n        view.state & 16 /* IsProjectedView */) {\r\n        return;\r\n    }\r\n    // Note: For performance reasons, we\r\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\r\n    //   and remove it not until the view is destroyed.\r\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\r\n    //    nested projected views as well, even accross component boundaries).\r\n    // - don't track the insertion order of views in the projected views array\r\n    //   (hard, as when the views of the same template are inserted different view containers)\r\n    view.state |= 16 /* IsProjectedView */;\r\n    let /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\r\n    if (!projectedViews) {\r\n        projectedViews = dvcElementData.template._projectedViews = [];\r\n    }\r\n    projectedViews.push(view);\r\n    // Note: we are changing the NodeDef here as we cannot calculate\r\n    // the fact whether a template is used for projection during compilation.\r\n    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));\r\n}\r\n/**\r\n * @param {?} viewDef\r\n * @param {?} nodeDef\r\n * @return {?}\r\n */\r\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\r\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\r\n        return;\r\n    }\r\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\r\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\r\n    let /** @type {?} */ parentNodeDef = nodeDef.parent;\r\n    while (parentNodeDef) {\r\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\r\n        parentNodeDef = parentNodeDef.parent;\r\n    }\r\n}\r\n/**\r\n * @param {?} elementData\r\n * @param {?=} viewIndex\r\n * @return {?}\r\n */\r\nfunction detachEmbeddedView(elementData, viewIndex) {\r\n    const /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\r\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\r\n        viewIndex = embeddedViews.length - 1;\r\n    }\r\n    if (viewIndex < 0) {\r\n        return null;\r\n    }\r\n    const /** @type {?} */ view = embeddedViews[viewIndex];\r\n    view.viewContainerParent = null;\r\n    removeFromArray(embeddedViews, viewIndex);\r\n    // See attachProjectedView for why we don't update projectedViews here.\r\n    Services.dirtyParentQueries(view);\r\n    renderDetachView(view);\r\n    return view;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction detachProjectedView(view) {\r\n    if (!(view.state & 16 /* IsProjectedView */)) {\r\n        return;\r\n    }\r\n    const /** @type {?} */ dvcElementData = declaredViewContainer(view);\r\n    if (dvcElementData) {\r\n        const /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;\r\n        if (projectedViews) {\r\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\r\n            Services.dirtyParentQueries(view);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} elementData\r\n * @param {?} oldViewIndex\r\n * @param {?} newViewIndex\r\n * @return {?}\r\n */\r\nfunction moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\r\n    const /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\r\n    const /** @type {?} */ view = embeddedViews[oldViewIndex];\r\n    removeFromArray(embeddedViews, oldViewIndex);\r\n    if (newViewIndex == null) {\r\n        newViewIndex = embeddedViews.length;\r\n    }\r\n    addToArray(embeddedViews, newViewIndex, view);\r\n    // Note: Don't need to change projectedViews as the order in there\r\n    // as always invalid...\r\n    Services.dirtyParentQueries(view);\r\n    renderDetachView(view);\r\n    const /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\r\n    renderAttachEmbeddedView(elementData, prevView, view);\r\n    return view;\r\n}\r\n/**\r\n * @param {?} elementData\r\n * @param {?} prevView\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\r\n    const /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :\r\n        elementData.renderElement;\r\n    const /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);\r\n    const /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);\r\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\r\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\r\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction renderDetachView(view) {\r\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\r\n}\r\n/**\r\n * @param {?} arr\r\n * @param {?} index\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction addToArray(arr, index, value) {\r\n    // perf: array.push is faster than array.splice!\r\n    if (index >= arr.length) {\r\n        arr.push(value);\r\n    }\r\n    else {\r\n        arr.splice(index, 0, value);\r\n    }\r\n}\r\n/**\r\n * @param {?} arr\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction removeFromArray(arr, index) {\r\n    // perf: array.pop is faster than array.splice!\r\n    if (index >= arr.length - 1) {\r\n        arr.pop();\r\n    }\r\n    else {\r\n        arr.splice(index, 1);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst EMPTY_CONTEXT = new Object();\r\n/**\r\n * @param {?} selector\r\n * @param {?} componentType\r\n * @param {?} viewDefFactory\r\n * @param {?} inputs\r\n * @param {?} outputs\r\n * @param {?} ngContentSelectors\r\n * @return {?}\r\n */\r\nfunction createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\r\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\r\n}\r\n/**\r\n * @param {?} componentFactory\r\n * @return {?}\r\n */\r\nfunction getComponentViewDefinitionFactory(componentFactory) {\r\n    return (/** @type {?} */ (componentFactory)).viewDefFactory;\r\n}\r\nclass ComponentFactory_ extends ComponentFactory {\r\n    /**\r\n     * @param {?} selector\r\n     * @param {?} componentType\r\n     * @param {?} viewDefFactory\r\n     * @param {?} _inputs\r\n     * @param {?} _outputs\r\n     * @param {?} ngContentSelectors\r\n     */\r\n    constructor(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\r\n        // Attention: this ctor is called as top level function.\r\n        // Putting any logic in here will destroy closure tree shaking!\r\n        super();\r\n        this.selector = selector;\r\n        this.componentType = componentType;\r\n        this._inputs = _inputs;\r\n        this._outputs = _outputs;\r\n        this.ngContentSelectors = ngContentSelectors;\r\n        this.viewDefFactory = viewDefFactory;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get inputs() {\r\n        const /** @type {?} */ inputsArr = [];\r\n        const /** @type {?} */ inputs = /** @type {?} */ ((this._inputs));\r\n        for (let /** @type {?} */ propName in inputs) {\r\n            const /** @type {?} */ templateName = inputs[propName];\r\n            inputsArr.push({ propName, templateName });\r\n        }\r\n        return inputsArr;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get outputs() {\r\n        const /** @type {?} */ outputsArr = [];\r\n        for (let /** @type {?} */ propName in this._outputs) {\r\n            const /** @type {?} */ templateName = this._outputs[propName];\r\n            outputsArr.push({ propName, templateName });\r\n        }\r\n        return outputsArr;\r\n    }\r\n    /**\r\n     * Creates a new component.\r\n     * @param {?} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} rootSelectorOrNode\r\n     * @param {?=} ngModule\r\n     * @return {?}\r\n     */\r\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\r\n        if (!ngModule) {\r\n            throw new Error('ngModule should be provided');\r\n        }\r\n        const /** @type {?} */ viewDef = resolveDefinition(this.viewDefFactory);\r\n        const /** @type {?} */ componentNodeIndex = /** @type {?} */ ((/** @type {?} */ ((viewDef.nodes[0].element)).componentProvider)).nodeIndex;\r\n        const /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\r\n        const /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;\r\n        if (rootSelectorOrNode) {\r\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\r\n        }\r\n        return new ComponentRef_(view, new ViewRef_(view), component);\r\n    }\r\n}\r\nclass ComponentRef_ extends ComponentRef {\r\n    /**\r\n     * @param {?} _view\r\n     * @param {?} _viewRef\r\n     * @param {?} _component\r\n     */\r\n    constructor(_view, _viewRef, _component) {\r\n        super();\r\n        this._view = _view;\r\n        this._viewRef = _viewRef;\r\n        this._component = _component;\r\n        this._elDef = this._view.def.nodes[0];\r\n        this.hostView = _viewRef;\r\n        this.changeDetectorRef = _viewRef;\r\n        this.instance = _component;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get location() {\r\n        return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get injector() { return new Injector_(this._view, this._elDef); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get componentType() { return /** @type {?} */ (this._component.constructor); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() { this._viewRef.destroy(); }\r\n    /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    onDestroy(callback) { this._viewRef.onDestroy(callback); }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} elData\r\n * @return {?}\r\n */\r\nfunction createViewContainerData(view, elDef, elData) {\r\n    return new ViewContainerRef_(view, elDef, elData);\r\n}\r\nclass ViewContainerRef_ {\r\n    /**\r\n     * @param {?} _view\r\n     * @param {?} _elDef\r\n     * @param {?} _data\r\n     */\r\n    constructor(_view, _elDef, _data) {\r\n        this._view = _view;\r\n        this._elDef = _elDef;\r\n        this._data = _data;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._embeddedViews = [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get element() { return new ElementRef(this._data.renderElement); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get injector() { return new Injector_(this._view, this._elDef); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get parentInjector() {\r\n        let /** @type {?} */ view = this._view;\r\n        let /** @type {?} */ elDef = this._elDef.parent;\r\n        while (!elDef && view) {\r\n            elDef = viewParentEl(view);\r\n            view = /** @type {?} */ ((view.parent));\r\n        }\r\n        return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clear() {\r\n        const /** @type {?} */ len = this._embeddedViews.length;\r\n        for (let /** @type {?} */ i = len - 1; i >= 0; i--) {\r\n            const /** @type {?} */ view = /** @type {?} */ ((detachEmbeddedView(this._data, i)));\r\n            Services.destroyView(view);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    get(index) {\r\n        const /** @type {?} */ view = this._embeddedViews[index];\r\n        if (view) {\r\n            const /** @type {?} */ ref = new ViewRef_(view);\r\n            ref.attachToViewContainerRef(this);\r\n            return ref;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get length() { return this._embeddedViews.length; }\r\n    /**\r\n     * @template C\r\n     * @param {?} templateRef\r\n     * @param {?=} context\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    createEmbeddedView(templateRef, context, index) {\r\n        const /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || /** @type {?} */ ({}));\r\n        this.insert(viewRef, index);\r\n        return viewRef;\r\n    }\r\n    /**\r\n     * @template C\r\n     * @param {?} componentFactory\r\n     * @param {?=} index\r\n     * @param {?=} injector\r\n     * @param {?=} projectableNodes\r\n     * @param {?=} ngModuleRef\r\n     * @return {?}\r\n     */\r\n    createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\r\n        const /** @type {?} */ contextInjector = injector || this.parentInjector;\r\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\r\n            ngModuleRef = contextInjector.get(NgModuleRef);\r\n        }\r\n        const /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\r\n        this.insert(componentRef.hostView, index);\r\n        return componentRef;\r\n    }\r\n    /**\r\n     * @param {?} viewRef\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    insert(viewRef, index) {\r\n        if (viewRef.destroyed) {\r\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\r\n        }\r\n        const /** @type {?} */ viewRef_ = /** @type {?} */ (viewRef);\r\n        const /** @type {?} */ viewData = viewRef_._view;\r\n        attachEmbeddedView(this._view, this._data, index, viewData);\r\n        viewRef_.attachToViewContainerRef(this);\r\n        return viewRef;\r\n    }\r\n    /**\r\n     * @param {?} viewRef\r\n     * @param {?} currentIndex\r\n     * @return {?}\r\n     */\r\n    move(viewRef, currentIndex) {\r\n        if (viewRef.destroyed) {\r\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\r\n        }\r\n        const /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);\r\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\r\n        return viewRef;\r\n    }\r\n    /**\r\n     * @param {?} viewRef\r\n     * @return {?}\r\n     */\r\n    indexOf(viewRef) {\r\n        return this._embeddedViews.indexOf((/** @type {?} */ (viewRef))._view);\r\n    }\r\n    /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    remove(index) {\r\n        const /** @type {?} */ viewData = detachEmbeddedView(this._data, index);\r\n        if (viewData) {\r\n            Services.destroyView(viewData);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?=} index\r\n     * @return {?}\r\n     */\r\n    detach(index) {\r\n        const /** @type {?} */ view = detachEmbeddedView(this._data, index);\r\n        return view ? new ViewRef_(view) : null;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction createChangeDetectorRef(view) {\r\n    return new ViewRef_(view);\r\n}\r\nclass ViewRef_ {\r\n    /**\r\n     * @param {?} _view\r\n     */\r\n    constructor(_view) {\r\n        this._view = _view;\r\n        this._viewContainerRef = null;\r\n        this._appRef = null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get rootNodes() { return rootRenderNodes(this._view); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get context() { return this._view.context; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get destroyed() { return (this._view.state & 128 /* Destroyed */) !== 0; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    markForCheck() { markParentViewsForCheck(this._view); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    detach() { this._view.state &= ~4 /* Attached */; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    detectChanges() {\r\n        const /** @type {?} */ fs = this._view.root.rendererFactory;\r\n        if (fs.begin) {\r\n            fs.begin();\r\n        }\r\n        try {\r\n            Services.checkAndUpdateView(this._view);\r\n        }\r\n        finally {\r\n            if (fs.end) {\r\n                fs.end();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    checkNoChanges() { Services.checkNoChangesView(this._view); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reattach() { this._view.state |= 4 /* Attached */; }\r\n    /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    onDestroy(callback) {\r\n        if (!this._view.disposables) {\r\n            this._view.disposables = [];\r\n        }\r\n        this._view.disposables.push(/** @type {?} */ (callback));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        if (this._appRef) {\r\n            this._appRef.detachView(this);\r\n        }\r\n        else if (this._viewContainerRef) {\r\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\r\n        }\r\n        Services.destroyView(this._view);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    detachFromAppRef() {\r\n        this._appRef = null;\r\n        renderDetachView(this._view);\r\n        Services.dirtyParentQueries(this._view);\r\n    }\r\n    /**\r\n     * @param {?} appRef\r\n     * @return {?}\r\n     */\r\n    attachToAppRef(appRef) {\r\n        if (this._viewContainerRef) {\r\n            throw new Error('This view is already attached to a ViewContainer!');\r\n        }\r\n        this._appRef = appRef;\r\n    }\r\n    /**\r\n     * @param {?} vcRef\r\n     * @return {?}\r\n     */\r\n    attachToViewContainerRef(vcRef) {\r\n        if (this._appRef) {\r\n            throw new Error('This view is already attached directly to the ApplicationRef!');\r\n        }\r\n        this._viewContainerRef = vcRef;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createTemplateData(view, def) {\r\n    return new TemplateRef_(view, def);\r\n}\r\nclass TemplateRef_ extends TemplateRef {\r\n    /**\r\n     * @param {?} _parentView\r\n     * @param {?} _def\r\n     */\r\n    constructor(_parentView, _def) {\r\n        super();\r\n        this._parentView = _parentView;\r\n        this._def = _def;\r\n    }\r\n    /**\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    createEmbeddedView(context) {\r\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((/** @type {?} */ ((this._def.element)).template)), context));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get elementRef() {\r\n        return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @return {?}\r\n */\r\nfunction createInjector(view, elDef) {\r\n    return new Injector_(view, elDef);\r\n}\r\nclass Injector_ {\r\n    /**\r\n     * @param {?} view\r\n     * @param {?} elDef\r\n     */\r\n    constructor(view, elDef) {\r\n        this.view = view;\r\n        this.elDef = elDef;\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\r\n        const /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\r\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token, tokenKey: tokenKey(token) }, notFoundValue);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction nodeValue(view, index) {\r\n    const /** @type {?} */ def = view.def.nodes[index];\r\n    if (def.flags & 1 /* TypeElement */) {\r\n        const /** @type {?} */ elData = asElementData(view, def.nodeIndex);\r\n        return /** @type {?} */ ((def.element)).template ? elData.template : elData.renderElement;\r\n    }\r\n    else if (def.flags & 2 /* TypeText */) {\r\n        return asTextData(view, def.nodeIndex).renderText;\r\n    }\r\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\r\n        return asProviderData(view, def.nodeIndex).instance;\r\n    }\r\n    throw new Error(`Illegal state: read nodeValue for node index ${index}`);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction createRendererV1(view) {\r\n    return new RendererAdapter(view.renderer);\r\n}\r\nclass RendererAdapter {\r\n    /**\r\n     * @param {?} delegate\r\n     */\r\n    constructor(delegate) {\r\n        this.delegate = delegate;\r\n    }\r\n    /**\r\n     * @param {?} selectorOrNode\r\n     * @return {?}\r\n     */\r\n    selectRootElement(selectorOrNode) {\r\n        return this.delegate.selectRootElement(selectorOrNode);\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} namespaceAndName\r\n     * @return {?}\r\n     */\r\n    createElement(parent, namespaceAndName) {\r\n        const [ns, name] = splitNamespace(namespaceAndName);\r\n        const /** @type {?} */ el = this.delegate.createElement(name, ns);\r\n        if (parent) {\r\n            this.delegate.appendChild(parent, el);\r\n        }\r\n        return el;\r\n    }\r\n    /**\r\n     * @param {?} hostElement\r\n     * @return {?}\r\n     */\r\n    createViewRoot(hostElement) { return hostElement; }\r\n    /**\r\n     * @param {?} parentElement\r\n     * @return {?}\r\n     */\r\n    createTemplateAnchor(parentElement) {\r\n        const /** @type {?} */ comment = this.delegate.createComment('');\r\n        if (parentElement) {\r\n            this.delegate.appendChild(parentElement, comment);\r\n        }\r\n        return comment;\r\n    }\r\n    /**\r\n     * @param {?} parentElement\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    createText(parentElement, value) {\r\n        const /** @type {?} */ node = this.delegate.createText(value);\r\n        if (parentElement) {\r\n            this.delegate.appendChild(parentElement, node);\r\n        }\r\n        return node;\r\n    }\r\n    /**\r\n     * @param {?} parentElement\r\n     * @param {?} nodes\r\n     * @return {?}\r\n     */\r\n    projectNodes(parentElement, nodes) {\r\n        for (let /** @type {?} */ i = 0; i < nodes.length; i++) {\r\n            this.delegate.appendChild(parentElement, nodes[i]);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} viewRootNodes\r\n     * @return {?}\r\n     */\r\n    attachViewAfter(node, viewRootNodes) {\r\n        const /** @type {?} */ parentElement = this.delegate.parentNode(node);\r\n        const /** @type {?} */ nextSibling = this.delegate.nextSibling(node);\r\n        for (let /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\r\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} viewRootNodes\r\n     * @return {?}\r\n     */\r\n    detachView(viewRootNodes) {\r\n        for (let /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {\r\n            const /** @type {?} */ node = viewRootNodes[i];\r\n            const /** @type {?} */ parentElement = this.delegate.parentNode(node);\r\n            this.delegate.removeChild(parentElement, node);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} hostElement\r\n     * @param {?} viewAllNodes\r\n     * @return {?}\r\n     */\r\n    destroyView(hostElement, viewAllNodes) {\r\n        for (let /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {\r\n            /** @type {?} */ ((this.delegate.destroyNode))(viewAllNodes[i]);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} name\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    listen(renderElement, name, callback) {\r\n        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));\r\n    }\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} name\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    listenGlobal(target, name, callback) {\r\n        return this.delegate.listen(target, name, /** @type {?} */ (callback));\r\n    }\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} propertyName\r\n     * @param {?} propertyValue\r\n     * @return {?}\r\n     */\r\n    setElementProperty(renderElement, propertyName, propertyValue) {\r\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\r\n    }\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} namespaceAndName\r\n     * @param {?} attributeValue\r\n     * @return {?}\r\n     */\r\n    setElementAttribute(renderElement, namespaceAndName, attributeValue) {\r\n        const [ns, name] = splitNamespace(namespaceAndName);\r\n        if (attributeValue != null) {\r\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\r\n        }\r\n        else {\r\n            this.delegate.removeAttribute(renderElement, name, ns);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} propertyName\r\n     * @param {?} propertyValue\r\n     * @return {?}\r\n     */\r\n    setBindingDebugInfo(renderElement, propertyName, propertyValue) { }\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} className\r\n     * @param {?} isAdd\r\n     * @return {?}\r\n     */\r\n    setElementClass(renderElement, className, isAdd) {\r\n        if (isAdd) {\r\n            this.delegate.addClass(renderElement, className);\r\n        }\r\n        else {\r\n            this.delegate.removeClass(renderElement, className);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} styleName\r\n     * @param {?} styleValue\r\n     * @return {?}\r\n     */\r\n    setElementStyle(renderElement, styleName, styleValue) {\r\n        if (styleValue != null) {\r\n            this.delegate.setStyle(renderElement, styleName, styleValue);\r\n        }\r\n        else {\r\n            this.delegate.removeStyle(renderElement, styleName);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} renderElement\r\n     * @param {?} methodName\r\n     * @param {?} args\r\n     * @return {?}\r\n     */\r\n    invokeElementMethod(renderElement, methodName, args) {\r\n        (/** @type {?} */ (renderElement))[methodName].apply(renderElement, args);\r\n    }\r\n    /**\r\n     * @param {?} renderNode\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    setText(renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    animate() { throw new Error('Renderer.animate is no longer supported!'); }\r\n}\r\n/**\r\n * @param {?} moduleType\r\n * @param {?} parent\r\n * @param {?} bootstrapComponents\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\r\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\r\n}\r\nclass NgModuleRef_ {\r\n    /**\r\n     * @param {?} _moduleType\r\n     * @param {?} _parent\r\n     * @param {?} _bootstrapComponents\r\n     * @param {?} _def\r\n     */\r\n    constructor(_moduleType, _parent, _bootstrapComponents, _def) {\r\n        this._moduleType = _moduleType;\r\n        this._parent = _parent;\r\n        this._bootstrapComponents = _bootstrapComponents;\r\n        this._def = _def;\r\n        this._destroyListeners = [];\r\n        this._destroyed = false;\r\n        initNgModule(this);\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\r\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: 0 /* None */ }, notFoundValue);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get instance() { return this.get(this._moduleType); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get componentFactoryResolver() { return this.get(ComponentFactoryResolver); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get injector() { return this; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        if (this._destroyed) {\r\n            throw new Error(`The ng module ${stringify(this.instance.constructor)} has already been destroyed.`);\r\n        }\r\n        this._destroyed = true;\r\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\r\n        this._destroyListeners.forEach((listener) => listener());\r\n    }\r\n    /**\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    onDestroy(callback) { this._destroyListeners.push(callback); }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst RendererV1TokenKey = tokenKey(Renderer);\r\nconst Renderer2TokenKey = tokenKey(Renderer2);\r\nconst ElementRefTokenKey = tokenKey(ElementRef);\r\nconst ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\r\nconst TemplateRefTokenKey = tokenKey(TemplateRef);\r\nconst ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\r\nconst InjectorRefTokenKey = tokenKey(Injector);\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} flags\r\n * @param {?} matchedQueries\r\n * @param {?} childCount\r\n * @param {?} ctor\r\n * @param {?} deps\r\n * @param {?=} props\r\n * @param {?=} outputs\r\n * @return {?}\r\n */\r\nfunction directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\r\n    const /** @type {?} */ bindings = [];\r\n    if (props) {\r\n        for (let /** @type {?} */ prop in props) {\r\n            const [bindingIndex, nonMinifiedName] = props[prop];\r\n            bindings[bindingIndex] = {\r\n                flags: 8 /* TypeProperty */,\r\n                name: prop, nonMinifiedName,\r\n                ns: null,\r\n                securityContext: null,\r\n                suffix: null\r\n            };\r\n        }\r\n    }\r\n    const /** @type {?} */ outputDefs = [];\r\n    if (outputs) {\r\n        for (let /** @type {?} */ propName in outputs) {\r\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName, target: null, eventName: outputs[propName] });\r\n        }\r\n    }\r\n    flags |= 16384 /* TypeDirective */;\r\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\r\n}\r\n/**\r\n * @param {?} flags\r\n * @param {?} ctor\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction pipeDef(flags, ctor, deps) {\r\n    flags |= 16 /* TypePipe */;\r\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\r\n}\r\n/**\r\n * @param {?} flags\r\n * @param {?} matchedQueries\r\n * @param {?} token\r\n * @param {?} value\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction providerDef(flags, matchedQueries, token, value, deps) {\r\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\r\n}\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} flags\r\n * @param {?} matchedQueriesDsl\r\n * @param {?} childCount\r\n * @param {?} token\r\n * @param {?} value\r\n * @param {?} deps\r\n * @param {?=} bindings\r\n * @param {?=} outputs\r\n * @return {?}\r\n */\r\nfunction _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\r\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\r\n    if (!outputs) {\r\n        outputs = [];\r\n    }\r\n    if (!bindings) {\r\n        bindings = [];\r\n    }\r\n    // Need to resolve forwardRefs as e.g. for `useValue` we\r\n    // lowered the expression and then stopped evaluating it,\r\n    // i.e. also didn't unwrap it.\r\n    value = resolveForwardRef(value);\r\n    const /** @type {?} */ depDefs = splitDepsDsl(deps);\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex,\r\n        flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references,\r\n        ngContentIndex: -1, childCount, bindings,\r\n        bindingFlags: calcBindingFlags(bindings), outputs,\r\n        element: null,\r\n        provider: { token, value, deps: depDefs },\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createProviderInstance(view, def) {\r\n    return _createProviderInstance(view, def);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createPipeInstance(view, def) {\r\n    // deps are looked up from component.\r\n    let /** @type {?} */ compView = view;\r\n    while (compView.parent && !isComponentView(compView)) {\r\n        compView = compView.parent;\r\n    }\r\n    // pipes can see the private services of the component\r\n    const /** @type {?} */ allowPrivateServices = true;\r\n    // pipes are always eager and classes!\r\n    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createDirectiveInstance(view, def) {\r\n    // components can see other private services, other directives can't.\r\n    const /** @type {?} */ allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\r\n    // directives are always eager and classes!\r\n    const /** @type {?} */ instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\r\n    if (def.outputs.length) {\r\n        for (let /** @type {?} */ i = 0; i < def.outputs.length; i++) {\r\n            const /** @type {?} */ output = def.outputs[i];\r\n            const /** @type {?} */ subscription = instance[/** @type {?} */ ((output.propName))].subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */\r\n            ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\r\n        }\r\n    }\r\n    return instance;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} index\r\n * @param {?} eventName\r\n * @return {?}\r\n */\r\nfunction eventHandlerClosure(view, index, eventName) {\r\n    return (event) => dispatchEvent(view, index, eventName, event);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} v0\r\n * @param {?} v1\r\n * @param {?} v2\r\n * @param {?} v3\r\n * @param {?} v4\r\n * @param {?} v5\r\n * @param {?} v6\r\n * @param {?} v7\r\n * @param {?} v8\r\n * @param {?} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    const /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\r\n    const /** @type {?} */ directive = providerData.instance;\r\n    let /** @type {?} */ changed = false;\r\n    let /** @type {?} */ changes = /** @type {?} */ ((undefined));\r\n    const /** @type {?} */ bindLen = def.bindings.length;\r\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 0, v0, changes);\r\n    }\r\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 1, v1, changes);\r\n    }\r\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 2, v2, changes);\r\n    }\r\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 3, v3, changes);\r\n    }\r\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 4, v4, changes);\r\n    }\r\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 5, v5, changes);\r\n    }\r\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 6, v6, changes);\r\n    }\r\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 7, v7, changes);\r\n    }\r\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 8, v8, changes);\r\n    }\r\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\r\n        changed = true;\r\n        changes = updateProp(view, providerData, def, 9, v9, changes);\r\n    }\r\n    if (changes) {\r\n        directive.ngOnChanges(changes);\r\n    }\r\n    if ((def.flags & 65536 /* OnInit */) &&\r\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\r\n        directive.ngOnInit();\r\n    }\r\n    if (def.flags & 262144 /* DoCheck */) {\r\n        directive.ngDoCheck();\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateDirectiveDynamic(view, def, values) {\r\n    const /** @type {?} */ providerData = asProviderData(view, def.nodeIndex);\r\n    const /** @type {?} */ directive = providerData.instance;\r\n    let /** @type {?} */ changed = false;\r\n    let /** @type {?} */ changes = /** @type {?} */ ((undefined));\r\n    for (let /** @type {?} */ i = 0; i < values.length; i++) {\r\n        if (checkBinding(view, def, i, values[i])) {\r\n            changed = true;\r\n            changes = updateProp(view, providerData, def, i, values[i], changes);\r\n        }\r\n    }\r\n    if (changes) {\r\n        directive.ngOnChanges(changes);\r\n    }\r\n    if ((def.flags & 65536 /* OnInit */) &&\r\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\r\n        directive.ngOnInit();\r\n    }\r\n    if (def.flags & 262144 /* DoCheck */) {\r\n        directive.ngDoCheck();\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction _createProviderInstance(view, def) {\r\n    // private services can see other private services\r\n    const /** @type {?} */ allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\r\n    const /** @type {?} */ providerDef = def.provider;\r\n    switch (def.flags & 201347067 /* Types */) {\r\n        case 512 /* TypeClassProvider */:\r\n            return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\r\n        case 1024 /* TypeFactoryProvider */:\r\n            return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\r\n        case 2048 /* TypeUseExistingProvider */:\r\n            return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);\r\n        case 256 /* TypeValueProvider */:\r\n            return /** @type {?} */ ((providerDef)).value;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} allowPrivateServices\r\n * @param {?} ctor\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\r\n    const /** @type {?} */ len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return new ctor();\r\n        case 1:\r\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\r\n        case 2:\r\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\r\n        case 3:\r\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\r\n        default:\r\n            const /** @type {?} */ depValues = new Array(len);\r\n            for (let /** @type {?} */ i = 0; i < len; i++) {\r\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\r\n            }\r\n            return new ctor(...depValues);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} allowPrivateServices\r\n * @param {?} factory\r\n * @param {?} deps\r\n * @return {?}\r\n */\r\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\r\n    const /** @type {?} */ len = deps.length;\r\n    switch (len) {\r\n        case 0:\r\n            return factory();\r\n        case 1:\r\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\r\n        case 2:\r\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\r\n        case 3:\r\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\r\n        default:\r\n            const /** @type {?} */ depValues = Array(len);\r\n            for (let /** @type {?} */ i = 0; i < len; i++) {\r\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\r\n            }\r\n            return factory(...depValues);\r\n    }\r\n}\r\n// This default value is when checking the hierarchy for a token.\r\n//\r\n// It means both:\r\n// - the token is not provided by the current injector,\r\n// - only the element injectors should be checked (ie do not check module injectors\r\n//\r\n//          mod1\r\n//         /\r\n//       el1   mod2\r\n//         \\  /\r\n//         el2\r\n//\r\n// When requesting el2.injector.get(token), we should check in the following order and return the\r\n// first found value:\r\n// - el2.injector.get(token, default)\r\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\r\n// - mod2.injector.get(token, default)\r\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} allowPrivateServices\r\n * @param {?} depDef\r\n * @param {?=} notFoundValue\r\n * @return {?}\r\n */\r\nfunction resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\r\n    if (depDef.flags & 8 /* Value */) {\r\n        return depDef.token;\r\n    }\r\n    const /** @type {?} */ startView = view;\r\n    if (depDef.flags & 2 /* Optional */) {\r\n        notFoundValue = null;\r\n    }\r\n    const /** @type {?} */ tokenKey$$1 = depDef.tokenKey;\r\n    if (tokenKey$$1 === ChangeDetectorRefTokenKey) {\r\n        // directives on the same element as a component should be able to control the change detector\r\n        // of that component as well.\r\n        allowPrivateServices = !!(elDef && /** @type {?} */ ((elDef.element)).componentView);\r\n    }\r\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\r\n        allowPrivateServices = false;\r\n        elDef = /** @type {?} */ ((elDef.parent));\r\n    }\r\n    while (view) {\r\n        if (elDef) {\r\n            switch (tokenKey$$1) {\r\n                case RendererV1TokenKey: {\r\n                    const /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);\r\n                    return createRendererV1(compView);\r\n                }\r\n                case Renderer2TokenKey: {\r\n                    const /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);\r\n                    return compView.renderer;\r\n                }\r\n                case ElementRefTokenKey:\r\n                    return new ElementRef(asElementData(view, elDef.nodeIndex).renderElement);\r\n                case ViewContainerRefTokenKey:\r\n                    return asElementData(view, elDef.nodeIndex).viewContainer;\r\n                case TemplateRefTokenKey: {\r\n                    if (/** @type {?} */ ((elDef.element)).template) {\r\n                        return asElementData(view, elDef.nodeIndex).template;\r\n                    }\r\n                    break;\r\n                }\r\n                case ChangeDetectorRefTokenKey: {\r\n                    let /** @type {?} */ cdView = findCompView(view, elDef, allowPrivateServices);\r\n                    return createChangeDetectorRef(cdView);\r\n                }\r\n                case InjectorRefTokenKey:\r\n                    return createInjector(view, elDef);\r\n                default:\r\n                    const /** @type {?} */ providerDef = /** @type {?} */ (((allowPrivateServices ? /** @type {?} */ ((elDef.element)).allProviders : /** @type {?} */ ((elDef.element)).publicProviders)))[tokenKey$$1];\r\n                    if (providerDef) {\r\n                        let /** @type {?} */ providerData = asProviderData(view, providerDef.nodeIndex);\r\n                        if (!providerData) {\r\n                            providerData = { instance: _createProviderInstance(view, providerDef) };\r\n                            view.nodes[providerDef.nodeIndex] = /** @type {?} */ (providerData);\r\n                        }\r\n                        return providerData.instance;\r\n                    }\r\n            }\r\n        }\r\n        allowPrivateServices = isComponentView(view);\r\n        elDef = /** @type {?} */ ((viewParentEl(view)));\r\n        view = /** @type {?} */ ((view.parent));\r\n    }\r\n    const /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\r\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\r\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\r\n        // Return the value from the root element injector when\r\n        // - it provides it\r\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\r\n        // - the module injector should not be checked\r\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\r\n        return value;\r\n    }\r\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} allowPrivateServices\r\n * @return {?}\r\n */\r\nfunction findCompView(view, elDef, allowPrivateServices) {\r\n    let /** @type {?} */ compView;\r\n    if (allowPrivateServices) {\r\n        compView = asElementData(view, elDef.nodeIndex).componentView;\r\n    }\r\n    else {\r\n        compView = view;\r\n        while (compView.parent && !isComponentView(compView)) {\r\n            compView = compView.parent;\r\n        }\r\n    }\r\n    return compView;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} providerData\r\n * @param {?} def\r\n * @param {?} bindingIdx\r\n * @param {?} value\r\n * @param {?} changes\r\n * @return {?}\r\n */\r\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\r\n    if (def.flags & 32768 /* Component */) {\r\n        const /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;\r\n        if (compView.def.flags & 2 /* OnPush */) {\r\n            compView.state |= 8 /* ChecksEnabled */;\r\n        }\r\n    }\r\n    const /** @type {?} */ binding = def.bindings[bindingIdx];\r\n    const /** @type {?} */ propName = /** @type {?} */ ((binding.name));\r\n    // Note: This is still safe with Closure Compiler as\r\n    // the user passed in the property name as an object has to `providerDef`,\r\n    // so Closure Compiler will have renamed the property correctly already.\r\n    providerData.instance[propName] = value;\r\n    if (def.flags & 524288 /* OnChanges */) {\r\n        changes = changes || {};\r\n        let /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];\r\n        if (oldValue instanceof WrappedValue) {\r\n            oldValue = oldValue.wrapped;\r\n        }\r\n        const /** @type {?} */ binding = def.bindings[bindingIdx];\r\n        changes[/** @type {?} */ ((binding.nonMinifiedName))] =\r\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\r\n    }\r\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\r\n    return changes;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} lifecycles\r\n * @return {?}\r\n */\r\nfunction callLifecycleHooksChildrenFirst(view, lifecycles) {\r\n    if (!(view.def.nodeFlags & lifecycles)) {\r\n        return;\r\n    }\r\n    const /** @type {?} */ nodes = view.def.nodes;\r\n    let /** @type {?} */ initIndex = 0;\r\n    for (let /** @type {?} */ i = 0; i < nodes.length; i++) {\r\n        const /** @type {?} */ nodeDef = nodes[i];\r\n        let /** @type {?} */ parent = nodeDef.parent;\r\n        if (!parent && nodeDef.flags & lifecycles) {\r\n            // matching root node (e.g. a pipe)\r\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\r\n        }\r\n        if ((nodeDef.childFlags & lifecycles) === 0) {\r\n            // no child matches one of the lifecycles\r\n            i += nodeDef.childCount;\r\n        }\r\n        while (parent && (parent.flags & 1 /* TypeElement */) &&\r\n            i === parent.nodeIndex + parent.childCount) {\r\n            // last child of an element\r\n            if (parent.directChildFlags & lifecycles) {\r\n                initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);\r\n            }\r\n            parent = parent.parent;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} elDef\r\n * @param {?} lifecycles\r\n * @param {?} initIndex\r\n * @return {?}\r\n */\r\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\r\n    for (let /** @type {?} */ i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\r\n        const /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        if (nodeDef.flags & lifecycles) {\r\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\r\n        }\r\n        // only visit direct children\r\n        i += nodeDef.childCount;\r\n    }\r\n    return initIndex;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} index\r\n * @param {?} lifecycles\r\n * @param {?} initIndex\r\n * @return {?}\r\n */\r\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\r\n    const /** @type {?} */ providerData = asProviderData(view, index);\r\n    if (!providerData) {\r\n        return;\r\n    }\r\n    const /** @type {?} */ provider = providerData.instance;\r\n    if (!provider) {\r\n        return;\r\n    }\r\n    Services.setCurrentNode(view, index);\r\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\r\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\r\n        provider.ngAfterContentInit();\r\n    }\r\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\r\n        provider.ngAfterContentChecked();\r\n    }\r\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\r\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\r\n        provider.ngAfterViewInit();\r\n    }\r\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\r\n        provider.ngAfterViewChecked();\r\n    }\r\n    if (lifecycles & 131072 /* OnDestroy */) {\r\n        provider.ngOnDestroy();\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} flags\r\n * @param {?} id\r\n * @param {?} bindings\r\n * @return {?}\r\n */\r\nfunction queryDef(flags, id, bindings) {\r\n    let /** @type {?} */ bindingDefs = [];\r\n    for (let /** @type {?} */ propName in bindings) {\r\n        const /** @type {?} */ bindingType = bindings[propName];\r\n        bindingDefs.push({ propName, bindingType });\r\n    }\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        // TODO(vicb): check\r\n        checkIndex: -1, flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        ngContentIndex: -1,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {},\r\n        childCount: 0,\r\n        bindings: [],\r\n        bindingFlags: 0,\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: null,\r\n        query: { id, filterId: filterQueryId(id), bindings: bindingDefs },\r\n        ngContent: null\r\n    };\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createQuery() {\r\n    return new QueryList();\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction dirtyParentQueries(view) {\r\n    const /** @type {?} */ queryIds = view.def.nodeMatchedQueries;\r\n    while (view.parent && isEmbeddedView(view)) {\r\n        let /** @type {?} */ tplDef = /** @type {?} */ ((view.parentNodeDef));\r\n        view = view.parent;\r\n        // content queries\r\n        const /** @type {?} */ end = tplDef.nodeIndex + tplDef.childCount;\r\n        for (let /** @type {?} */ i = 0; i <= end; i++) {\r\n            const /** @type {?} */ nodeDef = view.def.nodes[i];\r\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\r\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\r\n                (/** @type {?} */ ((nodeDef.query)).filterId & queryIds) === /** @type {?} */ ((nodeDef.query)).filterId) {\r\n                asQueryList(view, i).setDirty();\r\n            }\r\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\r\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\r\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\r\n                // skip elements that don't contain the template element or no query.\r\n                i += nodeDef.childCount;\r\n            }\r\n        }\r\n    }\r\n    // view queries\r\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\r\n        for (let /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {\r\n            const /** @type {?} */ nodeDef = view.def.nodes[i];\r\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\r\n                asQueryList(view, i).setDirty();\r\n            }\r\n            // only visit the root nodes\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateQuery(view, nodeDef) {\r\n    const /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\r\n    if (!queryList.dirty) {\r\n        return;\r\n    }\r\n    let /** @type {?} */ directiveInstance;\r\n    let /** @type {?} */ newValues = /** @type {?} */ ((undefined));\r\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\r\n        const /** @type {?} */ elementDef = /** @type {?} */ ((/** @type {?} */ ((nodeDef.parent)).parent));\r\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */ ((nodeDef.query)), []);\r\n        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;\r\n    }\r\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\r\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);\r\n        directiveInstance = view.component;\r\n    }\r\n    queryList.reset(newValues);\r\n    const /** @type {?} */ bindings = /** @type {?} */ ((nodeDef.query)).bindings;\r\n    let /** @type {?} */ notify = false;\r\n    for (let /** @type {?} */ i = 0; i < bindings.length; i++) {\r\n        const /** @type {?} */ binding = bindings[i];\r\n        let /** @type {?} */ boundValue;\r\n        switch (binding.bindingType) {\r\n            case 0 /* First */:\r\n                boundValue = queryList.first;\r\n                break;\r\n            case 1 /* All */:\r\n                boundValue = queryList;\r\n                notify = true;\r\n                break;\r\n        }\r\n        directiveInstance[binding.propName] = boundValue;\r\n    }\r\n    if (notify) {\r\n        queryList.notifyOnChanges();\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} startIndex\r\n * @param {?} endIndex\r\n * @param {?} queryDef\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\r\n    for (let /** @type {?} */ i = startIndex; i <= endIndex; i++) {\r\n        const /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        const /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];\r\n        if (valueType != null) {\r\n            values.push(getQueryValue(view, nodeDef, valueType));\r\n        }\r\n        if (nodeDef.flags & 1 /* TypeElement */ && /** @type {?} */ ((nodeDef.element)).template &&\r\n            (/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\r\n                queryDef.filterId) {\r\n            const /** @type {?} */ elementData = asElementData(view, i);\r\n            // check embedded views that were attached at the place of their template,\r\n            // but process child nodes first if some match the query (see issue #16568)\r\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\r\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\r\n                i += nodeDef.childCount;\r\n            }\r\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n                const /** @type {?} */ embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\r\n                for (let /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\r\n                    const /** @type {?} */ embeddedView = embeddedViews[k];\r\n                    const /** @type {?} */ dvc = declaredViewContainer(embeddedView);\r\n                    if (dvc && dvc === elementData) {\r\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\r\n                    }\r\n                }\r\n            }\r\n            const /** @type {?} */ projectedViews = elementData.template._projectedViews;\r\n            if (projectedViews) {\r\n                for (let /** @type {?} */ k = 0; k < projectedViews.length; k++) {\r\n                    const /** @type {?} */ projectedView = projectedViews[k];\r\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\r\n                }\r\n            }\r\n        }\r\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\r\n            // if no child matches the query, skip the children.\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n    return values;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} queryValueType\r\n * @return {?}\r\n */\r\nfunction getQueryValue(view, nodeDef, queryValueType) {\r\n    if (queryValueType != null) {\r\n        // a match\r\n        switch (queryValueType) {\r\n            case 1 /* RenderElement */:\r\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\r\n            case 0 /* ElementRef */:\r\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\r\n            case 2 /* TemplateRef */:\r\n                return asElementData(view, nodeDef.nodeIndex).template;\r\n            case 3 /* ViewContainerRef */:\r\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\r\n            case 4 /* Provider */:\r\n                return asProviderData(view, nodeDef.nodeIndex).instance;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} ngContentIndex\r\n * @param {?} index\r\n * @return {?}\r\n */\r\nfunction ngContentDef(ngContentIndex, index) {\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex: -1,\r\n        flags: 8 /* TypeNgContent */,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {}, ngContentIndex,\r\n        childCount: 0,\r\n        bindings: [],\r\n        bindingFlags: 0,\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: { index }\r\n    };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderHost\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction appendNgContent(view, renderHost, def) {\r\n    const /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\r\n    if (!parentEl) {\r\n        // Nothing to do if there is no parent element.\r\n        return;\r\n    }\r\n    const /** @type {?} */ ngContentIndex = /** @type {?} */ ((def.ngContent)).index;\r\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} argCount\r\n * @return {?}\r\n */\r\nfunction purePipeDef(checkIndex, argCount) {\r\n    // argCount + 1 to include the pipe as first arg\r\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\r\n}\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} argCount\r\n * @return {?}\r\n */\r\nfunction pureArrayDef(checkIndex, argCount) {\r\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\r\n}\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} propToIndex\r\n * @return {?}\r\n */\r\nfunction pureObjectDef(checkIndex, propToIndex) {\r\n    const /** @type {?} */ keys = Object.keys(propToIndex);\r\n    const /** @type {?} */ nbKeys = keys.length;\r\n    const /** @type {?} */ propertyNames = new Array(nbKeys);\r\n    for (let /** @type {?} */ i = 0; i < nbKeys; i++) {\r\n        const /** @type {?} */ key = keys[i];\r\n        const /** @type {?} */ index = propToIndex[key];\r\n        propertyNames[index] = key;\r\n    }\r\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\r\n}\r\n/**\r\n * @param {?} flags\r\n * @param {?} checkIndex\r\n * @param {?} propertyNames\r\n * @return {?}\r\n */\r\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\r\n    const /** @type {?} */ bindings = new Array(propertyNames.length);\r\n    for (let /** @type {?} */ i = 0; i < propertyNames.length; i++) {\r\n        const /** @type {?} */ prop = propertyNames[i];\r\n        bindings[i] = {\r\n            flags: 8 /* TypeProperty */,\r\n            name: prop,\r\n            ns: null,\r\n            nonMinifiedName: prop,\r\n            securityContext: null,\r\n            suffix: null\r\n        };\r\n    }\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex,\r\n        flags,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {},\r\n        ngContentIndex: -1,\r\n        childCount: 0, bindings,\r\n        bindingFlags: calcBindingFlags(bindings),\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: null,\r\n        query: null,\r\n        ngContent: null\r\n    };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createPureExpression(view, def) {\r\n    return { value: undefined };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} v0\r\n * @param {?} v1\r\n * @param {?} v2\r\n * @param {?} v3\r\n * @param {?} v4\r\n * @param {?} v5\r\n * @param {?} v6\r\n * @param {?} v7\r\n * @param {?} v8\r\n * @param {?} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    const /** @type {?} */ bindings = def.bindings;\r\n    let /** @type {?} */ changed = false;\r\n    const /** @type {?} */ bindLen = bindings.length;\r\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\r\n        changed = true;\r\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\r\n        changed = true;\r\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\r\n        changed = true;\r\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\r\n        changed = true;\r\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\r\n        changed = true;\r\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\r\n        changed = true;\r\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\r\n        changed = true;\r\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\r\n        changed = true;\r\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\r\n        changed = true;\r\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\r\n        changed = true;\r\n    if (changed) {\r\n        const /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\r\n        let /** @type {?} */ value;\r\n        switch (def.flags & 201347067 /* Types */) {\r\n            case 32 /* TypePureArray */:\r\n                value = new Array(bindings.length);\r\n                if (bindLen > 0)\r\n                    value[0] = v0;\r\n                if (bindLen > 1)\r\n                    value[1] = v1;\r\n                if (bindLen > 2)\r\n                    value[2] = v2;\r\n                if (bindLen > 3)\r\n                    value[3] = v3;\r\n                if (bindLen > 4)\r\n                    value[4] = v4;\r\n                if (bindLen > 5)\r\n                    value[5] = v5;\r\n                if (bindLen > 6)\r\n                    value[6] = v6;\r\n                if (bindLen > 7)\r\n                    value[7] = v7;\r\n                if (bindLen > 8)\r\n                    value[8] = v8;\r\n                if (bindLen > 9)\r\n                    value[9] = v9;\r\n                break;\r\n            case 64 /* TypePureObject */:\r\n                value = {};\r\n                if (bindLen > 0)\r\n                    value[/** @type {?} */ ((bindings[0].name))] = v0;\r\n                if (bindLen > 1)\r\n                    value[/** @type {?} */ ((bindings[1].name))] = v1;\r\n                if (bindLen > 2)\r\n                    value[/** @type {?} */ ((bindings[2].name))] = v2;\r\n                if (bindLen > 3)\r\n                    value[/** @type {?} */ ((bindings[3].name))] = v3;\r\n                if (bindLen > 4)\r\n                    value[/** @type {?} */ ((bindings[4].name))] = v4;\r\n                if (bindLen > 5)\r\n                    value[/** @type {?} */ ((bindings[5].name))] = v5;\r\n                if (bindLen > 6)\r\n                    value[/** @type {?} */ ((bindings[6].name))] = v6;\r\n                if (bindLen > 7)\r\n                    value[/** @type {?} */ ((bindings[7].name))] = v7;\r\n                if (bindLen > 8)\r\n                    value[/** @type {?} */ ((bindings[8].name))] = v8;\r\n                if (bindLen > 9)\r\n                    value[/** @type {?} */ ((bindings[9].name))] = v9;\r\n                break;\r\n            case 128 /* TypePurePipe */:\r\n                const /** @type {?} */ pipe = v0;\r\n                switch (bindLen) {\r\n                    case 1:\r\n                        value = pipe.transform(v0);\r\n                        break;\r\n                    case 2:\r\n                        value = pipe.transform(v1);\r\n                        break;\r\n                    case 3:\r\n                        value = pipe.transform(v1, v2);\r\n                        break;\r\n                    case 4:\r\n                        value = pipe.transform(v1, v2, v3);\r\n                        break;\r\n                    case 5:\r\n                        value = pipe.transform(v1, v2, v3, v4);\r\n                        break;\r\n                    case 6:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5);\r\n                        break;\r\n                    case 7:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\r\n                        break;\r\n                    case 8:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\r\n                        break;\r\n                    case 9:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\r\n                        break;\r\n                    case 10:\r\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n        data.value = value;\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkAndUpdatePureExpressionDynamic(view, def, values) {\r\n    const /** @type {?} */ bindings = def.bindings;\r\n    let /** @type {?} */ changed = false;\r\n    for (let /** @type {?} */ i = 0; i < values.length; i++) {\r\n        // Note: We need to loop over all values, so that\r\n        // the old values are updates as well!\r\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\r\n            changed = true;\r\n        }\r\n    }\r\n    if (changed) {\r\n        const /** @type {?} */ data = asPureExpressionData(view, def.nodeIndex);\r\n        let /** @type {?} */ value;\r\n        switch (def.flags & 201347067 /* Types */) {\r\n            case 32 /* TypePureArray */:\r\n                value = values;\r\n                break;\r\n            case 64 /* TypePureObject */:\r\n                value = {};\r\n                for (let /** @type {?} */ i = 0; i < values.length; i++) {\r\n                    value[/** @type {?} */ ((bindings[i].name))] = values[i];\r\n                }\r\n                break;\r\n            case 128 /* TypePurePipe */:\r\n                const /** @type {?} */ pipe = values[0];\r\n                const /** @type {?} */ params = values.slice(1);\r\n                value = (/** @type {?} */ (pipe.transform))(...params);\r\n                break;\r\n        }\r\n        data.value = value;\r\n    }\r\n    return changed;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} checkIndex\r\n * @param {?} ngContentIndex\r\n * @param {?} staticText\r\n * @return {?}\r\n */\r\nfunction textDef(checkIndex, ngContentIndex, staticText) {\r\n    const /** @type {?} */ bindings = new Array(staticText.length - 1);\r\n    for (let /** @type {?} */ i = 1; i < staticText.length; i++) {\r\n        bindings[i - 1] = {\r\n            flags: 8 /* TypeProperty */,\r\n            name: null,\r\n            ns: null,\r\n            nonMinifiedName: null,\r\n            securityContext: null,\r\n            suffix: staticText[i],\r\n        };\r\n    }\r\n    return {\r\n        // will bet set by the view definition\r\n        nodeIndex: -1,\r\n        parent: null,\r\n        renderParent: null,\r\n        bindingIndex: -1,\r\n        outputIndex: -1,\r\n        // regular values\r\n        checkIndex,\r\n        flags: 2 /* TypeText */,\r\n        childFlags: 0,\r\n        directChildFlags: 0,\r\n        childMatchedQueries: 0,\r\n        matchedQueries: {},\r\n        matchedQueryIds: 0,\r\n        references: {}, ngContentIndex,\r\n        childCount: 0, bindings,\r\n        bindingFlags: 8 /* TypeProperty */,\r\n        outputs: [],\r\n        element: null,\r\n        provider: null,\r\n        text: { prefix: staticText[0] },\r\n        query: null,\r\n        ngContent: null,\r\n    };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} renderHost\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createText(view, renderHost, def) {\r\n    let /** @type {?} */ renderNode$$1;\r\n    const /** @type {?} */ renderer = view.renderer;\r\n    renderNode$$1 = renderer.createText(/** @type {?} */ ((def.text)).prefix);\r\n    const /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);\r\n    if (parentEl) {\r\n        renderer.appendChild(parentEl, renderNode$$1);\r\n    }\r\n    return { renderText: renderNode$$1 };\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} v0\r\n * @param {?} v1\r\n * @param {?} v2\r\n * @param {?} v3\r\n * @param {?} v4\r\n * @param {?} v5\r\n * @param {?} v6\r\n * @param {?} v7\r\n * @param {?} v8\r\n * @param {?} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    let /** @type {?} */ changed = false;\r\n    const /** @type {?} */ bindings = def.bindings;\r\n    const /** @type {?} */ bindLen = bindings.length;\r\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\r\n        changed = true;\r\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\r\n        changed = true;\r\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\r\n        changed = true;\r\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\r\n        changed = true;\r\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\r\n        changed = true;\r\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\r\n        changed = true;\r\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\r\n        changed = true;\r\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\r\n        changed = true;\r\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\r\n        changed = true;\r\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\r\n        changed = true;\r\n    if (changed) {\r\n        let /** @type {?} */ value = /** @type {?} */ ((def.text)).prefix;\r\n        if (bindLen > 0)\r\n            value += _addInterpolationPart(v0, bindings[0]);\r\n        if (bindLen > 1)\r\n            value += _addInterpolationPart(v1, bindings[1]);\r\n        if (bindLen > 2)\r\n            value += _addInterpolationPart(v2, bindings[2]);\r\n        if (bindLen > 3)\r\n            value += _addInterpolationPart(v3, bindings[3]);\r\n        if (bindLen > 4)\r\n            value += _addInterpolationPart(v4, bindings[4]);\r\n        if (bindLen > 5)\r\n            value += _addInterpolationPart(v5, bindings[5]);\r\n        if (bindLen > 6)\r\n            value += _addInterpolationPart(v6, bindings[6]);\r\n        if (bindLen > 7)\r\n            value += _addInterpolationPart(v7, bindings[7]);\r\n        if (bindLen > 8)\r\n            value += _addInterpolationPart(v8, bindings[8]);\r\n        if (bindLen > 9)\r\n            value += _addInterpolationPart(v9, bindings[9]);\r\n        const /** @type {?} */ renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\r\n        view.renderer.setValue(renderNode$$1, value);\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} def\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateTextDynamic(view, def, values) {\r\n    const /** @type {?} */ bindings = def.bindings;\r\n    let /** @type {?} */ changed = false;\r\n    for (let /** @type {?} */ i = 0; i < values.length; i++) {\r\n        // Note: We need to loop over all values, so that\r\n        // the old values are updates as well!\r\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\r\n            changed = true;\r\n        }\r\n    }\r\n    if (changed) {\r\n        let /** @type {?} */ value = '';\r\n        for (let /** @type {?} */ i = 0; i < values.length; i++) {\r\n            value = value + _addInterpolationPart(values[i], bindings[i]);\r\n        }\r\n        value = /** @type {?} */ ((def.text)).prefix + value;\r\n        const /** @type {?} */ renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\r\n        view.renderer.setValue(renderNode$$1, value);\r\n    }\r\n    return changed;\r\n}\r\n/**\r\n * @param {?} value\r\n * @param {?} binding\r\n * @return {?}\r\n */\r\nfunction _addInterpolationPart(value, binding) {\r\n    const /** @type {?} */ valueStr = value != null ? value.toString() : '';\r\n    return valueStr + binding.suffix;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} flags\r\n * @param {?} nodes\r\n * @param {?=} updateDirectives\r\n * @param {?=} updateRenderer\r\n * @return {?}\r\n */\r\nfunction viewDef(flags, nodes, updateDirectives, updateRenderer) {\r\n    // clone nodes and set auto calculated values\r\n    let /** @type {?} */ viewBindingCount = 0;\r\n    let /** @type {?} */ viewDisposableCount = 0;\r\n    let /** @type {?} */ viewNodeFlags = 0;\r\n    let /** @type {?} */ viewRootNodeFlags = 0;\r\n    let /** @type {?} */ viewMatchedQueries = 0;\r\n    let /** @type {?} */ currentParent = null;\r\n    let /** @type {?} */ currentRenderParent = null;\r\n    let /** @type {?} */ currentElementHasPublicProviders = false;\r\n    let /** @type {?} */ currentElementHasPrivateProviders = false;\r\n    let /** @type {?} */ lastRenderRootNode = null;\r\n    for (let /** @type {?} */ i = 0; i < nodes.length; i++) {\r\n        const /** @type {?} */ node = nodes[i];\r\n        node.nodeIndex = i;\r\n        node.parent = currentParent;\r\n        node.bindingIndex = viewBindingCount;\r\n        node.outputIndex = viewDisposableCount;\r\n        node.renderParent = currentRenderParent;\r\n        viewNodeFlags |= node.flags;\r\n        viewMatchedQueries |= node.matchedQueryIds;\r\n        if (node.element) {\r\n            const /** @type {?} */ elDef = node.element;\r\n            elDef.publicProviders =\r\n                currentParent ? /** @type {?} */ ((currentParent.element)).publicProviders : Object.create(null);\r\n            elDef.allProviders = elDef.publicProviders;\r\n            // Note: We assume that all providers of an element are before any child element!\r\n            currentElementHasPublicProviders = false;\r\n            currentElementHasPrivateProviders = false;\r\n            if (node.element.template) {\r\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\r\n            }\r\n        }\r\n        validateNode(currentParent, node, nodes.length);\r\n        viewBindingCount += node.bindings.length;\r\n        viewDisposableCount += node.outputs.length;\r\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\r\n            lastRenderRootNode = node;\r\n        }\r\n        if (node.flags & 20224 /* CatProvider */) {\r\n            if (!currentElementHasPublicProviders) {\r\n                currentElementHasPublicProviders = true; /** @type {?} */\r\n                ((/** @type {?} */ ((currentParent)).element)).publicProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders); /** @type {?} */\r\n                ((/** @type {?} */ ((currentParent)).element)).allProviders = /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders;\r\n            }\r\n            const /** @type {?} */ isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\r\n            const /** @type {?} */ isComponent = (node.flags & 32768 /* Component */) !== 0;\r\n            if (!isPrivateService || isComponent) {\r\n                /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\r\n            }\r\n            else {\r\n                if (!currentElementHasPrivateProviders) {\r\n                    currentElementHasPrivateProviders = true; /** @type {?} */\r\n                    ((/** @type {?} */ ((currentParent)).element)).allProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders);\r\n                } /** @type {?} */\r\n                ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\r\n            }\r\n            if (isComponent) {\r\n                /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).componentProvider = node;\r\n            }\r\n        }\r\n        if (currentParent) {\r\n            currentParent.childFlags |= node.flags;\r\n            currentParent.directChildFlags |= node.flags;\r\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\r\n            if (node.element && node.element.template) {\r\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\r\n            }\r\n        }\r\n        else {\r\n            viewRootNodeFlags |= node.flags;\r\n        }\r\n        if (node.childCount > 0) {\r\n            currentParent = node;\r\n            if (!isNgContainer(node)) {\r\n                currentRenderParent = node;\r\n            }\r\n        }\r\n        else {\r\n            // When the current node has no children, check if it is the last children of its parent.\r\n            // When it is, propagate the flags up.\r\n            // The loop is required because an element could be the last transitive children of several\r\n            // elements. We loop to either the root or the highest opened element (= with remaining\r\n            // children)\r\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\r\n                const /** @type {?} */ newParent = currentParent.parent;\r\n                if (newParent) {\r\n                    newParent.childFlags |= currentParent.childFlags;\r\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\r\n                }\r\n                currentParent = newParent;\r\n                // We also need to update the render parent & account for ng-container\r\n                if (currentParent && isNgContainer(currentParent)) {\r\n                    currentRenderParent = currentParent.renderParent;\r\n                }\r\n                else {\r\n                    currentRenderParent = currentParent;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const /** @type {?} */ handleEvent = (view, nodeIndex, eventName, event) => /** @type {?} */ ((/** @type {?} */ ((nodes[nodeIndex].element)).handleEvent))(view, eventName, event);\r\n    return {\r\n        // Will be filled later...\r\n        factory: null,\r\n        nodeFlags: viewNodeFlags,\r\n        rootNodeFlags: viewRootNodeFlags,\r\n        nodeMatchedQueries: viewMatchedQueries, flags,\r\n        nodes: nodes,\r\n        updateDirectives: updateDirectives || NOOP,\r\n        updateRenderer: updateRenderer || NOOP, handleEvent,\r\n        bindingCount: viewBindingCount,\r\n        outputCount: viewDisposableCount, lastRenderRootNode\r\n    };\r\n}\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction isNgContainer(node) {\r\n    return (node.flags & 1 /* TypeElement */) !== 0 && /** @type {?} */ ((node.element)).name === null;\r\n}\r\n/**\r\n * @param {?} parent\r\n * @param {?} node\r\n * @param {?} nodeCount\r\n * @return {?}\r\n */\r\nfunction validateNode(parent, node, nodeCount) {\r\n    const /** @type {?} */ template = node.element && node.element.template;\r\n    if (template) {\r\n        if (!template.lastRenderRootNode) {\r\n            throw new Error(`Illegal State: Embedded templates without nodes are not allowed!`);\r\n        }\r\n        if (template.lastRenderRootNode &&\r\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\r\n            throw new Error(`Illegal State: Last root node of a template can't have embedded views, at index ${node.nodeIndex}!`);\r\n        }\r\n    }\r\n    if (node.flags & 20224 /* CatProvider */) {\r\n        const /** @type {?} */ parentFlags = parent ? parent.flags : 0;\r\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\r\n            throw new Error(`Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ${node.nodeIndex}!`);\r\n        }\r\n    }\r\n    if (node.query) {\r\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\r\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\r\n            throw new Error(`Illegal State: Content Query nodes need to be children of directives, at index ${node.nodeIndex}!`);\r\n        }\r\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\r\n            throw new Error(`Illegal State: View Query nodes have to be top level nodes, at index ${node.nodeIndex}!`);\r\n        }\r\n    }\r\n    if (node.childCount) {\r\n        const /** @type {?} */ parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\r\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\r\n            throw new Error(`Illegal State: childCount of node leads outside of parent, at index ${node.nodeIndex}!`);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} parent\r\n * @param {?} anchorDef\r\n * @param {?} viewDef\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction createEmbeddedView(parent, anchorDef$$1, viewDef, context) {\r\n    // embedded views are seen as siblings to the anchor, so we need\r\n    // to get the parent of the anchor and use it as parentIndex.\r\n    const /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);\r\n    initView(view, parent.component, context);\r\n    createViewNodes(view);\r\n    return view;\r\n}\r\n/**\r\n * @param {?} root\r\n * @param {?} def\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction createRootView(root, def, context) {\r\n    const /** @type {?} */ view = createView(root, root.renderer, null, null, def);\r\n    initView(view, context, context);\r\n    createViewNodes(view);\r\n    return view;\r\n}\r\n/**\r\n * @param {?} parentView\r\n * @param {?} nodeDef\r\n * @param {?} viewDef\r\n * @param {?} hostElement\r\n * @return {?}\r\n */\r\nfunction createComponentView(parentView, nodeDef, viewDef, hostElement) {\r\n    const /** @type {?} */ rendererType = /** @type {?} */ ((nodeDef.element)).componentRendererType;\r\n    let /** @type {?} */ compRenderer;\r\n    if (!rendererType) {\r\n        compRenderer = parentView.root.renderer;\r\n    }\r\n    else {\r\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\r\n    }\r\n    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);\r\n}\r\n/**\r\n * @param {?} root\r\n * @param {?} renderer\r\n * @param {?} parent\r\n * @param {?} parentNodeDef\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction createView(root, renderer, parent, parentNodeDef, def) {\r\n    const /** @type {?} */ nodes = new Array(def.nodes.length);\r\n    const /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : null;\r\n    const /** @type {?} */ view = {\r\n        def,\r\n        parent,\r\n        viewContainerParent: null, parentNodeDef,\r\n        context: null,\r\n        component: null, nodes,\r\n        state: 13 /* CatInit */, root, renderer,\r\n        oldValues: new Array(def.bindingCount), disposables,\r\n        initIndex: -1\r\n    };\r\n    return view;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} component\r\n * @param {?} context\r\n * @return {?}\r\n */\r\nfunction initView(view, component, context) {\r\n    view.component = component;\r\n    view.context = context;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction createViewNodes(view) {\r\n    let /** @type {?} */ renderHost;\r\n    if (isComponentView(view)) {\r\n        const /** @type {?} */ hostDef = view.parentNodeDef;\r\n        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((/** @type {?} */ ((hostDef)).parent)).nodeIndex).renderElement;\r\n    }\r\n    const /** @type {?} */ def = view.def;\r\n    const /** @type {?} */ nodes = view.nodes;\r\n    for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\r\n        const /** @type {?} */ nodeDef = def.nodes[i];\r\n        Services.setCurrentNode(view, i);\r\n        let /** @type {?} */ nodeData;\r\n        switch (nodeDef.flags & 201347067 /* Types */) {\r\n            case 1 /* TypeElement */:\r\n                const /** @type {?} */ el = /** @type {?} */ (createElement(view, renderHost, nodeDef));\r\n                let /** @type {?} */ componentView = /** @type {?} */ ((undefined));\r\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\r\n                    const /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentView)));\r\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\r\n                }\r\n                listenToElementOutputs(view, componentView, nodeDef, el);\r\n                nodeData = /** @type {?} */ ({\r\n                    renderElement: el,\r\n                    componentView,\r\n                    viewContainer: null,\r\n                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\r\n                });\r\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\r\n                }\r\n                break;\r\n            case 2 /* TypeText */:\r\n                nodeData = /** @type {?} */ (createText(view, renderHost, nodeDef));\r\n                break;\r\n            case 512 /* TypeClassProvider */:\r\n            case 1024 /* TypeFactoryProvider */:\r\n            case 2048 /* TypeUseExistingProvider */:\r\n            case 256 /* TypeValueProvider */: {\r\n                nodeData = nodes[i];\r\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\r\n                    const /** @type {?} */ instance = createProviderInstance(view, nodeDef);\r\n                    nodeData = /** @type {?} */ ({ instance });\r\n                }\r\n                break;\r\n            }\r\n            case 16 /* TypePipe */: {\r\n                const /** @type {?} */ instance = createPipeInstance(view, nodeDef);\r\n                nodeData = /** @type {?} */ ({ instance });\r\n                break;\r\n            }\r\n            case 16384 /* TypeDirective */: {\r\n                nodeData = nodes[i];\r\n                if (!nodeData) {\r\n                    const /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);\r\n                    nodeData = /** @type {?} */ ({ instance });\r\n                }\r\n                if (nodeDef.flags & 32768 /* Component */) {\r\n                    const /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;\r\n                    initView(compView, nodeData.instance, nodeData.instance);\r\n                }\r\n                break;\r\n            }\r\n            case 32 /* TypePureArray */:\r\n            case 64 /* TypePureObject */:\r\n            case 128 /* TypePurePipe */:\r\n                nodeData = /** @type {?} */ (createPureExpression(view, nodeDef));\r\n                break;\r\n            case 67108864 /* TypeContentQuery */:\r\n            case 134217728 /* TypeViewQuery */:\r\n                nodeData = /** @type {?} */ (createQuery());\r\n                break;\r\n            case 8 /* TypeNgContent */:\r\n                appendNgContent(view, renderHost, nodeDef);\r\n                // no runtime data needed for NgContent...\r\n                nodeData = undefined;\r\n                break;\r\n        }\r\n        nodes[i] = nodeData;\r\n    }\r\n    // Create the ViewData.nodes of component views after we created everything else,\r\n    // so that e.g. ng-content works\r\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\r\n    // fill static content and view queries\r\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction checkNoChangesView(view) {\r\n    markProjectedViewsForCheck(view);\r\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\r\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\r\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\r\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\r\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\r\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\r\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateView(view) {\r\n    if (view.state & 1 /* BeforeFirstCheck */) {\r\n        view.state &= ~1 /* BeforeFirstCheck */;\r\n        view.state |= 2 /* FirstCheck */;\r\n    }\r\n    else {\r\n        view.state &= ~2 /* FirstCheck */;\r\n    }\r\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\r\n    markProjectedViewsForCheck(view);\r\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\r\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\r\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\r\n    let /** @type {?} */ callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\r\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\r\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\r\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\r\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\r\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\r\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\r\n    if (view.def.flags & 2 /* OnPush */) {\r\n        view.state &= ~8 /* ChecksEnabled */;\r\n    }\r\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\r\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} argStyle\r\n * @param {?=} v0\r\n * @param {?=} v1\r\n * @param {?=} v2\r\n * @param {?=} v3\r\n * @param {?=} v4\r\n * @param {?=} v5\r\n * @param {?=} v6\r\n * @param {?=} v7\r\n * @param {?=} v8\r\n * @param {?=} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    if (argStyle === 0 /* Inline */) {\r\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    }\r\n    else {\r\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction markProjectedViewsForCheck(view) {\r\n    const /** @type {?} */ def = view.def;\r\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\r\n        return;\r\n    }\r\n    for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\r\n        const /** @type {?} */ nodeDef = def.nodes[i];\r\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\r\n            const /** @type {?} */ projectedViews = asElementData(view, i).template._projectedViews;\r\n            if (projectedViews) {\r\n                for (let /** @type {?} */ i = 0; i < projectedViews.length; i++) {\r\n                    const /** @type {?} */ projectedView = projectedViews[i];\r\n                    projectedView.state |= 32 /* CheckProjectedView */;\r\n                    markParentViewsForCheckProjectedViews(projectedView, view);\r\n                }\r\n            }\r\n        }\r\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\r\n            // a parent with leafs\r\n            // no child is a component,\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?=} v0\r\n * @param {?=} v1\r\n * @param {?=} v2\r\n * @param {?=} v3\r\n * @param {?=} v4\r\n * @param {?=} v5\r\n * @param {?=} v6\r\n * @param {?=} v7\r\n * @param {?=} v8\r\n * @param {?=} v9\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    switch (nodeDef.flags & 201347067 /* Types */) {\r\n        case 1 /* TypeElement */:\r\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        case 2 /* TypeText */:\r\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        case 16384 /* TypeDirective */:\r\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        case 32 /* TypePureArray */:\r\n        case 64 /* TypePureObject */:\r\n        case 128 /* TypePurePipe */:\r\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n        default:\r\n            throw 'unreachable';\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\r\n    switch (nodeDef.flags & 201347067 /* Types */) {\r\n        case 1 /* TypeElement */:\r\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\r\n        case 2 /* TypeText */:\r\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\r\n        case 16384 /* TypeDirective */:\r\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\r\n        case 32 /* TypePureArray */:\r\n        case 64 /* TypePureObject */:\r\n        case 128 /* TypePurePipe */:\r\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\r\n        default:\r\n            throw 'unreachable';\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} argStyle\r\n * @param {?=} v0\r\n * @param {?=} v1\r\n * @param {?=} v2\r\n * @param {?=} v3\r\n * @param {?=} v4\r\n * @param {?=} v5\r\n * @param {?=} v6\r\n * @param {?=} v7\r\n * @param {?=} v8\r\n * @param {?=} v9\r\n * @return {?}\r\n */\r\nfunction checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    if (argStyle === 0 /* Inline */) {\r\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    }\r\n    else {\r\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\r\n    }\r\n    // Returning false is ok here as we would have thrown in case of a change.\r\n    return false;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} v0\r\n * @param {?} v1\r\n * @param {?} v2\r\n * @param {?} v3\r\n * @param {?} v4\r\n * @param {?} v5\r\n * @param {?} v6\r\n * @param {?} v7\r\n * @param {?} v8\r\n * @param {?} v9\r\n * @return {?}\r\n */\r\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    const /** @type {?} */ bindLen = nodeDef.bindings.length;\r\n    if (bindLen > 0)\r\n        checkBindingNoChanges(view, nodeDef, 0, v0);\r\n    if (bindLen > 1)\r\n        checkBindingNoChanges(view, nodeDef, 1, v1);\r\n    if (bindLen > 2)\r\n        checkBindingNoChanges(view, nodeDef, 2, v2);\r\n    if (bindLen > 3)\r\n        checkBindingNoChanges(view, nodeDef, 3, v3);\r\n    if (bindLen > 4)\r\n        checkBindingNoChanges(view, nodeDef, 4, v4);\r\n    if (bindLen > 5)\r\n        checkBindingNoChanges(view, nodeDef, 5, v5);\r\n    if (bindLen > 6)\r\n        checkBindingNoChanges(view, nodeDef, 6, v6);\r\n    if (bindLen > 7)\r\n        checkBindingNoChanges(view, nodeDef, 7, v7);\r\n    if (bindLen > 8)\r\n        checkBindingNoChanges(view, nodeDef, 8, v8);\r\n    if (bindLen > 9)\r\n        checkBindingNoChanges(view, nodeDef, 9, v9);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\r\n    for (let /** @type {?} */ i = 0; i < values.length; i++) {\r\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\r\n    }\r\n}\r\n/**\r\n * Workaround https://github.com/angular/tsickle/issues/497\r\n * @suppress {misplacedTypeAnnotation}\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @return {?}\r\n */\r\nfunction checkNoChangesQuery(view, nodeDef) {\r\n    const /** @type {?} */ queryList = asQueryList(view, nodeDef.nodeIndex);\r\n    if (queryList.dirty) {\r\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), `Query ${(/** @type {?} */ ((nodeDef.query))).id} not dirty`, `Query ${(/** @type {?} */ ((nodeDef.query))).id} dirty`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction destroyView(view) {\r\n    if (view.state & 128 /* Destroyed */) {\r\n        return;\r\n    }\r\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\r\n    execComponentViewsAction(view, ViewAction.Destroy);\r\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\r\n    if (view.disposables) {\r\n        for (let /** @type {?} */ i = 0; i < view.disposables.length; i++) {\r\n            view.disposables[i]();\r\n        }\r\n    }\r\n    detachProjectedView(view);\r\n    if (view.renderer.destroyNode) {\r\n        destroyViewNodes(view);\r\n    }\r\n    if (isComponentView(view)) {\r\n        view.renderer.destroy();\r\n    }\r\n    view.state |= 128 /* Destroyed */;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction destroyViewNodes(view) {\r\n    const /** @type {?} */ len = view.def.nodes.length;\r\n    for (let /** @type {?} */ i = 0; i < len; i++) {\r\n        const /** @type {?} */ def = view.def.nodes[i];\r\n        if (def.flags & 1 /* TypeElement */) {\r\n            /** @type {?} */ ((view.renderer.destroyNode))(asElementData(view, i).renderElement);\r\n        }\r\n        else if (def.flags & 2 /* TypeText */) {\r\n            /** @type {?} */ ((view.renderer.destroyNode))(asTextData(view, i).renderText);\r\n        }\r\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\r\n            asQueryList(view, i).destroy();\r\n        }\r\n    }\r\n}\r\n/** @enum {number} */\r\nconst ViewAction = {\r\n    CreateViewNodes: 0,\r\n    CheckNoChanges: 1,\r\n    CheckNoChangesProjectedViews: 2,\r\n    CheckAndUpdate: 3,\r\n    CheckAndUpdateProjectedViews: 4,\r\n    Destroy: 5,\r\n};\r\nViewAction[ViewAction.CreateViewNodes] = \"CreateViewNodes\";\r\nViewAction[ViewAction.CheckNoChanges] = \"CheckNoChanges\";\r\nViewAction[ViewAction.CheckNoChangesProjectedViews] = \"CheckNoChangesProjectedViews\";\r\nViewAction[ViewAction.CheckAndUpdate] = \"CheckAndUpdate\";\r\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = \"CheckAndUpdateProjectedViews\";\r\nViewAction[ViewAction.Destroy] = \"Destroy\";\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction execComponentViewsAction(view, action) {\r\n    const /** @type {?} */ def = view.def;\r\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\r\n        return;\r\n    }\r\n    for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\r\n        const /** @type {?} */ nodeDef = def.nodes[i];\r\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\r\n            // a leaf\r\n            callViewAction(asElementData(view, i).componentView, action);\r\n        }\r\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\r\n            // a parent with leafs\r\n            // no child is a component,\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction execEmbeddedViewsAction(view, action) {\r\n    const /** @type {?} */ def = view.def;\r\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\r\n        return;\r\n    }\r\n    for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\r\n        const /** @type {?} */ nodeDef = def.nodes[i];\r\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\r\n            // a leaf\r\n            const /** @type {?} */ embeddedViews = /** @type {?} */ ((asElementData(view, i).viewContainer))._embeddedViews;\r\n            for (let /** @type {?} */ k = 0; k < embeddedViews.length; k++) {\r\n                callViewAction(embeddedViews[k], action);\r\n            }\r\n        }\r\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\r\n            // a parent with leafs\r\n            // no child is a component,\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction callViewAction(view, action) {\r\n    const /** @type {?} */ viewState = view.state;\r\n    switch (action) {\r\n        case ViewAction.CheckNoChanges:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\r\n                    checkNoChangesView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.CheckNoChangesProjectedViews:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if (viewState & 32 /* CheckProjectedView */) {\r\n                    checkNoChangesView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, action);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.CheckAndUpdate:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\r\n                    checkAndUpdateView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.CheckAndUpdateProjectedViews:\r\n            if ((viewState & 128 /* Destroyed */) === 0) {\r\n                if (viewState & 32 /* CheckProjectedView */) {\r\n                    checkAndUpdateView(view);\r\n                }\r\n                else if (viewState & 64 /* CheckProjectedViews */) {\r\n                    execProjectedViewsAction(view, action);\r\n                }\r\n            }\r\n            break;\r\n        case ViewAction.Destroy:\r\n            // Note: destroyView recurses over all views,\r\n            // so we don't need to special case projected views here.\r\n            destroyView(view);\r\n            break;\r\n        case ViewAction.CreateViewNodes:\r\n            createViewNodes(view);\r\n            break;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} action\r\n * @return {?}\r\n */\r\nfunction execProjectedViewsAction(view, action) {\r\n    execEmbeddedViewsAction(view, action);\r\n    execComponentViewsAction(view, action);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} queryFlags\r\n * @param {?} staticDynamicQueryFlag\r\n * @param {?} checkType\r\n * @return {?}\r\n */\r\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\r\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\r\n        return;\r\n    }\r\n    const /** @type {?} */ nodeCount = view.def.nodes.length;\r\n    for (let /** @type {?} */ i = 0; i < nodeCount; i++) {\r\n        const /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\r\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\r\n            switch (checkType) {\r\n                case 0 /* CheckAndUpdate */:\r\n                    checkAndUpdateQuery(view, nodeDef);\r\n                    break;\r\n                case 1 /* CheckNoChanges */:\r\n                    checkNoChangesQuery(view, nodeDef);\r\n                    break;\r\n            }\r\n        }\r\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\r\n            // no child has a matching query\r\n            // then skip the children\r\n            i += nodeDef.childCount;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nlet initialized = false;\r\n/**\r\n * @return {?}\r\n */\r\nfunction initServicesIfNeeded() {\r\n    if (initialized) {\r\n        return;\r\n    }\r\n    initialized = true;\r\n    const /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();\r\n    Services.setCurrentNode = services.setCurrentNode;\r\n    Services.createRootView = services.createRootView;\r\n    Services.createEmbeddedView = services.createEmbeddedView;\r\n    Services.createComponentView = services.createComponentView;\r\n    Services.createNgModuleRef = services.createNgModuleRef;\r\n    Services.overrideProvider = services.overrideProvider;\r\n    Services.overrideComponentView = services.overrideComponentView;\r\n    Services.clearOverrides = services.clearOverrides;\r\n    Services.checkAndUpdateView = services.checkAndUpdateView;\r\n    Services.checkNoChangesView = services.checkNoChangesView;\r\n    Services.destroyView = services.destroyView;\r\n    Services.resolveDep = resolveDep;\r\n    Services.createDebugContext = services.createDebugContext;\r\n    Services.handleEvent = services.handleEvent;\r\n    Services.updateDirectives = services.updateDirectives;\r\n    Services.updateRenderer = services.updateRenderer;\r\n    Services.dirtyParentQueries = dirtyParentQueries;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createProdServices() {\r\n    return {\r\n        setCurrentNode: () => { },\r\n        createRootView: createProdRootView,\r\n        createEmbeddedView: createEmbeddedView,\r\n        createComponentView: createComponentView,\r\n        createNgModuleRef: createNgModuleRef,\r\n        overrideProvider: NOOP,\r\n        overrideComponentView: NOOP,\r\n        clearOverrides: NOOP,\r\n        checkAndUpdateView: checkAndUpdateView,\r\n        checkNoChangesView: checkNoChangesView,\r\n        destroyView: destroyView,\r\n        createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),\r\n        handleEvent: (view, nodeIndex, eventName, event) => view.def.handleEvent(view, nodeIndex, eventName, event),\r\n        updateDirectives: (view, checkType) => view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\r\n            prodCheckNoChangesNode, view),\r\n        updateRenderer: (view, checkType) => view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\r\n            prodCheckNoChangesNode, view),\r\n    };\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createDebugServices() {\r\n    return {\r\n        setCurrentNode: debugSetCurrentNode,\r\n        createRootView: debugCreateRootView,\r\n        createEmbeddedView: debugCreateEmbeddedView,\r\n        createComponentView: debugCreateComponentView,\r\n        createNgModuleRef: debugCreateNgModuleRef,\r\n        overrideProvider: debugOverrideProvider,\r\n        overrideComponentView: debugOverrideComponentView,\r\n        clearOverrides: debugClearOverrides,\r\n        checkAndUpdateView: debugCheckAndUpdateView,\r\n        checkNoChangesView: debugCheckNoChangesView,\r\n        destroyView: debugDestroyView,\r\n        createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),\r\n        handleEvent: debugHandleEvent,\r\n        updateDirectives: debugUpdateDirectives,\r\n        updateRenderer: debugUpdateRenderer,\r\n    };\r\n}\r\n/**\r\n * @param {?} elInjector\r\n * @param {?} projectableNodes\r\n * @param {?} rootSelectorOrNode\r\n * @param {?} def\r\n * @param {?} ngModule\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\r\n    const /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);\r\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\r\n}\r\n/**\r\n * @param {?} elInjector\r\n * @param {?} projectableNodes\r\n * @param {?} rootSelectorOrNode\r\n * @param {?} def\r\n * @param {?} ngModule\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\r\n    const /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);\r\n    const /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\r\n    const /** @type {?} */ defWithOverride = applyProviderOverridesToView(def);\r\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\r\n}\r\n/**\r\n * @param {?} elInjector\r\n * @param {?} ngModule\r\n * @param {?} rendererFactory\r\n * @param {?} projectableNodes\r\n * @param {?} rootSelectorOrNode\r\n * @return {?}\r\n */\r\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\r\n    const /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);\r\n    const /** @type {?} */ errorHandler = ngModule.injector.get(ErrorHandler);\r\n    const /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);\r\n    return {\r\n        ngModule,\r\n        injector: elInjector, projectableNodes,\r\n        selectorOrNode: rootSelectorOrNode, sanitizer, rendererFactory, renderer, errorHandler\r\n    };\r\n}\r\n/**\r\n * @param {?} parentView\r\n * @param {?} anchorDef\r\n * @param {?} viewDef\r\n * @param {?=} context\r\n * @return {?}\r\n */\r\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {\r\n    const /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef$$1);\r\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\r\n}\r\n/**\r\n * @param {?} parentView\r\n * @param {?} nodeDef\r\n * @param {?} viewDef\r\n * @param {?} hostElement\r\n * @return {?}\r\n */\r\nfunction debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {\r\n    const /** @type {?} */ overrideComponentView = viewDefOverrides.get(/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentProvider)).provider)).token);\r\n    if (overrideComponentView) {\r\n        viewDef$$1 = overrideComponentView;\r\n    }\r\n    else {\r\n        viewDef$$1 = applyProviderOverridesToView(viewDef$$1);\r\n    }\r\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef$$1, hostElement]);\r\n}\r\n/**\r\n * @param {?} moduleType\r\n * @param {?} parentInjector\r\n * @param {?} bootstrapComponents\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\r\n    const /** @type {?} */ defWithOverride = applyProviderOverridesToNgModule(def);\r\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\r\n}\r\nconst providerOverrides = new Map();\r\nconst viewDefOverrides = new Map();\r\n/**\r\n * @param {?} override\r\n * @return {?}\r\n */\r\nfunction debugOverrideProvider(override) {\r\n    providerOverrides.set(override.token, override);\r\n}\r\n/**\r\n * @param {?} comp\r\n * @param {?} compFactory\r\n * @return {?}\r\n */\r\nfunction debugOverrideComponentView(comp, compFactory) {\r\n    const /** @type {?} */ hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\r\n    const /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((hostViewDef.nodes[0].element)).componentView)));\r\n    viewDefOverrides.set(comp, compViewDef);\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction debugClearOverrides() {\r\n    providerOverrides.clear();\r\n    viewDefOverrides.clear();\r\n}\r\n/**\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction applyProviderOverridesToView(def) {\r\n    if (providerOverrides.size === 0) {\r\n        return def;\r\n    }\r\n    const /** @type {?} */ elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\r\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\r\n        return def;\r\n    }\r\n    // clone the whole view definition,\r\n    // as it maintains references between the nodes that are hard to update.\r\n    def = /** @type {?} */ ((def.factory))(() => NOOP);\r\n    for (let /** @type {?} */ i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\r\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\r\n    }\r\n    return def;\r\n    /**\r\n     * @param {?} def\r\n     * @return {?}\r\n     */\r\n    function findElementIndicesWithOverwrittenProviders(def) {\r\n        const /** @type {?} */ elIndicesWithOverwrittenProviders = [];\r\n        let /** @type {?} */ lastElementDef = null;\r\n        for (let /** @type {?} */ i = 0; i < def.nodes.length; i++) {\r\n            const /** @type {?} */ nodeDef = def.nodes[i];\r\n            if (nodeDef.flags & 1 /* TypeElement */) {\r\n                lastElementDef = nodeDef;\r\n            }\r\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\r\n                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {\r\n                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);\r\n                lastElementDef = null;\r\n            }\r\n        }\r\n        return elIndicesWithOverwrittenProviders;\r\n    }\r\n    /**\r\n     * @param {?} viewDef\r\n     * @param {?} elIndex\r\n     * @return {?}\r\n     */\r\n    function applyProviderOverridesToElement(viewDef$$1, elIndex) {\r\n        for (let /** @type {?} */ i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {\r\n            const /** @type {?} */ nodeDef = viewDef$$1.nodes[i];\r\n            if (nodeDef.flags & 1 /* TypeElement */) {\r\n                // stop at the next element\r\n                return;\r\n            }\r\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\r\n                const /** @type {?} */ provider = /** @type {?} */ ((nodeDef.provider));\r\n                const /** @type {?} */ override = providerOverrides.get(provider.token);\r\n                if (override) {\r\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\r\n                    provider.deps = splitDepsDsl(override.deps);\r\n                    provider.value = override.value;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} def\r\n * @return {?}\r\n */\r\nfunction applyProviderOverridesToNgModule(def) {\r\n    const { hasOverrides, hasDeprecatedOverrides } = calcHasOverrides(def);\r\n    if (!hasOverrides) {\r\n        return def;\r\n    }\r\n    // clone the whole view definition,\r\n    // as it maintains references between the nodes that are hard to update.\r\n    def = /** @type {?} */ ((def.factory))(() => NOOP);\r\n    applyProviderOverrides(def);\r\n    return def;\r\n    /**\r\n     * @param {?} def\r\n     * @return {?}\r\n     */\r\n    function calcHasOverrides(def) {\r\n        let /** @type {?} */ hasOverrides = false;\r\n        let /** @type {?} */ hasDeprecatedOverrides = false;\r\n        if (providerOverrides.size === 0) {\r\n            return { hasOverrides, hasDeprecatedOverrides };\r\n        }\r\n        def.providers.forEach(node => {\r\n            const /** @type {?} */ override = providerOverrides.get(node.token);\r\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\r\n                hasOverrides = true;\r\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\r\n            }\r\n        });\r\n        return { hasOverrides, hasDeprecatedOverrides };\r\n    }\r\n    /**\r\n     * @param {?} def\r\n     * @return {?}\r\n     */\r\n    function applyProviderOverrides(def) {\r\n        for (let /** @type {?} */ i = 0; i < def.providers.length; i++) {\r\n            const /** @type {?} */ provider = def.providers[i];\r\n            if (hasDeprecatedOverrides) {\r\n                // We had a bug where me made\r\n                // all providers lazy. Keep this logic behind a flag\r\n                // for migrating existing users.\r\n                provider.flags |= 4096 /* LazyProvider */;\r\n            }\r\n            const /** @type {?} */ override = providerOverrides.get(provider.token);\r\n            if (override) {\r\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\r\n                provider.deps = splitDepsDsl(override.deps);\r\n                provider.value = override.value;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} checkIndex\r\n * @param {?} argStyle\r\n * @param {?=} v0\r\n * @param {?=} v1\r\n * @param {?=} v2\r\n * @param {?=} v3\r\n * @param {?=} v4\r\n * @param {?=} v5\r\n * @param {?=} v6\r\n * @param {?=} v7\r\n * @param {?=} v8\r\n * @param {?=} v9\r\n * @return {?}\r\n */\r\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    const /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\r\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n        asPureExpressionData(view, checkIndex).value :\r\n        undefined;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} checkIndex\r\n * @param {?} argStyle\r\n * @param {?=} v0\r\n * @param {?=} v1\r\n * @param {?=} v2\r\n * @param {?=} v3\r\n * @param {?=} v4\r\n * @param {?=} v5\r\n * @param {?=} v6\r\n * @param {?=} v7\r\n * @param {?=} v8\r\n * @param {?=} v9\r\n * @return {?}\r\n */\r\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\r\n    const /** @type {?} */ nodeDef = view.def.nodes[checkIndex];\r\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\r\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n        asPureExpressionData(view, checkIndex).value :\r\n        undefined;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction debugCheckAndUpdateView(view) {\r\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction debugCheckNoChangesView(view) {\r\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction debugDestroyView(view) {\r\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\r\n}\r\n/** @enum {number} */\r\nconst DebugAction = {\r\n    create: 0,\r\n    detectChanges: 1,\r\n    checkNoChanges: 2,\r\n    destroy: 3,\r\n    handleEvent: 4,\r\n};\r\nDebugAction[DebugAction.create] = \"create\";\r\nDebugAction[DebugAction.detectChanges] = \"detectChanges\";\r\nDebugAction[DebugAction.checkNoChanges] = \"checkNoChanges\";\r\nDebugAction[DebugAction.destroy] = \"destroy\";\r\nDebugAction[DebugAction.handleEvent] = \"handleEvent\";\r\nlet _currentAction;\r\nlet _currentView;\r\nlet _currentNodeIndex;\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIndex\r\n * @return {?}\r\n */\r\nfunction debugSetCurrentNode(view, nodeIndex) {\r\n    _currentView = view;\r\n    _currentNodeIndex = nodeIndex;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIndex\r\n * @param {?} eventName\r\n * @param {?} event\r\n * @return {?}\r\n */\r\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\r\n    debugSetCurrentNode(view, nodeIndex);\r\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} checkType\r\n * @return {?}\r\n */\r\nfunction debugUpdateDirectives(view, checkType) {\r\n    if (view.state & 128 /* Destroyed */) {\r\n        throw viewDestroyedError(DebugAction[_currentAction]);\r\n    }\r\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\r\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\r\n    /**\r\n     * @param {?} view\r\n     * @param {?} nodeIndex\r\n     * @param {?} argStyle\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle, ...values) {\r\n        const /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\r\n        if (checkType === 0 /* CheckAndUpdate */) {\r\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\r\n        }\r\n        else {\r\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\r\n        }\r\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\r\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\r\n        }\r\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\r\n            undefined;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} checkType\r\n * @return {?}\r\n */\r\nfunction debugUpdateRenderer(view, checkType) {\r\n    if (view.state & 128 /* Destroyed */) {\r\n        throw viewDestroyedError(DebugAction[_currentAction]);\r\n    }\r\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\r\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\r\n    /**\r\n     * @param {?} view\r\n     * @param {?} nodeIndex\r\n     * @param {?} argStyle\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle, ...values) {\r\n        const /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];\r\n        if (checkType === 0 /* CheckAndUpdate */) {\r\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\r\n        }\r\n        else {\r\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\r\n        }\r\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\r\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\r\n        }\r\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\r\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\r\n            undefined;\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} argStyle\r\n * @param {?} givenValues\r\n * @return {?}\r\n */\r\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\r\n    const /** @type {?} */ changed = (/** @type {?} */ (checkAndUpdateNode))(view, nodeDef, argStyle, ...givenValues);\r\n    if (changed) {\r\n        const /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\r\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\r\n            const /** @type {?} */ bindingValues = {};\r\n            for (let /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {\r\n                const /** @type {?} */ binding = nodeDef.bindings[i];\r\n                const /** @type {?} */ value = values[i];\r\n                if (binding.flags & 8 /* TypeProperty */) {\r\n                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =\r\n                        normalizeDebugBindingValue(value);\r\n                }\r\n            }\r\n            const /** @type {?} */ elDef = /** @type {?} */ ((nodeDef.parent));\r\n            const /** @type {?} */ el = asElementData(view, elDef.nodeIndex).renderElement;\r\n            if (!/** @type {?} */ ((elDef.element)).name) {\r\n                // a comment.\r\n                view.renderer.setValue(el, `bindings=${JSON.stringify(bindingValues, null, 2)}`);\r\n            }\r\n            else {\r\n                // a regular element.\r\n                for (let /** @type {?} */ attr in bindingValues) {\r\n                    const /** @type {?} */ value = bindingValues[attr];\r\n                    if (value != null) {\r\n                        view.renderer.setAttribute(el, attr, value);\r\n                    }\r\n                    else {\r\n                        view.renderer.removeAttribute(el, attr);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} argStyle\r\n * @param {?} values\r\n * @return {?}\r\n */\r\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\r\n    (/** @type {?} */ (checkNoChangesNode))(view, nodeDef, argStyle, ...values);\r\n}\r\n/**\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction normalizeDebugBindingName(name) {\r\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\r\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\r\n    return `ng-reflect-${name}`;\r\n}\r\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\nfunction camelCaseToDashCase(input) {\r\n    return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\r\n}\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction normalizeDebugBindingValue(value) {\r\n    try {\r\n        // Limit the size of the value as otherwise the DOM just gets polluted.\r\n        return value != null ? value.toString().slice(0, 30) : value;\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        return '[ERROR] Exception while trying to serialize the value';\r\n    }\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIndex\r\n * @return {?}\r\n */\r\nfunction nextDirectiveWithBinding(view, nodeIndex) {\r\n    for (let /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\r\n        const /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\r\n            return i;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeIndex\r\n * @return {?}\r\n */\r\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\r\n    for (let /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {\r\n        const /** @type {?} */ nodeDef = view.def.nodes[i];\r\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\r\n            return i;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nclass DebugContext_ {\r\n    /**\r\n     * @param {?} view\r\n     * @param {?} nodeIndex\r\n     */\r\n    constructor(view, nodeIndex) {\r\n        this.view = view;\r\n        this.nodeIndex = nodeIndex;\r\n        if (nodeIndex == null) {\r\n            this.nodeIndex = nodeIndex = 0;\r\n        }\r\n        this.nodeDef = view.def.nodes[nodeIndex];\r\n        let /** @type {?} */ elDef = this.nodeDef;\r\n        let /** @type {?} */ elView = view;\r\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\r\n            elDef = /** @type {?} */ ((elDef.parent));\r\n        }\r\n        if (!elDef) {\r\n            while (!elDef && elView) {\r\n                elDef = /** @type {?} */ ((viewParentEl(elView)));\r\n                elView = /** @type {?} */ ((elView.parent));\r\n            }\r\n        }\r\n        this.elDef = elDef;\r\n        this.elView = elView;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get elOrCompView() {\r\n        // Has to be done lazily as we use the DebugContext also during creation of elements...\r\n        return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get injector() { return createInjector(this.elView, this.elDef); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get component() { return this.elOrCompView.component; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get context() { return this.elOrCompView.context; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get providerTokens() {\r\n        const /** @type {?} */ tokens = [];\r\n        if (this.elDef) {\r\n            for (let /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\r\n                const /** @type {?} */ childDef = this.elView.def.nodes[i];\r\n                if (childDef.flags & 20224 /* CatProvider */) {\r\n                    tokens.push(/** @type {?} */ ((childDef.provider)).token);\r\n                }\r\n                i += childDef.childCount;\r\n            }\r\n        }\r\n        return tokens;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get references() {\r\n        const /** @type {?} */ references = {};\r\n        if (this.elDef) {\r\n            collectReferences(this.elView, this.elDef, references);\r\n            for (let /** @type {?} */ i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\r\n                const /** @type {?} */ childDef = this.elView.def.nodes[i];\r\n                if (childDef.flags & 20224 /* CatProvider */) {\r\n                    collectReferences(this.elView, childDef, references);\r\n                }\r\n                i += childDef.childCount;\r\n            }\r\n        }\r\n        return references;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get componentRenderElement() {\r\n        const /** @type {?} */ elData = findHostElement(this.elOrCompView);\r\n        return elData ? elData.renderElement : undefined;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get renderNode() {\r\n        return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\r\n            renderNode(this.elView, this.elDef);\r\n    }\r\n    /**\r\n     * @param {?} console\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    logError(console, ...values) {\r\n        let /** @type {?} */ logViewDef;\r\n        let /** @type {?} */ logNodeIndex;\r\n        if (this.nodeDef.flags & 2 /* TypeText */) {\r\n            logViewDef = this.view.def;\r\n            logNodeIndex = this.nodeDef.nodeIndex;\r\n        }\r\n        else {\r\n            logViewDef = this.elView.def;\r\n            logNodeIndex = this.elDef.nodeIndex;\r\n        }\r\n        // Note: we only generate a log function for text and element nodes\r\n        // to make the generated code as small as possible.\r\n        const /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\r\n        let /** @type {?} */ currRenderNodeIndex = -1;\r\n        let /** @type {?} */ nodeLogger = () => {\r\n            currRenderNodeIndex++;\r\n            if (currRenderNodeIndex === renderNodeIndex) {\r\n                return console.error.bind(console, ...values);\r\n            }\r\n            else {\r\n                return NOOP;\r\n            }\r\n        }; /** @type {?} */\r\n        ((logViewDef.factory))(nodeLogger);\r\n        if (currRenderNodeIndex < renderNodeIndex) {\r\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\r\n            (/** @type {?} */ (console.error))(...values);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} viewDef\r\n * @param {?} nodeIndex\r\n * @return {?}\r\n */\r\nfunction getRenderNodeIndex(viewDef$$1, nodeIndex) {\r\n    let /** @type {?} */ renderNodeIndex = -1;\r\n    for (let /** @type {?} */ i = 0; i <= nodeIndex; i++) {\r\n        const /** @type {?} */ nodeDef = viewDef$$1.nodes[i];\r\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\r\n            renderNodeIndex++;\r\n        }\r\n    }\r\n    return renderNodeIndex;\r\n}\r\n/**\r\n * @param {?} view\r\n * @return {?}\r\n */\r\nfunction findHostElement(view) {\r\n    while (view && !isComponentView(view)) {\r\n        view = /** @type {?} */ ((view.parent));\r\n    }\r\n    if (view.parent) {\r\n        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param {?} view\r\n * @param {?} nodeDef\r\n * @param {?} references\r\n * @return {?}\r\n */\r\nfunction collectReferences(view, nodeDef, references) {\r\n    for (let /** @type {?} */ refName in nodeDef.references) {\r\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\r\n    }\r\n}\r\n/**\r\n * @param {?} action\r\n * @param {?} fn\r\n * @param {?} self\r\n * @param {?} args\r\n * @return {?}\r\n */\r\nfunction callWithDebugContext(action, fn, self, args) {\r\n    const /** @type {?} */ oldAction = _currentAction;\r\n    const /** @type {?} */ oldView = _currentView;\r\n    const /** @type {?} */ oldNodeIndex = _currentNodeIndex;\r\n    try {\r\n        _currentAction = action;\r\n        const /** @type {?} */ result = fn.apply(self, args);\r\n        _currentView = oldView;\r\n        _currentNodeIndex = oldNodeIndex;\r\n        _currentAction = oldAction;\r\n        return result;\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        if (isViewDebugError(e) || !_currentView) {\r\n            throw e;\r\n        }\r\n        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction getCurrentDebugContext() {\r\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\r\n}\r\nclass DebugRendererFactory2 {\r\n    /**\r\n     * @param {?} delegate\r\n     */\r\n    constructor(delegate) {\r\n        this.delegate = delegate;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} renderData\r\n     * @return {?}\r\n     */\r\n    createRenderer(element, renderData) {\r\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    begin() {\r\n        if (this.delegate.begin) {\r\n            this.delegate.begin();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    end() {\r\n        if (this.delegate.end) {\r\n            this.delegate.end();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    whenRenderingDone() {\r\n        if (this.delegate.whenRenderingDone) {\r\n            return this.delegate.whenRenderingDone();\r\n        }\r\n        return Promise.resolve(null);\r\n    }\r\n}\r\nclass DebugRenderer2 {\r\n    /**\r\n     * @param {?} delegate\r\n     */\r\n    constructor(delegate) {\r\n        this.delegate = delegate;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get data() { return this.delegate.data; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    destroyNode(node) {\r\n        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));\r\n        if (this.delegate.destroyNode) {\r\n            this.delegate.destroyNode(node);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() { this.delegate.destroy(); }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    createElement(name, namespace) {\r\n        const /** @type {?} */ el = this.delegate.createElement(name, namespace);\r\n        const /** @type {?} */ debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            const /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);\r\n            debugEl.name = name;\r\n            indexDebugNode(debugEl);\r\n        }\r\n        return el;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    createComment(value) {\r\n        const /** @type {?} */ comment = this.delegate.createComment(value);\r\n        const /** @type {?} */ debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            indexDebugNode(new DebugNode(comment, null, debugCtx));\r\n        }\r\n        return comment;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    createText(value) {\r\n        const /** @type {?} */ text = this.delegate.createText(value);\r\n        const /** @type {?} */ debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            indexDebugNode(new DebugNode(text, null, debugCtx));\r\n        }\r\n        return text;\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @return {?}\r\n     */\r\n    appendChild(parent, newChild) {\r\n        const /** @type {?} */ debugEl = getDebugNode(parent);\r\n        const /** @type {?} */ debugChildEl = getDebugNode(newChild);\r\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\r\n            debugEl.addChild(debugChildEl);\r\n        }\r\n        this.delegate.appendChild(parent, newChild);\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @param {?} refChild\r\n     * @return {?}\r\n     */\r\n    insertBefore(parent, newChild, refChild) {\r\n        const /** @type {?} */ debugEl = getDebugNode(parent);\r\n        const /** @type {?} */ debugChildEl = getDebugNode(newChild);\r\n        const /** @type {?} */ debugRefEl = /** @type {?} */ ((getDebugNode(refChild)));\r\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\r\n            debugEl.insertBefore(debugRefEl, debugChildEl);\r\n        }\r\n        this.delegate.insertBefore(parent, newChild, refChild);\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} oldChild\r\n     * @return {?}\r\n     */\r\n    removeChild(parent, oldChild) {\r\n        const /** @type {?} */ debugEl = getDebugNode(parent);\r\n        const /** @type {?} */ debugChildEl = getDebugNode(oldChild);\r\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {\r\n            debugEl.removeChild(debugChildEl);\r\n        }\r\n        this.delegate.removeChild(parent, oldChild);\r\n    }\r\n    /**\r\n     * @param {?} selectorOrNode\r\n     * @return {?}\r\n     */\r\n    selectRootElement(selectorOrNode) {\r\n        const /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);\r\n        const /** @type {?} */ debugCtx = getCurrentDebugContext();\r\n        if (debugCtx) {\r\n            indexDebugNode(new DebugElement(el, null, debugCtx));\r\n        }\r\n        return el;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    setAttribute(el, name, value, namespace) {\r\n        const /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            const /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\r\n            debugEl.attributes[fullName] = value;\r\n        }\r\n        this.delegate.setAttribute(el, name, value, namespace);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    removeAttribute(el, name, namespace) {\r\n        const /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            const /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;\r\n            debugEl.attributes[fullName] = null;\r\n        }\r\n        this.delegate.removeAttribute(el, name, namespace);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    addClass(el, name) {\r\n        const /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.classes[name] = true;\r\n        }\r\n        this.delegate.addClass(el, name);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    removeClass(el, name) {\r\n        const /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.classes[name] = false;\r\n        }\r\n        this.delegate.removeClass(el, name);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} style\r\n     * @param {?} value\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    setStyle(el, style, value, flags) {\r\n        const /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.styles[style] = value;\r\n        }\r\n        this.delegate.setStyle(el, style, value, flags);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} style\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    removeStyle(el, style, flags) {\r\n        const /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.styles[style] = null;\r\n        }\r\n        this.delegate.removeStyle(el, style, flags);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setProperty(el, name, value) {\r\n        const /** @type {?} */ debugEl = getDebugNode(el);\r\n        if (debugEl && debugEl instanceof DebugElement) {\r\n            debugEl.properties[name] = value;\r\n        }\r\n        this.delegate.setProperty(el, name, value);\r\n    }\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} eventName\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    listen(target, eventName, callback) {\r\n        if (typeof target !== 'string') {\r\n            const /** @type {?} */ debugEl = getDebugNode(target);\r\n            if (debugEl) {\r\n                debugEl.listeners.push(new EventListener(eventName, callback));\r\n            }\r\n        }\r\n        return this.delegate.listen(target, eventName, callback);\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    parentNode(node) { return this.delegate.parentNode(node); }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    nextSibling(node) { return this.delegate.nextSibling(node); }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setValue(node, value) { return this.delegate.setValue(node, value); }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} override\r\n * @return {?}\r\n */\r\nfunction overrideProvider(override) {\r\n    initServicesIfNeeded();\r\n    return Services.overrideProvider(override);\r\n}\r\n/**\r\n * @param {?} comp\r\n * @param {?} componentFactory\r\n * @return {?}\r\n */\r\nfunction overrideComponentView(comp, componentFactory) {\r\n    initServicesIfNeeded();\r\n    return Services.overrideComponentView(comp, componentFactory);\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction clearOverrides() {\r\n    initServicesIfNeeded();\r\n    return Services.clearOverrides();\r\n}\r\n/**\r\n * @param {?} ngModuleType\r\n * @param {?} bootstrapComponents\r\n * @param {?} defFactory\r\n * @return {?}\r\n */\r\nfunction createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\r\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\r\n}\r\nclass NgModuleFactory_ extends NgModuleFactory {\r\n    /**\r\n     * @param {?} moduleType\r\n     * @param {?} _bootstrapComponents\r\n     * @param {?} _ngModuleDefFactory\r\n     */\r\n    constructor(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\r\n        // Attention: this ctor is called as top level function.\r\n        // Putting any logic in here will destroy closure tree shaking!\r\n        super();\r\n        this.moduleType = moduleType;\r\n        this._bootstrapComponents = _bootstrapComponents;\r\n        this._ngModuleDefFactory = _ngModuleDefFactory;\r\n    }\r\n    /**\r\n     * @param {?} parentInjector\r\n     * @return {?}\r\n     */\r\n    create(parentInjector) {\r\n        initServicesIfNeeded();\r\n        const /** @type {?} */ def = resolveDefinition(this._ngModuleDefFactory);\r\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@experimental Animation support is experimental.\r\n */\r\n\r\n/**\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link trigger trigger animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link state state animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link transition transition animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link keyframes keyframes animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link style style animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link animate animate animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link animateChild animateChild animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link useAnimation useAnimation animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link sequence sequence animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link group group animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * Metadata representing the entry of animations. Instances of this interface are provided via the\r\n * animation DSL when the {\\@link stagger stagger animation function} is called.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @record\r\n */\r\n\r\n/**\r\n * `trigger` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. If this information is new, please navigate to the\r\n * {\\@link Component#animations component animations metadata page} to gain a better\r\n * understanding of how animations in Angular are used.\r\n *\r\n * `trigger` Creates an animation trigger which will a list of {\\@link state state} and\r\n * {\\@link transition transition} entries that will be evaluated when the expression\r\n * bound to the trigger changes.\r\n *\r\n * Triggers are registered within the component annotation data under the\r\n * {\\@link Component#animations animations section}. An animation trigger can be placed on an element\r\n * within a template by referencing the name of the trigger followed by the expression value that\r\n * the\r\n * trigger is bound to (in the form of `[\\@triggerName]=\"expression\"`.\r\n *\r\n * Animation trigger bindings strigify values and then match the previous and current values against\r\n * any linked transitions. If a boolean value is provided into the trigger binding then it will both\r\n * be represented as `1` or `true` and `0` or `false` for a true and false boolean values\r\n * respectively.\r\n *\r\n * ### Usage\r\n *\r\n * `trigger` will create an animation trigger reference based on the provided `name` value. The\r\n * provided `animation` value is expected to be an array consisting of {\\@link state state} and\r\n * {\\@link transition transition} declarations.\r\n *\r\n * ```typescript\r\n * \\@Component({\r\n *   selector: 'my-component',\r\n *   templateUrl: 'my-component-tpl.html',\r\n *   animations: [\r\n *     trigger(\"myAnimationTrigger\", [\r\n *       state(...),\r\n *       state(...),\r\n *       transition(...),\r\n *       transition(...)\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   myStatusExp = \"something\";\r\n * }\r\n * ```\r\n *\r\n * The template associated with this component will make use of the `myAnimationTrigger` animation\r\n * trigger by binding to an element within its template code.\r\n *\r\n * ```html\r\n * <!-- somewhere inside of my-component-tpl.html -->\r\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\r\n * ```\r\n *\r\n * ## Disable Animations\r\n * A special animation control binding called `\\@.disabled` can be placed on an element which will\r\n * then disable animations for any inner animation triggers situated within the element as well as\r\n * any animations on the element itself.\r\n *\r\n * When true, the `\\@.disabled` binding will prevent all animations from rendering. The example\r\n * below shows how to use this feature:\r\n *\r\n * ```ts\r\n * \\@Component({\r\n *   selector: 'my-component',\r\n *   template: `\r\n *     <div [\\@.disabled]=\"isDisabled\">\r\n *       <div [\\@childAnimation]=\"exp\"></div>\r\n *     </div>\r\n *   `,\r\n *   animations: [\r\n *     trigger(\"childAnimation\", [\r\n *       // ...\r\n *     ])\r\n *   ]\r\n * })\r\n * class MyComponent {\r\n *   isDisabled = true;\r\n *   exp = '...';\r\n * }\r\n * ```\r\n *\r\n * The `\\@childAnimation` trigger will not animate because `\\@.disabled` prevents it from happening\r\n * (when true).\r\n *\r\n * Note that `\\@.disbled` will only disable all animations (this means any animations running on\r\n * the same element will also be disabled).\r\n *\r\n * ### Disabling Animations Application-wide\r\n * When an area of the template is set to have animations disabled, **all** inner components will\r\n * also have their animations disabled as well. This means that all animations for an angular\r\n * application can be disabled by placing a host binding set on `\\@.disabled` on the topmost Angular\r\n * component.\r\n *\r\n * ```ts\r\n * import {Component, HostBinding} from '\\@angular/core';\r\n *\r\n * \\@Component({\r\n *   selector: 'app-component',\r\n *   templateUrl: 'app.component.html',\r\n * })\r\n * class AppComponent {\r\n *   \\@HostBinding('\\@.disabled')\r\n *   public animationsDisabled = true;\r\n * }\r\n * ```\r\n *\r\n * ### What about animations that us `query()` and `animateChild()`?\r\n * Despite inner animations being disabled, a parent animation can {\\@link query query} for inner\r\n * elements located in disabled areas of the template and still animate them as it sees fit. This is\r\n * also the case for when a sub animation is queried by a parent and then later animated using {\\@link\r\n * animateChild animateChild}.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} name\r\n * @param {?} definitions\r\n * @return {?}\r\n */\r\nfunction trigger$1(name, definitions) {\r\n    return { type: 7 /* Trigger */, name, definitions, options: {} };\r\n}\r\n/**\r\n * `animate` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. If this information is new, please navigate to the {\\@link\r\n * Component#animations component animations metadata page} to gain a better understanding of\r\n * how animations in Angular are used.\r\n *\r\n * `animate` specifies an animation step that will apply the provided `styles` data for a given\r\n * amount of time based on the provided `timing` expression value. Calls to `animate` are expected\r\n * to be used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link\r\n * transition transition}.\r\n *\r\n * ### Usage\r\n *\r\n * The `animate` function accepts two input parameters: `timing` and `styles`:\r\n *\r\n * - `timing` is a string based value that can be a combination of a duration with optional delay\r\n * and easing values. The format for the expression breaks down to `duration delay easing`\r\n * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\r\n * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the\r\n * `duration` value in millisecond form.\r\n * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\r\n * keyframes keyframes}. If left empty then the styles from the destination state will be collected\r\n * and used (this is useful when describing an animation step that will complete an animation by\r\n * {\\@link transition#the-final-animate-call animating to the final state}).\r\n *\r\n * ```typescript\r\n * // various functions for specifying timing data\r\n * animate(500, style(...))\r\n * animate(\"1s\", style(...))\r\n * animate(\"100ms 0.5s\", style(...))\r\n * animate(\"5s ease\", style(...))\r\n * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\r\n *\r\n * // either style() of keyframes() can be used\r\n * animate(500, style({ background: \"red\" }))\r\n * animate(500, keyframes([\r\n *   style({ background: \"blue\" })),\r\n *   style({ background: \"red\" }))\r\n * ])\r\n * ```\r\n *\r\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} timings\r\n * @param {?=} styles\r\n * @return {?}\r\n */\r\nfunction animate$1(timings, styles = null) {\r\n    return { type: 4 /* Animate */, styles, timings };\r\n}\r\n/**\r\n * `group` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. If this information is new, please navigate to the {\\@link\r\n * Component#animations component animations metadata page} to gain a better understanding of\r\n * how animations in Angular are used.\r\n *\r\n * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are\r\n * useful when a series of styles must be animated/closed off at different starting/ending times.\r\n *\r\n * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\r\n * transition} and it will only continue to the next instruction once all of the inner animation\r\n * steps have completed.\r\n *\r\n * ### Usage\r\n *\r\n * The `steps` data that is passed into the `group` animation function can either consist of {\\@link\r\n * style style} or {\\@link animate animate} function calls. Each call to `style()` or `animate()`\r\n * within a group will be executed instantly (use {\\@link keyframes keyframes} or a {\\@link\r\n * animate#usage animate() with a delay value} to offset styles to be applied at a later time).\r\n *\r\n * ```typescript\r\n * group([\r\n *   animate(\"1s\", { background: \"black\" }))\r\n *   animate(\"2s\", { color: \"white\" }))\r\n * ])\r\n * ```\r\n *\r\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} steps\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\nfunction group$1(steps, options = null) {\r\n    return { type: 3 /* Group */, steps, options };\r\n}\r\n/**\r\n * `sequence` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. If this information is new, please navigate to the {\\@link\r\n * Component#animations component animations metadata page} to gain a better understanding of\r\n * how animations in Angular are used.\r\n *\r\n * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by\r\n * default when an array is passed as animation data into {\\@link transition transition}.)\r\n *\r\n * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\r\n * transition} and it will only continue to the next instruction once each of the inner animation\r\n * steps have completed.\r\n *\r\n * To perform animation styling in parallel with other animation steps then have a look at the\r\n * {\\@link group group} animation function.\r\n *\r\n * ### Usage\r\n *\r\n * The `steps` data that is passed into the `sequence` animation function can either consist of\r\n * {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply the\r\n * provided styling data immediately while a call to `animate()` will apply its styling data over a\r\n * given time depending on its timing data.\r\n *\r\n * ```typescript\r\n * sequence([\r\n *   style({ opacity: 0 })),\r\n *   animate(\"1s\", { opacity: 1 }))\r\n * ])\r\n * ```\r\n *\r\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} steps\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\nfunction sequence$1(steps, options = null) {\r\n    return { type: 2 /* Sequence */, steps, options };\r\n}\r\n/**\r\n * `style` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. If this information is new, please navigate to the {\\@link\r\n * Component#animations component animations metadata page} to gain a better understanding of\r\n * how animations in Angular are used.\r\n *\r\n * `style` declares a key/value object containing CSS properties/styles that can then be used for\r\n * {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as styling data\r\n * for both {\\@link animate animate} and {\\@link keyframes keyframes}.\r\n *\r\n * ### Usage\r\n *\r\n * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs\r\n * to be defined.\r\n *\r\n * ```typescript\r\n * // string values are used for css properties\r\n * style({ background: \"red\", color: \"blue\" })\r\n *\r\n * // numerical (pixel) values are also supported\r\n * style({ width: 100, height: 0 })\r\n * ```\r\n *\r\n * #### Auto-styles (using `*`)\r\n *\r\n * When an asterix (`*`) character is used as a value then it will be detected from the element\r\n * being animated and applied as animation data when the animation starts.\r\n *\r\n * This feature proves useful for a state depending on layout and/or environment factors; in such\r\n * cases the styles are calculated just before the animation starts.\r\n *\r\n * ```typescript\r\n * // the steps below will animate from 0 to the\r\n * // actual height of the element\r\n * style({ height: 0 }),\r\n * animate(\"1s\", style({ height: \"*\" }))\r\n * ```\r\n *\r\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} tokens\r\n * @return {?}\r\n */\r\nfunction style$1(tokens) {\r\n    return { type: 6 /* Style */, styles: tokens, offset: null };\r\n}\r\n/**\r\n * `state` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. If this information is new, please navigate to the {\\@link\r\n * Component#animations component animations metadata page} to gain a better understanding of\r\n * how animations in Angular are used.\r\n *\r\n * `state` declares an animation state within the given trigger. When a state is active within a\r\n * component then its associated styles will persist on the element that the trigger is attached to\r\n * (even when the animation ends).\r\n *\r\n * To animate between states, have a look at the animation {\\@link transition transition} DSL\r\n * function. To register states to an animation trigger please have a look at the {\\@link trigger\r\n * trigger} function.\r\n *\r\n * #### The `void` state\r\n *\r\n * The `void` state value is a reserved word that angular uses to determine when the element is not\r\n * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\r\n * associated element is void).\r\n *\r\n * #### The `*` (default) state\r\n *\r\n * The `*` state (when styled) is a fallback state that will be used if the state that is being\r\n * animated is not declared within the trigger.\r\n *\r\n * ### Usage\r\n *\r\n * `state` will declare an animation state with its associated styles\r\n * within the given trigger.\r\n *\r\n * - `stateNameExpr` can be one or more state names separated by commas.\r\n * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\r\n * the state has been reached.\r\n *\r\n * ```typescript\r\n * // \"void\" is a reserved name for a state and is used to represent\r\n * // the state in which an element is detached from from the application.\r\n * state(\"void\", style({ height: 0 }))\r\n *\r\n * // user-defined states\r\n * state(\"closed\", style({ height: 0 }))\r\n * state(\"open, visible\", style({ height: \"*\" }))\r\n * ```\r\n *\r\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} name\r\n * @param {?} styles\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\nfunction state$1(name, styles, options) {\r\n    return { type: 0 /* State */, name, styles, options };\r\n}\r\n/**\r\n * `keyframes` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. If this information is new, please navigate to the {\\@link\r\n * Component#animations component animations metadata page} to gain a better understanding of\r\n * how animations in Angular are used.\r\n *\r\n * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\r\n * by an `offset` value.\r\n *\r\n * ### Usage\r\n *\r\n * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\r\n * animation function. Instead of applying animations from where they are currently to their\r\n * destination, keyframes can describe how each style entry is applied and at what point within the\r\n * animation arc (much like CSS Keyframe Animations do).\r\n *\r\n * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what\r\n * percentage of the animate time the styles will be applied.\r\n *\r\n * ```typescript\r\n * // the provided offset values describe when each backgroundColor value is applied.\r\n * animate(\"5s\", keyframes([\r\n *   style({ backgroundColor: \"red\", offset: 0 }),\r\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\r\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\r\n *   style({ backgroundColor: \"black\", offset: 1 })\r\n * ]))\r\n * ```\r\n *\r\n * Alternatively, if there are no `offset` values used within the style entries then the offsets\r\n * will be calculated automatically.\r\n *\r\n * ```typescript\r\n * animate(\"5s\", keyframes([\r\n *   style({ backgroundColor: \"red\" }) // offset = 0\r\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\r\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\r\n *   style({ backgroundColor: \"black\" }) // offset = 1\r\n * ]))\r\n * ```\r\n *\r\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} steps\r\n * @return {?}\r\n */\r\nfunction keyframes$1(steps) {\r\n    return { type: 5 /* Keyframes */, steps };\r\n}\r\n/**\r\n * `transition` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. If this information is new, please navigate to the {\\@link\r\n * Component#animations component animations metadata page} to gain a better understanding of\r\n * how animations in Angular are used.\r\n *\r\n * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\r\n * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>\r\n * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting\r\n * and/or ending state).\r\n *\r\n * A function can also be provided as the `stateChangeExpr` argument for a transition and this\r\n * function will be executed each time a state change occurs. If the value returned within the\r\n * function is true then the associated animation will be run.\r\n *\r\n * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\r\n * to animate to a state value and persist its styles then one or more {\\@link state animation\r\n * states} is expected to be defined.\r\n *\r\n * ### Usage\r\n *\r\n * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\r\n * what the previous state is and what the current state has become. In other words, if a transition\r\n * is defined that matches the old/current state criteria then the associated animation will be\r\n * triggered.\r\n *\r\n * ```typescript\r\n * // all transition/state changes are defined within an animation trigger\r\n * trigger(\"myAnimationTrigger\", [\r\n *   // if a state is defined then its styles will be persisted when the\r\n *   // animation has fully completed itself\r\n *   state(\"on\", style({ background: \"green\" })),\r\n *   state(\"off\", style({ background: \"grey\" })),\r\n *\r\n *   // a transition animation that will be kicked off when the state value\r\n *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\r\n *   transition(\"on => off\", animate(500)),\r\n *\r\n *   // it is also possible to do run the same animation for both directions\r\n *   transition(\"on <=> off\", animate(500)),\r\n *\r\n *   // or to define multiple states pairs separated by commas\r\n *   transition(\"on => off, off => void\", animate(500)),\r\n *\r\n *   // this is a catch-all state change for when an element is inserted into\r\n *   // the page and the destination state is unknown\r\n *   transition(\"void => *\", [\r\n *     style({ opacity: 0 }),\r\n *     animate(500)\r\n *   ]),\r\n *\r\n *   // this will capture a state change between any states\r\n *   transition(\"* => *\", animate(\"1s 0s\")),\r\n *\r\n *   // you can also go full out and include a function\r\n *   transition((fromState, toState) => {\r\n *     // when `true` then it will allow the animation below to be invoked\r\n *     return fromState == \"off\" && toState == \"on\";\r\n *   }, animate(\"1s 0s\"))\r\n * ])\r\n * ```\r\n *\r\n * The template associated with this component will make use of the `myAnimationTrigger` animation\r\n * trigger by binding to an element within its template code.\r\n *\r\n * ```html\r\n * <!-- somewhere inside of my-component-tpl.html -->\r\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\r\n * ```\r\n *\r\n * #### The final `animate` call\r\n *\r\n * If the final step within the transition steps is a call to `animate()` that **only** uses a\r\n * timing value with **no style data** then it will be automatically used as the final animation arc\r\n * for the element to animate itself to the final state. This involves an automatic mix of\r\n * adding/removing CSS styles so that the element will be in the exact state it should be for the\r\n * applied state to be presented correctly.\r\n *\r\n * ```\r\n * // start off by hiding the element, but make sure that it animates properly to whatever state\r\n * // is currently active for \"myAnimationTrigger\"\r\n * transition(\"void => *\", [\r\n *   style({ opacity: 0 }),\r\n *   animate(500)\r\n * ])\r\n * ```\r\n *\r\n * ### Using :enter and :leave\r\n *\r\n * Given that enter (insertion) and leave (removal) animations are so common, the `transition`\r\n * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*\r\n * => void` state changes.\r\n *\r\n * ```\r\n * transition(\":enter\", [\r\n *   style({ opacity: 0 }),\r\n *   animate(500, style({ opacity: 1 }))\r\n * ]),\r\n * transition(\":leave\", [\r\n *   animate(500, style({ opacity: 0 }))\r\n * ])\r\n * ```\r\n *\r\n * ### Boolean values\r\n * if a trigger binding value is a boolean value then it can be matched using a transition\r\n * expression that compares `true` and `false` or `1` and `0`.\r\n *\r\n * ```\r\n * // in the template\r\n * <div [\\@openClose]=\"open ? true : false\">...</div>\r\n *\r\n * // in the component metadata\r\n * trigger('openClose', [\r\n *   state('true', style({ height: '*' })),\r\n *   state('false', style({ height: '0px' })),\r\n *   transition('false <=> true', animate(500))\r\n * ])\r\n * ```\r\n *\r\n * ### Using :increment and :decrement\r\n * In addition to the :enter and :leave transition aliases, the :increment and :decrement aliases\r\n * can be used to kick off a transition when a numeric value has increased or decreased in value.\r\n *\r\n * ```\r\n * import {group, animate, query, transition, style, trigger} from '\\@angular/animations';\r\n * import {Component} from '\\@angular/core';\r\n *\r\n * \\@Component({\r\n *   selector: 'banner-carousel-component',\r\n *   styles: [`\r\n *     .banner-container {\r\n *        position:relative;\r\n *        height:500px;\r\n *        overflow:hidden;\r\n *      }\r\n *     .banner-container > .banner {\r\n *        position:absolute;\r\n *        left:0;\r\n *        top:0;\r\n *        font-size:200px;\r\n *        line-height:500px;\r\n *        font-weight:bold;\r\n *        text-align:center;\r\n *        width:100%;\r\n *      }\r\n *   `],\r\n *   template: `\r\n *     <button (click)=\"previous()\">Previous</button>\r\n *     <button (click)=\"next()\">Next</button>\r\n *     <hr>\r\n *     <div [\\@bannerAnimation]=\"selectedIndex\" class=\"banner-container\">\r\n *       <div class=\"banner\"> {{ banner }} </div>\r\n *     </div>\r\n *   `\r\n *   animations: [\r\n *     trigger('bannerAnimation', [\r\n *       transition(\":increment\", group([\r\n *         query(':enter', [\r\n *           style({ left: '100%' }),\r\n *           animate('0.5s ease-out', style('*'))\r\n *         ]),\r\n *         query(':leave', [\r\n *           animate('0.5s ease-out', style({ left: '-100%' }))\r\n *         ])\r\n *       ])),\r\n *       transition(\":decrement\", group([\r\n *         query(':enter', [\r\n *           style({ left: '-100%' }),\r\n *           animate('0.5s ease-out', style('*'))\r\n *         ]),\r\n *         query(':leave', [\r\n *           animate('0.5s ease-out', style({ left: '100%' }))\r\n *         ])\r\n *       ])),\r\n *     ])\r\n *   ]\r\n * })\r\n * class BannerCarouselComponent {\r\n *   allBanners: string[] = ['1', '2', '3', '4'];\r\n *   selectedIndex: number = 0;\r\n *\r\n *   get banners() {\r\n *      return [this.allBanners[this.selectedIndex]];\r\n *   }\r\n *\r\n *   previous() {\r\n *     this.selectedIndex = Math.max(this.selectedIndex - 1, 0);\r\n *   }\r\n *\r\n *   next() {\r\n *     this.selectedIndex = Math.min(this.selectedIndex + 1, this.allBanners.length - 1);\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} stateChangeExpr\r\n * @param {?} steps\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\nfunction transition$1(stateChangeExpr, steps, options = null) {\r\n    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options };\r\n}\r\n/**\r\n * `animation` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language.\r\n *\r\n * `var myAnimation = animation(...)` is designed to produce a reusable animation that can be later\r\n * invoked in another animation or sequence. Reusable animations are designed to make use of\r\n * animation parameters and the produced animation can be used via the `useAnimation` method.\r\n *\r\n * ```\r\n * var fadeAnimation = animation([\r\n *   style({ opacity: '{{ start }}' }),\r\n *   animate('{{ time }}',\r\n *     style({ opacity: '{{ end }}'}))\r\n * ], { params: { time: '1000ms', start: 0, end: 1 }});\r\n * ```\r\n *\r\n * If parameters are attached to an animation then they act as **default parameter values**. When an\r\n * animation is invoked via `useAnimation` then parameter values are allowed to be passed in\r\n * directly. If any of the passed in parameter values are missing then the default values will be\r\n * used.\r\n *\r\n * ```\r\n * useAnimation(fadeAnimation, {\r\n *   params: {\r\n *     time: '2s',\r\n *     start: 1,\r\n *     end: 0\r\n *   }\r\n * })\r\n * ```\r\n *\r\n * If one or more parameter values are missing before animated then an error will be thrown.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} steps\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * `animateChild` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. It works by allowing a queried element to execute its own\r\n * animation within the animation sequence.\r\n *\r\n * Each time an animation is triggered in angular, the parent animation\r\n * will always get priority and any child animations will be blocked. In order\r\n * for a child animation to run, the parent animation must query each of the elements\r\n * containing child animations and then allow the animations to run using `animateChild`.\r\n *\r\n * The example HTML code below shows both parent and child elements that have animation\r\n * triggers that will execute at the same time.\r\n *\r\n * ```html\r\n * <!-- parent-child.component.html -->\r\n * <button (click)=\"exp =! exp\">Toggle</button>\r\n * <hr>\r\n *\r\n * <div [\\@parentAnimation]=\"exp\">\r\n *   <header>Hello</header>\r\n *   <div [\\@childAnimation]=\"exp\">\r\n *       one\r\n *   </div>\r\n *   <div [\\@childAnimation]=\"exp\">\r\n *       two\r\n *   </div>\r\n *   <div [\\@childAnimation]=\"exp\">\r\n *       three\r\n *   </div>\r\n * </div>\r\n * ```\r\n *\r\n * Now when the `exp` value changes to true, only the `parentAnimation` animation will animate\r\n * because it has priority. However, using `query` and `animateChild` each of the inner animations\r\n * can also fire:\r\n *\r\n * ```ts\r\n * // parent-child.component.ts\r\n * import {trigger, transition, animate, style, query, animateChild} from '\\@angular/animations';\r\n * \\@Component({\r\n *   selector: 'parent-child-component',\r\n *   animations: [\r\n *     trigger('parentAnimation', [\r\n *       transition('false => true', [\r\n *         query('header', [\r\n *           style({ opacity: 0 }),\r\n *           animate(500, style({ opacity: 1 }))\r\n *         ]),\r\n *         query('\\@childAnimation', [\r\n *           animateChild()\r\n *         ])\r\n *       ])\r\n *     ]),\r\n *     trigger('childAnimation', [\r\n *       transition('false => true', [\r\n *         style({ opacity: 0 }),\r\n *         animate(500, style({ opacity: 1 }))\r\n *       ])\r\n *     ])\r\n *   ]\r\n * })\r\n * class ParentChildCmp {\r\n *   exp: boolean = false;\r\n * }\r\n * ```\r\n *\r\n * In the animation code above, when the `parentAnimation` transition kicks off it first queries to\r\n * find the header element and fades it in. It then finds each of the sub elements that contain the\r\n * `\\@childAnimation` trigger and then allows for their animations to fire.\r\n *\r\n * This example can be further extended by using stagger:\r\n *\r\n * ```ts\r\n * query('\\@childAnimation', stagger(100, [\r\n *   animateChild()\r\n * ]))\r\n * ```\r\n *\r\n * Now each of the sub animations start off with respect to the `100ms` staggering step.\r\n *\r\n * ## The first frame of child animations\r\n * When sub animations are executed using `animateChild` the animation engine will always apply the\r\n * first frame of every sub animation immediately at the start of the animation sequence. This way\r\n * the parent animation does not need to set any initial styling data on the sub elements before the\r\n * sub animations kick off.\r\n *\r\n * In the example above the first frame of the `childAnimation`'s `false => true` transition\r\n * consists of a style of `opacity: 0`. This is applied immediately when the `parentAnimation`\r\n * animation transition sequence starts. Only then when the `\\@childAnimation` is queried and called\r\n * with `animateChild` will it then animate to its destination of `opacity: 1`.\r\n *\r\n * Note that this feature designed to be used alongside {\\@link query query()} and it will only work\r\n * with animations that are assigned using the Angular animation DSL (this means that CSS keyframes\r\n * and transitions are not handled by this API).\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * `useAnimation` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. It is used to kick off a reusable animation that is created using {\\@link\r\n * animation animation()}.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} animation\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * `query` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language.\r\n *\r\n * query() is used to find one or more inner elements within the current element that is\r\n * being animated within the sequence. The provided animation steps are applied\r\n * to the queried element (by default, an array is provided, then this will be\r\n * treated as an animation sequence).\r\n *\r\n * ### Usage\r\n *\r\n * query() is designed to collect mutiple elements and works internally by using\r\n * `element.querySelectorAll`. An additional options object can be provided which\r\n * can be used to limit the total amount of items to be collected.\r\n *\r\n * ```js\r\n * query('div', [\r\n *   animate(...),\r\n *   animate(...)\r\n * ], { limit: 1 })\r\n * ```\r\n *\r\n * query(), by default, will throw an error when zero items are found. If a query\r\n * has the `optional` flag set to true then this error will be ignored.\r\n *\r\n * ```js\r\n * query('.some-element-that-may-not-be-there', [\r\n *   animate(...),\r\n *   animate(...)\r\n * ], { optional: true })\r\n * ```\r\n *\r\n * ### Special Selector Values\r\n *\r\n * The selector value within a query can collect elements that contain angular-specific\r\n * characteristics\r\n * using special pseudo-selectors tokens.\r\n *\r\n * These include:\r\n *\r\n *  - Querying for newly inserted/removed elements using `query(\":enter\")`/`query(\":leave\")`\r\n *  - Querying all currently animating elements using `query(\":animating\")`\r\n *  - Querying elements that contain an animation trigger using `query(\"\\@triggerName\")`\r\n *  - Querying all elements that contain an animation triggers using `query(\"\\@*\")`\r\n *  - Including the current element into the animation sequence using `query(\":self\")`\r\n *\r\n *\r\n *  Each of these pseudo-selector tokens can be merged together into a combined query selector\r\n * string:\r\n *\r\n *  ```\r\n *  query(':self, .record:enter, .record:leave, \\@subTrigger', [...])\r\n *  ```\r\n *\r\n * ### Demo\r\n *\r\n * ```\r\n * \\@Component({\r\n *   selector: 'inner',\r\n *   template: `\r\n *     <div [\\@queryAnimation]=\"exp\">\r\n *       <h1>Title</h1>\r\n *       <div class=\"content\">\r\n *         Blah blah blah\r\n *       </div>\r\n *     </div>\r\n *   `,\r\n *   animations: [\r\n *    trigger('queryAnimation', [\r\n *      transition('* => goAnimate', [\r\n *        // hide the inner elements\r\n *        query('h1', style({ opacity: 0 })),\r\n *        query('.content', style({ opacity: 0 })),\r\n *\r\n *        // animate the inner elements in, one by one\r\n *        query('h1', animate(1000, style({ opacity: 1 })),\r\n *        query('.content', animate(1000, style({ opacity: 1 })),\r\n *      ])\r\n *    ])\r\n *  ]\r\n * })\r\n * class Cmp {\r\n *   exp = '';\r\n *\r\n *   goAnimate() {\r\n *     this.exp = 'goAnimate';\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} selector\r\n * @param {?} animation\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * `stagger` is an animation-specific function that is designed to be used inside of Angular's\r\n * animation DSL language. It is designed to be used inside of an animation {\\@link query query()}\r\n * and works by issuing a timing gap between after each queried item is animated.\r\n *\r\n * ### Usage\r\n *\r\n * In the example below there is a container element that wraps a list of items stamped out\r\n * by an ngFor. The container element contains an animation trigger that will later be set\r\n * to query for each of the inner items.\r\n *\r\n * ```html\r\n * <!-- list.component.html -->\r\n * <button (click)=\"toggle()\">Show / Hide Items</button>\r\n * <hr />\r\n * <div [\\@listAnimation]=\"items.length\">\r\n *   <div *ngFor=\"let item of items\">\r\n *     {{ item }}\r\n *   </div>\r\n * </div>\r\n * ```\r\n *\r\n * The component code for this looks as such:\r\n *\r\n * ```ts\r\n * import {trigger, transition, style, animate, query, stagger} from '\\@angular/animations';\r\n * \\@Component({\r\n *   templateUrl: 'list.component.html',\r\n *   animations: [\r\n *     trigger('listAnimation', [\r\n *        //...\r\n *     ])\r\n *   ]\r\n * })\r\n * class ListComponent {\r\n *   items = [];\r\n *\r\n *   showItems() {\r\n *     this.items = [0,1,2,3,4];\r\n *   }\r\n *\r\n *   hideItems() {\r\n *     this.items = [];\r\n *   }\r\n *\r\n *   toggle() {\r\n *     this.items.length ? this.hideItems() : this.showItems();\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * And now for the animation trigger code:\r\n *\r\n * ```ts\r\n * trigger('listAnimation', [\r\n *   transition('* => *', [ // each time the binding value changes\r\n *     query(':leave', [\r\n *       stagger(100, [\r\n *         animate('0.5s', style({ opacity: 0 }))\r\n *       ])\r\n *     ]),\r\n *     query(':enter', [\r\n *       style({ opacity: 0 }),\r\n *       stagger(100, [\r\n *         animate('0.5s', style({ opacity: 1 }))\r\n *       ])\r\n *     ])\r\n *   ])\r\n * ])\r\n * ```\r\n *\r\n * Now each time the items are added/removed then either the opacity\r\n * fade-in animation will run or each removed item will be faded out.\r\n * When either of these animations occur then a stagger effect will be\r\n * applied after each item's animation is started.\r\n *\r\n * \\@experimental Animation support is experimental.\r\n * @param {?} timings\r\n * @param {?} animation\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n */\r\nconst AUTO_STYLE = '*';\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @record\r\n */\r\n\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @param {?} name\r\n * @param {?} definitions\r\n * @return {?}\r\n */\r\nfunction trigger$$1(name, definitions) {\r\n    return trigger$1(name, definitions);\r\n}\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @param {?} timings\r\n * @param {?=} styles\r\n * @return {?}\r\n */\r\nfunction animate$$1(timings, styles) {\r\n    return animate$1(timings, styles);\r\n}\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @param {?} steps\r\n * @return {?}\r\n */\r\nfunction group$$1(steps) {\r\n    return group$1(steps);\r\n}\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @param {?} steps\r\n * @return {?}\r\n */\r\nfunction sequence$$1(steps) {\r\n    return sequence$1(steps);\r\n}\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @param {?} tokens\r\n * @return {?}\r\n */\r\nfunction style$$1(tokens) {\r\n    return style$1(tokens);\r\n}\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @param {?} name\r\n * @param {?} styles\r\n * @return {?}\r\n */\r\nfunction state$$1(name, styles) {\r\n    return state$1(name, styles);\r\n}\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @param {?} steps\r\n * @return {?}\r\n */\r\nfunction keyframes$$1(steps) {\r\n    return keyframes$1(steps);\r\n}\r\n/**\r\n * @deprecated This symbol has moved. Please Import from \\@angular/animations instead!\r\n * @param {?} stateChangeExpr\r\n * @param {?} steps\r\n * @return {?}\r\n */\r\nfunction transition$$1(stateChangeExpr, steps) {\r\n    return transition$1(stateChangeExpr, steps);\r\n}\r\n/**\r\n * @deprecated This has been renamed to `AnimationEvent`. Please import it from \\@angular/animations.\r\n * @record\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point from which you should import all public core APIs.\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\r\n\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, enableProdMode, isDevMode, createPlatformFactory, NgProbeToken, APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationInitStatus, DebugElement, DebugNode, asNativeElements, getDebugNode, Testability, TestabilityRegistry, setTestabilityGetter, TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy, ApplicationModule, wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, Type, EventEmitter, ErrorHandler, Sanitizer, SecurityContext, ANALYZE_FOR_ENTRY_COMPONENTS, Attribute, ContentChild, ContentChildren, Query, ViewChild, ViewChildren, Component, Directive, HostBinding, HostListener, Input, Output, Pipe, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, NgModule, ViewEncapsulation, Version, VERSION, forwardRef, resolveForwardRef, Injector, ReflectiveInjector, ResolvedReflectiveFactory, ReflectiveKey, InjectionToken, Inject, Optional, Injectable, Self, SkipSelf, Host, NgZone, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RootRenderer, COMPILER_OPTIONS, Compiler, CompilerFactory, ModuleWithComponentFactories, ComponentFactory, ComponentRef, ComponentFactoryResolver, ElementRef, NgModuleFactory, NgModuleRef, NgModuleFactoryLoader, getModuleFactory, QueryList, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TemplateRef, ViewContainerRef, EmbeddedViewRef, ViewRef, ChangeDetectionStrategy, ChangeDetectorRef, DefaultIterableDiffer, IterableDiffers, KeyValueDiffers, SimpleChange, WrappedValue, platformCore, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER, ValueUnwrapper as ɵValueUnwrapper, devModeEqual as ɵdevModeEqual, isListLikeIterable as ɵisListLikeIterable, ChangeDetectorStatus as ɵChangeDetectorStatus, isDefaultChangeDetectionStrategy as ɵisDefaultChangeDetectionStrategy, Console as ɵConsole, ComponentFactory as ɵComponentFactory, CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver, ReflectionCapabilities as ɵReflectionCapabilities, RenderDebugInfo as ɵRenderDebugInfo, _global as ɵglobal, looseIdentical as ɵlooseIdentical, stringify as ɵstringify, makeDecorator as ɵmakeDecorator, isObservable as ɵisObservable, isPromise as ɵisPromise, clearOverrides as ɵclearOverrides, overrideComponentView as ɵoverrideComponentView, overrideProvider as ɵoverrideProvider, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, registerModuleFactory as ɵregisterModuleFactory, EMPTY_ARRAY as ɵEMPTY_ARRAY, EMPTY_MAP as ɵEMPTY_MAP, anchorDef as ɵand, createComponentFactory as ɵccf, createNgModuleFactory as ɵcmf, createRendererType2 as ɵcrt, directiveDef as ɵdid, elementDef as ɵeld, elementEventFullName as ɵelementEventFullName, getComponentViewDefinitionFactory as ɵgetComponentViewDefinitionFactory, inlineInterpolate as ɵinlineInterpolate, interpolate as ɵinterpolate, moduleDef as ɵmod, moduleProvideDef as ɵmpd, ngContentDef as ɵncd, nodeValue as ɵnov, pipeDef as ɵpid, providerDef as ɵprd, pureArrayDef as ɵpad, pureObjectDef as ɵpod, purePipeDef as ɵppd, queryDef as ɵqud, textDef as ɵted, unwrapValue as ɵunv, viewDef as ɵvid, AUTO_STYLE, trigger$$1 as trigger, animate$$1 as animate, group$$1 as group, sequence$$1 as sequence, style$$1 as style, state$$1 as state, keyframes$$1 as keyframes, transition$$1 as transition, animate$1 as ɵx, group$1 as ɵy, keyframes$1 as ɵbc, sequence$1 as ɵz, state$1 as ɵbb, style$1 as ɵba, transition$1 as ɵbd, trigger$1 as ɵw, _iterableDiffersFactory as ɵk, _keyValueDiffersFactory as ɵl, _localeFactory as ɵm, _appIdRandomProviderFactory as ɵf, defaultIterableDiffers as ɵg, defaultKeyValueDiffers as ɵh, DefaultIterableDifferFactory as ɵi, DefaultKeyValueDifferFactory as ɵj, StaticInjector as ɵb, ReflectiveInjector_ as ɵc, ReflectiveDependency as ɵd, resolveReflectiveProviders as ɵe, wtfEnabled as ɵn, createScope$1 as ɵp, detectWTF as ɵo, endTimeRange as ɵs, leave as ɵq, startTimeRange as ɵr, makeParamDecorator as ɵa, _def as ɵt, DebugContext as ɵu };\r\n//# sourceMappingURL=core.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/core/esm2015/core.js\n// module id = ../../../core/esm2015/core.js\n// module chunks = vendor","/**\r\n * @license Angular v5.1.3\r\n * (c) 2010-2017 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\nimport { Directive, ElementRef, EventEmitter, Host, Inject, Injectable, InjectionToken, Injector, Input, NgModule, Optional, Output, Renderer2, Self, SkipSelf, Version, forwardRef, ɵisObservable, ɵisPromise, ɵlooseIdentical } from '@angular/core';\r\nimport { forkJoin } from 'rxjs/observable/forkJoin';\r\nimport { fromPromise } from 'rxjs/observable/fromPromise';\r\nimport { map } from 'rxjs/operator/map';\r\nimport { ɵgetDOM } from '@angular/platform-browser';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Base class for control directives.\r\n *\r\n * Only used internally in the forms module.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass AbstractControlDirective {\r\n    /**\r\n     * The value of the control.\r\n     * @return {?}\r\n     */\r\n    get value() { return this.control ? this.control.value : null; }\r\n    /**\r\n     * A control is `valid` when its `status === VALID`.\r\n     *\r\n     * In order to have this status, the control must have passed all its\r\n     * validation checks.\r\n     * @return {?}\r\n     */\r\n    get valid() { return this.control ? this.control.valid : null; }\r\n    /**\r\n     * A control is `invalid` when its `status === INVALID`.\r\n     *\r\n     * In order to have this status, the control must have failed\r\n     * at least one of its validation checks.\r\n     * @return {?}\r\n     */\r\n    get invalid() { return this.control ? this.control.invalid : null; }\r\n    /**\r\n     * A control is `pending` when its `status === PENDING`.\r\n     *\r\n     * In order to have this status, the control must be in the\r\n     * middle of conducting a validation check.\r\n     * @return {?}\r\n     */\r\n    get pending() { return this.control ? this.control.pending : null; }\r\n    /**\r\n     * A control is `disabled` when its `status === DISABLED`.\r\n     *\r\n     * Disabled controls are exempt from validation checks and\r\n     * are not included in the aggregate value of their ancestor\r\n     * controls.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this.control ? this.control.disabled : null; }\r\n    /**\r\n     * A control is `enabled` as long as its `status !== DISABLED`.\r\n     *\r\n     * In other words, it has a status of `VALID`, `INVALID`, or\r\n     * `PENDING`.\r\n     * @return {?}\r\n     */\r\n    get enabled() { return this.control ? this.control.enabled : null; }\r\n    /**\r\n     * Returns any errors generated by failing validation. If there\r\n     * are no errors, it will return null.\r\n     * @return {?}\r\n     */\r\n    get errors() { return this.control ? this.control.errors : null; }\r\n    /**\r\n     * A control is `pristine` if the user has not yet changed\r\n     * the value in the UI.\r\n     *\r\n     * Note that programmatic changes to a control's value will\r\n     * *not* mark it dirty.\r\n     * @return {?}\r\n     */\r\n    get pristine() { return this.control ? this.control.pristine : null; }\r\n    /**\r\n     * A control is `dirty` if the user has changed the value\r\n     * in the UI.\r\n     *\r\n     * Note that programmatic changes to a control's value will\r\n     * *not* mark it dirty.\r\n     * @return {?}\r\n     */\r\n    get dirty() { return this.control ? this.control.dirty : null; }\r\n    /**\r\n     * A control is marked `touched` once the user has triggered\r\n     * a `blur` event on it.\r\n     * @return {?}\r\n     */\r\n    get touched() { return this.control ? this.control.touched : null; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get status() { return this.control ? this.control.status : null; }\r\n    /**\r\n     * A control is `untouched` if the user has not yet triggered\r\n     * a `blur` event on it.\r\n     * @return {?}\r\n     */\r\n    get untouched() { return this.control ? this.control.untouched : null; }\r\n    /**\r\n     * Emits an event every time the validation status of the control\r\n     * is re-calculated.\r\n     * @return {?}\r\n     */\r\n    get statusChanges() {\r\n        return this.control ? this.control.statusChanges : null;\r\n    }\r\n    /**\r\n     * Emits an event every time the value of the control changes, in\r\n     * the UI or programmatically.\r\n     * @return {?}\r\n     */\r\n    get valueChanges() {\r\n        return this.control ? this.control.valueChanges : null;\r\n    }\r\n    /**\r\n     * Returns an array that represents the path from the top-level form\r\n     * to this control. Each index is the string name of the control on\r\n     * that level.\r\n     * @return {?}\r\n     */\r\n    get path() { return null; }\r\n    /**\r\n     * Resets the form control. This means by default:\r\n     *\r\n     * * it is marked as `pristine`\r\n     * * it is marked as `untouched`\r\n     * * value is set to null\r\n     *\r\n     * For more information, see {\\@link AbstractControl}.\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    reset(value = undefined) {\r\n        if (this.control)\r\n            this.control.reset(value);\r\n    }\r\n    /**\r\n     * Returns true if the control with the given path has the error specified. Otherwise\r\n     * returns false.\r\n     *\r\n     * If no path is given, it checks for the error on the present control.\r\n     * @param {?} errorCode\r\n     * @param {?=} path\r\n     * @return {?}\r\n     */\r\n    hasError(errorCode, path) {\r\n        return this.control ? this.control.hasError(errorCode, path) : false;\r\n    }\r\n    /**\r\n     * Returns error data if the control with the given path has the error specified. Otherwise\r\n     * returns null or undefined.\r\n     *\r\n     * If no path is given, it checks for the error on the present control.\r\n     * @param {?} errorCode\r\n     * @param {?=} path\r\n     * @return {?}\r\n     */\r\n    getError(errorCode, path) {\r\n        return this.control ? this.control.getError(errorCode, path) : null;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A directive that contains multiple {\\@link NgControl}s.\r\n *\r\n * Only used by the forms module.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass ControlContainer extends AbstractControlDirective {\r\n    /**\r\n     * Get the form to which this container belongs.\r\n     * @return {?}\r\n     */\r\n    get formDirective() { return null; }\r\n    /**\r\n     * Get the path to this container.\r\n     * @return {?}\r\n     */\r\n    get path() { return null; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isEmptyInputValue(value) {\r\n    // we don't check for string here so it also works with arrays\r\n    return value == null || value.length === 0;\r\n}\r\n/**\r\n * Providers for validators to be used for {\\@link FormControl}s in a form.\r\n *\r\n * Provide this using `multi: true` to add validators.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * \\@Directive({\r\n *   selector: '[custom-validator]',\r\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\r\n * })\r\n * class CustomValidatorDirective implements Validator {\r\n *   validate(control: AbstractControl): ValidationErrors | null {\r\n *     return {\"custom\": true};\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@stable\r\n */\r\nconst NG_VALIDATORS = new InjectionToken('NgValidators');\r\n/**\r\n * Providers for asynchronous validators to be used for {\\@link FormControl}s\r\n * in a form.\r\n *\r\n * Provide this using `multi: true` to add validators.\r\n *\r\n * See {\\@link NG_VALIDATORS} for more details.\r\n *\r\n * \\@stable\r\n */\r\nconst NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\r\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\r\n/**\r\n * Provides a set of validators used by form controls.\r\n *\r\n * A validator is a function that processes a {\\@link FormControl} or collection of\r\n * controls and returns a map of errors. A null map means that validation has passed.\r\n *\r\n * ### Example\r\n *\r\n * ```typescript\r\n * var loginControl = new FormControl(\"\", Validators.required)\r\n * ```\r\n *\r\n * \\@stable\r\n */\r\nclass Validators {\r\n    /**\r\n     * Validator that requires controls to have a value greater than a number.\r\n     * `min()` exists only as a function, not as a directive. For example,\r\n     * `control = new FormControl('', Validators.min(3));`.\r\n     * @param {?} min\r\n     * @return {?}\r\n     */\r\n    static min(min) {\r\n        return (control) => {\r\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\r\n                return null; // don't validate empty values to allow optional controls\r\n            }\r\n            const /** @type {?} */ value = parseFloat(control.value);\r\n            // Controls with NaN values after parsing should be treated as not having a\r\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\r\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\r\n        };\r\n    }\r\n    /**\r\n     * Validator that requires controls to have a value less than a number.\r\n     * `max()` exists only as a function, not as a directive. For example,\r\n     * `control = new FormControl('', Validators.max(15));`.\r\n     * @param {?} max\r\n     * @return {?}\r\n     */\r\n    static max(max) {\r\n        return (control) => {\r\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\r\n                return null; // don't validate empty values to allow optional controls\r\n            }\r\n            const /** @type {?} */ value = parseFloat(control.value);\r\n            // Controls with NaN values after parsing should be treated as not having a\r\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\r\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\r\n        };\r\n    }\r\n    /**\r\n     * Validator that requires controls to have a non-empty value.\r\n     * @param {?} control\r\n     * @return {?}\r\n     */\r\n    static required(control) {\r\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\r\n    }\r\n    /**\r\n     * Validator that requires control value to be true.\r\n     * @param {?} control\r\n     * @return {?}\r\n     */\r\n    static requiredTrue(control) {\r\n        return control.value === true ? null : { 'required': true };\r\n    }\r\n    /**\r\n     * Validator that performs email validation.\r\n     * @param {?} control\r\n     * @return {?}\r\n     */\r\n    static email(control) {\r\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\r\n    }\r\n    /**\r\n     * Validator that requires controls to have a value of a minimum length.\r\n     * @param {?} minLength\r\n     * @return {?}\r\n     */\r\n    static minLength(minLength) {\r\n        return (control) => {\r\n            if (isEmptyInputValue(control.value)) {\r\n                return null; // don't validate empty values to allow optional controls\r\n            }\r\n            const /** @type {?} */ length = control.value ? control.value.length : 0;\r\n            return length < minLength ?\r\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\r\n                null;\r\n        };\r\n    }\r\n    /**\r\n     * Validator that requires controls to have a value of a maximum length.\r\n     * @param {?} maxLength\r\n     * @return {?}\r\n     */\r\n    static maxLength(maxLength) {\r\n        return (control) => {\r\n            const /** @type {?} */ length = control.value ? control.value.length : 0;\r\n            return length > maxLength ?\r\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\r\n                null;\r\n        };\r\n    }\r\n    /**\r\n     * Validator that requires a control to match a regex to its value.\r\n     * @param {?} pattern\r\n     * @return {?}\r\n     */\r\n    static pattern(pattern) {\r\n        if (!pattern)\r\n            return Validators.nullValidator;\r\n        let /** @type {?} */ regex;\r\n        let /** @type {?} */ regexStr;\r\n        if (typeof pattern === 'string') {\r\n            regexStr = `^${pattern}$`;\r\n            regex = new RegExp(regexStr);\r\n        }\r\n        else {\r\n            regexStr = pattern.toString();\r\n            regex = pattern;\r\n        }\r\n        return (control) => {\r\n            if (isEmptyInputValue(control.value)) {\r\n                return null; // don't validate empty values to allow optional controls\r\n            }\r\n            const /** @type {?} */ value = control.value;\r\n            return regex.test(value) ? null :\r\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\r\n        };\r\n    }\r\n    /**\r\n     * No-op validator.\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    static nullValidator(c) { return null; }\r\n    /**\r\n     * @param {?} validators\r\n     * @return {?}\r\n     */\r\n    static compose(validators) {\r\n        if (!validators)\r\n            return null;\r\n        const /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\r\n        if (presentValidators.length == 0)\r\n            return null;\r\n        return function (control) {\r\n            return _mergeErrors(_executeValidators(control, presentValidators));\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} validators\r\n     * @return {?}\r\n     */\r\n    static composeAsync(validators) {\r\n        if (!validators)\r\n            return null;\r\n        const /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\r\n        if (presentValidators.length == 0)\r\n            return null;\r\n        return function (control) {\r\n            const /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\r\n            return map.call(forkJoin(observables), _mergeErrors);\r\n        };\r\n    }\r\n}\r\n/**\r\n * @param {?} o\r\n * @return {?}\r\n */\r\nfunction isPresent(o) {\r\n    return o != null;\r\n}\r\n/**\r\n * @param {?} r\r\n * @return {?}\r\n */\r\nfunction toObservable(r) {\r\n    const /** @type {?} */ obs = ɵisPromise(r) ? fromPromise(r) : r;\r\n    if (!(ɵisObservable(obs))) {\r\n        throw new Error(`Expected validator to return Promise or Observable.`);\r\n    }\r\n    return obs;\r\n}\r\n/**\r\n * @param {?} control\r\n * @param {?} validators\r\n * @return {?}\r\n */\r\nfunction _executeValidators(control, validators) {\r\n    return validators.map(v => v(control));\r\n}\r\n/**\r\n * @param {?} control\r\n * @param {?} validators\r\n * @return {?}\r\n */\r\nfunction _executeAsyncValidators(control, validators) {\r\n    return validators.map(v => v(control));\r\n}\r\n/**\r\n * @param {?} arrayOfErrors\r\n * @return {?}\r\n */\r\nfunction _mergeErrors(arrayOfErrors) {\r\n    const /** @type {?} */ res = arrayOfErrors.reduce((res, errors) => {\r\n        return errors != null ? Object.assign({}, /** @type {?} */ ((res)), errors) : /** @type {?} */ ((res));\r\n    }, {});\r\n    return Object.keys(res).length === 0 ? null : res;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A `ControlValueAccessor` acts as a bridge between the Angular forms API and a\r\n * native element in the DOM.\r\n *\r\n * Implement this interface if you want to create a custom form control directive\r\n * that integrates with Angular forms.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Used to provide a {\\@link ControlValueAccessor} for form controls.\r\n *\r\n * See {\\@link DefaultValueAccessor} for how to implement one.\r\n * \\@stable\r\n */\r\nconst NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst CHECKBOX_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => CheckboxControlValueAccessor),\r\n    multi: true,\r\n};\r\n/**\r\n * The accessor for writing a value and listening to changes on a checkbox input element.\r\n *\r\n *  ### Example\r\n *  ```\r\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\r\n *  ```\r\n *\r\n *  \\@stable\r\n */\r\nclass CheckboxControlValueAccessor {\r\n    /**\r\n     * @param {?} _renderer\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_renderer, _elementRef) {\r\n        this._renderer = _renderer;\r\n        this._elementRef = _elementRef;\r\n        this.onChange = (_) => { };\r\n        this.onTouched = () => { };\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) { this.onChange = fn; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n}\r\nCheckboxControlValueAccessor.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\r\n                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\r\n                providers: [CHECKBOX_VALUE_ACCESSOR]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nCheckboxControlValueAccessor.ctorParameters = () => [\r\n    { type: Renderer2, },\r\n    { type: ElementRef, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst DEFAULT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => DefaultValueAccessor),\r\n    multi: true\r\n};\r\n/**\r\n * We must check whether the agent is Android because composition events\r\n * behave differently between iOS and Android.\r\n * @return {?}\r\n */\r\nfunction _isAndroid() {\r\n    const /** @type {?} */ userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\r\n    return /android (\\d+)/.test(userAgent.toLowerCase());\r\n}\r\n/**\r\n * Turn this mode on if you want form directives to buffer IME input until compositionend\r\n * \\@experimental\r\n */\r\nconst COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\r\n/**\r\n * The default accessor for writing a value and listening to changes that is used by the\r\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\r\n *\r\n *  ### Example\r\n *  ```\r\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\r\n *  ```\r\n *\r\n *  \\@stable\r\n */\r\nclass DefaultValueAccessor {\r\n    /**\r\n     * @param {?} _renderer\r\n     * @param {?} _elementRef\r\n     * @param {?} _compositionMode\r\n     */\r\n    constructor(_renderer, _elementRef, _compositionMode) {\r\n        this._renderer = _renderer;\r\n        this._elementRef = _elementRef;\r\n        this._compositionMode = _compositionMode;\r\n        this.onChange = (_) => { };\r\n        this.onTouched = () => { };\r\n        /**\r\n         * Whether the user is creating a composition string (IME events).\r\n         */\r\n        this._composing = false;\r\n        if (this._compositionMode == null) {\r\n            this._compositionMode = !_isAndroid();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        const /** @type {?} */ normalizedValue = value == null ? '' : value;\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) { this.onChange = fn; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _handleInput(value) {\r\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\r\n            this.onChange(value);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _compositionStart() { this._composing = true; }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _compositionEnd(value) {\r\n        this._composing = false;\r\n        this._compositionMode && this.onChange(value);\r\n    }\r\n}\r\nDefaultValueAccessor.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\r\n                // TODO: vsavkin replace the above selector with the one below it once\r\n                // https://github.com/angular/angular/issues/3011 is implemented\r\n                // selector: '[ngModel],[formControl],[formControlName]',\r\n                host: {\r\n                    '(input)': '_handleInput($event.target.value)',\r\n                    '(blur)': 'onTouched()',\r\n                    '(compositionstart)': '_compositionStart()',\r\n                    '(compositionend)': '_compositionEnd($event.target.value)'\r\n                },\r\n                providers: [DEFAULT_VALUE_ACCESSOR]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nDefaultValueAccessor.ctorParameters = () => [\r\n    { type: Renderer2, },\r\n    { type: ElementRef, },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} validator\r\n * @return {?}\r\n */\r\nfunction normalizeValidator(validator) {\r\n    if ((/** @type {?} */ (validator)).validate) {\r\n        return (c) => (/** @type {?} */ (validator)).validate(c);\r\n    }\r\n    else {\r\n        return /** @type {?} */ (validator);\r\n    }\r\n}\r\n/**\r\n * @param {?} validator\r\n * @return {?}\r\n */\r\nfunction normalizeAsyncValidator(validator) {\r\n    if ((/** @type {?} */ (validator)).validate) {\r\n        return (c) => (/** @type {?} */ (validator)).validate(c);\r\n    }\r\n    else {\r\n        return /** @type {?} */ (validator);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst NUMBER_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => NumberValueAccessor),\r\n    multi: true\r\n};\r\n/**\r\n * The accessor for writing a number value and listening to changes that is used by the\r\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\r\n *\r\n *  ### Example\r\n *  ```\r\n *  <input type=\"number\" [(ngModel)]=\"age\">\r\n *  ```\r\n */\r\nclass NumberValueAccessor {\r\n    /**\r\n     * @param {?} _renderer\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_renderer, _elementRef) {\r\n        this._renderer = _renderer;\r\n        this._elementRef = _elementRef;\r\n        this.onChange = (_) => { };\r\n        this.onTouched = () => { };\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\r\n        const /** @type {?} */ normalizedValue = value == null ? '' : value;\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n}\r\nNumberValueAccessor.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\r\n                host: {\r\n                    '(change)': 'onChange($event.target.value)',\r\n                    '(input)': 'onChange($event.target.value)',\r\n                    '(blur)': 'onTouched()'\r\n                },\r\n                providers: [NUMBER_VALUE_ACCESSOR]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nNumberValueAccessor.ctorParameters = () => [\r\n    { type: Renderer2, },\r\n    { type: ElementRef, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction unimplemented() {\r\n    throw new Error('unimplemented');\r\n}\r\n/**\r\n * A base class that all control directive extend.\r\n * It binds a {\\@link FormControl} object to a DOM element.\r\n *\r\n * Used internally by Angular forms.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass NgControl extends AbstractControlDirective {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._parent = null;\r\n        this.name = null;\r\n        this.valueAccessor = null;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._rawValidators = [];\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._rawAsyncValidators = [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get validator() { return /** @type {?} */ (unimplemented()); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get asyncValidator() { return /** @type {?} */ (unimplemented()); }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst RADIO_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => RadioControlValueAccessor),\r\n    multi: true\r\n};\r\n/**\r\n * Internal class used by Angular to uncheck radio buttons with the matching name.\r\n */\r\nclass RadioControlRegistry {\r\n    constructor() {\r\n        this._accessors = [];\r\n    }\r\n    /**\r\n     * @param {?} control\r\n     * @param {?} accessor\r\n     * @return {?}\r\n     */\r\n    add(control, accessor) {\r\n        this._accessors.push([control, accessor]);\r\n    }\r\n    /**\r\n     * @param {?} accessor\r\n     * @return {?}\r\n     */\r\n    remove(accessor) {\r\n        for (let /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\r\n            if (this._accessors[i][1] === accessor) {\r\n                this._accessors.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} accessor\r\n     * @return {?}\r\n     */\r\n    select(accessor) {\r\n        this._accessors.forEach((c) => {\r\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\r\n                c[1].fireUncheck(accessor.value);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} controlPair\r\n     * @param {?} accessor\r\n     * @return {?}\r\n     */\r\n    _isSameGroup(controlPair, accessor) {\r\n        if (!controlPair[0].control)\r\n            return false;\r\n        return controlPair[0]._parent === accessor._control._parent &&\r\n            controlPair[1].name === accessor.name;\r\n    }\r\n}\r\nRadioControlRegistry.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nRadioControlRegistry.ctorParameters = () => [];\r\n/**\r\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\r\n *\r\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\r\n * to keep the view synced with the {\\@link FormControl} model.\r\n *\r\n * \\@howToUse\r\n *\r\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\r\n * value accessor will be active on any radio control that has a form directive. You do\r\n * **not** need to add a special selector to activate it.\r\n *\r\n * ### How to use radio buttons with form directives\r\n *\r\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\r\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\r\n * attributes do not affect each other.\r\n *\r\n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\r\n *\r\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\r\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\r\n *\r\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\r\n *\r\n *  * **npm package**: `\\@angular/forms`\r\n *\r\n *  \\@stable\r\n */\r\nclass RadioControlValueAccessor {\r\n    /**\r\n     * @param {?} _renderer\r\n     * @param {?} _elementRef\r\n     * @param {?} _registry\r\n     * @param {?} _injector\r\n     */\r\n    constructor(_renderer, _elementRef, _registry, _injector) {\r\n        this._renderer = _renderer;\r\n        this._elementRef = _elementRef;\r\n        this._registry = _registry;\r\n        this._injector = _injector;\r\n        this.onChange = () => { };\r\n        this.onTouched = () => { };\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this._control = this._injector.get(NgControl);\r\n        this._checkName();\r\n        this._registry.add(this._control, this);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this._registry.remove(this); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this._state = value === this.value;\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this._fn = fn;\r\n        this.onChange = () => {\r\n            fn(this.value);\r\n            this._registry.select(this);\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    fireUncheck(value) { this.writeValue(value); }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _checkName() {\r\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\r\n            this._throwNameError();\r\n        }\r\n        if (!this.name && this.formControlName)\r\n            this.name = this.formControlName;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _throwNameError() {\r\n        throw new Error(`\r\n      If you define both a name and a formControlName attribute on your radio button, their values\r\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\r\n    `);\r\n    }\r\n}\r\nRadioControlValueAccessor.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\r\n                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\r\n                providers: [RADIO_VALUE_ACCESSOR]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nRadioControlValueAccessor.ctorParameters = () => [\r\n    { type: Renderer2, },\r\n    { type: ElementRef, },\r\n    { type: RadioControlRegistry, },\r\n    { type: Injector, },\r\n];\r\nRadioControlValueAccessor.propDecorators = {\r\n    \"name\": [{ type: Input },],\r\n    \"formControlName\": [{ type: Input },],\r\n    \"value\": [{ type: Input },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst RANGE_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => RangeValueAccessor),\r\n    multi: true\r\n};\r\n/**\r\n * The accessor for writing a range value and listening to changes that is used by the\r\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\r\n *\r\n *  ### Example\r\n *  ```\r\n *  <input type=\"range\" [(ngModel)]=\"age\" >\r\n *  ```\r\n */\r\nclass RangeValueAccessor {\r\n    /**\r\n     * @param {?} _renderer\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_renderer, _elementRef) {\r\n        this._renderer = _renderer;\r\n        this._elementRef = _elementRef;\r\n        this.onChange = (_) => { };\r\n        this.onTouched = () => { };\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = (value) => { fn(value == '' ? null : parseFloat(value)); };\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n}\r\nRangeValueAccessor.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\r\n                host: {\r\n                    '(change)': 'onChange($event.target.value)',\r\n                    '(input)': 'onChange($event.target.value)',\r\n                    '(blur)': 'onTouched()'\r\n                },\r\n                providers: [RANGE_VALUE_ACCESSOR]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nRangeValueAccessor.ctorParameters = () => [\r\n    { type: Renderer2, },\r\n    { type: ElementRef, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst SELECT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectControlValueAccessor),\r\n    multi: true\r\n};\r\n/**\r\n * @param {?} id\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction _buildValueString(id, value) {\r\n    if (id == null)\r\n        return `${value}`;\r\n    if (value && typeof value === 'object')\r\n        value = 'Object';\r\n    return `${id}: ${value}`.slice(0, 50);\r\n}\r\n/**\r\n * @param {?} valueString\r\n * @return {?}\r\n */\r\nfunction _extractId(valueString) {\r\n    return valueString.split(':')[0];\r\n}\r\n/**\r\n * \\@whatItDoes Writes values and listens to changes on a select element.\r\n *\r\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\r\n * to keep the view synced with the {\\@link FormControl} model.\r\n *\r\n * \\@howToUse\r\n *\r\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\r\n * value accessor will be active on any select control that has a form directive. You do\r\n * **not** need to add a special selector to activate it.\r\n *\r\n * ### How to use select controls with form directives\r\n *\r\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\r\n * attribute to the main `<select>` tag.\r\n *\r\n * If your option values are simple strings, you can bind to the normal `value` property\r\n * on the option.  If your option values happen to be objects (and you'd like to save the\r\n * selection in your form as an object), use `ngValue` instead:\r\n *\r\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\r\n *\r\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\r\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\r\n * choice of binding to the  `value` or `ngValue` property on the select's options.\r\n *\r\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\r\n *\r\n * ### Caveat: Option selection\r\n *\r\n * Angular uses object identity to select option. It's possible for the identities of items\r\n * to change while the data does not. This can happen, for example, if the items are produced\r\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\r\n * second response will produce objects with different identities.\r\n *\r\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\r\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\r\n * If `compareWith` is given, Angular selects option by the return value of the function.\r\n *\r\n * #### Syntax\r\n *\r\n * ```\r\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\r\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\r\n *         {{country.name}}\r\n *     </option>\r\n * </select>\r\n *\r\n * compareFn(c1: Country, c2: Country): boolean {\r\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\r\n * }\r\n * ```\r\n *\r\n * Note: We listen to the 'change' event because 'input' events aren't fired\r\n * for selects in Firefox and IE:\r\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\r\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\r\n *\r\n * * **npm package**: `\\@angular/forms`\r\n *\r\n * \\@stable\r\n */\r\nclass SelectControlValueAccessor {\r\n    /**\r\n     * @param {?} _renderer\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_renderer, _elementRef) {\r\n        this._renderer = _renderer;\r\n        this._elementRef = _elementRef;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._optionMap = new Map();\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._idCounter = 0;\r\n        this.onChange = (_) => { };\r\n        this.onTouched = () => { };\r\n        this._compareWith = ɵlooseIdentical;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    set compareWith(fn) {\r\n        if (typeof fn !== 'function') {\r\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\r\n        }\r\n        this._compareWith = fn;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n        const /** @type {?} */ id = this._getOptionId(value);\r\n        if (id == null) {\r\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\r\n        }\r\n        const /** @type {?} */ valueString = _buildValueString(id, value);\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = (valueString) => {\r\n            this.value = this._getOptionValue(valueString);\r\n            fn(this.value);\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _registerOption() { return (this._idCounter++).toString(); }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _getOptionId(value) {\r\n        for (const /** @type {?} */ id of Array.from(this._optionMap.keys())) {\r\n            if (this._compareWith(this._optionMap.get(id), value))\r\n                return id;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} valueString\r\n     * @return {?}\r\n     */\r\n    _getOptionValue(valueString) {\r\n        const /** @type {?} */ id = _extractId(valueString);\r\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\r\n    }\r\n}\r\nSelectControlValueAccessor.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\r\n                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\r\n                providers: [SELECT_VALUE_ACCESSOR]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nSelectControlValueAccessor.ctorParameters = () => [\r\n    { type: Renderer2, },\r\n    { type: ElementRef, },\r\n];\r\nSelectControlValueAccessor.propDecorators = {\r\n    \"compareWith\": [{ type: Input },],\r\n};\r\n/**\r\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\r\n *\r\n * \\@howToUse\r\n *\r\n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\r\n *\r\n * \\@stable\r\n */\r\nclass NgSelectOption {\r\n    /**\r\n     * @param {?} _element\r\n     * @param {?} _renderer\r\n     * @param {?} _select\r\n     */\r\n    constructor(_element, _renderer, _select) {\r\n        this._element = _element;\r\n        this._renderer = _renderer;\r\n        this._select = _select;\r\n        if (this._select)\r\n            this.id = this._select._registerOption();\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set ngValue(value) {\r\n        if (this._select == null)\r\n            return;\r\n        this._select._optionMap.set(this.id, value);\r\n        this._setElementValue(_buildValueString(this.id, value));\r\n        this._select.writeValue(this._select.value);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set value(value) {\r\n        this._setElementValue(value);\r\n        if (this._select)\r\n            this._select.writeValue(this._select.value);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _setElementValue(value) {\r\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        if (this._select) {\r\n            this._select._optionMap.delete(this.id);\r\n            this._select.writeValue(this._select.value);\r\n        }\r\n    }\r\n}\r\nNgSelectOption.decorators = [\r\n    { type: Directive, args: [{ selector: 'option' },] },\r\n];\r\n/** @nocollapse */\r\nNgSelectOption.ctorParameters = () => [\r\n    { type: ElementRef, },\r\n    { type: Renderer2, },\r\n    { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },\r\n];\r\nNgSelectOption.propDecorators = {\r\n    \"ngValue\": [{ type: Input, args: ['ngValue',] },],\r\n    \"value\": [{ type: Input, args: ['value',] },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\r\n    multi: true\r\n};\r\n/**\r\n * @param {?} id\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction _buildValueString$1(id, value) {\r\n    if (id == null)\r\n        return `${value}`;\r\n    if (typeof value === 'string')\r\n        value = `'${value}'`;\r\n    if (value && typeof value === 'object')\r\n        value = 'Object';\r\n    return `${id}: ${value}`.slice(0, 50);\r\n}\r\n/**\r\n * @param {?} valueString\r\n * @return {?}\r\n */\r\nfunction _extractId$1(valueString) {\r\n    return valueString.split(':')[0];\r\n}\r\n/**\r\n * The accessor for writing a value and listening to changes on a select element.\r\n *\r\n *  ### Caveat: Options selection\r\n *\r\n * Angular uses object identity to select options. It's possible for the identities of items\r\n * to change while the data does not. This can happen, for example, if the items are produced\r\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\r\n * second response will produce objects with different identities.\r\n *\r\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\r\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\r\n * If `compareWith` is given, Angular selects options by the return value of the function.\r\n *\r\n * #### Syntax\r\n *\r\n * ```\r\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\r\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\r\n *         {{country.name}}\r\n *     </option>\r\n * </select>\r\n *\r\n * compareFn(c1: Country, c2: Country): boolean {\r\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\r\n * }\r\n * ```\r\n *\r\n * \\@stable\r\n */\r\nclass SelectMultipleControlValueAccessor {\r\n    /**\r\n     * @param {?} _renderer\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_renderer, _elementRef) {\r\n        this._renderer = _renderer;\r\n        this._elementRef = _elementRef;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._optionMap = new Map();\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._idCounter = 0;\r\n        this.onChange = (_) => { };\r\n        this.onTouched = () => { };\r\n        this._compareWith = ɵlooseIdentical;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    set compareWith(fn) {\r\n        if (typeof fn !== 'function') {\r\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\r\n        }\r\n        this._compareWith = fn;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n        let /** @type {?} */ optionSelectedStateSetter;\r\n        if (Array.isArray(value)) {\r\n            // convert values to ids\r\n            const /** @type {?} */ ids = value.map((v) => this._getOptionId(v));\r\n            optionSelectedStateSetter = (opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); };\r\n        }\r\n        else {\r\n            optionSelectedStateSetter = (opt, o) => { opt._setSelected(false); };\r\n        }\r\n        this._optionMap.forEach(optionSelectedStateSetter);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onChange = (_) => {\r\n            const /** @type {?} */ selected = [];\r\n            if (_.hasOwnProperty('selectedOptions')) {\r\n                const /** @type {?} */ options = _.selectedOptions;\r\n                for (let /** @type {?} */ i = 0; i < options.length; i++) {\r\n                    const /** @type {?} */ opt = options.item(i);\r\n                    const /** @type {?} */ val = this._getOptionValue(opt.value);\r\n                    selected.push(val);\r\n                }\r\n            }\r\n            else {\r\n                const /** @type {?} */ options = /** @type {?} */ (_.options);\r\n                for (let /** @type {?} */ i = 0; i < options.length; i++) {\r\n                    const /** @type {?} */ opt = options.item(i);\r\n                    if (opt.selected) {\r\n                        const /** @type {?} */ val = this._getOptionValue(opt.value);\r\n                        selected.push(val);\r\n                    }\r\n                }\r\n            }\r\n            this.value = selected;\r\n            fn(selected);\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) { this.onTouched = fn; }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _registerOption(value) {\r\n        const /** @type {?} */ id = (this._idCounter++).toString();\r\n        this._optionMap.set(id, value);\r\n        return id;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _getOptionId(value) {\r\n        for (const /** @type {?} */ id of Array.from(this._optionMap.keys())) {\r\n            if (this._compareWith(/** @type {?} */ ((this._optionMap.get(id)))._value, value))\r\n                return id;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} valueString\r\n     * @return {?}\r\n     */\r\n    _getOptionValue(valueString) {\r\n        const /** @type {?} */ id = _extractId$1(valueString);\r\n        return this._optionMap.has(id) ? /** @type {?} */ ((this._optionMap.get(id)))._value : valueString;\r\n    }\r\n}\r\nSelectMultipleControlValueAccessor.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\r\n                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\r\n                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nSelectMultipleControlValueAccessor.ctorParameters = () => [\r\n    { type: Renderer2, },\r\n    { type: ElementRef, },\r\n];\r\nSelectMultipleControlValueAccessor.propDecorators = {\r\n    \"compareWith\": [{ type: Input },],\r\n};\r\n/**\r\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * <select multiple name=\"city\" ngModel>\r\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\r\n * </select>\r\n * ```\r\n */\r\nclass NgSelectMultipleOption {\r\n    /**\r\n     * @param {?} _element\r\n     * @param {?} _renderer\r\n     * @param {?} _select\r\n     */\r\n    constructor(_element, _renderer, _select) {\r\n        this._element = _element;\r\n        this._renderer = _renderer;\r\n        this._select = _select;\r\n        if (this._select) {\r\n            this.id = this._select._registerOption(this);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set ngValue(value) {\r\n        if (this._select == null)\r\n            return;\r\n        this._value = value;\r\n        this._setElementValue(_buildValueString$1(this.id, value));\r\n        this._select.writeValue(this._select.value);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set value(value) {\r\n        if (this._select) {\r\n            this._value = value;\r\n            this._setElementValue(_buildValueString$1(this.id, value));\r\n            this._select.writeValue(this._select.value);\r\n        }\r\n        else {\r\n            this._setElementValue(value);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _setElementValue(value) {\r\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} selected\r\n     * @return {?}\r\n     */\r\n    _setSelected(selected) {\r\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        if (this._select) {\r\n            this._select._optionMap.delete(this.id);\r\n            this._select.writeValue(this._select.value);\r\n        }\r\n    }\r\n}\r\nNgSelectMultipleOption.decorators = [\r\n    { type: Directive, args: [{ selector: 'option' },] },\r\n];\r\n/** @nocollapse */\r\nNgSelectMultipleOption.ctorParameters = () => [\r\n    { type: ElementRef, },\r\n    { type: Renderer2, },\r\n    { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },\r\n];\r\nNgSelectMultipleOption.propDecorators = {\r\n    \"ngValue\": [{ type: Input, args: ['ngValue',] },],\r\n    \"value\": [{ type: Input, args: ['value',] },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} name\r\n * @param {?} parent\r\n * @return {?}\r\n */\r\nfunction controlPath(name, parent) {\r\n    return [.../** @type {?} */ ((parent.path)), name];\r\n}\r\n/**\r\n * @param {?} control\r\n * @param {?} dir\r\n * @return {?}\r\n */\r\nfunction setUpControl(control, dir) {\r\n    if (!control)\r\n        _throwError(dir, 'Cannot find control with');\r\n    if (!dir.valueAccessor)\r\n        _throwError(dir, 'No value accessor for form control with');\r\n    control.validator = Validators.compose([/** @type {?} */ ((control.validator)), dir.validator]);\r\n    control.asyncValidator = Validators.composeAsync([/** @type {?} */ ((control.asyncValidator)), dir.asyncValidator]); /** @type {?} */\r\n    ((dir.valueAccessor)).writeValue(control.value);\r\n    setUpViewChangePipeline(control, dir);\r\n    setUpModelChangePipeline(control, dir);\r\n    setUpBlurPipeline(control, dir);\r\n    if (/** @type {?} */ ((dir.valueAccessor)).setDisabledState) {\r\n        control.registerOnDisabledChange((isDisabled) => { /** @type {?} */ ((/** @type {?} */ ((dir.valueAccessor)).setDisabledState))(isDisabled); });\r\n    }\r\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\r\n    dir._rawValidators.forEach((validator) => {\r\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\r\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(() => control.updateValueAndValidity());\r\n    });\r\n    dir._rawAsyncValidators.forEach((validator) => {\r\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\r\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(() => control.updateValueAndValidity());\r\n    });\r\n}\r\n/**\r\n * @param {?} control\r\n * @param {?} dir\r\n * @return {?}\r\n */\r\nfunction cleanUpControl(control, dir) {\r\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(() => _noControlError(dir)); /** @type {?} */\r\n    ((dir.valueAccessor)).registerOnTouched(() => _noControlError(dir));\r\n    dir._rawValidators.forEach((validator) => {\r\n        if (validator.registerOnValidatorChange) {\r\n            validator.registerOnValidatorChange(null);\r\n        }\r\n    });\r\n    dir._rawAsyncValidators.forEach((validator) => {\r\n        if (validator.registerOnValidatorChange) {\r\n            validator.registerOnValidatorChange(null);\r\n        }\r\n    });\r\n    if (control)\r\n        control._clearChangeFns();\r\n}\r\n/**\r\n * @param {?} control\r\n * @param {?} dir\r\n * @return {?}\r\n */\r\nfunction setUpViewChangePipeline(control, dir) {\r\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange((newValue) => {\r\n        control._pendingValue = newValue;\r\n        control._pendingChange = true;\r\n        control._pendingDirty = true;\r\n        if (control.updateOn === 'change')\r\n            updateControl(control, dir);\r\n    });\r\n}\r\n/**\r\n * @param {?} control\r\n * @param {?} dir\r\n * @return {?}\r\n */\r\nfunction setUpBlurPipeline(control, dir) {\r\n    /** @type {?} */ ((dir.valueAccessor)).registerOnTouched(() => {\r\n        control._pendingTouched = true;\r\n        if (control.updateOn === 'blur' && control._pendingChange)\r\n            updateControl(control, dir);\r\n        if (control.updateOn !== 'submit')\r\n            control.markAsTouched();\r\n    });\r\n}\r\n/**\r\n * @param {?} control\r\n * @param {?} dir\r\n * @return {?}\r\n */\r\nfunction updateControl(control, dir) {\r\n    dir.viewToModelUpdate(control._pendingValue);\r\n    if (control._pendingDirty)\r\n        control.markAsDirty();\r\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\r\n    control._pendingChange = false;\r\n}\r\n/**\r\n * @param {?} control\r\n * @param {?} dir\r\n * @return {?}\r\n */\r\nfunction setUpModelChangePipeline(control, dir) {\r\n    control.registerOnChange((newValue, emitModelEvent) => {\r\n        /** @type {?} */ ((\r\n        // control -> view\r\n        dir.valueAccessor)).writeValue(newValue);\r\n        // control -> ngModel\r\n        if (emitModelEvent)\r\n            dir.viewToModelUpdate(newValue);\r\n    });\r\n}\r\n/**\r\n * @param {?} control\r\n * @param {?} dir\r\n * @return {?}\r\n */\r\nfunction setUpFormContainer(control, dir) {\r\n    if (control == null)\r\n        _throwError(dir, 'Cannot find control with');\r\n    control.validator = Validators.compose([control.validator, dir.validator]);\r\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\r\n}\r\n/**\r\n * @param {?} dir\r\n * @return {?}\r\n */\r\nfunction _noControlError(dir) {\r\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\r\n}\r\n/**\r\n * @param {?} dir\r\n * @param {?} message\r\n * @return {?}\r\n */\r\nfunction _throwError(dir, message) {\r\n    let /** @type {?} */ messageEnd;\r\n    if (/** @type {?} */ ((dir.path)).length > 1) {\r\n        messageEnd = `path: '${(/** @type {?} */ ((dir.path))).join(' -> ')}'`;\r\n    }\r\n    else if (/** @type {?} */ ((dir.path))[0]) {\r\n        messageEnd = `name: '${dir.path}'`;\r\n    }\r\n    else {\r\n        messageEnd = 'unspecified name attribute';\r\n    }\r\n    throw new Error(`${message} ${messageEnd}`);\r\n}\r\n/**\r\n * @param {?} validators\r\n * @return {?}\r\n */\r\nfunction composeValidators(validators) {\r\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\r\n}\r\n/**\r\n * @param {?} validators\r\n * @return {?}\r\n */\r\nfunction composeAsyncValidators(validators) {\r\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\r\n        null;\r\n}\r\n/**\r\n * @param {?} changes\r\n * @param {?} viewModel\r\n * @return {?}\r\n */\r\nfunction isPropertyUpdated(changes, viewModel) {\r\n    if (!changes.hasOwnProperty('model'))\r\n        return false;\r\n    const /** @type {?} */ change = changes['model'];\r\n    if (change.isFirstChange())\r\n        return true;\r\n    return !ɵlooseIdentical(viewModel, change.currentValue);\r\n}\r\nconst BUILTIN_ACCESSORS = [\r\n    CheckboxControlValueAccessor,\r\n    RangeValueAccessor,\r\n    NumberValueAccessor,\r\n    SelectControlValueAccessor,\r\n    SelectMultipleControlValueAccessor,\r\n    RadioControlValueAccessor,\r\n];\r\n/**\r\n * @param {?} valueAccessor\r\n * @return {?}\r\n */\r\nfunction isBuiltInAccessor(valueAccessor) {\r\n    return BUILTIN_ACCESSORS.some(a => valueAccessor.constructor === a);\r\n}\r\n/**\r\n * @param {?} form\r\n * @param {?} directives\r\n * @return {?}\r\n */\r\nfunction syncPendingControls(form, directives) {\r\n    form._syncPendingControls();\r\n    directives.forEach(dir => {\r\n        const /** @type {?} */ control = /** @type {?} */ (dir.control);\r\n        if (control.updateOn === 'submit' && control._pendingChange) {\r\n            dir.viewToModelUpdate(control._pendingValue);\r\n            control._pendingChange = false;\r\n        }\r\n    });\r\n}\r\n/**\r\n * @param {?} dir\r\n * @param {?} valueAccessors\r\n * @return {?}\r\n */\r\nfunction selectValueAccessor(dir, valueAccessors) {\r\n    if (!valueAccessors)\r\n        return null;\r\n    let /** @type {?} */ defaultAccessor = undefined;\r\n    let /** @type {?} */ builtinAccessor = undefined;\r\n    let /** @type {?} */ customAccessor = undefined;\r\n    valueAccessors.forEach((v) => {\r\n        if (v.constructor === DefaultValueAccessor) {\r\n            defaultAccessor = v;\r\n        }\r\n        else if (isBuiltInAccessor(v)) {\r\n            if (builtinAccessor)\r\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\r\n            builtinAccessor = v;\r\n        }\r\n        else {\r\n            if (customAccessor)\r\n                _throwError(dir, 'More than one custom value accessor matches form control with');\r\n            customAccessor = v;\r\n        }\r\n    });\r\n    if (customAccessor)\r\n        return customAccessor;\r\n    if (builtinAccessor)\r\n        return builtinAccessor;\r\n    if (defaultAccessor)\r\n        return defaultAccessor;\r\n    _throwError(dir, 'No valid value accessor for form control with');\r\n    return null;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} list\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction removeDir(list, el) {\r\n    const /** @type {?} */ index = list.indexOf(el);\r\n    if (index > -1)\r\n        list.splice(index, 1);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\r\n *\r\n * \\@stable\r\n */\r\nclass AbstractFormGroupDirective extends ControlContainer {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this._checkParentType(); /** @type {?} */\r\n        ((this.formDirective)).addFormGroup(this);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.formDirective) {\r\n            this.formDirective.removeFormGroup(this);\r\n        }\r\n    }\r\n    /**\r\n     * Get the {\\@link FormGroup} backing this binding.\r\n     * @return {?}\r\n     */\r\n    get control() { return /** @type {?} */ ((this.formDirective)).getFormGroup(this); }\r\n    /**\r\n     * Get the path to this control group.\r\n     * @return {?}\r\n     */\r\n    get path() { return controlPath(this.name, this._parent); }\r\n    /**\r\n     * Get the {\\@link Form} to which this group belongs.\r\n     * @return {?}\r\n     */\r\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get validator() { return composeValidators(this._validators); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get asyncValidator() {\r\n        return composeAsyncValidators(this._asyncValidators);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _checkParentType() { }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass AbstractControlStatus {\r\n    /**\r\n     * @param {?} cd\r\n     */\r\n    constructor(cd) { this._cd = cd; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get ngClassUntouched() { return this._cd.control ? this._cd.control.untouched : false; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get ngClassTouched() { return this._cd.control ? this._cd.control.touched : false; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get ngClassPristine() { return this._cd.control ? this._cd.control.pristine : false; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get ngClassDirty() { return this._cd.control ? this._cd.control.dirty : false; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get ngClassValid() { return this._cd.control ? this._cd.control.valid : false; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get ngClassInvalid() { return this._cd.control ? this._cd.control.invalid : false; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get ngClassPending() { return this._cd.control ? this._cd.control.pending : false; }\r\n}\r\nconst ngControlStatusHost = {\r\n    '[class.ng-untouched]': 'ngClassUntouched',\r\n    '[class.ng-touched]': 'ngClassTouched',\r\n    '[class.ng-pristine]': 'ngClassPristine',\r\n    '[class.ng-dirty]': 'ngClassDirty',\r\n    '[class.ng-valid]': 'ngClassValid',\r\n    '[class.ng-invalid]': 'ngClassInvalid',\r\n    '[class.ng-pending]': 'ngClassPending',\r\n};\r\n/**\r\n * Directive automatically applied to Angular form controls that sets CSS classes\r\n * based on control status. The following classes are applied as the properties\r\n * become true:\r\n *\r\n * * ng-valid\r\n * * ng-invalid\r\n * * ng-pending\r\n * * ng-pristine\r\n * * ng-dirty\r\n * * ng-untouched\r\n * * ng-touched\r\n *\r\n * \\@stable\r\n */\r\nclass NgControlStatus extends AbstractControlStatus {\r\n    /**\r\n     * @param {?} cd\r\n     */\r\n    constructor(cd) { super(cd); }\r\n}\r\nNgControlStatus.decorators = [\r\n    { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\r\n];\r\n/** @nocollapse */\r\nNgControlStatus.ctorParameters = () => [\r\n    { type: NgControl, decorators: [{ type: Self },] },\r\n];\r\n/**\r\n * Directive automatically applied to Angular form groups that sets CSS classes\r\n * based on control status (valid/invalid/dirty/etc).\r\n *\r\n * \\@stable\r\n */\r\nclass NgControlStatusGroup extends AbstractControlStatus {\r\n    /**\r\n     * @param {?} cd\r\n     */\r\n    constructor(cd) { super(cd); }\r\n}\r\nNgControlStatusGroup.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\r\n                host: ngControlStatusHost\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nNgControlStatusGroup.ctorParameters = () => [\r\n    { type: ControlContainer, decorators: [{ type: Self },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\r\n */\r\nconst VALID = 'VALID';\r\n/**\r\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\r\n */\r\nconst INVALID = 'INVALID';\r\n/**\r\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\r\n * errors are not yet available for the input value.\r\n */\r\nconst PENDING = 'PENDING';\r\n/**\r\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\r\n * calculations of validity or value.\r\n */\r\nconst DISABLED = 'DISABLED';\r\n/**\r\n * @param {?} control\r\n * @param {?} path\r\n * @param {?} delimiter\r\n * @return {?}\r\n */\r\nfunction _find(control, path, delimiter) {\r\n    if (path == null)\r\n        return null;\r\n    if (!(path instanceof Array)) {\r\n        path = (/** @type {?} */ (path)).split(delimiter);\r\n    }\r\n    if (path instanceof Array && (path.length === 0))\r\n        return null;\r\n    return (/** @type {?} */ (path)).reduce((v, name) => {\r\n        if (v instanceof FormGroup) {\r\n            return v.controls[name] || null;\r\n        }\r\n        if (v instanceof FormArray) {\r\n            return v.at(/** @type {?} */ (name)) || null;\r\n        }\r\n        return null;\r\n    }, control);\r\n}\r\n/**\r\n * @param {?=} validatorOrOpts\r\n * @return {?}\r\n */\r\nfunction coerceToValidator(validatorOrOpts) {\r\n    const /** @type {?} */ validator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).validators :\r\n        validatorOrOpts));\r\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\r\n}\r\n/**\r\n * @param {?=} asyncValidator\r\n * @param {?=} validatorOrOpts\r\n * @return {?}\r\n */\r\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\r\n    const /** @type {?} */ origAsyncValidator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).asyncValidators :\r\n        asyncValidator));\r\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\r\n        origAsyncValidator || null;\r\n}\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?=} validatorOrOpts\r\n * @return {?}\r\n */\r\nfunction isOptionsObj(validatorOrOpts) {\r\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\r\n        typeof validatorOrOpts === 'object';\r\n}\r\n/**\r\n * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\r\n * {\\@link FormArray}.\r\n *\r\n * It provides some of the shared behavior that all controls and groups of controls have, like\r\n * running validators, calculating status, and resetting state. It also defines the properties\r\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\r\n * instantiated directly.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass AbstractControl {\r\n    /**\r\n     * @param {?} validator\r\n     * @param {?} asyncValidator\r\n     */\r\n    constructor(validator, asyncValidator) {\r\n        this.validator = validator;\r\n        this.asyncValidator = asyncValidator;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._onCollectionChange = () => { };\r\n        /**\r\n         * A control is `pristine` if the user has not yet changed\r\n         * the value in the UI.\r\n         *\r\n         * Note that programmatic changes to a control's value will\r\n         * *not* mark it dirty.\r\n         */\r\n        this.pristine = true;\r\n        /**\r\n         * A control is marked `touched` once the user has triggered\r\n         * a `blur` event on it.\r\n         */\r\n        this.touched = false;\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._onDisabledChange = [];\r\n    }\r\n    /**\r\n     * The parent control.\r\n     * @return {?}\r\n     */\r\n    get parent() { return this._parent; }\r\n    /**\r\n     * A control is `valid` when its `status === VALID`.\r\n     *\r\n     * In order to have this status, the control must have passed all its\r\n     * validation checks.\r\n     * @return {?}\r\n     */\r\n    get valid() { return this.status === VALID; }\r\n    /**\r\n     * A control is `invalid` when its `status === INVALID`.\r\n     *\r\n     * In order to have this status, the control must have failed\r\n     * at least one of its validation checks.\r\n     * @return {?}\r\n     */\r\n    get invalid() { return this.status === INVALID; }\r\n    /**\r\n     * A control is `pending` when its `status === PENDING`.\r\n     *\r\n     * In order to have this status, the control must be in the\r\n     * middle of conducting a validation check.\r\n     * @return {?}\r\n     */\r\n    get pending() { return this.status == PENDING; }\r\n    /**\r\n     * A control is `disabled` when its `status === DISABLED`.\r\n     *\r\n     * Disabled controls are exempt from validation checks and\r\n     * are not included in the aggregate value of their ancestor\r\n     * controls.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this.status === DISABLED; }\r\n    /**\r\n     * A control is `enabled` as long as its `status !== DISABLED`.\r\n     *\r\n     * In other words, it has a status of `VALID`, `INVALID`, or\r\n     * `PENDING`.\r\n     * @return {?}\r\n     */\r\n    get enabled() { return this.status !== DISABLED; }\r\n    /**\r\n     * A control is `dirty` if the user has changed the value\r\n     * in the UI.\r\n     *\r\n     * Note that programmatic changes to a control's value will\r\n     * *not* mark it dirty.\r\n     * @return {?}\r\n     */\r\n    get dirty() { return !this.pristine; }\r\n    /**\r\n     * A control is `untouched` if the user has not yet triggered\r\n     * a `blur` event on it.\r\n     * @return {?}\r\n     */\r\n    get untouched() { return !this.touched; }\r\n    /**\r\n     * Returns the update strategy of the `AbstractControl` (i.e.\r\n     * the event on which the control will update itself).\r\n     * Possible values: `'change'` (default) | `'blur'` | `'submit'`\r\n     * @return {?}\r\n     */\r\n    get updateOn() {\r\n        return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\r\n    }\r\n    /**\r\n     * Sets the synchronous validators that are active on this control.  Calling\r\n     * this will overwrite any existing sync validators.\r\n     * @param {?} newValidator\r\n     * @return {?}\r\n     */\r\n    setValidators(newValidator) {\r\n        this.validator = coerceToValidator(newValidator);\r\n    }\r\n    /**\r\n     * Sets the async validators that are active on this control. Calling this\r\n     * will overwrite any existing async validators.\r\n     * @param {?} newValidator\r\n     * @return {?}\r\n     */\r\n    setAsyncValidators(newValidator) {\r\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\r\n    }\r\n    /**\r\n     * Empties out the sync validator list.\r\n     * @return {?}\r\n     */\r\n    clearValidators() { this.validator = null; }\r\n    /**\r\n     * Empties out the async validator list.\r\n     * @return {?}\r\n     */\r\n    clearAsyncValidators() { this.asyncValidator = null; }\r\n    /**\r\n     * Marks the control as `touched`.\r\n     *\r\n     * This will also mark all direct ancestors as `touched` to maintain\r\n     * the model.\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    markAsTouched(opts = {}) {\r\n        (/** @type {?} */ (this)).touched = true;\r\n        if (this._parent && !opts.onlySelf) {\r\n            this._parent.markAsTouched(opts);\r\n        }\r\n    }\r\n    /**\r\n     * Marks the control as `untouched`.\r\n     *\r\n     * If the control has any children, it will also mark all children as `untouched`\r\n     * to maintain the model, and re-calculate the `touched` status of all parent\r\n     * controls.\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    markAsUntouched(opts = {}) {\r\n        (/** @type {?} */ (this)).touched = false;\r\n        this._pendingTouched = false;\r\n        this._forEachChild((control) => { control.markAsUntouched({ onlySelf: true }); });\r\n        if (this._parent && !opts.onlySelf) {\r\n            this._parent._updateTouched(opts);\r\n        }\r\n    }\r\n    /**\r\n     * Marks the control as `dirty`.\r\n     *\r\n     * This will also mark all direct ancestors as `dirty` to maintain\r\n     * the model.\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    markAsDirty(opts = {}) {\r\n        (/** @type {?} */ (this)).pristine = false;\r\n        if (this._parent && !opts.onlySelf) {\r\n            this._parent.markAsDirty(opts);\r\n        }\r\n    }\r\n    /**\r\n     * Marks the control as `pristine`.\r\n     *\r\n     * If the control has any children, it will also mark all children as `pristine`\r\n     * to maintain the model, and re-calculate the `pristine` status of all parent\r\n     * controls.\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    markAsPristine(opts = {}) {\r\n        (/** @type {?} */ (this)).pristine = true;\r\n        this._pendingDirty = false;\r\n        this._forEachChild((control) => { control.markAsPristine({ onlySelf: true }); });\r\n        if (this._parent && !opts.onlySelf) {\r\n            this._parent._updatePristine(opts);\r\n        }\r\n    }\r\n    /**\r\n     * Marks the control as `pending`.\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    markAsPending(opts = {}) {\r\n        (/** @type {?} */ (this)).status = PENDING;\r\n        if (this._parent && !opts.onlySelf) {\r\n            this._parent.markAsPending(opts);\r\n        }\r\n    }\r\n    /**\r\n     * Disables the control. This means the control will be exempt from validation checks and\r\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\r\n     *\r\n     * If the control has children, all children will be disabled to maintain the model.\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    disable(opts = {}) {\r\n        (/** @type {?} */ (this)).status = DISABLED;\r\n        (/** @type {?} */ (this)).errors = null;\r\n        this._forEachChild((control) => { control.disable({ onlySelf: true }); });\r\n        this._updateValue();\r\n        if (opts.emitEvent !== false) {\r\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\r\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\r\n        }\r\n        this._updateAncestors(!!opts.onlySelf);\r\n        this._onDisabledChange.forEach((changeFn) => changeFn(true));\r\n    }\r\n    /**\r\n     * Enables the control. This means the control will be included in validation checks and\r\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\r\n     * its validators.\r\n     *\r\n     * If the control has children, all children will be enabled.\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    enable(opts = {}) {\r\n        (/** @type {?} */ (this)).status = VALID;\r\n        this._forEachChild((control) => { control.enable({ onlySelf: true }); });\r\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\r\n        this._updateAncestors(!!opts.onlySelf);\r\n        this._onDisabledChange.forEach((changeFn) => changeFn(false));\r\n    }\r\n    /**\r\n     * @param {?} onlySelf\r\n     * @return {?}\r\n     */\r\n    _updateAncestors(onlySelf) {\r\n        if (this._parent && !onlySelf) {\r\n            this._parent.updateValueAndValidity();\r\n            this._parent._updatePristine();\r\n            this._parent._updateTouched();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @return {?}\r\n     */\r\n    setParent(parent) { this._parent = parent; }\r\n    /**\r\n     * Re-calculates the value and validation status of the control.\r\n     *\r\n     * By default, it will also update the value and validity of its ancestors.\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    updateValueAndValidity(opts = {}) {\r\n        this._setInitialStatus();\r\n        this._updateValue();\r\n        if (this.enabled) {\r\n            this._cancelExistingSubscription();\r\n            (/** @type {?} */ (this)).errors = this._runValidator();\r\n            (/** @type {?} */ (this)).status = this._calculateStatus();\r\n            if (this.status === VALID || this.status === PENDING) {\r\n                this._runAsyncValidator(opts.emitEvent);\r\n            }\r\n        }\r\n        if (opts.emitEvent !== false) {\r\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\r\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\r\n        }\r\n        if (this._parent && !opts.onlySelf) {\r\n            this._parent.updateValueAndValidity(opts);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    _updateTreeValidity(opts = { emitEvent: true }) {\r\n        this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));\r\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _setInitialStatus() {\r\n        (/** @type {?} */ (this)).status = this._allControlsDisabled() ? DISABLED : VALID;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _runValidator() {\r\n        return this.validator ? this.validator(this) : null;\r\n    }\r\n    /**\r\n     * @param {?=} emitEvent\r\n     * @return {?}\r\n     */\r\n    _runAsyncValidator(emitEvent) {\r\n        if (this.asyncValidator) {\r\n            (/** @type {?} */ (this)).status = PENDING;\r\n            const /** @type {?} */ obs = toObservable(this.asyncValidator(this));\r\n            this._asyncValidationSubscription =\r\n                obs.subscribe((errors) => this.setErrors(errors, { emitEvent }));\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _cancelExistingSubscription() {\r\n        if (this._asyncValidationSubscription) {\r\n            this._asyncValidationSubscription.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * Sets errors on a form control.\r\n     *\r\n     * This is used when validations are run manually by the user, rather than automatically.\r\n     *\r\n     * Calling `setErrors` will also update the validity of the parent control.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```\r\n     * const login = new FormControl(\"someLogin\");\r\n     * login.setErrors({\r\n     *   \"notUnique\": true\r\n     * });\r\n     *\r\n     * expect(login.valid).toEqual(false);\r\n     * expect(login.errors).toEqual({\"notUnique\": true});\r\n     *\r\n     * login.setValue(\"someOtherLogin\");\r\n     *\r\n     * expect(login.valid).toEqual(true);\r\n     * ```\r\n     * @param {?} errors\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    setErrors(errors, opts = {}) {\r\n        (/** @type {?} */ (this)).errors = errors;\r\n        this._updateControlsErrors(opts.emitEvent !== false);\r\n    }\r\n    /**\r\n     * Retrieves a child control given the control's name or path.\r\n     *\r\n     * Paths can be passed in as an array or a string delimited by a dot.\r\n     *\r\n     * To get a control nested within a `person` sub-group:\r\n     *\r\n     * * `this.form.get('person.name');`\r\n     *\r\n     * -OR-\r\n     *\r\n     * * `this.form.get(['person', 'name']);`\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    get(path) { return _find(this, path, '.'); }\r\n    /**\r\n     * Returns error data if the control with the given path has the error specified. Otherwise\r\n     * returns null or undefined.\r\n     *\r\n     * If no path is given, it checks for the error on the present control.\r\n     * @param {?} errorCode\r\n     * @param {?=} path\r\n     * @return {?}\r\n     */\r\n    getError(errorCode, path) {\r\n        const /** @type {?} */ control = path ? this.get(path) : this;\r\n        return control && control.errors ? control.errors[errorCode] : null;\r\n    }\r\n    /**\r\n     * Returns true if the control with the given path has the error specified. Otherwise\r\n     * returns false.\r\n     *\r\n     * If no path is given, it checks for the error on the present control.\r\n     * @param {?} errorCode\r\n     * @param {?=} path\r\n     * @return {?}\r\n     */\r\n    hasError(errorCode, path) { return !!this.getError(errorCode, path); }\r\n    /**\r\n     * Retrieves the top-level ancestor of this control.\r\n     * @return {?}\r\n     */\r\n    get root() {\r\n        let /** @type {?} */ x = this;\r\n        while (x._parent) {\r\n            x = x._parent;\r\n        }\r\n        return x;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} emitEvent\r\n     * @return {?}\r\n     */\r\n    _updateControlsErrors(emitEvent) {\r\n        (/** @type {?} */ (this)).status = this._calculateStatus();\r\n        if (emitEvent) {\r\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\r\n        }\r\n        if (this._parent) {\r\n            this._parent._updateControlsErrors(emitEvent);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _initObservables() {\r\n        (/** @type {?} */ (this)).valueChanges = new EventEmitter();\r\n        (/** @type {?} */ (this)).statusChanges = new EventEmitter();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _calculateStatus() {\r\n        if (this._allControlsDisabled())\r\n            return DISABLED;\r\n        if (this.errors)\r\n            return INVALID;\r\n        if (this._anyControlsHaveStatus(PENDING))\r\n            return PENDING;\r\n        if (this._anyControlsHaveStatus(INVALID))\r\n            return INVALID;\r\n        return VALID;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} status\r\n     * @return {?}\r\n     */\r\n    _anyControlsHaveStatus(status) {\r\n        return this._anyControls((control) => control.status === status);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _anyControlsDirty() {\r\n        return this._anyControls((control) => control.dirty);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _anyControlsTouched() {\r\n        return this._anyControls((control) => control.touched);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    _updatePristine(opts = {}) {\r\n        (/** @type {?} */ (this)).pristine = !this._anyControlsDirty();\r\n        if (this._parent && !opts.onlySelf) {\r\n            this._parent._updatePristine(opts);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    _updateTouched(opts = {}) {\r\n        (/** @type {?} */ (this)).touched = this._anyControlsTouched();\r\n        if (this._parent && !opts.onlySelf) {\r\n            this._parent._updateTouched(opts);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} formState\r\n     * @return {?}\r\n     */\r\n    _isBoxedValue(formState) {\r\n        return typeof formState === 'object' && formState !== null &&\r\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    _registerOnCollectionChange(fn) { this._onCollectionChange = fn; }\r\n    /**\r\n     * \\@internal\r\n     * @param {?=} opts\r\n     * @return {?}\r\n     */\r\n    _setUpdateStrategy(opts) {\r\n        if (isOptionsObj(opts) && (/** @type {?} */ (opts)).updateOn != null) {\r\n            this._updateOn = /** @type {?} */ (((/** @type {?} */ (opts)).updateOn));\r\n        }\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\r\n *\r\n * It is one of the three fundamental building blocks of Angular forms, along with\r\n * {\\@link FormGroup} and {\\@link FormArray}.\r\n *\r\n * \\@howToUse\r\n *\r\n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\r\n * first argument. Example:\r\n *\r\n * ```ts\r\n * const ctrl = new FormControl('some value');\r\n * console.log(ctrl.value);     // 'some value'\r\n * ```\r\n *\r\n * You can also initialize the control with a form state object on instantiation,\r\n * which includes both the value and whether or not the control is disabled.\r\n * You can't use the value key without the disabled key; both are required\r\n * to use this way of initialization.\r\n *\r\n * ```ts\r\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\r\n * console.log(ctrl.value);     // 'n/a'\r\n * console.log(ctrl.status);   // 'DISABLED'\r\n * ```\r\n *\r\n * The second {\\@link FormControl} argument can accept one of three things:\r\n * * a sync validator function\r\n * * an array of sync validator functions\r\n * * an options object containing validator and/or async validator functions\r\n *\r\n * Example of a single sync validator function:\r\n *\r\n * ```ts\r\n * const ctrl = new FormControl('', Validators.required);\r\n * console.log(ctrl.value);     // ''\r\n * console.log(ctrl.status);   // 'INVALID'\r\n * ```\r\n *\r\n * Example using options object:\r\n *\r\n * ```ts\r\n * const ctrl = new FormControl('', {\r\n *    validators: Validators.required,\r\n *    asyncValidators: myAsyncValidator\r\n * });\r\n * ```\r\n *\r\n * The options object can also be used to define when the control should update.\r\n * By default, the value and validity of a control updates whenever the value\r\n * changes. You can configure it to update on the blur event instead by setting\r\n * the `updateOn` option to `'blur'`.\r\n *\r\n * ```ts\r\n * const c = new FormControl('', { updateOn: 'blur' });\r\n * ```\r\n *\r\n * You can also set `updateOn` to `'submit'`, which will delay value and validity\r\n * updates until the parent form of the control fires a submit event.\r\n *\r\n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\r\n *\r\n * * **npm package**: `\\@angular/forms`\r\n *\r\n * \\@stable\r\n */\r\nclass FormControl extends AbstractControl {\r\n    /**\r\n     * @param {?=} formState\r\n     * @param {?=} validatorOrOpts\r\n     * @param {?=} asyncValidator\r\n     */\r\n    constructor(formState = null, validatorOrOpts, asyncValidator) {\r\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._onChange = [];\r\n        this._applyFormState(formState);\r\n        this._setUpdateStrategy(validatorOrOpts);\r\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\r\n        this._initObservables();\r\n    }\r\n    /**\r\n     * Set the value of the form control to `value`.\r\n     *\r\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\r\n     * and not its parent component. This defaults to false.\r\n     *\r\n     * If `emitEvent` is `true`, this\r\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\r\n     * to true (as it falls through to `updateValueAndValidity`).\r\n     *\r\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\r\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\r\n     * specified.\r\n     *\r\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\r\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\r\n     * @param {?} value\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    setValue(value, options = {}) {\r\n        (/** @type {?} */ (this)).value = this._pendingValue = value;\r\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\r\n            this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));\r\n        }\r\n        this.updateValueAndValidity(options);\r\n    }\r\n    /**\r\n     * Patches the value of a control.\r\n     *\r\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\r\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\r\n     * `FormArrays`, where it does behave differently.\r\n     * @param {?} value\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    patchValue(value, options = {}) {\r\n        this.setValue(value, options);\r\n    }\r\n    /**\r\n     * Resets the form control. This means by default:\r\n     *\r\n     * * it is marked as `pristine`\r\n     * * it is marked as `untouched`\r\n     * * value is set to null\r\n     *\r\n     * You can also reset to a specific form state by passing through a standalone\r\n     * value or a form state object that contains both a value and a disabled state\r\n     * (these are the only two properties that cannot be calculated).\r\n     *\r\n     * Ex:\r\n     *\r\n     * ```ts\r\n     * this.control.reset('Nancy');\r\n     *\r\n     * console.log(this.control.value);  // 'Nancy'\r\n     * ```\r\n     *\r\n     * OR\r\n     *\r\n     * ```\r\n     * this.control.reset({value: 'Nancy', disabled: true});\r\n     *\r\n     * console.log(this.control.value);  // 'Nancy'\r\n     * console.log(this.control.status);  // 'DISABLED'\r\n     * ```\r\n     * @param {?=} formState\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    reset(formState = null, options = {}) {\r\n        this._applyFormState(formState);\r\n        this.markAsPristine(options);\r\n        this.markAsUntouched(options);\r\n        this.setValue(this.value, options);\r\n        this._pendingChange = false;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _updateValue() { }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} condition\r\n     * @return {?}\r\n     */\r\n    _anyControls(condition) { return false; }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _allControlsDisabled() { return this.disabled; }\r\n    /**\r\n     * Register a listener for change events.\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) { this._onChange.push(fn); }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _clearChangeFns() {\r\n        this._onChange = [];\r\n        this._onDisabledChange = [];\r\n        this._onCollectionChange = () => { };\r\n    }\r\n    /**\r\n     * Register a listener for disabled events.\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnDisabledChange(fn) {\r\n        this._onDisabledChange.push(fn);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} cb\r\n     * @return {?}\r\n     */\r\n    _forEachChild(cb) { }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _syncPendingControls() {\r\n        if (this.updateOn === 'submit') {\r\n            if (this._pendingDirty)\r\n                this.markAsDirty();\r\n            if (this._pendingTouched)\r\n                this.markAsTouched();\r\n            if (this._pendingChange) {\r\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} formState\r\n     * @return {?}\r\n     */\r\n    _applyFormState(formState) {\r\n        if (this._isBoxedValue(formState)) {\r\n            (/** @type {?} */ (this)).value = this._pendingValue = formState.value;\r\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\r\n                this.enable({ onlySelf: true, emitEvent: false });\r\n        }\r\n        else {\r\n            (/** @type {?} */ (this)).value = this._pendingValue = formState;\r\n        }\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\r\n * instances.\r\n *\r\n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\r\n * with each control name as the key.  It calculates its status by reducing the statuses\r\n * of its children. For example, if one of the controls in a group is invalid, the entire\r\n * group becomes invalid.\r\n *\r\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\r\n * along with {\\@link FormControl} and {\\@link FormArray}.\r\n *\r\n * \\@howToUse\r\n *\r\n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\r\n * argument. The key for each child will be the name under which it is registered.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   first: new FormControl('Nancy', Validators.minLength(2)),\r\n *   last: new FormControl('Drew'),\r\n * });\r\n *\r\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\r\n * console.log(form.status);  // 'VALID'\r\n * ```\r\n *\r\n * You can also include group-level validators as the second arg, or group-level async\r\n * validators as the third arg. These come in handy when you want to perform validation\r\n * that considers the value of more than one child control.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   password: new FormControl('', Validators.minLength(2)),\r\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\r\n * }, passwordMatchValidator);\r\n *\r\n *\r\n * function passwordMatchValidator(g: FormGroup) {\r\n *    return g.get('password').value === g.get('passwordConfirm').value\r\n *       ? null : {'mismatch': true};\r\n * }\r\n * ```\r\n *\r\n * Like {\\@link FormControl} instances, you can alternatively choose to pass in\r\n * validators and async validators as part of an options object.\r\n *\r\n * ```\r\n * const form = new FormGroup({\r\n *   password: new FormControl('')\r\n *   passwordConfirm: new FormControl('')\r\n * }, {validators: passwordMatchValidator, asyncValidators: otherValidator});\r\n * ```\r\n *\r\n * The options object can also be used to set a default value for each child\r\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\r\n * group level, all child controls will default to 'blur', unless the child\r\n * has explicitly specified a different `updateOn` value.\r\n *\r\n * ```ts\r\n * const c = new FormGroup({\r\n *    one: new FormControl()\r\n * }, {updateOn: 'blur'});\r\n * ```\r\n *\r\n * * **npm package**: `\\@angular/forms`\r\n *\r\n * \\@stable\r\n */\r\nclass FormGroup extends AbstractControl {\r\n    /**\r\n     * @param {?} controls\r\n     * @param {?=} validatorOrOpts\r\n     * @param {?=} asyncValidator\r\n     */\r\n    constructor(controls, validatorOrOpts, asyncValidator) {\r\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\r\n        this.controls = controls;\r\n        this._initObservables();\r\n        this._setUpdateStrategy(validatorOrOpts);\r\n        this._setUpControls();\r\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\r\n    }\r\n    /**\r\n     * Registers a control with the group's list of controls.\r\n     *\r\n     * This method does not update the value or validity of the control, so for most cases you'll want\r\n     * to use {\\@link FormGroup#addControl addControl} instead.\r\n     * @param {?} name\r\n     * @param {?} control\r\n     * @return {?}\r\n     */\r\n    registerControl(name, control) {\r\n        if (this.controls[name])\r\n            return this.controls[name];\r\n        this.controls[name] = control;\r\n        control.setParent(this);\r\n        control._registerOnCollectionChange(this._onCollectionChange);\r\n        return control;\r\n    }\r\n    /**\r\n     * Add a control to this group.\r\n     * @param {?} name\r\n     * @param {?} control\r\n     * @return {?}\r\n     */\r\n    addControl(name, control) {\r\n        this.registerControl(name, control);\r\n        this.updateValueAndValidity();\r\n        this._onCollectionChange();\r\n    }\r\n    /**\r\n     * Remove a control from this group.\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    removeControl(name) {\r\n        if (this.controls[name])\r\n            this.controls[name]._registerOnCollectionChange(() => { });\r\n        delete (this.controls[name]);\r\n        this.updateValueAndValidity();\r\n        this._onCollectionChange();\r\n    }\r\n    /**\r\n     * Replace an existing control.\r\n     * @param {?} name\r\n     * @param {?} control\r\n     * @return {?}\r\n     */\r\n    setControl(name, control) {\r\n        if (this.controls[name])\r\n            this.controls[name]._registerOnCollectionChange(() => { });\r\n        delete (this.controls[name]);\r\n        if (control)\r\n            this.registerControl(name, control);\r\n        this.updateValueAndValidity();\r\n        this._onCollectionChange();\r\n    }\r\n    /**\r\n     * Check whether there is an enabled control with the given name in the group.\r\n     *\r\n     * It will return false for disabled controls. If you'd like to check for existence in the group\r\n     * only, use {\\@link AbstractControl#get get} instead.\r\n     * @param {?} controlName\r\n     * @return {?}\r\n     */\r\n    contains(controlName) {\r\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\r\n    }\r\n    /**\r\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\r\n     *  the structure of the group, with control names as keys.\r\n     *\r\n     * This method performs strict checks, so it will throw an error if you try\r\n     * to set the value of a control that doesn't exist or if you exclude the\r\n     * value of a control.\r\n     *\r\n     *  ### Example\r\n     *\r\n     *  ```\r\n     *  const form = new FormGroup({\r\n     *     first: new FormControl(),\r\n     *     last: new FormControl()\r\n     *  });\r\n     *  console.log(form.value);   // {first: null, last: null}\r\n     *\r\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\r\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\r\n     *\r\n     *  ```\r\n     * @param {?} value\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    setValue(value, options = {}) {\r\n        this._checkAllValuesPresent(value);\r\n        Object.keys(value).forEach(name => {\r\n            this._throwIfControlMissing(name);\r\n            this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\r\n        });\r\n        this.updateValueAndValidity(options);\r\n    }\r\n    /**\r\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\r\n     *  names as keys, and will do its best to match the values to the correct controls\r\n     *  in the group.\r\n     *\r\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\r\n     *\r\n     *  ### Example\r\n     *\r\n     *  ```\r\n     *  const form = new FormGroup({\r\n     *     first: new FormControl(),\r\n     *     last: new FormControl()\r\n     *  });\r\n     *  console.log(form.value);   // {first: null, last: null}\r\n     *\r\n     *  form.patchValue({first: 'Nancy'});\r\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\r\n     *\r\n     *  ```\r\n     * @param {?} value\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    patchValue(value, options = {}) {\r\n        Object.keys(value).forEach(name => {\r\n            if (this.controls[name]) {\r\n                this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\r\n            }\r\n        });\r\n        this.updateValueAndValidity(options);\r\n    }\r\n    /**\r\n     * Resets the {\\@link FormGroup}. This means by default:\r\n     *\r\n     * * The group and all descendants are marked `pristine`\r\n     * * The group and all descendants are marked `untouched`\r\n     * * The value of all descendants will be null or null maps\r\n     *\r\n     * You can also reset to a specific form state by passing in a map of states\r\n     * that matches the structure of your form, with control names as keys. The state\r\n     * can be a standalone value or a form state object with both a value and a disabled\r\n     * status.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```ts\r\n     * this.form.reset({first: 'name', last: 'last name'});\r\n     *\r\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\r\n     * ```\r\n     *\r\n     * - OR -\r\n     *\r\n     * ```\r\n     * this.form.reset({\r\n     *   first: {value: 'name', disabled: true},\r\n     *   last: 'last'\r\n     * });\r\n     *\r\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\r\n     * console.log(this.form.get('first').status);  // 'DISABLED'\r\n     * ```\r\n     * @param {?=} value\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    reset(value = {}, options = {}) {\r\n        this._forEachChild((control, name) => {\r\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\r\n        });\r\n        this.updateValueAndValidity(options);\r\n        this._updatePristine(options);\r\n        this._updateTouched(options);\r\n    }\r\n    /**\r\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\r\n     *\r\n     * If you'd like to include all values regardless of disabled status, use this method.\r\n     * Otherwise, the `value` property is the best way to get the value of the group.\r\n     * @return {?}\r\n     */\r\n    getRawValue() {\r\n        return this._reduceChildren({}, (acc, control, name) => {\r\n            acc[name] = control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\r\n            return acc;\r\n        });\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _syncPendingControls() {\r\n        let /** @type {?} */ subtreeUpdated = this._reduceChildren(false, (updated, child) => {\r\n            return child._syncPendingControls() ? true : updated;\r\n        });\r\n        if (subtreeUpdated)\r\n            this.updateValueAndValidity({ onlySelf: true });\r\n        return subtreeUpdated;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    _throwIfControlMissing(name) {\r\n        if (!Object.keys(this.controls).length) {\r\n            throw new Error(`\r\n        There are no form controls registered with this group yet.  If you're using ngModel,\r\n        you may want to check next tick (e.g. use setTimeout).\r\n      `);\r\n        }\r\n        if (!this.controls[name]) {\r\n            throw new Error(`Cannot find form control with name: ${name}.`);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} cb\r\n     * @return {?}\r\n     */\r\n    _forEachChild(cb) {\r\n        Object.keys(this.controls).forEach(k => cb(this.controls[k], k));\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _setUpControls() {\r\n        this._forEachChild((control) => {\r\n            control.setParent(this);\r\n            control._registerOnCollectionChange(this._onCollectionChange);\r\n        });\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _updateValue() { (/** @type {?} */ (this)).value = this._reduceValue(); }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} condition\r\n     * @return {?}\r\n     */\r\n    _anyControls(condition) {\r\n        let /** @type {?} */ res = false;\r\n        this._forEachChild((control, name) => {\r\n            res = res || (this.contains(name) && condition(control));\r\n        });\r\n        return res;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _reduceValue() {\r\n        return this._reduceChildren({}, (acc, control, name) => {\r\n            if (control.enabled || this.disabled) {\r\n                acc[name] = control.value;\r\n            }\r\n            return acc;\r\n        });\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} initValue\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    _reduceChildren(initValue, fn) {\r\n        let /** @type {?} */ res = initValue;\r\n        this._forEachChild((control, name) => { res = fn(res, control, name); });\r\n        return res;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _allControlsDisabled() {\r\n        for (const /** @type {?} */ controlName of Object.keys(this.controls)) {\r\n            if (this.controls[controlName].enabled) {\r\n                return false;\r\n            }\r\n        }\r\n        return Object.keys(this.controls).length > 0 || this.disabled;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _checkAllValuesPresent(value) {\r\n        this._forEachChild((control, name) => {\r\n            if (value[name] === undefined) {\r\n                throw new Error(`Must supply a value for form control with name: '${name}'.`);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\r\n * {\\@link FormGroup} or {\\@link FormArray} instances.\r\n *\r\n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\r\n * It calculates its status by reducing the statuses of its children. For example, if one of\r\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\r\n *\r\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\r\n * along with {\\@link FormControl} and {\\@link FormGroup}.\r\n *\r\n * \\@howToUse\r\n *\r\n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\r\n * argument.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * const arr = new FormArray([\r\n *   new FormControl('Nancy', Validators.minLength(2)),\r\n *   new FormControl('Drew'),\r\n * ]);\r\n *\r\n * console.log(arr.value);   // ['Nancy', 'Drew']\r\n * console.log(arr.status);  // 'VALID'\r\n * ```\r\n *\r\n * You can also include array-level validators and async validators. These come in handy\r\n * when you want to perform validation that considers the value of more than one child\r\n * control.\r\n *\r\n * The two types of validators can be passed in separately as the second and third arg\r\n * respectively, or together as part of an options object.\r\n *\r\n * ```\r\n * const arr = new FormArray([\r\n *   new FormControl('Nancy'),\r\n *   new FormControl('Drew')\r\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\r\n * ```\r\n *\r\n * The options object can also be used to set a default value for each child\r\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\r\n * array level, all child controls will default to 'blur', unless the child\r\n * has explicitly specified a different `updateOn` value.\r\n *\r\n * ```ts\r\n * const c = new FormArray([\r\n *    new FormControl()\r\n * ], {updateOn: 'blur'});\r\n * ```\r\n *\r\n * ### Adding or removing controls\r\n *\r\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\r\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\r\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\r\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\r\n * as broken change detection.\r\n *\r\n * * **npm package**: `\\@angular/forms`\r\n *\r\n * \\@stable\r\n */\r\nclass FormArray extends AbstractControl {\r\n    /**\r\n     * @param {?} controls\r\n     * @param {?=} validatorOrOpts\r\n     * @param {?=} asyncValidator\r\n     */\r\n    constructor(controls, validatorOrOpts, asyncValidator) {\r\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\r\n        this.controls = controls;\r\n        this._initObservables();\r\n        this._setUpdateStrategy(validatorOrOpts);\r\n        this._setUpControls();\r\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\r\n    }\r\n    /**\r\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    at(index) { return this.controls[index]; }\r\n    /**\r\n     * Insert a new {\\@link AbstractControl} at the end of the array.\r\n     * @param {?} control\r\n     * @return {?}\r\n     */\r\n    push(control) {\r\n        this.controls.push(control);\r\n        this._registerControl(control);\r\n        this.updateValueAndValidity();\r\n        this._onCollectionChange();\r\n    }\r\n    /**\r\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\r\n     * @param {?} index\r\n     * @param {?} control\r\n     * @return {?}\r\n     */\r\n    insert(index, control) {\r\n        this.controls.splice(index, 0, control);\r\n        this._registerControl(control);\r\n        this.updateValueAndValidity();\r\n        this._onCollectionChange();\r\n    }\r\n    /**\r\n     * Remove the control at the given `index` in the array.\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    removeAt(index) {\r\n        if (this.controls[index])\r\n            this.controls[index]._registerOnCollectionChange(() => { });\r\n        this.controls.splice(index, 1);\r\n        this.updateValueAndValidity();\r\n        this._onCollectionChange();\r\n    }\r\n    /**\r\n     * Replace an existing control.\r\n     * @param {?} index\r\n     * @param {?} control\r\n     * @return {?}\r\n     */\r\n    setControl(index, control) {\r\n        if (this.controls[index])\r\n            this.controls[index]._registerOnCollectionChange(() => { });\r\n        this.controls.splice(index, 1);\r\n        if (control) {\r\n            this.controls.splice(index, 0, control);\r\n            this._registerControl(control);\r\n        }\r\n        this.updateValueAndValidity();\r\n        this._onCollectionChange();\r\n    }\r\n    /**\r\n     * Length of the control array.\r\n     * @return {?}\r\n     */\r\n    get length() { return this.controls.length; }\r\n    /**\r\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\r\n     *  the structure of the control.\r\n     *\r\n     * This method performs strict checks, so it will throw an error if you try\r\n     * to set the value of a control that doesn't exist or if you exclude the\r\n     * value of a control.\r\n     *\r\n     *  ### Example\r\n     *\r\n     *  ```\r\n     *  const arr = new FormArray([\r\n     *     new FormControl(),\r\n     *     new FormControl()\r\n     *  ]);\r\n     *  console.log(arr.value);   // [null, null]\r\n     *\r\n     *  arr.setValue(['Nancy', 'Drew']);\r\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\r\n     *  ```\r\n     * @param {?} value\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    setValue(value, options = {}) {\r\n        this._checkAllValuesPresent(value);\r\n        value.forEach((newValue, index) => {\r\n            this._throwIfControlMissing(index);\r\n            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\r\n        });\r\n        this.updateValueAndValidity(options);\r\n    }\r\n    /**\r\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\r\n     *  structure of the control, and will do its best to match the values to the correct\r\n     *  controls in the group.\r\n     *\r\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\r\n     *\r\n     *  ### Example\r\n     *\r\n     *  ```\r\n     *  const arr = new FormArray([\r\n     *     new FormControl(),\r\n     *     new FormControl()\r\n     *  ]);\r\n     *  console.log(arr.value);   // [null, null]\r\n     *\r\n     *  arr.patchValue(['Nancy']);\r\n     *  console.log(arr.value);   // ['Nancy', null]\r\n     *  ```\r\n     * @param {?} value\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    patchValue(value, options = {}) {\r\n        value.forEach((newValue, index) => {\r\n            if (this.at(index)) {\r\n                this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\r\n            }\r\n        });\r\n        this.updateValueAndValidity(options);\r\n    }\r\n    /**\r\n     * Resets the {\\@link FormArray}. This means by default:\r\n     *\r\n     * * The array and all descendants are marked `pristine`\r\n     * * The array and all descendants are marked `untouched`\r\n     * * The value of all descendants will be null or null maps\r\n     *\r\n     * You can also reset to a specific form state by passing in an array of states\r\n     * that matches the structure of the control. The state can be a standalone value\r\n     * or a form state object with both a value and a disabled status.\r\n     *\r\n     * ### Example\r\n     *\r\n     * ```ts\r\n     * this.arr.reset(['name', 'last name']);\r\n     *\r\n     * console.log(this.arr.value);  // ['name', 'last name']\r\n     * ```\r\n     *\r\n     * - OR -\r\n     *\r\n     * ```\r\n     * this.arr.reset([\r\n     *   {value: 'name', disabled: true},\r\n     *   'last'\r\n     * ]);\r\n     *\r\n     * console.log(this.arr.value);  // ['name', 'last name']\r\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\r\n     * ```\r\n     * @param {?=} value\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    reset(value = [], options = {}) {\r\n        this._forEachChild((control, index) => {\r\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\r\n        });\r\n        this.updateValueAndValidity(options);\r\n        this._updatePristine(options);\r\n        this._updateTouched(options);\r\n    }\r\n    /**\r\n     * The aggregate value of the array, including any disabled controls.\r\n     *\r\n     * If you'd like to include all values regardless of disabled status, use this method.\r\n     * Otherwise, the `value` property is the best way to get the value of the array.\r\n     * @return {?}\r\n     */\r\n    getRawValue() {\r\n        return this.controls.map((control) => {\r\n            return control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\r\n        });\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _syncPendingControls() {\r\n        let /** @type {?} */ subtreeUpdated = this.controls.reduce((updated, child) => {\r\n            return child._syncPendingControls() ? true : updated;\r\n        }, false);\r\n        if (subtreeUpdated)\r\n            this.updateValueAndValidity({ onlySelf: true });\r\n        return subtreeUpdated;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _throwIfControlMissing(index) {\r\n        if (!this.controls.length) {\r\n            throw new Error(`\r\n        There are no form controls registered with this array yet.  If you're using ngModel,\r\n        you may want to check next tick (e.g. use setTimeout).\r\n      `);\r\n        }\r\n        if (!this.at(index)) {\r\n            throw new Error(`Cannot find form control at index ${index}`);\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} cb\r\n     * @return {?}\r\n     */\r\n    _forEachChild(cb) {\r\n        this.controls.forEach((control, index) => { cb(control, index); });\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _updateValue() {\r\n        (/** @type {?} */ (this)).value =\r\n            this.controls.filter((control) => control.enabled || this.disabled)\r\n                .map((control) => control.value);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} condition\r\n     * @return {?}\r\n     */\r\n    _anyControls(condition) {\r\n        return this.controls.some((control) => control.enabled && condition(control));\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _setUpControls() {\r\n        this._forEachChild((control) => this._registerControl(control));\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _checkAllValuesPresent(value) {\r\n        this._forEachChild((control, i) => {\r\n            if (value[i] === undefined) {\r\n                throw new Error(`Must supply a value for form control at index: ${i}.`);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _allControlsDisabled() {\r\n        for (const /** @type {?} */ control of this.controls) {\r\n            if (control.enabled)\r\n                return false;\r\n        }\r\n        return this.controls.length > 0 || this.disabled;\r\n    }\r\n    /**\r\n     * @param {?} control\r\n     * @return {?}\r\n     */\r\n    _registerControl(control) {\r\n        control.setParent(this);\r\n        control._registerOnCollectionChange(this._onCollectionChange);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst formDirectiveProvider = {\r\n    provide: ControlContainer,\r\n    useExisting: forwardRef(() => NgForm)\r\n};\r\nconst resolvedPromise = Promise.resolve(null);\r\n/**\r\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\r\n * to track aggregate form value and validation status.\r\n *\r\n * \\@howToUse\r\n *\r\n * As soon as you import the `FormsModule`, this directive becomes active by default on\r\n * all `<form>` tags.  You don't need to add a special selector.\r\n *\r\n * You can export the directive into a local template variable using `ngForm` as the key\r\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\r\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\r\n * will give you access to the aggregate value and validity status of the form, as well as\r\n * user interaction properties like `dirty` and `touched`.\r\n *\r\n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\r\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\r\n * sub-groups within the form.\r\n *\r\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\r\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\r\n * submission event.\r\n *\r\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\r\n * If you want to import the `FormsModule` but skip its usage in some forms,\r\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\r\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\r\n * unnecessary because the `<form>` tags are inert. In that case, you would\r\n * refrain from using the `formGroup` directive.\r\n *\r\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\r\n *\r\n * * **npm package**: `\\@angular/forms`\r\n *\r\n * * **NgModule**: `FormsModule`\r\n *\r\n *  \\@stable\r\n */\r\nclass NgForm extends ControlContainer {\r\n    /**\r\n     * @param {?} validators\r\n     * @param {?} asyncValidators\r\n     */\r\n    constructor(validators, asyncValidators) {\r\n        super();\r\n        this.submitted = false;\r\n        this._directives = [];\r\n        this.ngSubmit = new EventEmitter();\r\n        this.form =\r\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() { this._setUpdateStrategy(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get formDirective() { return this; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get control() { return this.form; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get path() { return []; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get controls() { return this.form.controls; }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    addControl(dir) {\r\n        resolvedPromise.then(() => {\r\n            const /** @type {?} */ container = this._findContainer(dir.path);\r\n            (/** @type {?} */ (dir)).control = /** @type {?} */ (container.registerControl(dir.name, dir.control));\r\n            setUpControl(dir.control, dir);\r\n            dir.control.updateValueAndValidity({ emitEvent: false });\r\n            this._directives.push(dir);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    getControl(dir) { return /** @type {?} */ (this.form.get(dir.path)); }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    removeControl(dir) {\r\n        resolvedPromise.then(() => {\r\n            const /** @type {?} */ container = this._findContainer(dir.path);\r\n            if (container) {\r\n                container.removeControl(dir.name);\r\n            }\r\n            removeDir(this._directives, dir);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    addFormGroup(dir) {\r\n        resolvedPromise.then(() => {\r\n            const /** @type {?} */ container = this._findContainer(dir.path);\r\n            const /** @type {?} */ group = new FormGroup({});\r\n            setUpFormContainer(group, dir);\r\n            container.registerControl(dir.name, group);\r\n            group.updateValueAndValidity({ emitEvent: false });\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    removeFormGroup(dir) {\r\n        resolvedPromise.then(() => {\r\n            const /** @type {?} */ container = this._findContainer(dir.path);\r\n            if (container) {\r\n                container.removeControl(dir.name);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    getFormGroup(dir) { return /** @type {?} */ (this.form.get(dir.path)); }\r\n    /**\r\n     * @param {?} dir\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    updateModel(dir, value) {\r\n        resolvedPromise.then(() => {\r\n            const /** @type {?} */ ctrl = /** @type {?} */ (this.form.get(/** @type {?} */ ((dir.path))));\r\n            ctrl.setValue(value);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setValue(value) { this.control.setValue(value); }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    onSubmit($event) {\r\n        (/** @type {?} */ (this)).submitted = true;\r\n        syncPendingControls(this.form, this._directives);\r\n        this.ngSubmit.emit($event);\r\n        return false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    onReset() { this.resetForm(); }\r\n    /**\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    resetForm(value = undefined) {\r\n        this.form.reset(value);\r\n        (/** @type {?} */ (this)).submitted = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _setUpdateStrategy() {\r\n        if (this.options && this.options.updateOn != null) {\r\n            this.form._updateOn = this.options.updateOn;\r\n        }\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    _findContainer(path) {\r\n        path.pop();\r\n        return path.length ? /** @type {?} */ (this.form.get(path)) : this.form;\r\n    }\r\n}\r\nNgForm.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\r\n                providers: [formDirectiveProvider],\r\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\r\n                outputs: ['ngSubmit'],\r\n                exportAs: 'ngForm'\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nNgForm.ctorParameters = () => [\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\r\n];\r\nNgForm.propDecorators = {\r\n    \"options\": [{ type: Input, args: ['ngFormOptions',] },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst FormErrorExamples = {\r\n    formControlName: `\r\n    <div [formGroup]=\"myGroup\">\r\n      <input formControlName=\"firstName\">\r\n    </div>\r\n\r\n    In your class:\r\n\r\n    this.myGroup = new FormGroup({\r\n       firstName: new FormControl()\r\n    });`,\r\n    formGroupName: `\r\n    <div [formGroup]=\"myGroup\">\r\n       <div formGroupName=\"person\">\r\n          <input formControlName=\"firstName\">\r\n       </div>\r\n    </div>\r\n\r\n    In your class:\r\n\r\n    this.myGroup = new FormGroup({\r\n       person: new FormGroup({ firstName: new FormControl() })\r\n    });`,\r\n    formArrayName: `\r\n    <div [formGroup]=\"myGroup\">\r\n      <div formArrayName=\"cities\">\r\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\r\n          <input [formControlName]=\"i\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    In your class:\r\n\r\n    this.cityArray = new FormArray([new FormControl('SF')]);\r\n    this.myGroup = new FormGroup({\r\n      cities: this.cityArray\r\n    });`,\r\n    ngModelGroup: `\r\n    <form>\r\n       <div ngModelGroup=\"person\">\r\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\r\n       </div>\r\n    </form>`,\r\n    ngModelWithFormGroup: `\r\n    <div [formGroup]=\"myGroup\">\r\n       <input formControlName=\"firstName\">\r\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\r\n    </div>\r\n  `\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass TemplateDrivenErrors {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static modelParentException() {\r\n        throw new Error(`\r\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\r\n      formGroup's partner directive \"formControlName\" instead.  Example:\r\n\r\n      ${FormErrorExamples.formControlName}\r\n\r\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\r\n\r\n      Example:\r\n\r\n      ${FormErrorExamples.ngModelWithFormGroup}`);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static formGroupNameException() {\r\n        throw new Error(`\r\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\r\n\r\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\r\n\r\n      ${FormErrorExamples.formGroupName}\r\n\r\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\r\n\r\n      ${FormErrorExamples.ngModelGroup}`);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static missingNameException() {\r\n        throw new Error(`If ngModel is used within a form tag, either the name attribute must be set or the form\r\n      control must be defined as 'standalone' in ngModelOptions.\r\n\r\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\r\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static modelGroupParentException() {\r\n        throw new Error(`\r\n      ngModelGroup cannot be used with a parent formGroup directive.\r\n\r\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\r\n\r\n      ${FormErrorExamples.formGroupName}\r\n\r\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\r\n\r\n      ${FormErrorExamples.ngModelGroup}`);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst modelGroupProvider = {\r\n    provide: ControlContainer,\r\n    useExisting: forwardRef(() => NgModelGroup)\r\n};\r\n/**\r\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\r\n *\r\n * \\@howToUse\r\n *\r\n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\r\n * within `<form>` tags).\r\n *\r\n * Use this directive if you'd like to create a sub-group within a form. This can\r\n * come in handy if you want to validate a sub-group of your form separately from\r\n * the rest of your form, or if some values in your domain model make more sense to\r\n * consume together in a nested object.\r\n *\r\n * Pass in the name you'd like this sub-group to have and it will become the key\r\n * for the sub-group in the form's full value. You can also export the directive into\r\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\r\n *\r\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\r\n *\r\n * * **npm package**: `\\@angular/forms`\r\n *\r\n * * **NgModule**: `FormsModule`\r\n *\r\n * \\@stable\r\n */\r\nclass NgModelGroup extends AbstractFormGroupDirective {\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} validators\r\n     * @param {?} asyncValidators\r\n     */\r\n    constructor(parent, validators, asyncValidators) {\r\n        super();\r\n        this._parent = parent;\r\n        this._validators = validators;\r\n        this._asyncValidators = asyncValidators;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _checkParentType() {\r\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\r\n            TemplateDrivenErrors.modelGroupParentException();\r\n        }\r\n    }\r\n}\r\nNgModelGroup.decorators = [\r\n    { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\r\n];\r\n/** @nocollapse */\r\nNgModelGroup.ctorParameters = () => [\r\n    { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\r\n];\r\nNgModelGroup.propDecorators = {\r\n    \"name\": [{ type: Input, args: ['ngModelGroup',] },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst formControlBinding = {\r\n    provide: NgControl,\r\n    useExisting: forwardRef(() => NgModel)\r\n};\r\n/**\r\n * `ngModel` forces an additional change detection run when its inputs change:\r\n * E.g.:\r\n * ```\r\n * <div>{{myModel.valid}}</div>\r\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\r\n * ```\r\n * I.e. `ngModel` can export itself on the element and then be used in the template.\r\n * Normally, this would result in expressions before the `input` that use the exported directive\r\n * to have and old value as they have been\r\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\r\n * detection run.\r\n *\r\n * Notes:\r\n * - this is just one extra run no matter how many `ngModel` have been changed.\r\n * - this is a general problem when using `exportAs` for directives!\r\n */\r\nconst resolvedPromise$1 = Promise.resolve(null);\r\n/**\r\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\r\n * to a form control element.\r\n *\r\n * The {\\@link FormControl} instance will track the value, user interaction, and\r\n * validation status of the control and keep the view synced with the model. If used\r\n * within a parent form, the directive will also register itself with the form as a child\r\n * control.\r\n *\r\n * \\@howToUse\r\n *\r\n * This directive can be used by itself or as part of a larger form. All you need is the\r\n * `ngModel` selector to activate it.\r\n *\r\n * It accepts a domain model as an optional {\\@link Input}. If you have a one-way binding\r\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\r\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\r\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\r\n * the domain model in your class as well.\r\n *\r\n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\r\n * validity state), you can also export the directive into a local template variable using\r\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\r\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\r\n * will fall through to the control anyway, so you can access them directly. You can see a\r\n * full list of properties directly available in {\\@link AbstractControlDirective}.\r\n *\r\n * The following is an example of a simple standalone control using `ngModel`:\r\n *\r\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\r\n *\r\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\r\n * so that the control can be registered with the parent form under that name.\r\n *\r\n * It's worth noting that in the context of a parent form, you often can skip one-way or\r\n * two-way binding because the parent form will sync the value for you. You can access\r\n * its properties by exporting it into a local template variable using `ngForm` (ex:\r\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\r\n *\r\n * If you do need to populate initial values into your form, using a one-way binding for\r\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\r\n * than the domain model's value on submit.\r\n *\r\n * Take a look at an example of using `ngModel` within a form:\r\n *\r\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\r\n *\r\n * To see `ngModel` examples with different form control types, see:\r\n *\r\n * * Radio buttons: {\\@link RadioControlValueAccessor}\r\n * * Selects: {\\@link SelectControlValueAccessor}\r\n *\r\n * **npm package**: `\\@angular/forms`\r\n *\r\n * **NgModule**: `FormsModule`\r\n *\r\n *  \\@stable\r\n */\r\nclass NgModel extends NgControl {\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} validators\r\n     * @param {?} asyncValidators\r\n     * @param {?} valueAccessors\r\n     */\r\n    constructor(parent, validators, asyncValidators, valueAccessors) {\r\n        super();\r\n        this.control = new FormControl();\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._registered = false;\r\n        this.update = new EventEmitter();\r\n        this._parent = parent;\r\n        this._rawValidators = validators || [];\r\n        this._rawAsyncValidators = asyncValidators || [];\r\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        this._checkForErrors();\r\n        if (!this._registered)\r\n            this._setUpControl();\r\n        if ('isDisabled' in changes) {\r\n            this._updateDisabled(changes);\r\n        }\r\n        if (isPropertyUpdated(changes, this.viewModel)) {\r\n            this._updateValue(this.model);\r\n            this.viewModel = this.model;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this.formDirective && this.formDirective.removeControl(this); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get path() {\r\n        return this._parent ? controlPath(this.name, this._parent) : [this.name];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get validator() { return composeValidators(this._rawValidators); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get asyncValidator() {\r\n        return composeAsyncValidators(this._rawAsyncValidators);\r\n    }\r\n    /**\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    viewToModelUpdate(newValue) {\r\n        this.viewModel = newValue;\r\n        this.update.emit(newValue);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _setUpControl() {\r\n        this._setUpdateStrategy();\r\n        this._isStandalone() ? this._setUpStandalone() :\r\n            this.formDirective.addControl(this);\r\n        this._registered = true;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _setUpdateStrategy() {\r\n        if (this.options && this.options.updateOn != null) {\r\n            this.control._updateOn = this.options.updateOn;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _isStandalone() {\r\n        return !this._parent || !!(this.options && this.options.standalone);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _setUpStandalone() {\r\n        setUpControl(this.control, this);\r\n        this.control.updateValueAndValidity({ emitEvent: false });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _checkForErrors() {\r\n        if (!this._isStandalone()) {\r\n            this._checkParentType();\r\n        }\r\n        this._checkName();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _checkParentType() {\r\n        if (!(this._parent instanceof NgModelGroup) &&\r\n            this._parent instanceof AbstractFormGroupDirective) {\r\n            TemplateDrivenErrors.formGroupNameException();\r\n        }\r\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\r\n            TemplateDrivenErrors.modelParentException();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _checkName() {\r\n        if (this.options && this.options.name)\r\n            this.name = this.options.name;\r\n        if (!this._isStandalone() && !this.name) {\r\n            TemplateDrivenErrors.missingNameException();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _updateValue(value) {\r\n        resolvedPromise$1.then(() => { this.control.setValue(value, { emitViewToModelChange: false }); });\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    _updateDisabled(changes) {\r\n        const /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\r\n        const /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\r\n        resolvedPromise$1.then(() => {\r\n            if (isDisabled && !this.control.disabled) {\r\n                this.control.disable();\r\n            }\r\n            else if (!isDisabled && this.control.disabled) {\r\n                this.control.enable();\r\n            }\r\n        });\r\n    }\r\n}\r\nNgModel.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngModel]:not([formControlName]):not([formControl])',\r\n                providers: [formControlBinding],\r\n                exportAs: 'ngModel'\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nNgModel.ctorParameters = () => [\r\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\r\n];\r\nNgModel.propDecorators = {\r\n    \"name\": [{ type: Input },],\r\n    \"isDisabled\": [{ type: Input, args: ['disabled',] },],\r\n    \"model\": [{ type: Input, args: ['ngModel',] },],\r\n    \"options\": [{ type: Input, args: ['ngModelOptions',] },],\r\n    \"update\": [{ type: Output, args: ['ngModelChange',] },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass ReactiveErrors {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static controlParentException() {\r\n        throw new Error(`formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\r\n       directive and pass it an existing FormGroup instance (you can create one in your class).\r\n\r\n      Example:\r\n\r\n      ${FormErrorExamples.formControlName}`);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static ngModelGroupException() {\r\n        throw new Error(`formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\r\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\r\n\r\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\r\n\r\n        ${FormErrorExamples.formGroupName}\r\n\r\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\r\n\r\n        ${FormErrorExamples.ngModelGroup}`);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static missingFormException() {\r\n        throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\r\n\r\n       Example:\r\n\r\n       ${FormErrorExamples.formControlName}`);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static groupParentException() {\r\n        throw new Error(`formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\r\n      directive and pass it an existing FormGroup instance (you can create one in your class).\r\n\r\n      Example:\r\n\r\n      ${FormErrorExamples.formGroupName}`);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static arrayParentException() {\r\n        throw new Error(`formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\r\n       directive and pass it an existing FormGroup instance (you can create one in your class).\r\n\r\n        Example:\r\n\r\n        ${FormErrorExamples.formArrayName}`);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static disabledAttrWarning() {\r\n        console.warn(`\r\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\r\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\r\n      you. We recommend using this approach to avoid 'changed after checked' errors.\r\n       \r\n      Example: \r\n      form = new FormGroup({\r\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\r\n        last: new FormControl('Drew', Validators.required)\r\n      });\r\n    `);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst formControlBinding$1 = {\r\n    provide: NgControl,\r\n    useExisting: forwardRef(() => FormControlDirective)\r\n};\r\n/**\r\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\r\n *\r\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\r\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\r\n * any values written to the DOM element through user input will be reflected in the\r\n * {\\@link FormControl} instance (view -> model).\r\n *\r\n * \\@howToUse\r\n *\r\n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\r\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\r\n * {\\@link FormControlDirective}.\r\n *\r\n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\r\n * it does not require that your {\\@link FormControl} instance be part of any parent\r\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\r\n * exists above it.\r\n *\r\n * **Get the value**: the `value` property is always synced and available on the\r\n * {\\@link FormControl} instance. See a full list of available properties in\r\n * {\\@link AbstractControl}.\r\n *\r\n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\r\n * or you can set it programmatically later using {\\@link AbstractControl#setValue setValue} or\r\n * {\\@link AbstractControl#patchValue patchValue}.\r\n *\r\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\r\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\r\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\r\n * re-calculated.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\r\n *\r\n * * **npm package**: `\\@angular/forms`\r\n *\r\n * * **NgModule**: `ReactiveFormsModule`\r\n *\r\n *  \\@stable\r\n */\r\nclass FormControlDirective extends NgControl {\r\n    /**\r\n     * @param {?} validators\r\n     * @param {?} asyncValidators\r\n     * @param {?} valueAccessors\r\n     */\r\n    constructor(validators, asyncValidators, valueAccessors) {\r\n        super();\r\n        this.update = new EventEmitter();\r\n        this._rawValidators = validators || [];\r\n        this._rawAsyncValidators = asyncValidators || [];\r\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\r\n    }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    set isDisabled(isDisabled) { ReactiveErrors.disabledAttrWarning(); }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (this._isControlChanged(changes)) {\r\n            setUpControl(this.form, this);\r\n            if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\r\n                /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\r\n            }\r\n            this.form.updateValueAndValidity({ emitEvent: false });\r\n        }\r\n        if (isPropertyUpdated(changes, this.viewModel)) {\r\n            this.form.setValue(this.model);\r\n            this.viewModel = this.model;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get path() { return []; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get validator() { return composeValidators(this._rawValidators); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get asyncValidator() {\r\n        return composeAsyncValidators(this._rawAsyncValidators);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get control() { return this.form; }\r\n    /**\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    viewToModelUpdate(newValue) {\r\n        this.viewModel = newValue;\r\n        this.update.emit(newValue);\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    _isControlChanged(changes) {\r\n        return changes.hasOwnProperty('form');\r\n    }\r\n}\r\nFormControlDirective.decorators = [\r\n    { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\r\n];\r\n/** @nocollapse */\r\nFormControlDirective.ctorParameters = () => [\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\r\n];\r\nFormControlDirective.propDecorators = {\r\n    \"form\": [{ type: Input, args: ['formControl',] },],\r\n    \"model\": [{ type: Input, args: ['ngModel',] },],\r\n    \"update\": [{ type: Output, args: ['ngModelChange',] },],\r\n    \"isDisabled\": [{ type: Input, args: ['disabled',] },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst formDirectiveProvider$1 = {\r\n    provide: ControlContainer,\r\n    useExisting: forwardRef(() => FormGroupDirective)\r\n};\r\n/**\r\n * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\r\n *\r\n * \\@howToUse\r\n *\r\n * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\r\n * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\r\n * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\r\n * and {\\@link FormArrayName} directives.\r\n *\r\n * **Set value**: You can set the form's initial value when instantiating the\r\n * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\r\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}\r\n * methods.\r\n *\r\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\r\n * to the {\\@link FormGroup}'s {\\@link AbstractControl#valueChanges valueChanges} event.  You can also\r\n * listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be notified when the\r\n * validation status is re-calculated.\r\n *\r\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\r\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\r\n * submission event.\r\n *\r\n * ### Example\r\n *\r\n * In this example, we create form controls for first name and last name.\r\n *\r\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\r\n *\r\n * **npm package**: `\\@angular/forms`\r\n *\r\n * **NgModule**: {\\@link ReactiveFormsModule}\r\n *\r\n *  \\@stable\r\n */\r\nclass FormGroupDirective extends ControlContainer {\r\n    /**\r\n     * @param {?} _validators\r\n     * @param {?} _asyncValidators\r\n     */\r\n    constructor(_validators, _asyncValidators) {\r\n        super();\r\n        this._validators = _validators;\r\n        this._asyncValidators = _asyncValidators;\r\n        this.submitted = false;\r\n        this.directives = [];\r\n        this.form = /** @type {?} */ ((null));\r\n        this.ngSubmit = new EventEmitter();\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        this._checkFormPresent();\r\n        if (changes.hasOwnProperty('form')) {\r\n            this._updateValidators();\r\n            this._updateDomValue();\r\n            this._updateRegistrations();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get formDirective() { return this; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get control() { return this.form; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get path() { return []; }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    addControl(dir) {\r\n        const /** @type {?} */ ctrl = this.form.get(dir.path);\r\n        setUpControl(ctrl, dir);\r\n        ctrl.updateValueAndValidity({ emitEvent: false });\r\n        this.directives.push(dir);\r\n        return ctrl;\r\n    }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    getControl(dir) { return /** @type {?} */ (this.form.get(dir.path)); }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    removeControl(dir) { removeDir(this.directives, dir); }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    addFormGroup(dir) {\r\n        const /** @type {?} */ ctrl = this.form.get(dir.path);\r\n        setUpFormContainer(ctrl, dir);\r\n        ctrl.updateValueAndValidity({ emitEvent: false });\r\n    }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    removeFormGroup(dir) { }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    getFormGroup(dir) { return /** @type {?} */ (this.form.get(dir.path)); }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    addFormArray(dir) {\r\n        const /** @type {?} */ ctrl = this.form.get(dir.path);\r\n        setUpFormContainer(ctrl, dir);\r\n        ctrl.updateValueAndValidity({ emitEvent: false });\r\n    }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    removeFormArray(dir) { }\r\n    /**\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    getFormArray(dir) { return /** @type {?} */ (this.form.get(dir.path)); }\r\n    /**\r\n     * @param {?} dir\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    updateModel(dir, value) {\r\n        const /** @type {?} */ ctrl = /** @type {?} */ (this.form.get(dir.path));\r\n        ctrl.setValue(value);\r\n    }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    onSubmit($event) {\r\n        (/** @type {?} */ (this)).submitted = true;\r\n        syncPendingControls(this.form, this.directives);\r\n        this.ngSubmit.emit($event);\r\n        return false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    onReset() { this.resetForm(); }\r\n    /**\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    resetForm(value = undefined) {\r\n        this.form.reset(value);\r\n        (/** @type {?} */ (this)).submitted = false;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _updateDomValue() {\r\n        this.directives.forEach(dir => {\r\n            const /** @type {?} */ newCtrl = this.form.get(dir.path);\r\n            if (dir.control !== newCtrl) {\r\n                cleanUpControl(dir.control, dir);\r\n                if (newCtrl)\r\n                    setUpControl(newCtrl, dir);\r\n                (/** @type {?} */ (dir)).control = newCtrl;\r\n            }\r\n        });\r\n        this.form._updateTreeValidity({ emitEvent: false });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _updateRegistrations() {\r\n        this.form._registerOnCollectionChange(() => this._updateDomValue());\r\n        if (this._oldForm)\r\n            this._oldForm._registerOnCollectionChange(() => { });\r\n        this._oldForm = this.form;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _updateValidators() {\r\n        const /** @type {?} */ sync = composeValidators(this._validators);\r\n        this.form.validator = Validators.compose([/** @type {?} */ ((this.form.validator)), /** @type {?} */ ((sync))]);\r\n        const /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\r\n        this.form.asyncValidator = Validators.composeAsync([/** @type {?} */ ((this.form.asyncValidator)), /** @type {?} */ ((async))]);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _checkFormPresent() {\r\n        if (!this.form) {\r\n            ReactiveErrors.missingFormException();\r\n        }\r\n    }\r\n}\r\nFormGroupDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[formGroup]',\r\n                providers: [formDirectiveProvider$1],\r\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\r\n                exportAs: 'ngForm'\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nFormGroupDirective.ctorParameters = () => [\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\r\n];\r\nFormGroupDirective.propDecorators = {\r\n    \"form\": [{ type: Input, args: ['formGroup',] },],\r\n    \"ngSubmit\": [{ type: Output },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst formGroupNameProvider = {\r\n    provide: ControlContainer,\r\n    useExisting: forwardRef(() => FormGroupName)\r\n};\r\n/**\r\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\r\n *\r\n * \\@howToUse\r\n *\r\n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\r\n * `[formGroup]`).\r\n *\r\n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\r\n * will look for a {\\@link FormGroup} registered with that name in the parent\r\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\r\n *\r\n * Nested form groups can come in handy when you want to validate a sub-group of a\r\n * form separately from the rest or when you'd like to group the values of certain\r\n * controls into their own nested object.\r\n *\r\n * **Access the group**: You can access the associated {\\@link FormGroup} using the\r\n * {\\@link AbstractControl#get get} method. Ex: `this.form.get('name')`.\r\n *\r\n * You can also access individual controls within the group using dot syntax.\r\n * Ex: `this.form.get('name.first')`\r\n *\r\n * **Get the value**: the `value` property is always synced and available on the\r\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\r\n *\r\n * **Set the value**: You can set an initial value for each child control when instantiating\r\n * the {\\@link FormGroup}, or you can set it programmatically later using\r\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\r\n *\r\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\r\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\r\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\r\n * re-calculated.\r\n *\r\n * ### Example\r\n *\r\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\r\n *\r\n * * **npm package**: `\\@angular/forms`\r\n *\r\n * * **NgModule**: `ReactiveFormsModule`\r\n *\r\n * \\@stable\r\n */\r\nclass FormGroupName extends AbstractFormGroupDirective {\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} validators\r\n     * @param {?} asyncValidators\r\n     */\r\n    constructor(parent, validators, asyncValidators) {\r\n        super();\r\n        this._parent = parent;\r\n        this._validators = validators;\r\n        this._asyncValidators = asyncValidators;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _checkParentType() {\r\n        if (_hasInvalidParent(this._parent)) {\r\n            ReactiveErrors.groupParentException();\r\n        }\r\n    }\r\n}\r\nFormGroupName.decorators = [\r\n    { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\r\n];\r\n/** @nocollapse */\r\nFormGroupName.ctorParameters = () => [\r\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\r\n];\r\nFormGroupName.propDecorators = {\r\n    \"name\": [{ type: Input, args: ['formGroupName',] },],\r\n};\r\nconst formArrayNameProvider = {\r\n    provide: ControlContainer,\r\n    useExisting: forwardRef(() => FormArrayName)\r\n};\r\n/**\r\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\r\n *\r\n * \\@howToUse\r\n *\r\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\r\n * `[formGroup]`).\r\n *\r\n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\r\n * will look for a {\\@link FormArray} registered with that name in the parent\r\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\r\n *\r\n * Nested form arrays can come in handy when you have a group of form controls but\r\n * you're not sure how many there will be. Form arrays allow you to create new\r\n * form controls dynamically.\r\n *\r\n * **Access the array**: You can access the associated {\\@link FormArray} using the\r\n * {\\@link AbstractControl#get get} method on the parent {\\@link FormGroup}.\r\n * Ex: `this.form.get('cities')`.\r\n *\r\n * **Get the value**: the `value` property is always synced and available on the\r\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\r\n *\r\n * **Set the value**: You can set an initial value for each child control when instantiating\r\n * the {\\@link FormArray}, or you can set the value programmatically later using the\r\n * {\\@link FormArray}'s {\\@link AbstractControl#setValue setValue} or\r\n * {\\@link AbstractControl#patchValue patchValue} methods.\r\n *\r\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\r\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl#valueChanges valueChanges} event.\r\n * You can also listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be\r\n * notified when the validation status is re-calculated.\r\n *\r\n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by calling\r\n * its {\\@link FormArray#push push} method.\r\n * Ex: `this.form.get('cities').push(new FormControl());`\r\n *\r\n * ### Example\r\n *\r\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\r\n *\r\n * * **npm package**: `\\@angular/forms`\r\n *\r\n * * **NgModule**: `ReactiveFormsModule`\r\n *\r\n * \\@stable\r\n */\r\nclass FormArrayName extends ControlContainer {\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} validators\r\n     * @param {?} asyncValidators\r\n     */\r\n    constructor(parent, validators, asyncValidators) {\r\n        super();\r\n        this._parent = parent;\r\n        this._validators = validators;\r\n        this._asyncValidators = asyncValidators;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this._checkParentType(); /** @type {?} */\r\n        ((this.formDirective)).addFormArray(this);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.formDirective) {\r\n            this.formDirective.removeFormArray(this);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get control() { return /** @type {?} */ ((this.formDirective)).getFormArray(this); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get formDirective() {\r\n        return this._parent ? /** @type {?} */ (this._parent.formDirective) : null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get path() { return controlPath(this.name, this._parent); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get validator() { return composeValidators(this._validators); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get asyncValidator() {\r\n        return composeAsyncValidators(this._asyncValidators);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _checkParentType() {\r\n        if (_hasInvalidParent(this._parent)) {\r\n            ReactiveErrors.arrayParentException();\r\n        }\r\n    }\r\n}\r\nFormArrayName.decorators = [\r\n    { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\r\n];\r\n/** @nocollapse */\r\nFormArrayName.ctorParameters = () => [\r\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\r\n];\r\nFormArrayName.propDecorators = {\r\n    \"name\": [{ type: Input, args: ['formArrayName',] },],\r\n};\r\n/**\r\n * @param {?} parent\r\n * @return {?}\r\n */\r\nfunction _hasInvalidParent(parent) {\r\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\r\n        !(parent instanceof FormArrayName);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst controlNameBinding = {\r\n    provide: NgControl,\r\n    useExisting: forwardRef(() => FormControlName)\r\n};\r\n/**\r\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\r\n * element by name.\r\n *\r\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\r\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\r\n * any values written to the DOM element through user input will be reflected in the\r\n * {\\@link FormControl} instance (view -> model).\r\n *\r\n * \\@howToUse\r\n *\r\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\r\n * `[formGroup]`).\r\n *\r\n * It accepts the string name of the {\\@link FormControl} instance you want to\r\n * link, and will look for a {\\@link FormControl} registered with that name in the\r\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\r\n *\r\n * **Access the control**: You can access the {\\@link FormControl} associated with\r\n * this directive by using the {\\@link AbstractControl#get get} method.\r\n * Ex: `this.form.get('first');`\r\n *\r\n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\r\n * See a full list of available properties in {\\@link AbstractControl}.\r\n *\r\n *  **Set value**: You can set an initial value for the control when instantiating the\r\n *  {\\@link FormControl}, or you can set it programmatically later using\r\n *  {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\r\n *\r\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\r\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\r\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\r\n * re-calculated.\r\n *\r\n * ### Example\r\n *\r\n * In this example, we create form controls for first name and last name.\r\n *\r\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\r\n *\r\n * To see `formControlName` examples with different form control types, see:\r\n *\r\n * * Radio buttons: {\\@link RadioControlValueAccessor}\r\n * * Selects: {\\@link SelectControlValueAccessor}\r\n *\r\n * **npm package**: `\\@angular/forms`\r\n *\r\n * **NgModule**: {\\@link ReactiveFormsModule}\r\n *\r\n *  \\@stable\r\n */\r\nclass FormControlName extends NgControl {\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} validators\r\n     * @param {?} asyncValidators\r\n     * @param {?} valueAccessors\r\n     */\r\n    constructor(parent, validators, asyncValidators, valueAccessors) {\r\n        super();\r\n        this._added = false;\r\n        this.update = new EventEmitter();\r\n        this._parent = parent;\r\n        this._rawValidators = validators || [];\r\n        this._rawAsyncValidators = asyncValidators || [];\r\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\r\n    }\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    set isDisabled(isDisabled) { ReactiveErrors.disabledAttrWarning(); }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (!this._added)\r\n            this._setUpControl();\r\n        if (isPropertyUpdated(changes, this.viewModel)) {\r\n            this.viewModel = this.model;\r\n            this.formDirective.updateModel(this, this.model);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.formDirective) {\r\n            this.formDirective.removeControl(this);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    viewToModelUpdate(newValue) {\r\n        this.viewModel = newValue;\r\n        this.update.emit(newValue);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get path() { return controlPath(this.name, /** @type {?} */ ((this._parent))); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get validator() { return composeValidators(this._rawValidators); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get asyncValidator() {\r\n        return /** @type {?} */ ((composeAsyncValidators(this._rawAsyncValidators)));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _checkParentType() {\r\n        if (!(this._parent instanceof FormGroupName) &&\r\n            this._parent instanceof AbstractFormGroupDirective) {\r\n            ReactiveErrors.ngModelGroupException();\r\n        }\r\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\r\n            !(this._parent instanceof FormArrayName)) {\r\n            ReactiveErrors.controlParentException();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _setUpControl() {\r\n        this._checkParentType();\r\n        (/** @type {?} */ (this)).control = this.formDirective.addControl(this);\r\n        if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\r\n            /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\r\n        }\r\n        this._added = true;\r\n    }\r\n}\r\nFormControlName.decorators = [\r\n    { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\r\n];\r\n/** @nocollapse */\r\nFormControlName.ctorParameters = () => [\r\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\r\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\r\n];\r\nFormControlName.propDecorators = {\r\n    \"name\": [{ type: Input, args: ['formControlName',] },],\r\n    \"model\": [{ type: Input, args: ['ngModel',] },],\r\n    \"update\": [{ type: Output, args: ['ngModelChange',] },],\r\n    \"isDisabled\": [{ type: Input, args: ['disabled',] },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An interface that can be implemented by classes that can act as validators.\r\n *\r\n * ## Usage\r\n *\r\n * ```typescript\r\n * \\@Directive({\r\n *   selector: '[custom-validator]',\r\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\r\n * })\r\n * class CustomValidatorDirective implements Validator {\r\n *   validate(c: Control): {[key: string]: any} {\r\n *     return {\"custom\": true};\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@experimental\r\n * @record\r\n */\r\n\r\nconst REQUIRED_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => RequiredValidator),\r\n    multi: true\r\n};\r\nconst CHECKBOX_REQUIRED_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => CheckboxRequiredValidator),\r\n    multi: true\r\n};\r\n/**\r\n * A Directive that adds the `required` validator to any controls marked with the\r\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * <input name=\"fullName\" ngModel required>\r\n * ```\r\n *\r\n * \\@stable\r\n */\r\nclass RequiredValidator {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get required() { return this._required; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set required(value) {\r\n        this._required = value != null && value !== false && `${value}` !== 'false';\r\n        if (this._onChange)\r\n            this._onChange();\r\n    }\r\n    /**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    validate(c) {\r\n        return this.required ? Validators.required(c) : null;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnValidatorChange(fn) { this._onChange = fn; }\r\n}\r\nRequiredValidator.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\r\n                providers: [REQUIRED_VALIDATOR],\r\n                host: { '[attr.required]': 'required ? \"\" : null' }\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nRequiredValidator.ctorParameters = () => [];\r\nRequiredValidator.propDecorators = {\r\n    \"required\": [{ type: Input },],\r\n};\r\n/**\r\n * A Directive that adds the `required` validator to checkbox controls marked with the\r\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * <input type=\"checkbox\" name=\"active\" ngModel required>\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nclass CheckboxRequiredValidator extends RequiredValidator {\r\n    /**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    validate(c) {\r\n        return this.required ? Validators.requiredTrue(c) : null;\r\n    }\r\n}\r\nCheckboxRequiredValidator.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\r\n                providers: [CHECKBOX_REQUIRED_VALIDATOR],\r\n                host: { '[attr.required]': 'required ? \"\" : null' }\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nCheckboxRequiredValidator.ctorParameters = () => [];\r\n/**\r\n * Provider which adds {\\@link EmailValidator} to {\\@link NG_VALIDATORS}.\r\n */\r\nconst EMAIL_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => EmailValidator),\r\n    multi: true\r\n};\r\n/**\r\n * A Directive that adds the `email` validator to controls marked with the\r\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * <input type=\"email\" name=\"email\" ngModel email>\r\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\r\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nclass EmailValidator {\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set email(value) {\r\n        this._enabled = value === '' || value === true || value === 'true';\r\n        if (this._onChange)\r\n            this._onChange();\r\n    }\r\n    /**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    validate(c) {\r\n        return this._enabled ? Validators.email(c) : null;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnValidatorChange(fn) { this._onChange = fn; }\r\n}\r\nEmailValidator.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[email][formControlName],[email][formControl],[email][ngModel]',\r\n                providers: [EMAIL_VALIDATOR]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nEmailValidator.ctorParameters = () => [];\r\nEmailValidator.propDecorators = {\r\n    \"email\": [{ type: Input },],\r\n};\r\n/**\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Provider which adds {\\@link MinLengthValidator} to {\\@link NG_VALIDATORS}.\r\n *\r\n * ## Example:\r\n *\r\n * {\\@example common/forms/ts/validators/validators.ts region='min'}\r\n */\r\nconst MIN_LENGTH_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => MinLengthValidator),\r\n    multi: true\r\n};\r\n/**\r\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\r\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\r\n *\r\n * \\@stable\r\n */\r\nclass MinLengthValidator {\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if ('minlength' in changes) {\r\n            this._createValidator();\r\n            if (this._onChange)\r\n                this._onChange();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    validate(c) {\r\n        return this.minlength == null ? null : this._validator(c);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnValidatorChange(fn) { this._onChange = fn; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _createValidator() {\r\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\r\n    }\r\n}\r\nMinLengthValidator.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\r\n                providers: [MIN_LENGTH_VALIDATOR],\r\n                host: { '[attr.minlength]': 'minlength ? minlength : null' }\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMinLengthValidator.ctorParameters = () => [];\r\nMinLengthValidator.propDecorators = {\r\n    \"minlength\": [{ type: Input },],\r\n};\r\n/**\r\n * Provider which adds {\\@link MaxLengthValidator} to {\\@link NG_VALIDATORS}.\r\n *\r\n * ## Example:\r\n *\r\n * {\\@example common/forms/ts/validators/validators.ts region='max'}\r\n */\r\nconst MAX_LENGTH_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => MaxLengthValidator),\r\n    multi: true\r\n};\r\n/**\r\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\r\n * `formControl`,\r\n * or control with `ngModel` that also has a `maxlength` attribute.\r\n *\r\n * \\@stable\r\n */\r\nclass MaxLengthValidator {\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if ('maxlength' in changes) {\r\n            this._createValidator();\r\n            if (this._onChange)\r\n                this._onChange();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    validate(c) {\r\n        return this.maxlength != null ? this._validator(c) : null;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnValidatorChange(fn) { this._onChange = fn; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _createValidator() {\r\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\r\n    }\r\n}\r\nMaxLengthValidator.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\r\n                providers: [MAX_LENGTH_VALIDATOR],\r\n                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMaxLengthValidator.ctorParameters = () => [];\r\nMaxLengthValidator.propDecorators = {\r\n    \"maxlength\": [{ type: Input },],\r\n};\r\nconst PATTERN_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => PatternValidator),\r\n    multi: true\r\n};\r\n/**\r\n * A Directive that adds the `pattern` validator to any controls marked with the\r\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\r\n * as the regex to validate Control value against.  Follows pattern attribute\r\n * semantics; i.e. regex must match entire Control value.\r\n *\r\n * ### Example\r\n *\r\n * ```\r\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\r\n * ```\r\n * \\@stable\r\n */\r\nclass PatternValidator {\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if ('pattern' in changes) {\r\n            this._createValidator();\r\n            if (this._onChange)\r\n                this._onChange();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    validate(c) { return this._validator(c); }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnValidatorChange(fn) { this._onChange = fn; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _createValidator() { this._validator = Validators.pattern(this.pattern); }\r\n}\r\nPatternValidator.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\r\n                providers: [PATTERN_VALIDATOR],\r\n                host: { '[attr.pattern]': 'pattern ? pattern : null' }\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nPatternValidator.ctorParameters = () => [];\r\nPatternValidator.propDecorators = {\r\n    \"pattern\": [{ type: Input },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\r\n *\r\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\r\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\r\n * forms.\r\n *\r\n * \\@howToUse\r\n *\r\n * To use, inject `FormBuilder` into your component class. You can then call its methods\r\n * directly.\r\n *\r\n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\r\n *\r\n *  * **npm package**: `\\@angular/forms`\r\n *\r\n *  * **NgModule**: {\\@link ReactiveFormsModule}\r\n *\r\n * \\@stable\r\n */\r\nclass FormBuilder {\r\n    /**\r\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\r\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\r\n     *\r\n     * See the {\\@link FormGroup} constructor for more details.\r\n     * @param {?} controlsConfig\r\n     * @param {?=} extra\r\n     * @return {?}\r\n     */\r\n    group(controlsConfig, extra = null) {\r\n        const /** @type {?} */ controls = this._reduceControls(controlsConfig);\r\n        const /** @type {?} */ validator = extra != null ? extra['validator'] : null;\r\n        const /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;\r\n        return new FormGroup(controls, validator, asyncValidator);\r\n    }\r\n    /**\r\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\r\n     * `asyncValidator`.\r\n     *\r\n     * `formState` can either be a standalone value for the form control or an object\r\n     * that contains both a value and a disabled status.\r\n     *\r\n     * @param {?} formState\r\n     * @param {?=} validator\r\n     * @param {?=} asyncValidator\r\n     * @return {?}\r\n     */\r\n    control(formState, validator, asyncValidator) {\r\n        return new FormControl(formState, validator, asyncValidator);\r\n    }\r\n    /**\r\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\r\n     * configuration, with the given optional `validator` and `asyncValidator`.\r\n     * @param {?} controlsConfig\r\n     * @param {?=} validator\r\n     * @param {?=} asyncValidator\r\n     * @return {?}\r\n     */\r\n    array(controlsConfig, validator, asyncValidator) {\r\n        const /** @type {?} */ controls = controlsConfig.map(c => this._createControl(c));\r\n        return new FormArray(controls, validator, asyncValidator);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} controlsConfig\r\n     * @return {?}\r\n     */\r\n    _reduceControls(controlsConfig) {\r\n        const /** @type {?} */ controls = {};\r\n        Object.keys(controlsConfig).forEach(controlName => {\r\n            controls[controlName] = this._createControl(controlsConfig[controlName]);\r\n        });\r\n        return controls;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} controlConfig\r\n     * @return {?}\r\n     */\r\n    _createControl(controlConfig) {\r\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\r\n            controlConfig instanceof FormArray) {\r\n            return controlConfig;\r\n        }\r\n        else if (Array.isArray(controlConfig)) {\r\n            const /** @type {?} */ value = controlConfig[0];\r\n            const /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\r\n            const /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\r\n            return this.control(value, validator, asyncValidator);\r\n        }\r\n        else {\r\n            return this.control(controlConfig);\r\n        }\r\n    }\r\n}\r\nFormBuilder.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nFormBuilder.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of the common package.\r\n */\r\n/**\r\n * \\@stable\r\n */\r\nconst VERSION = new Version('5.1.3');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Adds `novalidate` attribute to all forms by default.\r\n *\r\n * `novalidate` is used to disable browser's native form validation.\r\n *\r\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\r\n *\r\n * ```\r\n * <form ngNativeValidate></form>\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nclass NgNoValidate {\r\n}\r\nNgNoValidate.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\r\n                host: { 'novalidate': '' },\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nNgNoValidate.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst SHARED_FORM_DIRECTIVES = [\r\n    NgNoValidate,\r\n    NgSelectOption,\r\n    NgSelectMultipleOption,\r\n    DefaultValueAccessor,\r\n    NumberValueAccessor,\r\n    RangeValueAccessor,\r\n    CheckboxControlValueAccessor,\r\n    SelectControlValueAccessor,\r\n    SelectMultipleControlValueAccessor,\r\n    RadioControlValueAccessor,\r\n    NgControlStatus,\r\n    NgControlStatusGroup,\r\n    RequiredValidator,\r\n    MinLengthValidator,\r\n    MaxLengthValidator,\r\n    PatternValidator,\r\n    CheckboxRequiredValidator,\r\n    EmailValidator,\r\n];\r\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\r\nconst REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\r\n/**\r\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\r\n */\r\nclass InternalFormsSharedModule {\r\n}\r\nInternalFormsSharedModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: SHARED_FORM_DIRECTIVES,\r\n                exports: SHARED_FORM_DIRECTIVES,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nInternalFormsSharedModule.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The ng module for forms.\r\n * \\@stable\r\n */\r\nclass FormsModule {\r\n}\r\nFormsModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: TEMPLATE_DRIVEN_DIRECTIVES,\r\n                providers: [RadioControlRegistry],\r\n                exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nFormsModule.ctorParameters = () => [];\r\n/**\r\n * The ng module for reactive forms.\r\n * \\@stable\r\n */\r\nclass ReactiveFormsModule {\r\n}\r\nReactiveFormsModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [REACTIVE_DRIVEN_DIRECTIVES],\r\n                providers: [FormBuilder, RadioControlRegistry],\r\n                exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nReactiveFormsModule.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * This module is used for handling user input, by defining and building a {@link FormGroup} that\r\n * consists of {@link FormControl} objects, and mapping them onto the DOM. {@link FormControl}\r\n * objects can then be used to read information from the form DOM elements.\r\n *\r\n * Forms providers are not included in default providers; you must import these providers\r\n * explicitly.\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\r\n\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { AbstractControlDirective, AbstractFormGroupDirective, CheckboxControlValueAccessor, ControlContainer, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, RadioControlValueAccessor, FormControlDirective, FormControlName, FormGroupDirective, FormArrayName, FormGroupName, NgSelectOption, SelectControlValueAccessor, SelectMultipleControlValueAccessor, CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, FormBuilder, AbstractControl, FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators, VERSION, FormsModule, ReactiveFormsModule, InternalFormsSharedModule as ɵba, REACTIVE_DRIVEN_DIRECTIVES as ɵz, SHARED_FORM_DIRECTIVES as ɵx, TEMPLATE_DRIVEN_DIRECTIVES as ɵy, CHECKBOX_VALUE_ACCESSOR as ɵa, DEFAULT_VALUE_ACCESSOR as ɵb, AbstractControlStatus as ɵc, ngControlStatusHost as ɵd, formDirectiveProvider as ɵe, formControlBinding as ɵf, modelGroupProvider as ɵg, NgNoValidate as ɵbf, NUMBER_VALUE_ACCESSOR as ɵbb, NumberValueAccessor as ɵbc, RADIO_VALUE_ACCESSOR as ɵh, RadioControlRegistry as ɵi, RANGE_VALUE_ACCESSOR as ɵbd, RangeValueAccessor as ɵbe, formControlBinding$1 as ɵj, controlNameBinding as ɵk, formDirectiveProvider$1 as ɵl, formArrayNameProvider as ɵn, formGroupNameProvider as ɵm, SELECT_VALUE_ACCESSOR as ɵo, NgSelectMultipleOption as ɵq, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵp, CHECKBOX_REQUIRED_VALIDATOR as ɵs, EMAIL_VALIDATOR as ɵt, MAX_LENGTH_VALIDATOR as ɵv, MIN_LENGTH_VALIDATOR as ɵu, PATTERN_VALIDATOR as ɵw, REQUIRED_VALIDATOR as ɵr };\r\n//# sourceMappingURL=forms.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/forms/esm2015/forms.js\n// module id = ../../../forms/esm2015/forms.js\n// module chunks = vendor","/**\r\n * @license Angular v5.1.3\r\n * (c) 2010-2017 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\nimport { CompileMetadataResolver, CompileReflector, CompilerConfig, DirectiveNormalizer, DirectiveResolver, DomElementSchemaRegistry, ElementSchemaRegistry, HtmlParser, I18NHtmlParser, Identifiers, JitCompiler, JitSummaryResolver, Lexer, NgModuleCompiler, NgModuleResolver, Parser, PipeResolver, ProviderMeta, ResourceLoader, StaticSymbolCache, StyleCompiler, SummaryResolver, TemplateParser, UrlResolver, ViewCompiler, getUrlScheme, syntaxError } from '@angular/compiler';\r\nimport { ANALYZE_FOR_ENTRY_COMPONENTS, COMPILER_OPTIONS, ChangeDetectionStrategy, ChangeDetectorRef, Compiler, CompilerFactory, ComponentFactory, ComponentFactoryResolver, ComponentRef, ElementRef, Inject, Injectable, InjectionToken, Injector, LOCALE_ID, MissingTranslationStrategy, NgModuleFactory, NgModuleRef, Optional, PACKAGE_ROOT_URL, PLATFORM_ID, QueryList, Renderer, SecurityContext, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Version, ViewContainerRef, ViewEncapsulation, createPlatformFactory, isDevMode, platformCore, ɵCodegenComponentFactoryResolver, ɵConsole, ɵEMPTY_ARRAY, ɵEMPTY_MAP, ɵReflectionCapabilities, ɵand, ɵccf, ɵcmf, ɵcrt, ɵdid, ɵeld, ɵglobal, ɵinlineInterpolate, ɵinterpolate, ɵmod, ɵmpd, ɵncd, ɵnov, ɵpad, ɵpid, ɵpod, ɵppd, ɵprd, ɵqud, ɵregisterModuleFactory, ɵstringify, ɵted, ɵunv, ɵvid } from '@angular/core';\r\nimport { ɵPLATFORM_BROWSER_ID } from '@angular/common';\r\nimport { ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS } from '@angular/platform-browser';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst MODULE_SUFFIX = '';\r\nconst builtinExternalReferences = createBuiltinExternalReferencesMap();\r\nclass JitReflector {\r\n    constructor() {\r\n        this.builtinExternalReferences = new Map();\r\n        this.reflectionCapabilities = new ɵReflectionCapabilities();\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} cmpMetadata\r\n     * @return {?}\r\n     */\r\n    componentModuleUrl(type, cmpMetadata) {\r\n        const /** @type {?} */ moduleId = cmpMetadata.moduleId;\r\n        if (typeof moduleId === 'string') {\r\n            const /** @type {?} */ scheme = getUrlScheme(moduleId);\r\n            return scheme ? moduleId : `package:${moduleId}${MODULE_SUFFIX}`;\r\n        }\r\n        else if (moduleId !== null && moduleId !== void 0) {\r\n            throw syntaxError(`moduleId should be a string in \"${ɵstringify(type)}\". See https://goo.gl/wIDDiL for more information.\\n` +\r\n                `If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.`);\r\n        }\r\n        return `./${ɵstringify(type)}`;\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    parameters(typeOrFunc) {\r\n        return this.reflectionCapabilities.parameters(typeOrFunc);\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    annotations(typeOrFunc) {\r\n        return this.reflectionCapabilities.annotations(typeOrFunc);\r\n    }\r\n    /**\r\n     * @param {?} typeOrFunc\r\n     * @return {?}\r\n     */\r\n    propMetadata(typeOrFunc) {\r\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\r\n    }\r\n    /**\r\n     * @param {?} type\r\n     * @param {?} lcProperty\r\n     * @return {?}\r\n     */\r\n    hasLifecycleHook(type, lcProperty) {\r\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\r\n    }\r\n    /**\r\n     * @param {?} ref\r\n     * @return {?}\r\n     */\r\n    resolveExternalReference(ref) {\r\n        return builtinExternalReferences.get(ref) || ref.runtime;\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction createBuiltinExternalReferencesMap() {\r\n    const /** @type {?} */ map = new Map();\r\n    map.set(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS, ANALYZE_FOR_ENTRY_COMPONENTS);\r\n    map.set(Identifiers.ElementRef, ElementRef);\r\n    map.set(Identifiers.NgModuleRef, NgModuleRef);\r\n    map.set(Identifiers.ViewContainerRef, ViewContainerRef);\r\n    map.set(Identifiers.ChangeDetectorRef, ChangeDetectorRef);\r\n    map.set(Identifiers.QueryList, QueryList);\r\n    map.set(Identifiers.TemplateRef, TemplateRef);\r\n    map.set(Identifiers.CodegenComponentFactoryResolver, ɵCodegenComponentFactoryResolver);\r\n    map.set(Identifiers.ComponentFactoryResolver, ComponentFactoryResolver);\r\n    map.set(Identifiers.ComponentFactory, ComponentFactory);\r\n    map.set(Identifiers.ComponentRef, ComponentRef);\r\n    map.set(Identifiers.NgModuleFactory, NgModuleFactory);\r\n    map.set(Identifiers.createModuleFactory, ɵcmf);\r\n    map.set(Identifiers.moduleDef, ɵmod);\r\n    map.set(Identifiers.moduleProviderDef, ɵmpd);\r\n    map.set(Identifiers.RegisterModuleFactoryFn, ɵregisterModuleFactory);\r\n    map.set(Identifiers.Injector, Injector);\r\n    map.set(Identifiers.ViewEncapsulation, ViewEncapsulation);\r\n    map.set(Identifiers.ChangeDetectionStrategy, ChangeDetectionStrategy);\r\n    map.set(Identifiers.SecurityContext, SecurityContext);\r\n    map.set(Identifiers.LOCALE_ID, LOCALE_ID);\r\n    map.set(Identifiers.TRANSLATIONS_FORMAT, TRANSLATIONS_FORMAT);\r\n    map.set(Identifiers.inlineInterpolate, ɵinlineInterpolate);\r\n    map.set(Identifiers.interpolate, ɵinterpolate);\r\n    map.set(Identifiers.EMPTY_ARRAY, ɵEMPTY_ARRAY);\r\n    map.set(Identifiers.EMPTY_MAP, ɵEMPTY_MAP);\r\n    map.set(Identifiers.Renderer, Renderer);\r\n    map.set(Identifiers.viewDef, ɵvid);\r\n    map.set(Identifiers.elementDef, ɵeld);\r\n    map.set(Identifiers.anchorDef, ɵand);\r\n    map.set(Identifiers.textDef, ɵted);\r\n    map.set(Identifiers.directiveDef, ɵdid);\r\n    map.set(Identifiers.providerDef, ɵprd);\r\n    map.set(Identifiers.queryDef, ɵqud);\r\n    map.set(Identifiers.pureArrayDef, ɵpad);\r\n    map.set(Identifiers.pureObjectDef, ɵpod);\r\n    map.set(Identifiers.purePipeDef, ɵppd);\r\n    map.set(Identifiers.pipeDef, ɵpid);\r\n    map.set(Identifiers.nodeValue, ɵnov);\r\n    map.set(Identifiers.ngContentDef, ɵncd);\r\n    map.set(Identifiers.unwrapValue, ɵunv);\r\n    map.set(Identifiers.createRendererType2, ɵcrt);\r\n    map.set(Identifiers.createComponentFactory, ɵccf);\r\n    return map;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst ERROR_COLLECTOR_TOKEN = new InjectionToken('ErrorCollector');\r\n/**\r\n * A default provider for {\\@link PACKAGE_ROOT_URL} that maps to '/'.\r\n */\r\nconst DEFAULT_PACKAGE_URL_PROVIDER = {\r\n    provide: PACKAGE_ROOT_URL,\r\n    useValue: '/'\r\n};\r\nconst _NO_RESOURCE_LOADER = {\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    get(url) {\r\n        throw new Error(`No ResourceLoader implementation has been provided. Can't read the url \"${url}\"`);\r\n    }\r\n};\r\nconst baseHtmlParser = new InjectionToken('HtmlParser');\r\nclass CompilerImpl {\r\n    /**\r\n     * @param {?} injector\r\n     * @param {?} _metadataResolver\r\n     * @param {?} templateParser\r\n     * @param {?} styleCompiler\r\n     * @param {?} viewCompiler\r\n     * @param {?} ngModuleCompiler\r\n     * @param {?} summaryResolver\r\n     * @param {?} compileReflector\r\n     * @param {?} compilerConfig\r\n     * @param {?} console\r\n     */\r\n    constructor(injector, _metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, compilerConfig, console) {\r\n        this._metadataResolver = _metadataResolver;\r\n        this._delegate = new JitCompiler(_metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, compilerConfig, console, this.getExtraNgModuleProviders.bind(this));\r\n        this.injector = injector;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getExtraNgModuleProviders() {\r\n        return [this._metadataResolver.getProviderMetadata(new ProviderMeta(Compiler, { useValue: this }))];\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleSync(moduleType) {\r\n        return /** @type {?} */ (this._delegate.compileModuleSync(moduleType));\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAsync(moduleType) {\r\n        return /** @type {?} */ (this._delegate.compileModuleAsync(moduleType));\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAndAllComponentsSync(moduleType) {\r\n        const /** @type {?} */ result = this._delegate.compileModuleAndAllComponentsSync(moduleType);\r\n        return {\r\n            ngModuleFactory: /** @type {?} */ (result.ngModuleFactory),\r\n            componentFactories: /** @type {?} */ (result.componentFactories),\r\n        };\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} moduleType\r\n     * @return {?}\r\n     */\r\n    compileModuleAndAllComponentsAsync(moduleType) {\r\n        return this._delegate.compileModuleAndAllComponentsAsync(moduleType)\r\n            .then((result) => ({\r\n            ngModuleFactory: /** @type {?} */ (result.ngModuleFactory),\r\n            componentFactories: /** @type {?} */ (result.componentFactories),\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} summaries\r\n     * @return {?}\r\n     */\r\n    loadAotSummaries(summaries) { this._delegate.loadAotSummaries(summaries); }\r\n    /**\r\n     * @param {?} ref\r\n     * @return {?}\r\n     */\r\n    hasAotSummary(ref) { return this._delegate.hasAotSummary(ref); }\r\n    /**\r\n     * @template T\r\n     * @param {?} component\r\n     * @return {?}\r\n     */\r\n    getComponentFactory(component) {\r\n        return /** @type {?} */ (this._delegate.getComponentFactory(component));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearCache() { this._delegate.clearCache(); }\r\n    /**\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    clearCacheFor(type) { this._delegate.clearCacheFor(type); }\r\n}\r\n/**\r\n * A set of providers that provide `JitCompiler` and its dependencies to use for\r\n * template compilation.\r\n */\r\nconst COMPILER_PROVIDERS = /** @type {?} */ ([\r\n    { provide: CompileReflector, useValue: new JitReflector() },\r\n    { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },\r\n    { provide: JitSummaryResolver, deps: [] },\r\n    { provide: SummaryResolver, useExisting: JitSummaryResolver },\r\n    { provide: ɵConsole, deps: [] },\r\n    { provide: Lexer, deps: [] },\r\n    { provide: Parser, deps: [Lexer] },\r\n    {\r\n        provide: baseHtmlParser,\r\n        useClass: HtmlParser,\r\n        deps: [],\r\n    },\r\n    {\r\n        provide: I18NHtmlParser,\r\n        useFactory: (parser, translations, format, config, console) => {\r\n            translations = translations || '';\r\n            const /** @type {?} */ missingTranslation = translations ? /** @type {?} */ ((config.missingTranslation)) : MissingTranslationStrategy.Ignore;\r\n            return new I18NHtmlParser(parser, translations, format, missingTranslation, console);\r\n        },\r\n        deps: [\r\n            baseHtmlParser,\r\n            [new Optional(), new Inject(TRANSLATIONS)],\r\n            [new Optional(), new Inject(TRANSLATIONS_FORMAT)],\r\n            [CompilerConfig],\r\n            [ɵConsole],\r\n        ]\r\n    },\r\n    {\r\n        provide: HtmlParser,\r\n        useExisting: I18NHtmlParser,\r\n    },\r\n    {\r\n        provide: TemplateParser, deps: [CompilerConfig, CompileReflector,\r\n            Parser, ElementSchemaRegistry,\r\n            I18NHtmlParser, ɵConsole]\r\n    },\r\n    { provide: DirectiveNormalizer, deps: [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig] },\r\n    { provide: CompileMetadataResolver, deps: [CompilerConfig, HtmlParser, NgModuleResolver,\r\n            DirectiveResolver, PipeResolver,\r\n            SummaryResolver,\r\n            ElementSchemaRegistry,\r\n            DirectiveNormalizer, ɵConsole,\r\n            [Optional, StaticSymbolCache],\r\n            CompileReflector,\r\n            [Optional, ERROR_COLLECTOR_TOKEN]] },\r\n    DEFAULT_PACKAGE_URL_PROVIDER,\r\n    { provide: StyleCompiler, deps: [UrlResolver] },\r\n    { provide: ViewCompiler, deps: [CompileReflector] },\r\n    { provide: NgModuleCompiler, deps: [CompileReflector] },\r\n    { provide: CompilerConfig, useValue: new CompilerConfig() },\r\n    { provide: Compiler, useClass: CompilerImpl, deps: [Injector, CompileMetadataResolver,\r\n            TemplateParser, StyleCompiler,\r\n            ViewCompiler, NgModuleCompiler,\r\n            SummaryResolver, CompileReflector, CompilerConfig,\r\n            ɵConsole] },\r\n    { provide: DomElementSchemaRegistry, deps: [] },\r\n    { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },\r\n    { provide: UrlResolver, deps: [PACKAGE_ROOT_URL] },\r\n    { provide: DirectiveResolver, deps: [CompileReflector] },\r\n    { provide: PipeResolver, deps: [CompileReflector] },\r\n    { provide: NgModuleResolver, deps: [CompileReflector] },\r\n]);\r\n/**\r\n * \\@experimental\r\n */\r\nclass JitCompilerFactory {\r\n    /**\r\n     * @param {?} defaultOptions\r\n     */\r\n    constructor(defaultOptions) {\r\n        const /** @type {?} */ compilerOptions = {\r\n            useJit: true,\r\n            defaultEncapsulation: ViewEncapsulation.Emulated,\r\n            missingTranslation: MissingTranslationStrategy.Warning,\r\n            enableLegacyTemplate: false,\r\n        };\r\n        this._defaultOptions = [compilerOptions, ...defaultOptions];\r\n    }\r\n    /**\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    createCompiler(options = []) {\r\n        const /** @type {?} */ opts = _mergeOptions(this._defaultOptions.concat(options));\r\n        const /** @type {?} */ injector = Injector.create([\r\n            COMPILER_PROVIDERS, {\r\n                provide: CompilerConfig,\r\n                useFactory: () => {\r\n                    return new CompilerConfig({\r\n                        // let explicit values from the compiler options overwrite options\r\n                        // from the app providers\r\n                        useJit: opts.useJit,\r\n                        jitDevMode: isDevMode(),\r\n                        // let explicit values from the compiler options overwrite options\r\n                        // from the app providers\r\n                        defaultEncapsulation: opts.defaultEncapsulation,\r\n                        missingTranslation: opts.missingTranslation,\r\n                        enableLegacyTemplate: opts.enableLegacyTemplate,\r\n                        preserveWhitespaces: opts.preserveWhitespaces,\r\n                    });\r\n                },\r\n                deps: []\r\n            },\r\n            /** @type {?} */ ((opts.providers))\r\n        ]);\r\n        return injector.get(Compiler);\r\n    }\r\n}\r\n/**\r\n * @param {?} optionsArr\r\n * @return {?}\r\n */\r\nfunction _mergeOptions(optionsArr) {\r\n    return {\r\n        useJit: _lastDefined(optionsArr.map(options => options.useJit)),\r\n        defaultEncapsulation: _lastDefined(optionsArr.map(options => options.defaultEncapsulation)),\r\n        providers: _mergeArrays(optionsArr.map(options => /** @type {?} */ ((options.providers)))),\r\n        missingTranslation: _lastDefined(optionsArr.map(options => options.missingTranslation)),\r\n        enableLegacyTemplate: _lastDefined(optionsArr.map(options => options.enableLegacyTemplate)),\r\n        preserveWhitespaces: _lastDefined(optionsArr.map(options => options.preserveWhitespaces)),\r\n    };\r\n}\r\n/**\r\n * @template T\r\n * @param {?} args\r\n * @return {?}\r\n */\r\nfunction _lastDefined(args) {\r\n    for (let /** @type {?} */ i = args.length - 1; i >= 0; i--) {\r\n        if (args[i] !== undefined) {\r\n            return args[i];\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * @param {?} parts\r\n * @return {?}\r\n */\r\nfunction _mergeArrays(parts) {\r\n    const /** @type {?} */ result = [];\r\n    parts.forEach((part) => part && result.push(...part));\r\n    return result;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A platform that included corePlatform and the compiler.\r\n *\r\n * \\@experimental\r\n */\r\nconst platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [\r\n    { provide: COMPILER_OPTIONS, useValue: {}, multi: true },\r\n    { provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS] },\r\n]);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass ResourceLoaderImpl extends ResourceLoader {\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    get(url) {\r\n        let /** @type {?} */ resolve;\r\n        let /** @type {?} */ reject;\r\n        const /** @type {?} */ promise = new Promise((res, rej) => {\r\n            resolve = res;\r\n            reject = rej;\r\n        });\r\n        const /** @type {?} */ xhr = new XMLHttpRequest();\r\n        xhr.open('GET', url, true);\r\n        xhr.responseType = 'text';\r\n        xhr.onload = function () {\r\n            // responseText is the old-school way of retrieving response (supported by IE8 & 9)\r\n            // response/responseType properties were introduced in ResourceLoader Level2 spec (supported\r\n            // by IE10)\r\n            const /** @type {?} */ response = xhr.response || xhr.responseText;\r\n            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\r\n            let /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\r\n            // fix status code when it is 0 (0 status is undocumented).\r\n            // Occurs when accessing file resources or on Android 4.1 stock browser\r\n            // while retrieving files from application cache.\r\n            if (status === 0) {\r\n                status = response ? 200 : 0;\r\n            }\r\n            if (200 <= status && status <= 300) {\r\n                resolve(response);\r\n            }\r\n            else {\r\n                reject(`Failed to load ${url}`);\r\n            }\r\n        };\r\n        xhr.onerror = function () { reject(`Failed to load ${url}`); };\r\n        xhr.send();\r\n        return promise;\r\n    }\r\n}\r\nResourceLoaderImpl.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nResourceLoaderImpl.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [\r\n    ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS,\r\n    {\r\n        provide: COMPILER_OPTIONS,\r\n        useValue: { providers: [{ provide: ResourceLoader, useClass: ResourceLoaderImpl, deps: [] }] },\r\n        multi: true\r\n    },\r\n    { provide: PLATFORM_ID, useValue: ɵPLATFORM_BROWSER_ID },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An implementation of ResourceLoader that uses a template cache to avoid doing an actual\r\n * ResourceLoader.\r\n *\r\n * The template cache needs to be built and loaded into window.$templateCache\r\n * via a separate mechanism.\r\n */\r\nclass CachedResourceLoader extends ResourceLoader {\r\n    constructor() {\r\n        super();\r\n        this._cache = (/** @type {?} */ (ɵglobal)).$templateCache;\r\n        if (this._cache == null) {\r\n            throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    get(url) {\r\n        if (this._cache.hasOwnProperty(url)) {\r\n            return Promise.resolve(this._cache[url]);\r\n        }\r\n        else {\r\n            return /** @type {?} */ (Promise.reject('CachedResourceLoader: Did not find cached template for ' + url));\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of the common package.\r\n */\r\n/**\r\n * \\@stable\r\n */\r\nconst VERSION = new Version('5.1.3');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@experimental\r\n */\r\nconst RESOURCE_CACHE_PROVIDER = [{ provide: ResourceLoader, useClass: CachedResourceLoader, deps: [] }];\r\n/**\r\n * \\@stable\r\n */\r\nconst platformBrowserDynamic = createPlatformFactory(platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\r\n\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { VERSION, JitCompilerFactory, RESOURCE_CACHE_PROVIDER, platformBrowserDynamic, CompilerImpl as ɵCompilerImpl, platformCoreDynamic as ɵplatformCoreDynamic, INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS, ResourceLoaderImpl as ɵResourceLoaderImpl, CachedResourceLoader as ɵa };\r\n//# sourceMappingURL=platform-browser-dynamic.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/platform-browser-dynamic/esm2015/platform-browser-dynamic.js\n// module id = ../../../platform-browser-dynamic/esm2015/platform-browser-dynamic.js\n// module chunks = vendor","/**\r\n * @license Angular v5.1.3\r\n * (c) 2010-2017 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\nimport { CommonModule, DOCUMENT, PlatformLocation, ɵPLATFORM_BROWSER_ID, ɵparseCookieValue } from '@angular/common';\r\nimport { APP_ID, APP_INITIALIZER, ApplicationInitStatus, ApplicationModule, ApplicationRef, ErrorHandler, Inject, Injectable, InjectionToken, Injector, NgModule, NgProbeToken, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, RendererFactory2, RendererStyleFlags2, Sanitizer, SecurityContext, SkipSelf, Testability, Version, ViewEncapsulation, createPlatformFactory, getDebugNode, isDevMode, platformCore, setTestabilityGetter, ɵglobal } from '@angular/core';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nlet _DOM = /** @type {?} */ ((null));\r\n/**\r\n * @return {?}\r\n */\r\nfunction getDOM() {\r\n    return _DOM;\r\n}\r\n/**\r\n * @param {?} adapter\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * @param {?} adapter\r\n * @return {?}\r\n */\r\nfunction setRootDomAdapter(adapter) {\r\n    if (!_DOM) {\r\n        _DOM = adapter;\r\n    }\r\n}\r\n/**\r\n * Provides DOM operations in an environment-agnostic way.\r\n *\r\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n * @abstract\r\n */\r\nclass DomAdapter {\r\n    constructor() {\r\n        this.resourceLoaderType = /** @type {?} */ ((null));\r\n    }\r\n    /**\r\n     * Maps attribute names to their corresponding property names for cases\r\n     * where attribute name doesn't match property name.\r\n     * @return {?}\r\n     */\r\n    get attrToPropMap() { return this._attrToPropMap; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set attrToPropMap(value) { this._attrToPropMap = value; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides DOM operations in any browser environment.\r\n *\r\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n * @abstract\r\n */\r\nclass GenericBrowserDomAdapter extends DomAdapter {\r\n    constructor() {\r\n        super();\r\n        this._animationPrefix = null;\r\n        this._transitionEnd = null;\r\n        try {\r\n            const /** @type {?} */ element = this.createElement('div', document);\r\n            if (this.getStyle(element, 'animationName') != null) {\r\n                this._animationPrefix = '';\r\n            }\r\n            else {\r\n                const /** @type {?} */ domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\r\n                for (let /** @type {?} */ i = 0; i < domPrefixes.length; i++) {\r\n                    if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\r\n                        this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            const /** @type {?} */ transEndEventNames = {\r\n                WebkitTransition: 'webkitTransitionEnd',\r\n                MozTransition: 'transitionend',\r\n                OTransition: 'oTransitionEnd otransitionend',\r\n                transition: 'transitionend'\r\n            };\r\n            Object.keys(transEndEventNames).forEach((key) => {\r\n                if (this.getStyle(element, key) != null) {\r\n                    this._transitionEnd = transEndEventNames[key];\r\n                }\r\n            });\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            this._animationPrefix = null;\r\n            this._transitionEnd = null;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getDistributedNodes(el) { return (/** @type {?} */ (el)).getDistributedNodes(); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} baseUrl\r\n     * @param {?} href\r\n     * @return {?}\r\n     */\r\n    resolveAndSetHref(el, baseUrl, href) {\r\n        el.href = href == null ? baseUrl : baseUrl + '/../' + href;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    supportsDOMEvents() { return true; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    supportsNativeShadowDOM() {\r\n        return typeof (/** @type {?} */ (document.body)).createShadowRoot === 'function';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getAnimationPrefix() { return this._animationPrefix ? this._animationPrefix : ''; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTransitionEnd() { return this._transitionEnd ? this._transitionEnd : ''; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    supportsAnimation() {\r\n        return this._animationPrefix != null && this._transitionEnd != null;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _attrToPropMap = {\r\n    'class': 'className',\r\n    'innerHtml': 'innerHTML',\r\n    'readonly': 'readOnly',\r\n    'tabindex': 'tabIndex',\r\n};\r\nconst DOM_KEY_LOCATION_NUMPAD = 3;\r\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\r\nconst _keyMap = {\r\n    // The following values are here for cross-browser compatibility and to match the W3C standard\r\n    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\r\n    '\\b': 'Backspace',\r\n    '\\t': 'Tab',\r\n    '\\x7F': 'Delete',\r\n    '\\x1B': 'Escape',\r\n    'Del': 'Delete',\r\n    'Esc': 'Escape',\r\n    'Left': 'ArrowLeft',\r\n    'Right': 'ArrowRight',\r\n    'Up': 'ArrowUp',\r\n    'Down': 'ArrowDown',\r\n    'Menu': 'ContextMenu',\r\n    'Scroll': 'ScrollLock',\r\n    'Win': 'OS'\r\n};\r\n// There is a bug in Chrome for numeric keypad keys:\r\n// https://code.google.com/p/chromium/issues/detail?id=155654\r\n// 1, 2, 3 ... are reported as A, B, C ...\r\nconst _chromeNumKeyPadMap = {\r\n    'A': '1',\r\n    'B': '2',\r\n    'C': '3',\r\n    'D': '4',\r\n    'E': '5',\r\n    'F': '6',\r\n    'G': '7',\r\n    'H': '8',\r\n    'I': '9',\r\n    'J': '*',\r\n    'K': '+',\r\n    'M': '-',\r\n    'N': '.',\r\n    'O': '/',\r\n    '\\x60': '0',\r\n    '\\x90': 'NumLock'\r\n};\r\nlet nodeContains;\r\nif (ɵglobal['Node']) {\r\n    nodeContains = ɵglobal['Node'].prototype.contains || function (node) {\r\n        return !!(this.compareDocumentPosition(node) & 16);\r\n    };\r\n}\r\n/**\r\n * A `DomAdapter` powered by full browser DOM APIs.\r\n *\r\n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\r\n * can introduce XSS risks.\r\n */\r\nclass BrowserDomAdapter extends GenericBrowserDomAdapter {\r\n    /**\r\n     * @param {?} templateHtml\r\n     * @return {?}\r\n     */\r\n    parse(templateHtml) { throw new Error('parse not implemented'); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    hasProperty(element, name) { return name in element; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setProperty(el, name, value) { (/** @type {?} */ (el))[name] = value; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getProperty(el, name) { return (/** @type {?} */ (el))[name]; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} methodName\r\n     * @param {?} args\r\n     * @return {?}\r\n     */\r\n    invoke(el, methodName, args) { (/** @type {?} */ (el))[methodName](...args); }\r\n    /**\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    logError(error) {\r\n        if (window.console) {\r\n            if (console.error) {\r\n                console.error(error);\r\n            }\r\n            else {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    log(error) {\r\n        if (window.console) {\r\n            window.console.log && window.console.log(error);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} error\r\n     * @return {?}\r\n     */\r\n    logGroup(error) {\r\n        if (window.console) {\r\n            window.console.group && window.console.group(error);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    logGroupEnd() {\r\n        if (window.console) {\r\n            window.console.groupEnd && window.console.groupEnd();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get attrToPropMap() { return _attrToPropMap; }\r\n    /**\r\n     * @param {?} nodeA\r\n     * @param {?} nodeB\r\n     * @return {?}\r\n     */\r\n    contains(nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    querySelector(el, selector) { return el.querySelector(selector); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    querySelectorAll(el, selector) { return el.querySelectorAll(selector); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} evt\r\n     * @param {?} listener\r\n     * @return {?}\r\n     */\r\n    on(el, evt, listener) { el.addEventListener(evt, listener, false); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} evt\r\n     * @param {?} listener\r\n     * @return {?}\r\n     */\r\n    onAndCancel(el, evt, listener) {\r\n        el.addEventListener(evt, listener, false);\r\n        // Needed to follow Dart's subscription semantic, until fix of\r\n        // https://code.google.com/p/dart/issues/detail?id=17406\r\n        return () => { el.removeEventListener(evt, listener, false); };\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} evt\r\n     * @return {?}\r\n     */\r\n    dispatchEvent(el, evt) { el.dispatchEvent(evt); }\r\n    /**\r\n     * @param {?} eventType\r\n     * @return {?}\r\n     */\r\n    createMouseEvent(eventType) {\r\n        const /** @type {?} */ evt = this.getDefaultDocument().createEvent('MouseEvent');\r\n        evt.initEvent(eventType, true, true);\r\n        return evt;\r\n    }\r\n    /**\r\n     * @param {?} eventType\r\n     * @return {?}\r\n     */\r\n    createEvent(eventType) {\r\n        const /** @type {?} */ evt = this.getDefaultDocument().createEvent('Event');\r\n        evt.initEvent(eventType, true, true);\r\n        return evt;\r\n    }\r\n    /**\r\n     * @param {?} evt\r\n     * @return {?}\r\n     */\r\n    preventDefault(evt) {\r\n        evt.preventDefault();\r\n        evt.returnValue = false;\r\n    }\r\n    /**\r\n     * @param {?} evt\r\n     * @return {?}\r\n     */\r\n    isPrevented(evt) {\r\n        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getInnerHTML(el) { return el.innerHTML; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getTemplateContent(el) {\r\n        return 'content' in el && this.isTemplateElement(el) ? (/** @type {?} */ (el)).content : null;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getOuterHTML(el) { return el.outerHTML; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    nodeName(node) { return node.nodeName; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    nodeValue(node) { return node.nodeValue; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    type(node) { return node.type; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    content(node) {\r\n        if (this.hasProperty(node, 'content')) {\r\n            return (/** @type {?} */ (node)).content;\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    firstChild(el) { return el.firstChild; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    nextSibling(el) { return el.nextSibling; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    parentElement(el) { return el.parentNode; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    childNodes(el) { return el.childNodes; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    childNodesAsList(el) {\r\n        const /** @type {?} */ childNodes = el.childNodes;\r\n        const /** @type {?} */ res = new Array(childNodes.length);\r\n        for (let /** @type {?} */ i = 0; i < childNodes.length; i++) {\r\n            res[i] = childNodes[i];\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    clearNodes(el) {\r\n        while (el.firstChild) {\r\n            el.removeChild(el.firstChild);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    appendChild(el, node) { el.appendChild(node); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    removeChild(el, node) { el.removeChild(node); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} newChild\r\n     * @param {?} oldChild\r\n     * @return {?}\r\n     */\r\n    replaceChild(el, newChild, oldChild) { el.replaceChild(newChild, oldChild); }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    remove(node) {\r\n        if (node.parentNode) {\r\n            node.parentNode.removeChild(node);\r\n        }\r\n        return node;\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} ref\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    insertBefore(parent, ref, node) { parent.insertBefore(node, ref); }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} ref\r\n     * @param {?} nodes\r\n     * @return {?}\r\n     */\r\n    insertAllBefore(parent, ref, nodes) {\r\n        nodes.forEach((n) => parent.insertBefore(n, ref));\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} ref\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    insertAfter(parent, ref, node) { parent.insertBefore(node, ref.nextSibling); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setInnerHTML(el, value) { el.innerHTML = value; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getText(el) { return el.textContent; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setText(el, value) { el.textContent = value; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getValue(el) { return el.value; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setValue(el, value) { el.value = value; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getChecked(el) { return el.checked; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setChecked(el, value) { el.checked = value; }\r\n    /**\r\n     * @param {?} text\r\n     * @return {?}\r\n     */\r\n    createComment(text) { return this.getDefaultDocument().createComment(text); }\r\n    /**\r\n     * @param {?} html\r\n     * @return {?}\r\n     */\r\n    createTemplate(html) {\r\n        const /** @type {?} */ t = this.getDefaultDocument().createElement('template');\r\n        t.innerHTML = html;\r\n        return t;\r\n    }\r\n    /**\r\n     * @param {?} tagName\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    createElement(tagName, doc) {\r\n        doc = doc || this.getDefaultDocument();\r\n        return doc.createElement(tagName);\r\n    }\r\n    /**\r\n     * @param {?} ns\r\n     * @param {?} tagName\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    createElementNS(ns, tagName, doc) {\r\n        doc = doc || this.getDefaultDocument();\r\n        return doc.createElementNS(ns, tagName);\r\n    }\r\n    /**\r\n     * @param {?} text\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    createTextNode(text, doc) {\r\n        doc = doc || this.getDefaultDocument();\r\n        return doc.createTextNode(text);\r\n    }\r\n    /**\r\n     * @param {?} attrName\r\n     * @param {?} attrValue\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    createScriptTag(attrName, attrValue, doc) {\r\n        doc = doc || this.getDefaultDocument();\r\n        const /** @type {?} */ el = /** @type {?} */ (doc.createElement('SCRIPT'));\r\n        el.setAttribute(attrName, attrValue);\r\n        return el;\r\n    }\r\n    /**\r\n     * @param {?} css\r\n     * @param {?=} doc\r\n     * @return {?}\r\n     */\r\n    createStyleElement(css, doc) {\r\n        doc = doc || this.getDefaultDocument();\r\n        const /** @type {?} */ style = /** @type {?} */ (doc.createElement('style'));\r\n        this.appendChild(style, this.createTextNode(css, doc));\r\n        return style;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    createShadowRoot(el) { return (/** @type {?} */ (el)).createShadowRoot(); }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getShadowRoot(el) { return (/** @type {?} */ (el)).shadowRoot; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getHost(el) { return (/** @type {?} */ (el)).host; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    clone(node) { return node.cloneNode(true); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getElementsByClassName(element, name) {\r\n        return element.getElementsByClassName(name);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getElementsByTagName(element, name) {\r\n        return element.getElementsByTagName(name);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    classList(element) { return Array.prototype.slice.call(element.classList, 0); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    addClass(element, className) { element.classList.add(className); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    removeClass(element, className) { element.classList.remove(className); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} className\r\n     * @return {?}\r\n     */\r\n    hasClass(element, className) {\r\n        return element.classList.contains(className);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} styleName\r\n     * @param {?} styleValue\r\n     * @return {?}\r\n     */\r\n    setStyle(element, styleName, styleValue) {\r\n        element.style[styleName] = styleValue;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} stylename\r\n     * @return {?}\r\n     */\r\n    removeStyle(element, stylename) {\r\n        // IE requires '' instead of null\r\n        // see https://github.com/angular/angular/issues/7916\r\n        element.style[stylename] = '';\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} stylename\r\n     * @return {?}\r\n     */\r\n    getStyle(element, stylename) { return element.style[stylename]; }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} styleName\r\n     * @param {?=} styleValue\r\n     * @return {?}\r\n     */\r\n    hasStyle(element, styleName, styleValue) {\r\n        const /** @type {?} */ value = this.getStyle(element, styleName) || '';\r\n        return styleValue ? value == styleValue : value.length > 0;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    tagName(element) { return element.tagName; }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    attributeMap(element) {\r\n        const /** @type {?} */ res = new Map();\r\n        const /** @type {?} */ elAttrs = element.attributes;\r\n        for (let /** @type {?} */ i = 0; i < elAttrs.length; i++) {\r\n            const /** @type {?} */ attrib = elAttrs.item(i);\r\n            res.set(attrib.name, attrib.value);\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    hasAttribute(element, attribute) {\r\n        return element.hasAttribute(attribute);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    hasAttributeNS(element, ns, attribute) {\r\n        return element.hasAttributeNS(ns, attribute);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    getAttribute(element, attribute) {\r\n        return element.getAttribute(attribute);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getAttributeNS(element, ns, name) {\r\n        return element.getAttributeNS(ns, name);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setAttribute(element, name, value) { element.setAttribute(name, value); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setAttributeNS(element, ns, name, value) {\r\n        element.setAttributeNS(ns, name, value);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} attribute\r\n     * @return {?}\r\n     */\r\n    removeAttribute(element, attribute) { element.removeAttribute(attribute); }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} ns\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    removeAttributeNS(element, ns, name) {\r\n        element.removeAttributeNS(ns, name);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    templateAwareRoot(el) { return this.isTemplateElement(el) ? this.content(el) : el; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    createHtmlDocument() {\r\n        return document.implementation.createHTMLDocument('fakeTitle');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getDefaultDocument() { return document; }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getBoundingClientRect(el) {\r\n        try {\r\n            return el.getBoundingClientRect();\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} doc\r\n     * @return {?}\r\n     */\r\n    getTitle(doc) { return doc.title; }\r\n    /**\r\n     * @param {?} doc\r\n     * @param {?} newTitle\r\n     * @return {?}\r\n     */\r\n    setTitle(doc, newTitle) { doc.title = newTitle || ''; }\r\n    /**\r\n     * @param {?} n\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    elementMatches(n, selector) {\r\n        if (this.isElementNode(n)) {\r\n            return n.matches && n.matches(selector) ||\r\n                n.msMatchesSelector && n.msMatchesSelector(selector) ||\r\n                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    isTemplateElement(el) {\r\n        return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    isTextNode(node) { return node.nodeType === Node.TEXT_NODE; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    isCommentNode(node) { return node.nodeType === Node.COMMENT_NODE; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    isElementNode(node) { return node.nodeType === Node.ELEMENT_NODE; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    hasShadowRoot(node) {\r\n        return node.shadowRoot != null && node instanceof HTMLElement;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    isShadowRoot(node) { return node instanceof DocumentFragment; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    importIntoDoc(node) { return document.importNode(this.templateAwareRoot(node), true); }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    adoptNode(node) { return document.adoptNode(node); }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    getHref(el) { return /** @type {?} */ ((el.getAttribute('href'))); }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    getEventKey(event) {\r\n        let /** @type {?} */ key = event.key;\r\n        if (key == null) {\r\n            key = event.keyIdentifier;\r\n            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\r\n            // Safari cf\r\n            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\r\n            if (key == null) {\r\n                return 'Unidentified';\r\n            }\r\n            if (key.startsWith('U+')) {\r\n                key = String.fromCharCode(parseInt(key.substring(2), 16));\r\n                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\r\n                    // There is a bug in Chrome for numeric keypad keys:\r\n                    // https://code.google.com/p/chromium/issues/detail?id=155654\r\n                    // 1, 2, 3 ... are reported as A, B, C ...\r\n                    key = (/** @type {?} */ (_chromeNumKeyPadMap))[key];\r\n                }\r\n            }\r\n        }\r\n        return _keyMap[key] || key;\r\n    }\r\n    /**\r\n     * @param {?} doc\r\n     * @param {?} target\r\n     * @return {?}\r\n     */\r\n    getGlobalEventTarget(doc, target) {\r\n        if (target === 'window') {\r\n            return window;\r\n        }\r\n        if (target === 'document') {\r\n            return doc;\r\n        }\r\n        if (target === 'body') {\r\n            return doc.body;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getHistory() { return window.history; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getLocation() { return window.location; }\r\n    /**\r\n     * @param {?} doc\r\n     * @return {?}\r\n     */\r\n    getBaseHref(doc) {\r\n        const /** @type {?} */ href = getBaseElementHref();\r\n        return href == null ? null : relativePath(href);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    resetBaseElement() { baseElement = null; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getUserAgent() { return window.navigator.userAgent; }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setData(element, name, value) {\r\n        this.setAttribute(element, 'data-' + name, value);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getData(element, name) {\r\n        return this.getAttribute(element, 'data-' + name);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    getComputedStyle(element) { return getComputedStyle(element); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    supportsWebAnimation() {\r\n        return typeof (/** @type {?} */ (Element)).prototype['animate'] === 'function';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    performanceNow() {\r\n        // performance.now() is not available in all browsers, see\r\n        // http://caniuse.com/#search=performance.now\r\n        return window.performance && window.performance.now ? window.performance.now() :\r\n            new Date().getTime();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    supportsCookies() { return true; }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getCookie(name) { return ɵparseCookieValue(document.cookie, name); }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setCookie(name, value) {\r\n        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\r\n        // not clear other cookies.\r\n        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\r\n    }\r\n}\r\nlet baseElement = null;\r\n/**\r\n * @return {?}\r\n */\r\nfunction getBaseElementHref() {\r\n    if (!baseElement) {\r\n        baseElement = /** @type {?} */ ((document.querySelector('base')));\r\n        if (!baseElement) {\r\n            return null;\r\n        }\r\n    }\r\n    return baseElement.getAttribute('href');\r\n}\r\n// based on urlUtils.js in AngularJS 1\r\nlet urlParsingNode;\r\n/**\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction relativePath(url) {\r\n    if (!urlParsingNode) {\r\n        urlParsingNode = document.createElement('a');\r\n    }\r\n    urlParsingNode.setAttribute('href', url);\r\n    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\r\n        '/' + urlParsingNode.pathname;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\r\n *\r\n * Note: Document might not be available in the Application Context when Application and Rendering\r\n * Contexts are not the same (e.g. when running the application into a Web Worker).\r\n *\r\n * @deprecated import from `\\@angular/common` instead.\r\n */\r\nconst DOCUMENT$1 = DOCUMENT;\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction supportsState() {\r\n    return !!window.history.pushState;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\r\n * This class should not be used directly by an application developer. Instead, use\r\n * {\\@link Location}.\r\n */\r\nclass BrowserPlatformLocation extends PlatformLocation {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        super();\r\n        this._doc = _doc;\r\n        this._init();\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @return {?}\r\n     */\r\n    _init() {\r\n        (/** @type {?} */ (this)).location = getDOM().getLocation();\r\n        this._history = getDOM().getHistory();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getBaseHrefFromDOM() { return /** @type {?} */ ((getDOM().getBaseHref(this._doc))); }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    onPopState(fn) {\r\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    onHashChange(fn) {\r\n        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get pathname() { return this.location.pathname; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get search() { return this.location.search; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get hash() { return this.location.hash; }\r\n    /**\r\n     * @param {?} newPath\r\n     * @return {?}\r\n     */\r\n    set pathname(newPath) { this.location.pathname = newPath; }\r\n    /**\r\n     * @param {?} state\r\n     * @param {?} title\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    pushState(state, title, url) {\r\n        if (supportsState()) {\r\n            this._history.pushState(state, title, url);\r\n        }\r\n        else {\r\n            this.location.hash = url;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} state\r\n     * @param {?} title\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    replaceState(state, title, url) {\r\n        if (supportsState()) {\r\n            this._history.replaceState(state, title, url);\r\n        }\r\n        else {\r\n            this.location.hash = url;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    forward() { this._history.forward(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    back() { this._history.back(); }\r\n}\r\nBrowserPlatformLocation.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nBrowserPlatformLocation.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A service that can be used to get and add meta tags.\r\n *\r\n * \\@experimental\r\n */\r\nclass Meta {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        this._doc = _doc;\r\n        this._dom = getDOM();\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {?=} forceCreation\r\n     * @return {?}\r\n     */\r\n    addTag(tag, forceCreation = false) {\r\n        if (!tag)\r\n            return null;\r\n        return this._getOrCreateElement(tag, forceCreation);\r\n    }\r\n    /**\r\n     * @param {?} tags\r\n     * @param {?=} forceCreation\r\n     * @return {?}\r\n     */\r\n    addTags(tags, forceCreation = false) {\r\n        if (!tags)\r\n            return [];\r\n        return tags.reduce((result, tag) => {\r\n            if (tag) {\r\n                result.push(this._getOrCreateElement(tag, forceCreation));\r\n            }\r\n            return result;\r\n        }, []);\r\n    }\r\n    /**\r\n     * @param {?} attrSelector\r\n     * @return {?}\r\n     */\r\n    getTag(attrSelector) {\r\n        if (!attrSelector)\r\n            return null;\r\n        return this._dom.querySelector(this._doc, `meta[${attrSelector}]`) || null;\r\n    }\r\n    /**\r\n     * @param {?} attrSelector\r\n     * @return {?}\r\n     */\r\n    getTags(attrSelector) {\r\n        if (!attrSelector)\r\n            return [];\r\n        const /** @type {?} */ list = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\r\n        return list ? [].slice.call(list) : [];\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {?=} selector\r\n     * @return {?}\r\n     */\r\n    updateTag(tag, selector) {\r\n        if (!tag)\r\n            return null;\r\n        selector = selector || this._parseSelector(tag);\r\n        const /** @type {?} */ meta = /** @type {?} */ ((this.getTag(selector)));\r\n        if (meta) {\r\n            return this._setMetaElementAttributes(tag, meta);\r\n        }\r\n        return this._getOrCreateElement(tag, true);\r\n    }\r\n    /**\r\n     * @param {?} attrSelector\r\n     * @return {?}\r\n     */\r\n    removeTag(attrSelector) { this.removeTagElement(/** @type {?} */ ((this.getTag(attrSelector)))); }\r\n    /**\r\n     * @param {?} meta\r\n     * @return {?}\r\n     */\r\n    removeTagElement(meta) {\r\n        if (meta) {\r\n            this._dom.remove(meta);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} meta\r\n     * @param {?=} forceCreation\r\n     * @return {?}\r\n     */\r\n    _getOrCreateElement(meta, forceCreation = false) {\r\n        if (!forceCreation) {\r\n            const /** @type {?} */ selector = this._parseSelector(meta);\r\n            const /** @type {?} */ elem = /** @type {?} */ ((this.getTag(selector)));\r\n            // It's allowed to have multiple elements with the same name so it's not enough to\r\n            // just check that element with the same name already present on the page. We also need to\r\n            // check if element has tag attributes\r\n            if (elem && this._containsAttributes(meta, elem))\r\n                return elem;\r\n        }\r\n        const /** @type {?} */ element = /** @type {?} */ (this._dom.createElement('meta'));\r\n        this._setMetaElementAttributes(meta, element);\r\n        const /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];\r\n        this._dom.appendChild(head, element);\r\n        return element;\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    _setMetaElementAttributes(tag, el) {\r\n        Object.keys(tag).forEach((prop) => this._dom.setAttribute(el, prop, tag[prop]));\r\n        return el;\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @return {?}\r\n     */\r\n    _parseSelector(tag) {\r\n        const /** @type {?} */ attr = tag.name ? 'name' : 'property';\r\n        return `${attr}=\"${tag[attr]}\"`;\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {?} elem\r\n     * @return {?}\r\n     */\r\n    _containsAttributes(tag, elem) {\r\n        return Object.keys(tag).every((key) => this._dom.getAttribute(elem, key) === tag[key]);\r\n    }\r\n}\r\nMeta.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nMeta.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * An id that identifies a particular application being bootstrapped, that should\r\n * match across the client/server boundary.\r\n */\r\nconst TRANSITION_ID = new InjectionToken('TRANSITION_ID');\r\n/**\r\n * @param {?} transitionId\r\n * @param {?} document\r\n * @param {?} injector\r\n * @return {?}\r\n */\r\nfunction appInitializerFactory(transitionId, document, injector) {\r\n    return () => {\r\n        // Wait for all application initializers to be completed before removing the styles set by\r\n        // the server.\r\n        injector.get(ApplicationInitStatus).donePromise.then(() => {\r\n            const /** @type {?} */ dom = getDOM();\r\n            const /** @type {?} */ styles = Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\r\n            styles.filter(el => dom.getAttribute(el, 'ng-transition') === transitionId)\r\n                .forEach(el => dom.remove(el));\r\n        });\r\n    };\r\n}\r\nconst SERVER_TRANSITION_PROVIDERS = [\r\n    {\r\n        provide: APP_INITIALIZER,\r\n        useFactory: appInitializerFactory,\r\n        deps: [TRANSITION_ID, DOCUMENT$1, Injector],\r\n        multi: true\r\n    },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass BrowserGetTestability {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static init() { setTestabilityGetter(new BrowserGetTestability()); }\r\n    /**\r\n     * @param {?} registry\r\n     * @return {?}\r\n     */\r\n    addToWindow(registry) {\r\n        ɵglobal['getAngularTestability'] = (elem, findInAncestors = true) => {\r\n            const /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);\r\n            if (testability == null) {\r\n                throw new Error('Could not find testability for element.');\r\n            }\r\n            return testability;\r\n        };\r\n        ɵglobal['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\r\n        ɵglobal['getAllAngularRootElements'] = () => registry.getAllRootElements();\r\n        const /** @type {?} */ whenAllStable = (callback /** TODO #9100 */) => {\r\n            const /** @type {?} */ testabilities = ɵglobal['getAllAngularTestabilities']();\r\n            let /** @type {?} */ count = testabilities.length;\r\n            let /** @type {?} */ didWork = false;\r\n            const /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {\r\n                didWork = didWork || didWork_;\r\n                count--;\r\n                if (count == 0) {\r\n                    callback(didWork);\r\n                }\r\n            };\r\n            testabilities.forEach(function (testability /** TODO #9100 */) {\r\n                testability.whenStable(decrement);\r\n            });\r\n        };\r\n        if (!ɵglobal['frameworkStabilizers']) {\r\n            ɵglobal['frameworkStabilizers'] = [];\r\n        }\r\n        ɵglobal['frameworkStabilizers'].push(whenAllStable);\r\n    }\r\n    /**\r\n     * @param {?} registry\r\n     * @param {?} elem\r\n     * @param {?} findInAncestors\r\n     * @return {?}\r\n     */\r\n    findTestabilityInTree(registry, elem, findInAncestors) {\r\n        if (elem == null) {\r\n            return null;\r\n        }\r\n        const /** @type {?} */ t = registry.getTestability(elem);\r\n        if (t != null) {\r\n            return t;\r\n        }\r\n        else if (!findInAncestors) {\r\n            return null;\r\n        }\r\n        if (getDOM().isShadowRoot(elem)) {\r\n            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\r\n        }\r\n        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A service that can be used to get and set the title of a current HTML document.\r\n *\r\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\r\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\r\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\r\n * title value.\r\n *\r\n * \\@experimental\r\n */\r\nclass Title {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        this._doc = _doc;\r\n    }\r\n    /**\r\n     * Get the title of the current HTML document.\r\n     * @return {?}\r\n     */\r\n    getTitle() { return getDOM().getTitle(this._doc); }\r\n    /**\r\n     * Set the title of the current HTML document.\r\n     * @param {?} newTitle\r\n     * @return {?}\r\n     */\r\n    setTitle(newTitle) { getDOM().setTitle(this._doc, newTitle); }\r\n}\r\nTitle.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nTitle.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * @param {?} input\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\r\n * `name` is `'probe'`.\r\n * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the\r\n * global `ng` object.\r\n * @param {?} value The value to export.\r\n * @return {?}\r\n */\r\nfunction exportNgVar(name, value) {\r\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\r\n        // Note: we can't export `ng` when using closure enhanced optimization as:\r\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\r\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\r\n        //   for typings for angularJS (via `goog.provide('ng....')`).\r\n        const /** @type {?} */ ng = ɵglobal['ng'] = (/** @type {?} */ (ɵglobal['ng'])) || {};\r\n        ng[name] = value;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst CORE_TOKENS = {\r\n    'ApplicationRef': ApplicationRef,\r\n    'NgZone': NgZone,\r\n};\r\nconst INSPECT_GLOBAL_NAME = 'probe';\r\nconst CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\r\n/**\r\n * Returns a {\\@link DebugElement} for the given native DOM element, or\r\n * null if the given native element does not have an Angular view associated\r\n * with it.\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction inspectNativeElement(element) {\r\n    return getDebugNode(element);\r\n}\r\n/**\r\n * @param {?} coreTokens\r\n * @return {?}\r\n */\r\nfunction _createNgProbe(coreTokens) {\r\n    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\r\n    exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign({}, CORE_TOKENS, _ngProbeTokensToMap(coreTokens || [])));\r\n    return () => inspectNativeElement;\r\n}\r\n/**\r\n * @param {?} tokens\r\n * @return {?}\r\n */\r\nfunction _ngProbeTokensToMap(tokens) {\r\n    return tokens.reduce((prev, t) => (prev[t.name] = t.token, prev), {});\r\n}\r\n/**\r\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\r\n */\r\nconst ELEMENT_PROBE_PROVIDERS = [\r\n    {\r\n        provide: APP_INITIALIZER,\r\n        useFactory: _createNgProbe,\r\n        deps: [\r\n            [NgProbeToken, new Optional()],\r\n        ],\r\n        multi: true,\r\n    },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@stable\r\n */\r\nconst EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\r\n/**\r\n * \\@stable\r\n */\r\nclass EventManager {\r\n    /**\r\n     * @param {?} plugins\r\n     * @param {?} _zone\r\n     */\r\n    constructor(plugins, _zone) {\r\n        this._zone = _zone;\r\n        this._eventNameToPlugin = new Map();\r\n        plugins.forEach(p => p.manager = this);\r\n        this._plugins = plugins.slice().reverse();\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} eventName\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\r\n    addEventListener(element, eventName, handler) {\r\n        const /** @type {?} */ plugin = this._findPluginFor(eventName);\r\n        return plugin.addEventListener(element, eventName, handler);\r\n    }\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} eventName\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\r\n    addGlobalEventListener(target, eventName, handler) {\r\n        const /** @type {?} */ plugin = this._findPluginFor(eventName);\r\n        return plugin.addGlobalEventListener(target, eventName, handler);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getZone() { return this._zone; }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    _findPluginFor(eventName) {\r\n        const /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);\r\n        if (plugin) {\r\n            return plugin;\r\n        }\r\n        const /** @type {?} */ plugins = this._plugins;\r\n        for (let /** @type {?} */ i = 0; i < plugins.length; i++) {\r\n            const /** @type {?} */ plugin = plugins[i];\r\n            if (plugin.supports(eventName)) {\r\n                this._eventNameToPlugin.set(eventName, plugin);\r\n                return plugin;\r\n            }\r\n        }\r\n        throw new Error(`No event manager plugin found for event ${eventName}`);\r\n    }\r\n}\r\nEventManager.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nEventManager.ctorParameters = () => [\r\n    { type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] },] },\r\n    { type: NgZone, },\r\n];\r\n/**\r\n * @abstract\r\n */\r\nclass EventManagerPlugin {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        this._doc = _doc;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} eventName\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\r\n    addGlobalEventListener(element, eventName, handler) {\r\n        const /** @type {?} */ target = getDOM().getGlobalEventTarget(this._doc, element);\r\n        if (!target) {\r\n            throw new Error(`Unsupported event target ${target} for event ${eventName}`);\r\n        }\r\n        return this.addEventListener(target, eventName, handler);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass SharedStylesHost {\r\n    constructor() {\r\n        /**\r\n         * \\@internal\r\n         */\r\n        this._stylesSet = new Set();\r\n    }\r\n    /**\r\n     * @param {?} styles\r\n     * @return {?}\r\n     */\r\n    addStyles(styles) {\r\n        const /** @type {?} */ additions = new Set();\r\n        styles.forEach(style => {\r\n            if (!this._stylesSet.has(style)) {\r\n                this._stylesSet.add(style);\r\n                additions.add(style);\r\n            }\r\n        });\r\n        this.onStylesAdded(additions);\r\n    }\r\n    /**\r\n     * @param {?} additions\r\n     * @return {?}\r\n     */\r\n    onStylesAdded(additions) { }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getAllStyles() { return Array.from(this._stylesSet); }\r\n}\r\nSharedStylesHost.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nSharedStylesHost.ctorParameters = () => [];\r\nclass DomSharedStylesHost extends SharedStylesHost {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        super();\r\n        this._doc = _doc;\r\n        this._hostNodes = new Set();\r\n        this._styleNodes = new Set();\r\n        this._hostNodes.add(_doc.head);\r\n    }\r\n    /**\r\n     * @param {?} styles\r\n     * @param {?} host\r\n     * @return {?}\r\n     */\r\n    _addStylesToHost(styles, host) {\r\n        styles.forEach((style) => {\r\n            const /** @type {?} */ styleEl = this._doc.createElement('style');\r\n            styleEl.textContent = style;\r\n            this._styleNodes.add(host.appendChild(styleEl));\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} hostNode\r\n     * @return {?}\r\n     */\r\n    addHost(hostNode) {\r\n        this._addStylesToHost(this._stylesSet, hostNode);\r\n        this._hostNodes.add(hostNode);\r\n    }\r\n    /**\r\n     * @param {?} hostNode\r\n     * @return {?}\r\n     */\r\n    removeHost(hostNode) { this._hostNodes.delete(hostNode); }\r\n    /**\r\n     * @param {?} additions\r\n     * @return {?}\r\n     */\r\n    onStylesAdded(additions) {\r\n        this._hostNodes.forEach(hostNode => this._addStylesToHost(additions, hostNode));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this._styleNodes.forEach(styleNode => getDOM().remove(styleNode)); }\r\n}\r\nDomSharedStylesHost.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nDomSharedStylesHost.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst NAMESPACE_URIS = {\r\n    'svg': 'http://www.w3.org/2000/svg',\r\n    'xhtml': 'http://www.w3.org/1999/xhtml',\r\n    'xlink': 'http://www.w3.org/1999/xlink',\r\n    'xml': 'http://www.w3.org/XML/1998/namespace',\r\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\r\n};\r\nconst COMPONENT_REGEX = /%COMP%/g;\r\nconst COMPONENT_VARIABLE = '%COMP%';\r\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\r\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\r\n/**\r\n * @param {?} componentShortId\r\n * @return {?}\r\n */\r\nfunction shimContentAttribute(componentShortId) {\r\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\r\n}\r\n/**\r\n * @param {?} componentShortId\r\n * @return {?}\r\n */\r\nfunction shimHostAttribute(componentShortId) {\r\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\r\n}\r\n/**\r\n * @param {?} compId\r\n * @param {?} styles\r\n * @param {?} target\r\n * @return {?}\r\n */\r\nfunction flattenStyles(compId, styles, target) {\r\n    for (let /** @type {?} */ i = 0; i < styles.length; i++) {\r\n        let /** @type {?} */ style = styles[i];\r\n        if (Array.isArray(style)) {\r\n            flattenStyles(compId, style, target);\r\n        }\r\n        else {\r\n            style = style.replace(COMPONENT_REGEX, compId);\r\n            target.push(style);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * @param {?} eventHandler\r\n * @return {?}\r\n */\r\nfunction decoratePreventDefault(eventHandler) {\r\n    return (event) => {\r\n        const /** @type {?} */ allowDefaultBehavior = eventHandler(event);\r\n        if (allowDefaultBehavior === false) {\r\n            // TODO(tbosch): move preventDefault into event plugins...\r\n            event.preventDefault();\r\n            event.returnValue = false;\r\n        }\r\n    };\r\n}\r\nclass DomRendererFactory2 {\r\n    /**\r\n     * @param {?} eventManager\r\n     * @param {?} sharedStylesHost\r\n     */\r\n    constructor(eventManager, sharedStylesHost) {\r\n        this.eventManager = eventManager;\r\n        this.sharedStylesHost = sharedStylesHost;\r\n        this.rendererByCompId = new Map();\r\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    createRenderer(element, type) {\r\n        if (!element || !type) {\r\n            return this.defaultRenderer;\r\n        }\r\n        switch (type.encapsulation) {\r\n            case ViewEncapsulation.Emulated: {\r\n                let /** @type {?} */ renderer = this.rendererByCompId.get(type.id);\r\n                if (!renderer) {\r\n                    renderer =\r\n                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\r\n                    this.rendererByCompId.set(type.id, renderer);\r\n                }\r\n                (/** @type {?} */ (renderer)).applyToHost(element);\r\n                return renderer;\r\n            }\r\n            case ViewEncapsulation.Native:\r\n                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\r\n            default: {\r\n                if (!this.rendererByCompId.has(type.id)) {\r\n                    const /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);\r\n                    this.sharedStylesHost.addStyles(styles);\r\n                    this.rendererByCompId.set(type.id, this.defaultRenderer);\r\n                }\r\n                return this.defaultRenderer;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    begin() { }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    end() { }\r\n}\r\nDomRendererFactory2.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nDomRendererFactory2.ctorParameters = () => [\r\n    { type: EventManager, },\r\n    { type: DomSharedStylesHost, },\r\n];\r\nclass DefaultDomRenderer2 {\r\n    /**\r\n     * @param {?} eventManager\r\n     */\r\n    constructor(eventManager) {\r\n        this.eventManager = eventManager;\r\n        this.data = Object.create(null);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() { }\r\n    /**\r\n     * @param {?} name\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    createElement(name, namespace) {\r\n        if (namespace) {\r\n            return document.createElementNS(NAMESPACE_URIS[namespace], name);\r\n        }\r\n        return document.createElement(name);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    createComment(value) { return document.createComment(value); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    createText(value) { return document.createTextNode(value); }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @return {?}\r\n     */\r\n    appendChild(parent, newChild) { parent.appendChild(newChild); }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @param {?} refChild\r\n     * @return {?}\r\n     */\r\n    insertBefore(parent, newChild, refChild) {\r\n        if (parent) {\r\n            parent.insertBefore(newChild, refChild);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} oldChild\r\n     * @return {?}\r\n     */\r\n    removeChild(parent, oldChild) {\r\n        if (parent) {\r\n            parent.removeChild(oldChild);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} selectorOrNode\r\n     * @return {?}\r\n     */\r\n    selectRootElement(selectorOrNode) {\r\n        let /** @type {?} */ el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\r\n            selectorOrNode;\r\n        if (!el) {\r\n            throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\r\n        }\r\n        el.textContent = '';\r\n        return el;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    parentNode(node) { return node.parentNode; }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    nextSibling(node) { return node.nextSibling; }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    setAttribute(el, name, value, namespace) {\r\n        if (namespace) {\r\n            name = `${namespace}:${name}`;\r\n            const /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];\r\n            if (namespaceUri) {\r\n                el.setAttributeNS(namespaceUri, name, value);\r\n            }\r\n            else {\r\n                el.setAttribute(name, value);\r\n            }\r\n        }\r\n        else {\r\n            el.setAttribute(name, value);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?=} namespace\r\n     * @return {?}\r\n     */\r\n    removeAttribute(el, name, namespace) {\r\n        if (namespace) {\r\n            const /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];\r\n            if (namespaceUri) {\r\n                el.removeAttributeNS(namespaceUri, name);\r\n            }\r\n            else {\r\n                el.removeAttribute(`${namespace}:${name}`);\r\n            }\r\n        }\r\n        else {\r\n            el.removeAttribute(name);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    addClass(el, name) { el.classList.add(name); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    removeClass(el, name) { el.classList.remove(name); }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} style\r\n     * @param {?} value\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    setStyle(el, style, value, flags) {\r\n        if (flags & RendererStyleFlags2.DashCase) {\r\n            el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\r\n        }\r\n        else {\r\n            el.style[style] = value;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} style\r\n     * @param {?} flags\r\n     * @return {?}\r\n     */\r\n    removeStyle(el, style, flags) {\r\n        if (flags & RendererStyleFlags2.DashCase) {\r\n            el.style.removeProperty(style);\r\n        }\r\n        else {\r\n            // IE requires '' instead of null\r\n            // see https://github.com/angular/angular/issues/7916\r\n            el.style[style] = '';\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} name\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setProperty(el, name, value) {\r\n        checkNoSyntheticProp(name, 'property');\r\n        el[name] = value;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setValue(node, value) { node.nodeValue = value; }\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} event\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    listen(target, event, callback) {\r\n        checkNoSyntheticProp(event, 'listener');\r\n        if (typeof target === 'string') {\r\n            return /** @type {?} */ (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));\r\n        }\r\n        return /** @type {?} */ ((this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))));\r\n    }\r\n}\r\nconst AT_CHARCODE = '@'.charCodeAt(0);\r\n/**\r\n * @param {?} name\r\n * @param {?} nameKind\r\n * @return {?}\r\n */\r\nfunction checkNoSyntheticProp(name, nameKind) {\r\n    if (name.charCodeAt(0) === AT_CHARCODE) {\r\n        throw new Error(`Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\r\n    }\r\n}\r\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\r\n    /**\r\n     * @param {?} eventManager\r\n     * @param {?} sharedStylesHost\r\n     * @param {?} component\r\n     */\r\n    constructor(eventManager, sharedStylesHost, component) {\r\n        super(eventManager);\r\n        this.component = component;\r\n        const /** @type {?} */ styles = flattenStyles(component.id, component.styles, []);\r\n        sharedStylesHost.addStyles(styles);\r\n        this.contentAttr = shimContentAttribute(component.id);\r\n        this.hostAttr = shimHostAttribute(component.id);\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    applyToHost(element) { super.setAttribute(element, this.hostAttr, ''); }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    createElement(parent, name) {\r\n        const /** @type {?} */ el = super.createElement(parent, name);\r\n        super.setAttribute(el, this.contentAttr, '');\r\n        return el;\r\n    }\r\n}\r\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\r\n    /**\r\n     * @param {?} eventManager\r\n     * @param {?} sharedStylesHost\r\n     * @param {?} hostEl\r\n     * @param {?} component\r\n     */\r\n    constructor(eventManager, sharedStylesHost, hostEl, component) {\r\n        super(eventManager);\r\n        this.sharedStylesHost = sharedStylesHost;\r\n        this.hostEl = hostEl;\r\n        this.component = component;\r\n        this.shadowRoot = (/** @type {?} */ (hostEl)).createShadowRoot();\r\n        this.sharedStylesHost.addHost(this.shadowRoot);\r\n        const /** @type {?} */ styles = flattenStyles(component.id, component.styles, []);\r\n        for (let /** @type {?} */ i = 0; i < styles.length; i++) {\r\n            const /** @type {?} */ styleEl = document.createElement('style');\r\n            styleEl.textContent = styles[i];\r\n            this.shadowRoot.appendChild(styleEl);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    nodeOrShadowRoot(node) { return node === this.hostEl ? this.shadowRoot : node; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @return {?}\r\n     */\r\n    appendChild(parent, newChild) {\r\n        return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} newChild\r\n     * @param {?} refChild\r\n     * @return {?}\r\n     */\r\n    insertBefore(parent, newChild, refChild) {\r\n        return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\r\n    }\r\n    /**\r\n     * @param {?} parent\r\n     * @param {?} oldChild\r\n     * @return {?}\r\n     */\r\n    removeChild(parent, oldChild) {\r\n        return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @return {?}\r\n     */\r\n    parentNode(node) {\r\n        return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst ɵ0 = function (v) {\r\n    return '__zone_symbol__' + v;\r\n};\r\n/**\r\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\r\n * since Angular can do much more\r\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\r\n * addEventListener by 3x.\r\n */\r\nconst __symbol__ = (typeof Zone !== 'undefined') && (/** @type {?} */ (Zone))['__symbol__'] || ɵ0;\r\nconst ADD_EVENT_LISTENER = __symbol__('addEventListener');\r\nconst REMOVE_EVENT_LISTENER = __symbol__('removeEventListener');\r\nconst symbolNames = {};\r\nconst FALSE = 'FALSE';\r\nconst ANGULAR = 'ANGULAR';\r\nconst NATIVE_ADD_LISTENER = 'addEventListener';\r\nconst NATIVE_REMOVE_LISTENER = 'removeEventListener';\r\n// use the same symbol string which is used in zone.js\r\nconst stopSymbol = '__zone_symbol__propagationStopped';\r\nconst stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\r\nconst blackListedEvents = (typeof Zone !== 'undefined') && (/** @type {?} */ (Zone))[__symbol__('BLACK_LISTED_EVENTS')];\r\nlet blackListedMap;\r\nif (blackListedEvents) {\r\n    blackListedMap = {};\r\n    blackListedEvents.forEach(eventName => { blackListedMap[eventName] = eventName; });\r\n}\r\nconst isBlackListedEvent = function (eventName) {\r\n    if (!blackListedMap) {\r\n        return false;\r\n    }\r\n    return blackListedMap.hasOwnProperty(eventName);\r\n};\r\n// a global listener to handle all dom event,\r\n// so we do not need to create a closure everytime\r\nconst globalListener = function (event) {\r\n    const /** @type {?} */ symbolName = symbolNames[event.type];\r\n    if (!symbolName) {\r\n        return;\r\n    }\r\n    const /** @type {?} */ taskDatas = this[symbolName];\r\n    if (!taskDatas) {\r\n        return;\r\n    }\r\n    const /** @type {?} */ args = [event];\r\n    if (taskDatas.length === 1) {\r\n        // if taskDatas only have one element, just invoke it\r\n        const /** @type {?} */ taskData = taskDatas[0];\r\n        if (taskData.zone !== Zone.current) {\r\n            // only use Zone.run when Zone.current not equals to stored zone\r\n            return taskData.zone.run(taskData.handler, this, args);\r\n        }\r\n        else {\r\n            return taskData.handler.apply(this, args);\r\n        }\r\n    }\r\n    else {\r\n        // copy tasks as a snapshot to avoid event handlers remove\r\n        // itself or others\r\n        const /** @type {?} */ copiedTasks = taskDatas.slice();\r\n        for (let /** @type {?} */ i = 0; i < copiedTasks.length; i++) {\r\n            // if other listener call event.stopImmediatePropagation\r\n            // just break\r\n            if ((/** @type {?} */ (event))[stopSymbol] === true) {\r\n                break;\r\n            }\r\n            const /** @type {?} */ taskData = copiedTasks[i];\r\n            if (taskData.zone !== Zone.current) {\r\n                // only use Zone.run when Zone.current not equals to stored zone\r\n                taskData.zone.run(taskData.handler, this, args);\r\n            }\r\n            else {\r\n                taskData.handler.apply(this, args);\r\n            }\r\n        }\r\n    }\r\n};\r\nclass DomEventsPlugin extends EventManagerPlugin {\r\n    /**\r\n     * @param {?} doc\r\n     * @param {?} ngZone\r\n     */\r\n    constructor(doc, ngZone) {\r\n        super(doc);\r\n        this.ngZone = ngZone;\r\n        this.patchEvent();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    patchEvent() {\r\n        if (!Event || !Event.prototype) {\r\n            return;\r\n        }\r\n        if ((/** @type {?} */ (Event.prototype))[stopMethodSymbol]) {\r\n            // already patched by zone.js\r\n            return;\r\n        }\r\n        const /** @type {?} */ delegate = (/** @type {?} */ (Event.prototype))[stopMethodSymbol] =\r\n            Event.prototype.stopImmediatePropagation;\r\n        Event.prototype.stopImmediatePropagation = function () {\r\n            if (this) {\r\n                this[stopSymbol] = true;\r\n            }\r\n            // should call native delegate in case\r\n            // in some enviroment part of the application\r\n            // will not use the patched Event\r\n            delegate && delegate.apply(this, arguments);\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    supports(eventName) { return true; }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} eventName\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\r\n    addEventListener(element, eventName, handler) {\r\n        /**\r\n         * This code is about to add a listener to the DOM. If Zone.js is present, than\r\n         * `addEventListener` has been patched. The patched code adds overhead in both\r\n         * memory and speed (3x slower) than native. For this reason if we detect that\r\n         * Zone.js is present we use a simple version of zone aware addEventListener instead.\r\n         * The result is faster registration and the zone will be restored.\r\n         * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask\r\n         * will not be invoked\r\n         * We also do manual zone restoration in element.ts renderEventHandlerClosure method.\r\n         *\r\n         * NOTE: it is possible that the element is from different iframe, and so we\r\n         * have to check before we execute the method.\r\n         */\r\n        const /** @type {?} */ self = this;\r\n        const /** @type {?} */ zoneJsLoaded = element[ADD_EVENT_LISTENER];\r\n        let /** @type {?} */ callback = /** @type {?} */ (handler);\r\n        // if zonejs is loaded and current zone is not ngZone\r\n        // we keep Zone.current on target for later restoration.\r\n        if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\r\n            let /** @type {?} */ symbolName = symbolNames[eventName];\r\n            if (!symbolName) {\r\n                symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\r\n            }\r\n            let /** @type {?} */ taskDatas = (/** @type {?} */ (element))[symbolName];\r\n            const /** @type {?} */ globalListenerRegistered = taskDatas && taskDatas.length > 0;\r\n            if (!taskDatas) {\r\n                taskDatas = (/** @type {?} */ (element))[symbolName] = [];\r\n            }\r\n            const /** @type {?} */ zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\r\n            if (taskDatas.length === 0) {\r\n                taskDatas.push({ zone: zone, handler: callback });\r\n            }\r\n            else {\r\n                let /** @type {?} */ callbackRegistered = false;\r\n                for (let /** @type {?} */ i = 0; i < taskDatas.length; i++) {\r\n                    if (taskDatas[i].handler === callback) {\r\n                        callbackRegistered = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!callbackRegistered) {\r\n                    taskDatas.push({ zone: zone, handler: callback });\r\n                }\r\n            }\r\n            if (!globalListenerRegistered) {\r\n                element[ADD_EVENT_LISTENER](eventName, globalListener, false);\r\n            }\r\n        }\r\n        else {\r\n            element[NATIVE_ADD_LISTENER](eventName, callback, false);\r\n        }\r\n        return () => this.removeEventListener(element, eventName, callback);\r\n    }\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} eventName\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    removeEventListener(target, eventName, callback) {\r\n        let /** @type {?} */ underlyingRemove = target[REMOVE_EVENT_LISTENER];\r\n        // zone.js not loaded, use native removeEventListener\r\n        if (!underlyingRemove) {\r\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\r\n        }\r\n        let /** @type {?} */ symbolName = symbolNames[eventName];\r\n        let /** @type {?} */ taskDatas = symbolName && target[symbolName];\r\n        if (!taskDatas) {\r\n            // addEventListener not using patched version\r\n            // just call native removeEventListener\r\n            return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\r\n        }\r\n        // fix issue 20532, should be able to remove\r\n        // listener which was added inside of ngZone\r\n        let /** @type {?} */ found = false;\r\n        for (let /** @type {?} */ i = 0; i < taskDatas.length; i++) {\r\n            // remove listener from taskDatas if the callback equals\r\n            if (taskDatas[i].handler === callback) {\r\n                found = true;\r\n                taskDatas.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        if (found) {\r\n            if (taskDatas.length === 0) {\r\n                // all listeners are removed, we can remove the globalListener from target\r\n                underlyingRemove.apply(target, [eventName, globalListener, false]);\r\n            }\r\n        }\r\n        else {\r\n            // not found in taskDatas, the callback may be added inside of ngZone\r\n            // use native remove listener to remove the calback\r\n            target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\r\n        }\r\n    }\r\n}\r\nDomEventsPlugin.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nDomEventsPlugin.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },\r\n    { type: NgZone, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst EVENT_NAMES = {\r\n    // pan\r\n    'pan': true,\r\n    'panstart': true,\r\n    'panmove': true,\r\n    'panend': true,\r\n    'pancancel': true,\r\n    'panleft': true,\r\n    'panright': true,\r\n    'panup': true,\r\n    'pandown': true,\r\n    // pinch\r\n    'pinch': true,\r\n    'pinchstart': true,\r\n    'pinchmove': true,\r\n    'pinchend': true,\r\n    'pinchcancel': true,\r\n    'pinchin': true,\r\n    'pinchout': true,\r\n    // press\r\n    'press': true,\r\n    'pressup': true,\r\n    // rotate\r\n    'rotate': true,\r\n    'rotatestart': true,\r\n    'rotatemove': true,\r\n    'rotateend': true,\r\n    'rotatecancel': true,\r\n    // swipe\r\n    'swipe': true,\r\n    'swipeleft': true,\r\n    'swiperight': true,\r\n    'swipeup': true,\r\n    'swipedown': true,\r\n    // tap\r\n    'tap': true,\r\n};\r\n/**\r\n * A DI token that you can use to provide{\\@link HammerGestureConfig} to Angular. Use it to configure\r\n * Hammer gestures.\r\n *\r\n * \\@experimental\r\n */\r\nconst HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\r\n/**\r\n * @record\r\n */\r\n\r\n/**\r\n * \\@experimental\r\n */\r\nclass HammerGestureConfig {\r\n    constructor() {\r\n        this.events = [];\r\n        this.overrides = {};\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    buildHammer(element) {\r\n        const /** @type {?} */ mc = new Hammer(element);\r\n        mc.get('pinch').set({ enable: true });\r\n        mc.get('rotate').set({ enable: true });\r\n        for (const /** @type {?} */ eventName in this.overrides) {\r\n            mc.get(eventName).set(this.overrides[eventName]);\r\n        }\r\n        return mc;\r\n    }\r\n}\r\nHammerGestureConfig.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nHammerGestureConfig.ctorParameters = () => [];\r\nclass HammerGesturesPlugin extends EventManagerPlugin {\r\n    /**\r\n     * @param {?} doc\r\n     * @param {?} _config\r\n     */\r\n    constructor(doc, _config) {\r\n        super(doc);\r\n        this._config = _config;\r\n    }\r\n    /**\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    supports(eventName) {\r\n        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\r\n            return false;\r\n        }\r\n        if (!(/** @type {?} */ (window)).Hammer) {\r\n            throw new Error(`Hammer.js is not loaded, can not bind ${eventName} event`);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} eventName\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\r\n    addEventListener(element, eventName, handler) {\r\n        const /** @type {?} */ zone = this.manager.getZone();\r\n        eventName = eventName.toLowerCase();\r\n        return zone.runOutsideAngular(() => {\r\n            // Creating the manager bind events, must be done outside of angular\r\n            const /** @type {?} */ mc = this._config.buildHammer(element);\r\n            const /** @type {?} */ callback = function (eventObj) {\r\n                zone.runGuarded(function () { handler(eventObj); });\r\n            };\r\n            mc.on(eventName, callback);\r\n            return () => mc.off(eventName, callback);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    isCustomEvent(eventName) { return this._config.events.indexOf(eventName) > -1; }\r\n}\r\nHammerGesturesPlugin.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nHammerGesturesPlugin.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },\r\n    { type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\r\nconst ɵ0$1 = (event) => event.altKey;\r\nconst ɵ1$1 = (event) => event.ctrlKey;\r\nconst ɵ2$1 = (event) => event.metaKey;\r\nconst ɵ3 = (event) => event.shiftKey;\r\nconst MODIFIER_KEY_GETTERS = {\r\n    'alt': ɵ0$1,\r\n    'control': ɵ1$1,\r\n    'meta': ɵ2$1,\r\n    'shift': ɵ3\r\n};\r\n/**\r\n * \\@experimental\r\n */\r\nclass KeyEventsPlugin extends EventManagerPlugin {\r\n    /**\r\n     * @param {?} doc\r\n     */\r\n    constructor(doc) { super(doc); }\r\n    /**\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    supports(eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; }\r\n    /**\r\n     * @param {?} element\r\n     * @param {?} eventName\r\n     * @param {?} handler\r\n     * @return {?}\r\n     */\r\n    addEventListener(element, eventName, handler) {\r\n        const /** @type {?} */ parsedEvent = /** @type {?} */ ((KeyEventsPlugin.parseEventName(eventName)));\r\n        const /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\r\n        return this.manager.getZone().runOutsideAngular(() => {\r\n            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    static parseEventName(eventName) {\r\n        const /** @type {?} */ parts = eventName.toLowerCase().split('.');\r\n        const /** @type {?} */ domEventName = parts.shift();\r\n        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\r\n            return null;\r\n        }\r\n        const /** @type {?} */ key = KeyEventsPlugin._normalizeKey(/** @type {?} */ ((parts.pop())));\r\n        let /** @type {?} */ fullKey = '';\r\n        MODIFIER_KEYS.forEach(modifierName => {\r\n            const /** @type {?} */ index = parts.indexOf(modifierName);\r\n            if (index > -1) {\r\n                parts.splice(index, 1);\r\n                fullKey += modifierName + '.';\r\n            }\r\n        });\r\n        fullKey += key;\r\n        if (parts.length != 0 || key.length === 0) {\r\n            // returning null instead of throwing to let another plugin process the event\r\n            return null;\r\n        }\r\n        const /** @type {?} */ result = {};\r\n        result['domEventName'] = domEventName;\r\n        result['fullKey'] = fullKey;\r\n        return result;\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    static getEventFullKey(event) {\r\n        let /** @type {?} */ fullKey = '';\r\n        let /** @type {?} */ key = getDOM().getEventKey(event);\r\n        key = key.toLowerCase();\r\n        if (key === ' ') {\r\n            key = 'space'; // for readability\r\n        }\r\n        else if (key === '.') {\r\n            key = 'dot'; // because '.' is used as a separator in event names\r\n        }\r\n        MODIFIER_KEYS.forEach(modifierName => {\r\n            if (modifierName != key) {\r\n                const /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\r\n                if (modifierGetter(event)) {\r\n                    fullKey += modifierName + '.';\r\n                }\r\n            }\r\n        });\r\n        fullKey += key;\r\n        return fullKey;\r\n    }\r\n    /**\r\n     * @param {?} fullKey\r\n     * @param {?} handler\r\n     * @param {?} zone\r\n     * @return {?}\r\n     */\r\n    static eventCallback(fullKey, handler, zone) {\r\n        return (event /** TODO #9100 */) => {\r\n            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\r\n                zone.runGuarded(() => handler(event));\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} keyName\r\n     * @return {?}\r\n     */\r\n    static _normalizeKey(keyName) {\r\n        // TODO: switch to a Map if the mapping grows too much\r\n        switch (keyName) {\r\n            case 'esc':\r\n                return 'escape';\r\n            default:\r\n                return keyName;\r\n        }\r\n    }\r\n}\r\nKeyEventsPlugin.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nKeyEventsPlugin.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\r\n *\r\n * This regular expression matches a subset of URLs that will not cause script\r\n * execution if used in URL context within a HTML document. Specifically, this\r\n * regular expression matches if (comment from here on and regex copied from\r\n * Soy's EscapingConventions):\r\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\r\n * (2) or no protocol.  A protocol must be followed by a colon. The below\r\n *     allows that by allowing colons only after one of the characters [/?#].\r\n *     A colon after a hash (#) must be in the fragment.\r\n *     Otherwise, a colon after a (?) must be in a query.\r\n *     Otherwise, a colon after a single solidus (/) must be in a path.\r\n *     Otherwise, a colon after a double solidus (//) must be in the authority\r\n *     (before port).\r\n *\r\n * The pattern disallows &, used in HTML entity declarations before\r\n * one of the characters in [/?#]. This disallows HTML entities used in the\r\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\r\n * It also disallows HTML entities in the first path part of a relative path,\r\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\r\n * that. More importantly, it disallows masking of a colon,\r\n * e.g. \"javascript&#58;...\".\r\n *\r\n * This regular expression was taken from the Closure sanitization library.\r\n */\r\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\r\n/**\r\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\r\n */\r\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\r\n/**\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction sanitizeUrl(url) {\r\n    url = String(url);\r\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\r\n        return url;\r\n    if (isDevMode()) {\r\n        getDOM().log(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\r\n    }\r\n    return 'unsafe:' + url;\r\n}\r\n/**\r\n * @param {?} srcset\r\n * @return {?}\r\n */\r\nfunction sanitizeSrcset(srcset) {\r\n    srcset = String(srcset);\r\n    return srcset.split(',').map((srcset) => sanitizeUrl(srcset.trim())).join(', ');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below.\r\n */\r\nlet inertElement = null;\r\n/**\r\n * Lazily initialized to make sure the DOM adapter gets set before use.\r\n */\r\nlet DOM = /** @type {?} */ ((null));\r\n/**\r\n * Returns an HTML element that is guaranteed to not execute code when creating elements in it.\r\n * @return {?}\r\n */\r\nfunction getInertElement() {\r\n    if (inertElement)\r\n        return inertElement;\r\n    DOM = getDOM();\r\n    // Prefer using <template> element if supported.\r\n    const /** @type {?} */ templateEl = DOM.createElement('template');\r\n    if ('content' in templateEl)\r\n        return templateEl;\r\n    const /** @type {?} */ doc = DOM.createHtmlDocument();\r\n    inertElement = DOM.querySelector(doc, 'body');\r\n    if (inertElement == null) {\r\n        // usually there should be only one body element in the document, but IE doesn't have any, so we\r\n        // need to create one.\r\n        const /** @type {?} */ html = DOM.createElement('html', doc);\r\n        inertElement = DOM.createElement('body', doc);\r\n        DOM.appendChild(html, inertElement);\r\n        DOM.appendChild(doc, html);\r\n    }\r\n    return inertElement;\r\n}\r\n/**\r\n * @param {?} tags\r\n * @return {?}\r\n */\r\nfunction tagSet(tags) {\r\n    const /** @type {?} */ res = {};\r\n    for (const /** @type {?} */ t of tags.split(','))\r\n        res[t] = true;\r\n    return res;\r\n}\r\n/**\r\n * @param {...?} sets\r\n * @return {?}\r\n */\r\nfunction merge(...sets) {\r\n    const /** @type {?} */ res = {};\r\n    for (const /** @type {?} */ s of sets) {\r\n        for (const /** @type {?} */ v in s) {\r\n            if (s.hasOwnProperty(v))\r\n                res[v] = true;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n// Good source of info about elements and attributes\r\n// http://dev.w3.org/html5/spec/Overview.html#semantics\r\n// http://simon.html5.org/html-elements\r\n// Safe Void Elements - HTML5\r\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\r\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\r\n// Elements that you can, intentionally, leave open (and which close themselves)\r\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\r\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\r\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\r\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\r\n// Safe Block Elements - HTML5\r\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\r\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\r\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\r\n// Inline Elements - HTML5\r\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\r\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\r\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\r\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\r\n// Attributes that have href and hence need to be sanitized\r\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\r\n// Attributes that have special href set hence need to be sanitized\r\nconst SRCSET_ATTRS = tagSet('srcset');\r\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\r\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\r\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\r\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\r\n    'valign,value,vspace,width');\r\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\r\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\r\n// innerHTML is required, SVG attributes should be added here.\r\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\r\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\r\n// are left out here.\r\nconst VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\r\n/**\r\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\r\n * attributes.\r\n */\r\nclass SanitizingHtmlSerializer {\r\n    constructor() {\r\n        this.sanitizedSomething = false;\r\n        this.buf = [];\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @return {?}\r\n     */\r\n    sanitizeChildren(el) {\r\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\r\n        // However this code never accesses properties off of `document` before deleting its contents\r\n        // again, so it shouldn't be vulnerable to DOM clobbering.\r\n        let /** @type {?} */ current = /** @type {?} */ ((el.firstChild));\r\n        while (current) {\r\n            if (DOM.isElementNode(current)) {\r\n                this.startElement(/** @type {?} */ (current));\r\n            }\r\n            else if (DOM.isTextNode(current)) {\r\n                this.chars(/** @type {?} */ ((DOM.nodeValue(current))));\r\n            }\r\n            else {\r\n                // Strip non-element, non-text nodes.\r\n                this.sanitizedSomething = true;\r\n            }\r\n            if (DOM.firstChild(current)) {\r\n                current = /** @type {?} */ ((DOM.firstChild(current)));\r\n                continue;\r\n            }\r\n            while (current) {\r\n                // Leaving the element. Walk up and to the right, closing tags as we go.\r\n                if (DOM.isElementNode(current)) {\r\n                    this.endElement(/** @type {?} */ (current));\r\n                }\r\n                let /** @type {?} */ next = checkClobberedElement(current, /** @type {?} */ ((DOM.nextSibling(current))));\r\n                if (next) {\r\n                    current = next;\r\n                    break;\r\n                }\r\n                current = checkClobberedElement(current, /** @type {?} */ ((DOM.parentElement(current))));\r\n            }\r\n        }\r\n        return this.buf.join('');\r\n    }\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    startElement(element) {\r\n        const /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();\r\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\r\n            this.sanitizedSomething = true;\r\n            return;\r\n        }\r\n        this.buf.push('<');\r\n        this.buf.push(tagName);\r\n        DOM.attributeMap(element).forEach((value, attrName) => {\r\n            const /** @type {?} */ lower = attrName.toLowerCase();\r\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\r\n                this.sanitizedSomething = true;\r\n                return;\r\n            }\r\n            // TODO(martinprobst): Special case image URIs for data:image/...\r\n            if (URI_ATTRS[lower])\r\n                value = sanitizeUrl(value);\r\n            if (SRCSET_ATTRS[lower])\r\n                value = sanitizeSrcset(value);\r\n            this.buf.push(' ');\r\n            this.buf.push(attrName);\r\n            this.buf.push('=\"');\r\n            this.buf.push(encodeEntities(value));\r\n            this.buf.push('\"');\r\n        });\r\n        this.buf.push('>');\r\n    }\r\n    /**\r\n     * @param {?} current\r\n     * @return {?}\r\n     */\r\n    endElement(current) {\r\n        const /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();\r\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\r\n            this.buf.push('</');\r\n            this.buf.push(tagName);\r\n            this.buf.push('>');\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} chars\r\n     * @return {?}\r\n     */\r\n    chars(chars) { this.buf.push(encodeEntities(chars)); }\r\n}\r\n/**\r\n * @param {?} node\r\n * @param {?} nextNode\r\n * @return {?}\r\n */\r\nfunction checkClobberedElement(node, nextNode) {\r\n    if (nextNode && DOM.contains(node, nextNode)) {\r\n        throw new Error(`Failed to sanitize html because the element is clobbered: ${DOM.getOuterHTML(node)}`);\r\n    }\r\n    return nextNode;\r\n}\r\n// Regular Expressions for parsing tags and attributes\r\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\r\n// ! to ~ is the ASCII range.\r\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\r\n/**\r\n * Escapes all potentially dangerous characters, so that the\r\n * resulting string can be safely inserted into attribute or\r\n * element text.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction encodeEntities(value) {\r\n    return value.replace(/&/g, '&amp;')\r\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\r\n        const /** @type {?} */ hi = match.charCodeAt(0);\r\n        const /** @type {?} */ low = match.charCodeAt(1);\r\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\r\n    })\r\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n}\r\n/**\r\n * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\r\n * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').\r\n *\r\n * This is undesirable since we don't want to allow any of these custom attributes. This method\r\n * strips them all.\r\n * @param {?} el\r\n * @return {?}\r\n */\r\nfunction stripCustomNsAttrs(el) {\r\n    DOM.attributeMap(el).forEach((_, attrName) => {\r\n        if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\r\n            DOM.removeAttribute(el, attrName);\r\n        }\r\n    });\r\n    for (const /** @type {?} */ n of DOM.childNodesAsList(el)) {\r\n        if (DOM.isElementNode(n))\r\n            stripCustomNsAttrs(/** @type {?} */ (n));\r\n    }\r\n}\r\n/**\r\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\r\n * the DOM in a browser environment.\r\n * @param {?} defaultDoc\r\n * @param {?} unsafeHtmlInput\r\n * @return {?}\r\n */\r\nfunction sanitizeHtml(defaultDoc, unsafeHtmlInput) {\r\n    try {\r\n        const /** @type {?} */ containerEl = getInertElement();\r\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\r\n        let /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\r\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\r\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\r\n        let /** @type {?} */ mXSSAttempts = 5;\r\n        let /** @type {?} */ parsedHtml = unsafeHtml;\r\n        do {\r\n            if (mXSSAttempts === 0) {\r\n                throw new Error('Failed to sanitize html because the input is unstable');\r\n            }\r\n            mXSSAttempts--;\r\n            unsafeHtml = parsedHtml;\r\n            DOM.setInnerHTML(containerEl, unsafeHtml);\r\n            if (defaultDoc.documentMode) {\r\n                // strip custom-namespaced attributes on IE<=11\r\n                stripCustomNsAttrs(containerEl);\r\n            }\r\n            parsedHtml = DOM.getInnerHTML(containerEl);\r\n        } while (unsafeHtml !== parsedHtml);\r\n        const /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();\r\n        const /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);\r\n        // Clear out the body element.\r\n        const /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;\r\n        for (const /** @type {?} */ child of DOM.childNodesAsList(parent)) {\r\n            DOM.removeChild(parent, child);\r\n        }\r\n        if (isDevMode() && sanitizer.sanitizedSomething) {\r\n            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\r\n        }\r\n        return safeHtml;\r\n    }\r\n    catch (/** @type {?} */ e) {\r\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\r\n        inertElement = null;\r\n        throw e;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Regular expression for safe style values.\r\n *\r\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\r\n *\r\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\r\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\r\n * of XSS.\r\n *\r\n * The function expression checks only for XSS safety, not for CSS validity.\r\n *\r\n * This regular expression was taken from the Closure sanitization library, and augmented for\r\n * transformation values.\r\n */\r\nconst VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\r\nconst TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\r\nconst COLOR_FNS = '(?:rgb|hsl)a?';\r\nconst GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\r\nconst CSS3_FNS = '(?:calc|attr)';\r\nconst FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\r\nconst SAFE_STYLE_VALUE = new RegExp(`^(${VALUES}|` +\r\n    `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\r\n    `${FN_ARGS})$`, 'g');\r\n/**\r\n * Matches a `url(...)` value with an arbitrary argument as long as it does\r\n * not contain parentheses.\r\n *\r\n * The URL value still needs to be sanitized separately.\r\n *\r\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\r\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\r\n * by observing whether scroll bars are displayed, or character ranges used by a font face\r\n * definition.\r\n *\r\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\r\n * binding a URL value without further cooperation from the page will cause an information leak, and\r\n * if so, it is just a leak, not a full blown XSS vulnerability.\r\n *\r\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\r\n * code is permissive and allows URLs that sanitize otherwise.\r\n */\r\nconst URL_RE = /^url\\(([^)]+)\\)$/;\r\n/**\r\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\r\n * that neither escape (\\) nor any other character that could result in\r\n * breaking out of a string parsing context are allowed;\r\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\r\n *\r\n * This code was taken from the Closure sanitization library.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction hasBalancedQuotes(value) {\r\n    let /** @type {?} */ outsideSingle = true;\r\n    let /** @type {?} */ outsideDouble = true;\r\n    for (let /** @type {?} */ i = 0; i < value.length; i++) {\r\n        const /** @type {?} */ c = value.charAt(i);\r\n        if (c === '\\'' && outsideDouble) {\r\n            outsideSingle = !outsideSingle;\r\n        }\r\n        else if (c === '\"' && outsideSingle) {\r\n            outsideDouble = !outsideDouble;\r\n        }\r\n    }\r\n    return outsideSingle && outsideDouble;\r\n}\r\n/**\r\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\r\n * value) and returns a value that is safe to use in a browser environment.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction sanitizeStyle(value) {\r\n    value = String(value).trim(); // Make sure it's actually a string.\r\n    if (!value)\r\n        return '';\r\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\r\n    // reasoning behind this.\r\n    const /** @type {?} */ urlMatch = value.match(URL_RE);\r\n    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\r\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\r\n        return value; // Safe style values.\r\n    }\r\n    if (isDevMode()) {\r\n        getDOM().log(`WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\r\n    }\r\n    return 'unsafe';\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Marker interface for a value that's safe to use in a particular context.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as HTML.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as style (CSS).\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as JavaScript.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as a URL linking to a document.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * Marker interface for a value that's safe to use as a URL to load executable code from.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\r\n * values to be safe to use in the different DOM contexts.\r\n *\r\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\r\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\r\n * the website.\r\n *\r\n * In specific situations, it might be necessary to disable sanitization, for example if the\r\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\r\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\r\n * methods, and then binding to that value from the template.\r\n *\r\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\r\n * Cross Site Scripting (XSS) security bug!\r\n *\r\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\r\n * close as possible to the source of the value, to make it easy to verify no security bug is\r\n * created by its use.\r\n *\r\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\r\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\r\n * code. The sanitizer leaves safe values intact.\r\n *\r\n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\r\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\r\n * into this call. Make sure any user data is appropriately escaped for this security context.\r\n * For more detail, see the [Security Guide](http://g.co/ng/security).\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass DomSanitizer {\r\n}\r\nclass DomSanitizerImpl extends DomSanitizer {\r\n    /**\r\n     * @param {?} _doc\r\n     */\r\n    constructor(_doc) {\r\n        super();\r\n        this._doc = _doc;\r\n    }\r\n    /**\r\n     * @param {?} ctx\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    sanitize(ctx, value) {\r\n        if (value == null)\r\n            return null;\r\n        switch (ctx) {\r\n            case SecurityContext.NONE:\r\n                return /** @type {?} */ (value);\r\n            case SecurityContext.HTML:\r\n                if (value instanceof SafeHtmlImpl)\r\n                    return value.changingThisBreaksApplicationSecurity;\r\n                this.checkNotSafeValue(value, 'HTML');\r\n                return sanitizeHtml(this._doc, String(value));\r\n            case SecurityContext.STYLE:\r\n                if (value instanceof SafeStyleImpl)\r\n                    return value.changingThisBreaksApplicationSecurity;\r\n                this.checkNotSafeValue(value, 'Style');\r\n                return sanitizeStyle(/** @type {?} */ (value));\r\n            case SecurityContext.SCRIPT:\r\n                if (value instanceof SafeScriptImpl)\r\n                    return value.changingThisBreaksApplicationSecurity;\r\n                this.checkNotSafeValue(value, 'Script');\r\n                throw new Error('unsafe value used in a script context');\r\n            case SecurityContext.URL:\r\n                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\r\n                    // Allow resource URLs in URL contexts, they are strictly more trusted.\r\n                    return value.changingThisBreaksApplicationSecurity;\r\n                }\r\n                this.checkNotSafeValue(value, 'URL');\r\n                return sanitizeUrl(String(value));\r\n            case SecurityContext.RESOURCE_URL:\r\n                if (value instanceof SafeResourceUrlImpl) {\r\n                    return value.changingThisBreaksApplicationSecurity;\r\n                }\r\n                this.checkNotSafeValue(value, 'ResourceURL');\r\n                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\r\n            default:\r\n                throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} expectedType\r\n     * @return {?}\r\n     */\r\n    checkNotSafeValue(value, expectedType) {\r\n        if (value instanceof SafeValueImpl) {\r\n            throw new Error(`Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\r\n                `(see http://g.co/ng/security#xss)`);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    bypassSecurityTrustHtml(value) { return new SafeHtmlImpl(value); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    bypassSecurityTrustStyle(value) { return new SafeStyleImpl(value); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    bypassSecurityTrustScript(value) { return new SafeScriptImpl(value); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    bypassSecurityTrustUrl(value) { return new SafeUrlImpl(value); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    bypassSecurityTrustResourceUrl(value) {\r\n        return new SafeResourceUrlImpl(value);\r\n    }\r\n}\r\nDomSanitizerImpl.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nDomSanitizerImpl.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },\r\n];\r\n/**\r\n * @abstract\r\n */\r\nclass SafeValueImpl {\r\n    /**\r\n     * @param {?} changingThisBreaksApplicationSecurity\r\n     */\r\n    constructor(changingThisBreaksApplicationSecurity) {\r\n        // empty\r\n        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\r\n            ` (see http://g.co/ng/security#xss)`;\r\n    }\r\n}\r\nclass SafeHtmlImpl extends SafeValueImpl {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTypeName() { return 'HTML'; }\r\n}\r\nclass SafeStyleImpl extends SafeValueImpl {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTypeName() { return 'Style'; }\r\n}\r\nclass SafeScriptImpl extends SafeValueImpl {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTypeName() { return 'Script'; }\r\n}\r\nclass SafeUrlImpl extends SafeValueImpl {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTypeName() { return 'URL'; }\r\n}\r\nclass SafeResourceUrlImpl extends SafeValueImpl {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTypeName() { return 'ResourceURL'; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\r\n    { provide: PLATFORM_ID, useValue: ɵPLATFORM_BROWSER_ID },\r\n    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\r\n    { provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT$1] },\r\n    { provide: DOCUMENT$1, useFactory: _document, deps: [] },\r\n];\r\n/**\r\n * \\@security Replacing built-in sanitization providers exposes the application to XSS risks.\r\n * Attacker-controlled data introduced by an unsanitized provider could expose your\r\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\r\n * \\@experimental\r\n */\r\nconst BROWSER_SANITIZATION_PROVIDERS = [\r\n    { provide: Sanitizer, useExisting: DomSanitizer },\r\n    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT$1] },\r\n];\r\n/**\r\n * \\@stable\r\n */\r\nconst platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\r\n/**\r\n * @return {?}\r\n */\r\nfunction initDomAdapter() {\r\n    BrowserDomAdapter.makeCurrent();\r\n    BrowserGetTestability.init();\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction errorHandler() {\r\n    return new ErrorHandler();\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction _document() {\r\n    return document;\r\n}\r\n/**\r\n * The ng module for the browser.\r\n *\r\n * \\@stable\r\n */\r\nclass BrowserModule {\r\n    /**\r\n     * @param {?} parentModule\r\n     */\r\n    constructor(parentModule) {\r\n        if (parentModule) {\r\n            throw new Error(`BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\r\n        }\r\n    }\r\n    /**\r\n     * Configures a browser-based application to transition from a server-rendered app, if\r\n     * one is present on the page. The specified parameters must include an application id,\r\n     * which must match between the client and server applications.\r\n     *\r\n     * \\@experimental\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    static withServerTransition(params) {\r\n        return {\r\n            ngModule: BrowserModule,\r\n            providers: [\r\n                { provide: APP_ID, useValue: params.appId },\r\n                { provide: TRANSITION_ID, useExisting: APP_ID },\r\n                SERVER_TRANSITION_PROVIDERS,\r\n            ],\r\n        };\r\n    }\r\n}\r\nBrowserModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                providers: [\r\n                    BROWSER_SANITIZATION_PROVIDERS,\r\n                    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },\r\n                    { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },\r\n                    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },\r\n                    { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },\r\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },\r\n                    DomRendererFactory2,\r\n                    { provide: RendererFactory2, useExisting: DomRendererFactory2 },\r\n                    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\r\n                    DomSharedStylesHost,\r\n                    Testability,\r\n                    EventManager,\r\n                    ELEMENT_PROBE_PROVIDERS,\r\n                    Meta,\r\n                    Title,\r\n                ],\r\n                exports: [CommonModule, ApplicationModule]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nBrowserModule.ctorParameters = () => [\r\n    { type: BrowserModule, decorators: [{ type: Optional }, { type: SkipSelf },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst win = typeof window !== 'undefined' && window || /** @type {?} */ ({});\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass ChangeDetectionPerfRecord {\r\n    /**\r\n     * @param {?} msPerTick\r\n     * @param {?} numTicks\r\n     */\r\n    constructor(msPerTick, numTicks) {\r\n        this.msPerTick = msPerTick;\r\n        this.numTicks = numTicks;\r\n    }\r\n}\r\n/**\r\n * Entry point for all Angular profiling-related debug tools. This object\r\n * corresponds to the `ng.profiler` in the dev console.\r\n */\r\nclass AngularProfiler {\r\n    /**\r\n     * @param {?} ref\r\n     */\r\n    constructor(ref) { this.appRef = ref.injector.get(ApplicationRef); }\r\n    /**\r\n     * Exercises change detection in a loop and then prints the average amount of\r\n     * time in milliseconds how long a single round of change detection takes for\r\n     * the current state of the UI. It runs a minimum of 5 rounds for a minimum\r\n     * of 500 milliseconds.\r\n     *\r\n     * Optionally, a user may pass a `config` parameter containing a map of\r\n     * options. Supported options are:\r\n     *\r\n     * `record` (boolean) - causes the profiler to record a CPU profile while\r\n     * it exercises the change detector. Example:\r\n     *\r\n     * ```\r\n     * ng.profiler.timeChangeDetection({record: true})\r\n     * ```\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    timeChangeDetection(config) {\r\n        const /** @type {?} */ record = config && config['record'];\r\n        const /** @type {?} */ profileName = 'Change Detection';\r\n        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\r\n        const /** @type {?} */ isProfilerAvailable = win.console.profile != null;\r\n        if (record && isProfilerAvailable) {\r\n            win.console.profile(profileName);\r\n        }\r\n        const /** @type {?} */ start = getDOM().performanceNow();\r\n        let /** @type {?} */ numTicks = 0;\r\n        while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\r\n            this.appRef.tick();\r\n            numTicks++;\r\n        }\r\n        const /** @type {?} */ end = getDOM().performanceNow();\r\n        if (record && isProfilerAvailable) {\r\n            // need to cast to <any> because type checker thinks there's no argument\r\n            // while in fact there is:\r\n            //\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd\r\n            (/** @type {?} */ (win.console.profileEnd))(profileName);\r\n        }\r\n        const /** @type {?} */ msPerTick = (end - start) / numTicks;\r\n        win.console.log(`ran ${numTicks} change detection cycles`);\r\n        win.console.log(`${msPerTick.toFixed(2)} ms per check`);\r\n        return new ChangeDetectionPerfRecord(msPerTick, numTicks);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst PROFILER_GLOBAL_NAME = 'profiler';\r\n/**\r\n * Enabled Angular debug tools that are accessible via your browser's\r\n * developer console.\r\n *\r\n * Usage:\r\n *\r\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\r\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\r\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\r\n *    then hit Enter.\r\n *\r\n * \\@experimental All debugging apis are currently experimental.\r\n * @template T\r\n * @param {?} ref\r\n * @return {?}\r\n */\r\nfunction enableDebugTools(ref) {\r\n    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\r\n    return ref;\r\n}\r\n/**\r\n * Disables Angular tools.\r\n *\r\n * \\@experimental All debugging apis are currently experimental.\r\n * @return {?}\r\n */\r\nfunction disableDebugTools() {\r\n    exportNgVar(PROFILER_GLOBAL_NAME, null);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction escapeHtml(text) {\r\n    const /** @type {?} */ escapedText = {\r\n        '&': '&a;',\r\n        '\"': '&q;',\r\n        '\\'': '&s;',\r\n        '<': '&l;',\r\n        '>': '&g;',\r\n    };\r\n    return text.replace(/[&\"'<>]/g, s => escapedText[s]);\r\n}\r\n/**\r\n * @param {?} text\r\n * @return {?}\r\n */\r\nfunction unescapeHtml(text) {\r\n    const /** @type {?} */ unescapedText = {\r\n        '&a;': '&',\r\n        '&q;': '\"',\r\n        '&s;': '\\'',\r\n        '&l;': '<',\r\n        '&g;': '>',\r\n    };\r\n    return text.replace(/&[^;]+;/g, s => unescapedText[s]);\r\n}\r\n/**\r\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * const COUNTER_KEY = makeStateKey<number>('counter');\r\n * let value = 10;\r\n *\r\n * transferState.set(COUNTER_KEY, value);\r\n * ```\r\n *\r\n * \\@experimental\r\n * @template T\r\n * @param {?} key\r\n * @return {?}\r\n */\r\nfunction makeStateKey(key) {\r\n    return /** @type {?} */ (key);\r\n}\r\n/**\r\n * A key value store that is transferred from the application on the server side to the application\r\n * on the client side.\r\n *\r\n * `TransferState` will be available as an injectable token. To use it import\r\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\r\n *\r\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\r\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\r\n * non-lossy manner.\r\n *\r\n * \\@experimental\r\n */\r\nclass TransferState {\r\n    constructor() {\r\n        this.store = {};\r\n        this.onSerializeCallbacks = {};\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} initState\r\n     * @return {?}\r\n     */\r\n    static init(initState) {\r\n        const /** @type {?} */ transferState = new TransferState();\r\n        transferState.store = initState;\r\n        return transferState;\r\n    }\r\n    /**\r\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\r\n     * @template T\r\n     * @param {?} key\r\n     * @param {?} defaultValue\r\n     * @return {?}\r\n     */\r\n    get(key, defaultValue) { return /** @type {?} */ (this.store[key]) || defaultValue; }\r\n    /**\r\n     * Set the value corresponding to a key.\r\n     * @template T\r\n     * @param {?} key\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set(key, value) { this.store[key] = value; }\r\n    /**\r\n     * Remove a key from the store.\r\n     * @template T\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    remove(key) { delete this.store[key]; }\r\n    /**\r\n     * Test whether a key exists in the store.\r\n     * @template T\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    hasKey(key) { return this.store.hasOwnProperty(key); }\r\n    /**\r\n     * Register a callback to provide the value for a key when `toJson` is called.\r\n     * @template T\r\n     * @param {?} key\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    onSerialize(key, callback) {\r\n        this.onSerializeCallbacks[key] = callback;\r\n    }\r\n    /**\r\n     * Serialize the current state of the store to JSON.\r\n     * @return {?}\r\n     */\r\n    toJson() {\r\n        // Call the onSerialize callbacks and put those values into the store.\r\n        for (const /** @type {?} */ key in this.onSerializeCallbacks) {\r\n            if (this.onSerializeCallbacks.hasOwnProperty(key)) {\r\n                try {\r\n                    this.store[key] = this.onSerializeCallbacks[key]();\r\n                }\r\n                catch (/** @type {?} */ e) {\r\n                    console.warn('Exception in onSerialize callback: ', e);\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.store);\r\n    }\r\n}\r\nTransferState.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nTransferState.ctorParameters = () => [];\r\n/**\r\n * @param {?} doc\r\n * @param {?} appId\r\n * @return {?}\r\n */\r\nfunction initTransferState(doc, appId) {\r\n    // Locate the script tag with the JSON data transferred from the server.\r\n    // The id of the script tag is set to the Angular appId + 'state'.\r\n    const /** @type {?} */ script = doc.getElementById(appId + '-state');\r\n    let /** @type {?} */ initialState = {};\r\n    if (script && script.textContent) {\r\n        try {\r\n            initialState = JSON.parse(unescapeHtml(script.textContent));\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            console.warn('Exception while restoring TransferState for app ' + appId, e);\r\n        }\r\n    }\r\n    return TransferState.init(initialState);\r\n}\r\n/**\r\n * NgModule to install on the client side while using the `TransferState` to transfer state from\r\n * server to client.\r\n *\r\n * \\@experimental\r\n */\r\nclass BrowserTransferStateModule {\r\n}\r\nBrowserTransferStateModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                providers: [{ provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT$1, APP_ID] }],\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nBrowserTransferStateModule.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Predicates for use with {\\@link DebugElement}'s query functions.\r\n *\r\n * \\@experimental All debugging apis are currently experimental.\r\n */\r\nclass By {\r\n    /**\r\n     * Match all elements.\r\n     *\r\n     * ## Example\r\n     *\r\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\r\n     * @return {?}\r\n     */\r\n    static all() { return (debugElement) => true; }\r\n    /**\r\n     * Match elements by the given CSS selector.\r\n     *\r\n     * ## Example\r\n     *\r\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\r\n     * @param {?} selector\r\n     * @return {?}\r\n     */\r\n    static css(selector) {\r\n        return (debugElement) => {\r\n            return debugElement.nativeElement != null ?\r\n                getDOM().elementMatches(debugElement.nativeElement, selector) :\r\n                false;\r\n        };\r\n    }\r\n    /**\r\n     * Match elements that have the given directive present.\r\n     *\r\n     * ## Example\r\n     *\r\n     * {\\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\r\n     * @param {?} type\r\n     * @return {?}\r\n     */\r\n    static directive(type) {\r\n        return (debugElement) => /** @type {?} */ ((debugElement.providerTokens)).indexOf(type) !== -1;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of the common package.\r\n */\r\n/**\r\n * \\@stable\r\n */\r\nconst VERSION = new Version('5.1.3');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\r\n\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { BrowserModule, platformBrowser, Meta, Title, disableDebugTools, enableDebugTools, BrowserTransferStateModule, TransferState, makeStateKey, By, DOCUMENT$1 as DOCUMENT, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HammerGestureConfig, DomSanitizer, VERSION, BROWSER_SANITIZATION_PROVIDERS as ɵBROWSER_SANITIZATION_PROVIDERS, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, initDomAdapter as ɵinitDomAdapter, BrowserDomAdapter as ɵBrowserDomAdapter, BrowserPlatformLocation as ɵBrowserPlatformLocation, TRANSITION_ID as ɵTRANSITION_ID, BrowserGetTestability as ɵBrowserGetTestability, escapeHtml as ɵescapeHtml, ELEMENT_PROBE_PROVIDERS as ɵELEMENT_PROBE_PROVIDERS, DomAdapter as ɵDomAdapter, getDOM as ɵgetDOM, setRootDomAdapter as ɵsetRootDomAdapter, DomRendererFactory2 as ɵDomRendererFactory2, NAMESPACE_URIS as ɵNAMESPACE_URIS, flattenStyles as ɵflattenStyles, shimContentAttribute as ɵshimContentAttribute, shimHostAttribute as ɵshimHostAttribute, DomEventsPlugin as ɵDomEventsPlugin, HammerGesturesPlugin as ɵHammerGesturesPlugin, KeyEventsPlugin as ɵKeyEventsPlugin, DomSharedStylesHost as ɵDomSharedStylesHost, SharedStylesHost as ɵSharedStylesHost, _document as ɵb, errorHandler as ɵa, GenericBrowserDomAdapter as ɵi, SERVER_TRANSITION_PROVIDERS as ɵg, appInitializerFactory as ɵf, initTransferState as ɵc, _createNgProbe as ɵh, EventManagerPlugin as ɵd, DomSanitizerImpl as ɵe };\r\n//# sourceMappingURL=platform-browser.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/platform-browser/esm2015/platform-browser.js\n// module id = ../../../platform-browser/esm2015/platform-browser.js\n// module chunks = vendor","/**\r\n * @license Angular v5.1.3\r\n * (c) 2010-2017 Google, Inc. https://angular.io/\r\n * License: MIT\r\n */\r\nimport { APP_BASE_HREF, HashLocationStrategy, LOCATION_INITIALIZED, Location, LocationStrategy, PathLocationStrategy, PlatformLocation } from '@angular/common';\r\nimport { ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationRef, Attribute, ChangeDetectorRef, Compiler, ComponentFactoryResolver, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Injectable, InjectionToken, Injector, Input, NgModule, NgModuleFactory, NgModuleFactoryLoader, NgModuleRef, NgProbeToken, Optional, Output, Renderer2, SkipSelf, SystemJsNgModuleLoader, Version, ViewContainerRef, isDevMode, ɵisObservable, ɵisPromise } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { concatMap } from 'rxjs/operator/concatMap';\r\nimport { map } from 'rxjs/operator/map';\r\nimport { mergeMap } from 'rxjs/operator/mergeMap';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { from } from 'rxjs/observable/from';\r\nimport { _catch } from 'rxjs/operator/catch';\r\nimport { concatAll } from 'rxjs/operator/concatAll';\r\nimport { first } from 'rxjs/operator/first';\r\nimport { EmptyError } from 'rxjs/util/EmptyError';\r\nimport { fromPromise } from 'rxjs/observable/fromPromise';\r\nimport { every } from 'rxjs/operator/every';\r\nimport { last } from 'rxjs/operator/last';\r\nimport { mergeAll } from 'rxjs/operator/mergeAll';\r\nimport { reduce } from 'rxjs/operator/reduce';\r\nimport { ɵgetDOM } from '@angular/platform-browser';\r\nimport { filter } from 'rxjs/operator/filter';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Base for events the Router goes through, as opposed to events tied to a specific\r\n * Route. `RouterEvent`s will only be fired one time for any given navigation.\r\n *\r\n * Example:\r\n *\r\n * ```\r\n * class MyService {\r\n *   constructor(public router: Router, logger: Logger) {\r\n *     router.events.filter(e => e instanceof RouterEvent).subscribe(e => {\r\n *       logger.log(e.id, e.url);\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nclass RouterEvent {\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} url\r\n     */\r\n    constructor(id, url) {\r\n        this.id = id;\r\n        this.url = url;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents an event triggered when a navigation starts.\r\n *\r\n * \\@stable\r\n */\r\nclass NavigationStart extends RouterEvent {\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @return {?}\r\n     */\r\n    toString() { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\r\n}\r\n/**\r\n * \\@whatItDoes Represents an event triggered when a navigation ends successfully.\r\n *\r\n * \\@stable\r\n */\r\nclass NavigationEnd extends RouterEvent {\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} url\r\n     * @param {?} urlAfterRedirects\r\n     */\r\n    constructor(/** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        id, /** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        url, urlAfterRedirects) {\r\n        super(id, url);\r\n        this.urlAfterRedirects = urlAfterRedirects;\r\n    }\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents an event triggered when a navigation is canceled.\r\n *\r\n * \\@stable\r\n */\r\nclass NavigationCancel extends RouterEvent {\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} url\r\n     * @param {?} reason\r\n     */\r\n    constructor(/** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        id, /** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        url, reason) {\r\n        super(id, url);\r\n        this.reason = reason;\r\n    }\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @return {?}\r\n     */\r\n    toString() { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\r\n}\r\n/**\r\n * \\@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.\r\n *\r\n * \\@stable\r\n */\r\nclass NavigationError extends RouterEvent {\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} url\r\n     * @param {?} error\r\n     */\r\n    constructor(/** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        id, /** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        url, error) {\r\n        super(id, url);\r\n        this.error = error;\r\n    }\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents an event triggered when routes are recognized.\r\n *\r\n * \\@stable\r\n */\r\nclass RoutesRecognized extends RouterEvent {\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} url\r\n     * @param {?} urlAfterRedirects\r\n     * @param {?} state\r\n     */\r\n    constructor(/** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        id, /** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        url, urlAfterRedirects, state) {\r\n        super(id, url);\r\n        this.urlAfterRedirects = urlAfterRedirects;\r\n        this.state = state;\r\n    }\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the start of the Guard phase of routing.\r\n *\r\n * \\@experimental\r\n */\r\nclass GuardsCheckStart extends RouterEvent {\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} url\r\n     * @param {?} urlAfterRedirects\r\n     * @param {?} state\r\n     */\r\n    constructor(/** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        id, /** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        url, urlAfterRedirects, state) {\r\n        super(id, url);\r\n        this.urlAfterRedirects = urlAfterRedirects;\r\n        this.state = state;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the end of the Guard phase of routing.\r\n *\r\n * \\@experimental\r\n */\r\nclass GuardsCheckEnd extends RouterEvent {\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} url\r\n     * @param {?} urlAfterRedirects\r\n     * @param {?} state\r\n     * @param {?} shouldActivate\r\n     */\r\n    constructor(/** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        id, /** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        url, urlAfterRedirects, state, shouldActivate) {\r\n        super(id, url);\r\n        this.urlAfterRedirects = urlAfterRedirects;\r\n        this.state = state;\r\n        this.shouldActivate = shouldActivate;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the start of the Resolve phase of routing. The timing of this\r\n * event may change, thus it's experimental. In the current iteration it will run\r\n * in the \"resolve\" phase whether there's things to resolve or not. In the future this\r\n * behavior may change to only run when there are things to be resolved.\r\n *\r\n * \\@experimental\r\n */\r\nclass ResolveStart extends RouterEvent {\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} url\r\n     * @param {?} urlAfterRedirects\r\n     * @param {?} state\r\n     */\r\n    constructor(/** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        id, /** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        url, urlAfterRedirects, state) {\r\n        super(id, url);\r\n        this.urlAfterRedirects = urlAfterRedirects;\r\n        this.state = state;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the end of the Resolve phase of routing. See note on\r\n * {\\@link ResolveStart} for use of this experimental API.\r\n *\r\n * \\@experimental\r\n */\r\nclass ResolveEnd extends RouterEvent {\r\n    /**\r\n     * @param {?} id\r\n     * @param {?} url\r\n     * @param {?} urlAfterRedirects\r\n     * @param {?} state\r\n     */\r\n    constructor(/** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        id, /** @docsNotRequired */\r\n        /** @docsNotRequired */\r\n        url, urlAfterRedirects, state) {\r\n        super(id, url);\r\n        this.urlAfterRedirects = urlAfterRedirects;\r\n        this.state = state;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents an event triggered before lazy loading a route config.\r\n *\r\n * \\@experimental\r\n */\r\nclass RouteConfigLoadStart {\r\n    /**\r\n     * @param {?} route\r\n     */\r\n    constructor(route) {\r\n        this.route = route;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return `RouteConfigLoadStart(path: ${this.route.path})`; }\r\n}\r\n/**\r\n * \\@whatItDoes Represents an event triggered when a route has been lazy loaded.\r\n *\r\n * \\@experimental\r\n */\r\nclass RouteConfigLoadEnd {\r\n    /**\r\n     * @param {?} route\r\n     */\r\n    constructor(route) {\r\n        this.route = route;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return `RouteConfigLoadEnd(path: ${this.route.path})`; }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\r\n * {\\@link ChildActivationEnd} for use of this experimental API.\r\n *\r\n * \\@experimental\r\n */\r\nclass ChildActivationStart {\r\n    /**\r\n     * @param {?} snapshot\r\n     */\r\n    constructor(snapshot) {\r\n        this.snapshot = snapshot;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        const /** @type {?} */ path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\r\n        return `ChildActivationStart(path: '${path}')`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\r\n * {\\@link ChildActivationStart} for use of this experimental API.\r\n *\r\n * \\@experimental\r\n */\r\nclass ChildActivationEnd {\r\n    /**\r\n     * @param {?} snapshot\r\n     */\r\n    constructor(snapshot) {\r\n        this.snapshot = snapshot;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        const /** @type {?} */ path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\r\n        return `ChildActivationEnd(path: '${path}')`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\r\n * {\\@link ActivationEnd} for use of this experimental API.\r\n *\r\n * \\@experimental\r\n */\r\nclass ActivationStart {\r\n    /**\r\n     * @param {?} snapshot\r\n     */\r\n    constructor(snapshot) {\r\n        this.snapshot = snapshot;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        const /** @type {?} */ path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\r\n        return `ActivationStart(path: '${path}')`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the start of end of the Resolve phase of routing. See note on\r\n * {\\@link ActivationStart} for use of this experimental API.\r\n *\r\n * \\@experimental\r\n */\r\nclass ActivationEnd {\r\n    /**\r\n     * @param {?} snapshot\r\n     */\r\n    constructor(snapshot) {\r\n        this.snapshot = snapshot;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        const /** @type {?} */ path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\r\n        return `ActivationEnd(path: '${path}')`;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Name of the primary outlet.\r\n *\r\n * \\@stable\r\n */\r\nconst PRIMARY_OUTLET = 'primary';\r\n/**\r\n * Matrix and Query parameters.\r\n *\r\n * `ParamMap` makes it easier to work with parameters as they could have either a single value or\r\n * multiple value. Because this should be known by the user, calling `get` or `getAll` returns the\r\n * correct type (either `string` or `string[]`).\r\n *\r\n * The API is inspired by the URLSearchParams interface.\r\n * see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\nclass ParamsAsMap {\r\n    /**\r\n     * @param {?} params\r\n     */\r\n    constructor(params) { this.params = params || {}; }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    has(name) { return this.params.hasOwnProperty(name); }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    get(name) {\r\n        if (this.has(name)) {\r\n            const /** @type {?} */ v = this.params[name];\r\n            return Array.isArray(v) ? v[0] : v;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @param {?} name\r\n     * @return {?}\r\n     */\r\n    getAll(name) {\r\n        if (this.has(name)) {\r\n            const /** @type {?} */ v = this.params[name];\r\n            return Array.isArray(v) ? v : [v];\r\n        }\r\n        return [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get keys() { return Object.keys(this.params); }\r\n}\r\n/**\r\n * Convert a {\\@link Params} instance to a {\\@link ParamMap}.\r\n *\r\n * \\@stable\r\n * @param {?} params\r\n * @return {?}\r\n */\r\nfunction convertToParamMap(params) {\r\n    return new ParamsAsMap(params);\r\n}\r\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\r\n/**\r\n * @param {?} message\r\n * @return {?}\r\n */\r\nfunction navigationCancelingError(message) {\r\n    const /** @type {?} */ error = Error('NavigationCancelingError: ' + message);\r\n    (/** @type {?} */ (error))[NAVIGATION_CANCELING_ERROR] = true;\r\n    return error;\r\n}\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction isNavigationCancelingError(error) {\r\n    return error && (/** @type {?} */ (error))[NAVIGATION_CANCELING_ERROR];\r\n}\r\n/**\r\n * @param {?} segments\r\n * @param {?} segmentGroup\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\r\n    const /** @type {?} */ parts = /** @type {?} */ ((route.path)).split('/');\r\n    if (parts.length > segments.length) {\r\n        // The actual URL is shorter than the config, no match\r\n        return null;\r\n    }\r\n    if (route.pathMatch === 'full' &&\r\n        (segmentGroup.hasChildren() || parts.length < segments.length)) {\r\n        // The config is longer than the actual URL but we are looking for a full match, return null\r\n        return null;\r\n    }\r\n    const /** @type {?} */ posParams = {};\r\n    // Check each config part against the actual URL\r\n    for (let /** @type {?} */ index = 0; index < parts.length; index++) {\r\n        const /** @type {?} */ part = parts[index];\r\n        const /** @type {?} */ segment = segments[index];\r\n        const /** @type {?} */ isParameter = part.startsWith(':');\r\n        if (isParameter) {\r\n            posParams[part.substring(1)] = segment;\r\n        }\r\n        else if (part !== segment.path) {\r\n            // The actual URL part does not match the config, no match\r\n            return null;\r\n        }\r\n    }\r\n    return { consumed: segments.slice(0, parts.length), posParams };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * See {\\@link Routes} for more details.\r\n * \\@stable\r\n * @record\r\n */\r\n\r\nclass LoadedRouterConfig {\r\n    /**\r\n     * @param {?} routes\r\n     * @param {?} module\r\n     */\r\n    constructor(routes, module) {\r\n        this.routes = routes;\r\n        this.module = module;\r\n    }\r\n}\r\n/**\r\n * @param {?} config\r\n * @param {?=} parentPath\r\n * @return {?}\r\n */\r\nfunction validateConfig(config, parentPath = '') {\r\n    // forEach doesn't iterate undefined values\r\n    for (let /** @type {?} */ i = 0; i < config.length; i++) {\r\n        const /** @type {?} */ route = config[i];\r\n        const /** @type {?} */ fullPath = getFullPath(parentPath, route);\r\n        validateNode(route, fullPath);\r\n    }\r\n}\r\n/**\r\n * @param {?} route\r\n * @param {?} fullPath\r\n * @return {?}\r\n */\r\nfunction validateNode(route, fullPath) {\r\n    if (!route) {\r\n        throw new Error(`\r\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\r\n      The reason might be an extra comma.\r\n\r\n      Example:\r\n      const routes: Routes = [\r\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\r\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\r\n        { path: 'detail/:id', component: HeroDetailComponent }\r\n      ];\r\n    `);\r\n    }\r\n    if (Array.isArray(route)) {\r\n        throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\r\n    }\r\n    if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\r\n        throw new Error(`Invalid configuration of route '${fullPath}': a componentless route cannot have a named outlet set`);\r\n    }\r\n    if (route.redirectTo && route.children) {\r\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\r\n    }\r\n    if (route.redirectTo && route.loadChildren) {\r\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\r\n    }\r\n    if (route.children && route.loadChildren) {\r\n        throw new Error(`Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\r\n    }\r\n    if (route.redirectTo && route.component) {\r\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);\r\n    }\r\n    if (route.path && route.matcher) {\r\n        throw new Error(`Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\r\n    }\r\n    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\r\n        throw new Error(`Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\r\n    }\r\n    if (route.path === void 0 && route.matcher === void 0) {\r\n        throw new Error(`Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\r\n    }\r\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\r\n        throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);\r\n    }\r\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\r\n        const /** @type {?} */ exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\r\n        throw new Error(`Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\r\n    }\r\n    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\r\n        throw new Error(`Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\r\n    }\r\n    if (route.children) {\r\n        validateConfig(route.children, fullPath);\r\n    }\r\n}\r\n/**\r\n * @param {?} parentPath\r\n * @param {?} currentRoute\r\n * @return {?}\r\n */\r\nfunction getFullPath(parentPath, currentRoute) {\r\n    if (!currentRoute) {\r\n        return parentPath;\r\n    }\r\n    if (!parentPath && !currentRoute.path) {\r\n        return '';\r\n    }\r\n    else if (parentPath && !currentRoute.path) {\r\n        return `${parentPath}/`;\r\n    }\r\n    else if (!parentPath && currentRoute.path) {\r\n        return currentRoute.path;\r\n    }\r\n    else {\r\n        return `${parentPath}/${currentRoute.path}`;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction shallowEqualArrays(a, b) {\r\n    if (a.length !== b.length)\r\n        return false;\r\n    for (let /** @type {?} */ i = 0; i < a.length; ++i) {\r\n        if (!shallowEqual(a[i], b[i]))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction shallowEqual(a, b) {\r\n    const /** @type {?} */ k1 = Object.keys(a);\r\n    const /** @type {?} */ k2 = Object.keys(b);\r\n    if (k1.length != k2.length) {\r\n        return false;\r\n    }\r\n    let /** @type {?} */ key;\r\n    for (let /** @type {?} */ i = 0; i < k1.length; i++) {\r\n        key = k1[i];\r\n        if (a[key] !== b[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Flattens single-level nested arrays.\r\n * @template T\r\n * @param {?} arr\r\n * @return {?}\r\n */\r\nfunction flatten(arr) {\r\n    return Array.prototype.concat.apply([], arr);\r\n}\r\n/**\r\n * Return the last element of an array.\r\n * @template T\r\n * @param {?} a\r\n * @return {?}\r\n */\r\nfunction last$1(a) {\r\n    return a.length > 0 ? a[a.length - 1] : null;\r\n}\r\n/**\r\n * Verifys all booleans in an array are `true`.\r\n * @param {?} bools\r\n * @return {?}\r\n */\r\n\r\n/**\r\n * @template K, V\r\n * @param {?} map\r\n * @param {?} callback\r\n * @return {?}\r\n */\r\nfunction forEach(map$$1, callback) {\r\n    for (const /** @type {?} */ prop in map$$1) {\r\n        if (map$$1.hasOwnProperty(prop)) {\r\n            callback(map$$1[prop], prop);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @template A, B\r\n * @param {?} obj\r\n * @param {?} fn\r\n * @return {?}\r\n */\r\nfunction waitForMap(obj, fn) {\r\n    if (Object.keys(obj).length === 0) {\r\n        return of({});\r\n    }\r\n    const /** @type {?} */ waitHead = [];\r\n    const /** @type {?} */ waitTail = [];\r\n    const /** @type {?} */ res = {};\r\n    forEach(obj, (a, k) => {\r\n        const /** @type {?} */ mapped = map.call(fn(k, a), (r) => res[k] = r);\r\n        if (k === PRIMARY_OUTLET) {\r\n            waitHead.push(mapped);\r\n        }\r\n        else {\r\n            waitTail.push(mapped);\r\n        }\r\n    });\r\n    const /** @type {?} */ concat$ = concatAll.call(of(...waitHead, ...waitTail));\r\n    const /** @type {?} */ last$ = last.call(concat$);\r\n    return map.call(last$, () => res);\r\n}\r\n/**\r\n * ANDs Observables by merging all input observables, reducing to an Observable verifying all\r\n * input Observables return `true`.\r\n * @param {?} observables\r\n * @return {?}\r\n */\r\nfunction andObservables(observables) {\r\n    const /** @type {?} */ merged$ = mergeAll.call(observables);\r\n    return every.call(merged$, (result) => result === true);\r\n}\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction wrapIntoObservable(value) {\r\n    if (ɵisObservable(value)) {\r\n        return value;\r\n    }\r\n    if (ɵisPromise(value)) {\r\n        // Use `Promise.resolve()` to wrap promise-like instances.\r\n        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\r\n        // change detection.\r\n        return fromPromise(Promise.resolve(value));\r\n    }\r\n    return of(/** @type {?} */ (value));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @return {?}\r\n */\r\nfunction createEmptyUrlTree() {\r\n    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\r\n}\r\n/**\r\n * @param {?} container\r\n * @param {?} containee\r\n * @param {?} exact\r\n * @return {?}\r\n */\r\nfunction containsTree(container, containee, exact) {\r\n    if (exact) {\r\n        return equalQueryParams(container.queryParams, containee.queryParams) &&\r\n            equalSegmentGroups(container.root, containee.root);\r\n    }\r\n    return containsQueryParams(container.queryParams, containee.queryParams) &&\r\n        containsSegmentGroup(container.root, containee.root);\r\n}\r\n/**\r\n * @param {?} container\r\n * @param {?} containee\r\n * @return {?}\r\n */\r\nfunction equalQueryParams(container, containee) {\r\n    return shallowEqual(container, containee);\r\n}\r\n/**\r\n * @param {?} container\r\n * @param {?} containee\r\n * @return {?}\r\n */\r\nfunction equalSegmentGroups(container, containee) {\r\n    if (!equalPath(container.segments, containee.segments))\r\n        return false;\r\n    if (container.numberOfChildren !== containee.numberOfChildren)\r\n        return false;\r\n    for (const /** @type {?} */ c in containee.children) {\r\n        if (!container.children[c])\r\n            return false;\r\n        if (!equalSegmentGroups(container.children[c], containee.children[c]))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @param {?} container\r\n * @param {?} containee\r\n * @return {?}\r\n */\r\nfunction containsQueryParams(container, containee) {\r\n    return Object.keys(containee).length <= Object.keys(container).length &&\r\n        Object.keys(containee).every(key => containee[key] === container[key]);\r\n}\r\n/**\r\n * @param {?} container\r\n * @param {?} containee\r\n * @return {?}\r\n */\r\nfunction containsSegmentGroup(container, containee) {\r\n    return containsSegmentGroupHelper(container, containee, containee.segments);\r\n}\r\n/**\r\n * @param {?} container\r\n * @param {?} containee\r\n * @param {?} containeePaths\r\n * @return {?}\r\n */\r\nfunction containsSegmentGroupHelper(container, containee, containeePaths) {\r\n    if (container.segments.length > containeePaths.length) {\r\n        const /** @type {?} */ current = container.segments.slice(0, containeePaths.length);\r\n        if (!equalPath(current, containeePaths))\r\n            return false;\r\n        if (containee.hasChildren())\r\n            return false;\r\n        return true;\r\n    }\r\n    else if (container.segments.length === containeePaths.length) {\r\n        if (!equalPath(container.segments, containeePaths))\r\n            return false;\r\n        for (const /** @type {?} */ c in containee.children) {\r\n            if (!container.children[c])\r\n                return false;\r\n            if (!containsSegmentGroup(container.children[c], containee.children[c]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    else {\r\n        const /** @type {?} */ current = containeePaths.slice(0, container.segments.length);\r\n        const /** @type {?} */ next = containeePaths.slice(container.segments.length);\r\n        if (!equalPath(container.segments, current))\r\n            return false;\r\n        if (!container.children[PRIMARY_OUTLET])\r\n            return false;\r\n        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the parsed URL.\r\n *\r\n * \\@howToUse\r\n *\r\n * ```\r\n * \\@Component({templateUrl:'template.html'})\r\n * class MyComponent {\r\n *   constructor(router: Router) {\r\n *     const tree: UrlTree =\r\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\r\n *     const f = tree.fragment; // return 'fragment'\r\n *     const q = tree.queryParams; // returns {debug: 'true'}\r\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\r\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\r\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\r\n *     g.children['support'].segments; // return 1 segment 'help'\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@description\r\n *\r\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\r\n * serialized tree.\r\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\r\n *\r\n * \\@stable\r\n */\r\nclass UrlTree {\r\n    /**\r\n     * \\@internal\r\n     * @param {?} root\r\n     * @param {?} queryParams\r\n     * @param {?} fragment\r\n     */\r\n    constructor(root, queryParams, fragment) {\r\n        this.root = root;\r\n        this.queryParams = queryParams;\r\n        this.fragment = fragment;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get queryParamMap() {\r\n        if (!this._queryParamMap) {\r\n            this._queryParamMap = convertToParamMap(this.queryParams);\r\n        }\r\n        return this._queryParamMap;\r\n    }\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @return {?}\r\n     */\r\n    toString() { return DEFAULT_SERIALIZER.serialize(this); }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the parsed URL segment group.\r\n *\r\n * See {\\@link UrlTree} for more information.\r\n *\r\n * \\@stable\r\n */\r\nclass UrlSegmentGroup {\r\n    /**\r\n     * @param {?} segments\r\n     * @param {?} children\r\n     */\r\n    constructor(segments, children) {\r\n        this.segments = segments;\r\n        this.children = children;\r\n        /**\r\n         * The parent node in the url tree\r\n         */\r\n        this.parent = null;\r\n        forEach(children, (v, k) => v.parent = this);\r\n    }\r\n    /**\r\n     * Whether the segment has child segments\r\n     * @return {?}\r\n     */\r\n    hasChildren() { return this.numberOfChildren > 0; }\r\n    /**\r\n     * Number of child segments\r\n     * @return {?}\r\n     */\r\n    get numberOfChildren() { return Object.keys(this.children).length; }\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @return {?}\r\n     */\r\n    toString() { return serializePaths(this); }\r\n}\r\n/**\r\n * \\@whatItDoes Represents a single URL segment.\r\n *\r\n * \\@howToUse\r\n *\r\n * ```\r\n * \\@Component({templateUrl:'template.html'})\r\n * class MyComponent {\r\n *   constructor(router: Router) {\r\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\r\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\r\n *     const s: UrlSegment[] = g.segments;\r\n *     s[0].path; // returns 'team'\r\n *     s[0].parameters; // returns {id: 33}\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@description\r\n *\r\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\r\n * parameters associated with the segment.\r\n *\r\n * \\@stable\r\n */\r\nclass UrlSegment {\r\n    /**\r\n     * @param {?} path\r\n     * @param {?} parameters\r\n     */\r\n    constructor(path, parameters) {\r\n        this.path = path;\r\n        this.parameters = parameters;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get parameterMap() {\r\n        if (!this._parameterMap) {\r\n            this._parameterMap = convertToParamMap(this.parameters);\r\n        }\r\n        return this._parameterMap;\r\n    }\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @return {?}\r\n     */\r\n    toString() { return serializePath(this); }\r\n}\r\n/**\r\n * @param {?} as\r\n * @param {?} bs\r\n * @return {?}\r\n */\r\nfunction equalSegments(as, bs) {\r\n    return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\r\n}\r\n/**\r\n * @param {?} as\r\n * @param {?} bs\r\n * @return {?}\r\n */\r\nfunction equalPath(as, bs) {\r\n    if (as.length !== bs.length)\r\n        return false;\r\n    return as.every((a, i) => a.path === bs[i].path);\r\n}\r\n/**\r\n * @template T\r\n * @param {?} segment\r\n * @param {?} fn\r\n * @return {?}\r\n */\r\nfunction mapChildrenIntoArray(segment, fn) {\r\n    let /** @type {?} */ res = [];\r\n    forEach(segment.children, (child, childOutlet) => {\r\n        if (childOutlet === PRIMARY_OUTLET) {\r\n            res = res.concat(fn(child, childOutlet));\r\n        }\r\n    });\r\n    forEach(segment.children, (child, childOutlet) => {\r\n        if (childOutlet !== PRIMARY_OUTLET) {\r\n            res = res.concat(fn(child, childOutlet));\r\n        }\r\n    });\r\n    return res;\r\n}\r\n/**\r\n * \\@whatItDoes Serializes and deserializes a URL string into a URL tree.\r\n *\r\n * \\@description The url serialization strategy is customizable. You can\r\n * make all URLs case insensitive by providing a custom UrlSerializer.\r\n *\r\n * See {\\@link DefaultUrlSerializer} for an example of a URL serializer.\r\n *\r\n * \\@stable\r\n * @abstract\r\n */\r\nclass UrlSerializer {\r\n}\r\n/**\r\n * \\@whatItDoes A default implementation of the {\\@link UrlSerializer}.\r\n *\r\n * \\@description\r\n *\r\n * Example URLs:\r\n *\r\n * ```\r\n * /inbox/33(popup:compose)\r\n * /inbox/33;open=true/messages/44\r\n * ```\r\n *\r\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\r\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\r\n * specify route specific parameters.\r\n *\r\n * \\@stable\r\n */\r\nclass DefaultUrlSerializer {\r\n    /**\r\n     * Parses a url into a {\\@link UrlTree}\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    parse(url) {\r\n        const /** @type {?} */ p = new UrlParser(url);\r\n        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\r\n    }\r\n    /**\r\n     * Converts a {\\@link UrlTree} into a url\r\n     * @param {?} tree\r\n     * @return {?}\r\n     */\r\n    serialize(tree) {\r\n        const /** @type {?} */ segment = `/${serializeSegment(tree.root, true)}`;\r\n        const /** @type {?} */ query = serializeQueryParams(tree.queryParams);\r\n        const /** @type {?} */ fragment = typeof tree.fragment === `string` ? `#${encodeURI((/** @type {?} */ ((tree.fragment))))}` : '';\r\n        return `${segment}${query}${fragment}`;\r\n    }\r\n}\r\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\r\n/**\r\n * @param {?} segment\r\n * @return {?}\r\n */\r\nfunction serializePaths(segment) {\r\n    return segment.segments.map(p => serializePath(p)).join('/');\r\n}\r\n/**\r\n * @param {?} segment\r\n * @param {?} root\r\n * @return {?}\r\n */\r\nfunction serializeSegment(segment, root) {\r\n    if (!segment.hasChildren()) {\r\n        return serializePaths(segment);\r\n    }\r\n    if (root) {\r\n        const /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?\r\n            serializeSegment(segment.children[PRIMARY_OUTLET], false) :\r\n            '';\r\n        const /** @type {?} */ children = [];\r\n        forEach(segment.children, (v, k) => {\r\n            if (k !== PRIMARY_OUTLET) {\r\n                children.push(`${k}:${serializeSegment(v, false)}`);\r\n            }\r\n        });\r\n        return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\r\n    }\r\n    else {\r\n        const /** @type {?} */ children = mapChildrenIntoArray(segment, (v, k) => {\r\n            if (k === PRIMARY_OUTLET) {\r\n                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\r\n            }\r\n            return [`${k}:${serializeSegment(v, false)}`];\r\n        });\r\n        return `${serializePaths(segment)}/(${children.join('//')})`;\r\n    }\r\n}\r\n/**\r\n * This method is intended for encoding *key* or *value* parts of query component. We need a custom\r\n * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\r\n * encoded per http://tools.ietf.org/html/rfc3986:\r\n *    query         = *( pchar / \"/\" / \"?\" )\r\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"\\@\"\r\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\r\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\r\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\r\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\r\n * @param {?} s\r\n * @return {?}\r\n */\r\nfunction encode(s) {\r\n    return encodeURIComponent(s)\r\n        .replace(/%40/g, '@')\r\n        .replace(/%3A/gi, ':')\r\n        .replace(/%24/g, '$')\r\n        .replace(/%2C/gi, ',')\r\n        .replace(/%3B/gi, ';');\r\n}\r\n/**\r\n * @param {?} s\r\n * @return {?}\r\n */\r\nfunction decode(s) {\r\n    return decodeURIComponent(s);\r\n}\r\n/**\r\n * @param {?} path\r\n * @return {?}\r\n */\r\nfunction serializePath(path) {\r\n    return `${encode(path.path)}${serializeParams(path.parameters)}`;\r\n}\r\n/**\r\n * @param {?} params\r\n * @return {?}\r\n */\r\nfunction serializeParams(params) {\r\n    return Object.keys(params).map(key => `;${encode(key)}=${encode(params[key])}`).join('');\r\n}\r\n/**\r\n * @param {?} params\r\n * @return {?}\r\n */\r\nfunction serializeQueryParams(params) {\r\n    const /** @type {?} */ strParams = Object.keys(params).map((name) => {\r\n        const /** @type {?} */ value = params[name];\r\n        return Array.isArray(value) ? value.map(v => `${encode(name)}=${encode(v)}`).join('&') :\r\n            `${encode(name)}=${encode(value)}`;\r\n    });\r\n    return strParams.length ? `?${strParams.join(\"&\")}` : '';\r\n}\r\nconst SEGMENT_RE = /^[^\\/()?;=&#]+/;\r\n/**\r\n * @param {?} str\r\n * @return {?}\r\n */\r\nfunction matchSegments(str) {\r\n    const /** @type {?} */ match = str.match(SEGMENT_RE);\r\n    return match ? match[0] : '';\r\n}\r\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\r\n/**\r\n * @param {?} str\r\n * @return {?}\r\n */\r\nfunction matchQueryParams(str) {\r\n    const /** @type {?} */ match = str.match(QUERY_PARAM_RE);\r\n    return match ? match[0] : '';\r\n}\r\nconst QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\r\n/**\r\n * @param {?} str\r\n * @return {?}\r\n */\r\nfunction matchUrlQueryParamValue(str) {\r\n    const /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);\r\n    return match ? match[0] : '';\r\n}\r\nclass UrlParser {\r\n    /**\r\n     * @param {?} url\r\n     */\r\n    constructor(url) {\r\n        this.url = url;\r\n        this.remaining = url;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseRootSegment() {\r\n        this.consumeOptional('/');\r\n        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\r\n            return new UrlSegmentGroup([], {});\r\n        }\r\n        // The root segment group never has segments\r\n        return new UrlSegmentGroup([], this.parseChildren());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseQueryParams() {\r\n        const /** @type {?} */ params = {};\r\n        if (this.consumeOptional('?')) {\r\n            do {\r\n                this.parseQueryParam(params);\r\n            } while (this.consumeOptional('&'));\r\n        }\r\n        return params;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseFragment() {\r\n        return this.consumeOptional('#') ? decodeURI(this.remaining) : null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseChildren() {\r\n        if (this.remaining === '') {\r\n            return {};\r\n        }\r\n        this.consumeOptional('/');\r\n        const /** @type {?} */ segments = [];\r\n        if (!this.peekStartsWith('(')) {\r\n            segments.push(this.parseSegment());\r\n        }\r\n        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\r\n            this.capture('/');\r\n            segments.push(this.parseSegment());\r\n        }\r\n        let /** @type {?} */ children = {};\r\n        if (this.peekStartsWith('/(')) {\r\n            this.capture('/');\r\n            children = this.parseParens(true);\r\n        }\r\n        let /** @type {?} */ res = {};\r\n        if (this.peekStartsWith('(')) {\r\n            res = this.parseParens(false);\r\n        }\r\n        if (segments.length > 0 || Object.keys(children).length > 0) {\r\n            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\r\n        }\r\n        return res;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseSegment() {\r\n        const /** @type {?} */ path = matchSegments(this.remaining);\r\n        if (path === '' && this.peekStartsWith(';')) {\r\n            throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\r\n        }\r\n        this.capture(path);\r\n        return new UrlSegment(decode(path), this.parseMatrixParams());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    parseMatrixParams() {\r\n        const /** @type {?} */ params = {};\r\n        while (this.consumeOptional(';')) {\r\n            this.parseParam(params);\r\n        }\r\n        return params;\r\n    }\r\n    /**\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    parseParam(params) {\r\n        const /** @type {?} */ key = matchSegments(this.remaining);\r\n        if (!key) {\r\n            return;\r\n        }\r\n        this.capture(key);\r\n        let /** @type {?} */ value = '';\r\n        if (this.consumeOptional('=')) {\r\n            const /** @type {?} */ valueMatch = matchSegments(this.remaining);\r\n            if (valueMatch) {\r\n                value = valueMatch;\r\n                this.capture(value);\r\n            }\r\n        }\r\n        params[decode(key)] = decode(value);\r\n    }\r\n    /**\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    parseQueryParam(params) {\r\n        const /** @type {?} */ key = matchQueryParams(this.remaining);\r\n        if (!key) {\r\n            return;\r\n        }\r\n        this.capture(key);\r\n        let /** @type {?} */ value = '';\r\n        if (this.consumeOptional('=')) {\r\n            const /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);\r\n            if (valueMatch) {\r\n                value = valueMatch;\r\n                this.capture(value);\r\n            }\r\n        }\r\n        const /** @type {?} */ decodedKey = decode(key);\r\n        const /** @type {?} */ decodedVal = decode(value);\r\n        if (params.hasOwnProperty(decodedKey)) {\r\n            // Append to existing values\r\n            let /** @type {?} */ currentVal = params[decodedKey];\r\n            if (!Array.isArray(currentVal)) {\r\n                currentVal = [currentVal];\r\n                params[decodedKey] = currentVal;\r\n            }\r\n            currentVal.push(decodedVal);\r\n        }\r\n        else {\r\n            // Create a new value\r\n            params[decodedKey] = decodedVal;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} allowPrimary\r\n     * @return {?}\r\n     */\r\n    parseParens(allowPrimary) {\r\n        const /** @type {?} */ segments = {};\r\n        this.capture('(');\r\n        while (!this.consumeOptional(')') && this.remaining.length > 0) {\r\n            const /** @type {?} */ path = matchSegments(this.remaining);\r\n            const /** @type {?} */ next = this.remaining[path.length];\r\n            // if is is not one of these characters, then the segment was unescaped\r\n            // or the group was not closed\r\n            if (next !== '/' && next !== ')' && next !== ';') {\r\n                throw new Error(`Cannot parse url '${this.url}'`);\r\n            }\r\n            let /** @type {?} */ outletName = /** @type {?} */ ((undefined));\r\n            if (path.indexOf(':') > -1) {\r\n                outletName = path.substr(0, path.indexOf(':'));\r\n                this.capture(outletName);\r\n                this.capture(':');\r\n            }\r\n            else if (allowPrimary) {\r\n                outletName = PRIMARY_OUTLET;\r\n            }\r\n            const /** @type {?} */ children = this.parseChildren();\r\n            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\r\n                new UrlSegmentGroup([], children);\r\n            this.consumeOptional('//');\r\n        }\r\n        return segments;\r\n    }\r\n    /**\r\n     * @param {?} str\r\n     * @return {?}\r\n     */\r\n    peekStartsWith(str) { return this.remaining.startsWith(str); }\r\n    /**\r\n     * @param {?} str\r\n     * @return {?}\r\n     */\r\n    consumeOptional(str) {\r\n        if (this.peekStartsWith(str)) {\r\n            this.remaining = this.remaining.substring(str.length);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} str\r\n     * @return {?}\r\n     */\r\n    capture(str) {\r\n        if (!this.consumeOptional(str)) {\r\n            throw new Error(`Expected \"${str}\".`);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass NoMatch {\r\n    /**\r\n     * @param {?=} segmentGroup\r\n     */\r\n    constructor(segmentGroup) { this.segmentGroup = segmentGroup || null; }\r\n}\r\nclass AbsoluteRedirect {\r\n    /**\r\n     * @param {?} urlTree\r\n     */\r\n    constructor(urlTree) {\r\n        this.urlTree = urlTree;\r\n    }\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @return {?}\r\n */\r\nfunction noMatch(segmentGroup) {\r\n    return new Observable((obs) => obs.error(new NoMatch(segmentGroup)));\r\n}\r\n/**\r\n * @param {?} newTree\r\n * @return {?}\r\n */\r\nfunction absoluteRedirect(newTree) {\r\n    return new Observable((obs) => obs.error(new AbsoluteRedirect(newTree)));\r\n}\r\n/**\r\n * @param {?} redirectTo\r\n * @return {?}\r\n */\r\nfunction namedOutletsRedirect(redirectTo) {\r\n    return new Observable((obs) => obs.error(new Error(`Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\r\n}\r\n/**\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction canLoadFails(route) {\r\n    return new Observable((obs) => obs.error(navigationCancelingError(`Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\r\n}\r\n/**\r\n * Returns the `UrlTree` with the redirection applied.\r\n *\r\n * Lazy modules are loaded along the way.\r\n * @param {?} moduleInjector\r\n * @param {?} configLoader\r\n * @param {?} urlSerializer\r\n * @param {?} urlTree\r\n * @param {?} config\r\n * @return {?}\r\n */\r\nfunction applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\r\n    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\r\n}\r\nclass ApplyRedirects {\r\n    /**\r\n     * @param {?} moduleInjector\r\n     * @param {?} configLoader\r\n     * @param {?} urlSerializer\r\n     * @param {?} urlTree\r\n     * @param {?} config\r\n     */\r\n    constructor(moduleInjector, configLoader, urlSerializer, urlTree, config) {\r\n        this.configLoader = configLoader;\r\n        this.urlSerializer = urlSerializer;\r\n        this.urlTree = urlTree;\r\n        this.config = config;\r\n        this.allowRedirects = true;\r\n        this.ngModule = moduleInjector.get(NgModuleRef);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    apply() {\r\n        const /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\r\n        const /** @type {?} */ urlTrees$ = map.call(expanded$, (rootSegmentGroup) => this.createUrlTree(rootSegmentGroup, this.urlTree.queryParams, /** @type {?} */ ((this.urlTree.fragment))));\r\n        return _catch.call(urlTrees$, (e) => {\r\n            if (e instanceof AbsoluteRedirect) {\r\n                // after an absolute redirect we do not apply any more redirects!\r\n                this.allowRedirects = false;\r\n                // we need to run matching, so we can fetch all lazy-loaded modules\r\n                return this.match(e.urlTree);\r\n            }\r\n            if (e instanceof NoMatch) {\r\n                throw this.noMatchError(e);\r\n            }\r\n            throw e;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} tree\r\n     * @return {?}\r\n     */\r\n    match(tree) {\r\n        const /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\r\n        const /** @type {?} */ mapped$ = map.call(expanded$, (rootSegmentGroup) => this.createUrlTree(rootSegmentGroup, tree.queryParams, /** @type {?} */ ((tree.fragment))));\r\n        return _catch.call(mapped$, (e) => {\r\n            if (e instanceof NoMatch) {\r\n                throw this.noMatchError(e);\r\n            }\r\n            throw e;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    noMatchError(e) {\r\n        return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\r\n    }\r\n    /**\r\n     * @param {?} rootCandidate\r\n     * @param {?} queryParams\r\n     * @param {?} fragment\r\n     * @return {?}\r\n     */\r\n    createUrlTree(rootCandidate, queryParams, fragment) {\r\n        const /** @type {?} */ root = rootCandidate.segments.length > 0 ?\r\n            new UrlSegmentGroup([], { [PRIMARY_OUTLET]: rootCandidate }) :\r\n            rootCandidate;\r\n        return new UrlTree(root, queryParams, fragment);\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} routes\r\n     * @param {?} segmentGroup\r\n     * @param {?} outlet\r\n     * @return {?}\r\n     */\r\n    expandSegmentGroup(ngModule, routes, segmentGroup, outlet) {\r\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\r\n            return map.call(this.expandChildren(ngModule, routes, segmentGroup), (children) => new UrlSegmentGroup([], children));\r\n        }\r\n        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} routes\r\n     * @param {?} segmentGroup\r\n     * @return {?}\r\n     */\r\n    expandChildren(ngModule, routes, segmentGroup) {\r\n        return waitForMap(segmentGroup.children, (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet));\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} segmentGroup\r\n     * @param {?} routes\r\n     * @param {?} segments\r\n     * @param {?} outlet\r\n     * @param {?} allowRedirects\r\n     * @return {?}\r\n     */\r\n    expandSegment(ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {\r\n        const /** @type {?} */ routes$ = of(...routes);\r\n        const /** @type {?} */ processedRoutes$ = map.call(routes$, (r) => {\r\n            const /** @type {?} */ expanded$ = this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\r\n            return _catch.call(expanded$, (e) => {\r\n                if (e instanceof NoMatch) {\r\n                    return of(null);\r\n                }\r\n                throw e;\r\n            });\r\n        });\r\n        const /** @type {?} */ concattedProcessedRoutes$ = concatAll.call(processedRoutes$);\r\n        const /** @type {?} */ first$ = first.call(concattedProcessedRoutes$, (s) => !!s);\r\n        return _catch.call(first$, (e, _) => {\r\n            if (e instanceof EmptyError) {\r\n                if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\r\n                    return of(new UrlSegmentGroup([], {}));\r\n                }\r\n                throw new NoMatch(segmentGroup);\r\n            }\r\n            throw e;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} segmentGroup\r\n     * @param {?} segments\r\n     * @param {?} outlet\r\n     * @return {?}\r\n     */\r\n    noLeftoversInUrl(segmentGroup, segments, outlet) {\r\n        return segments.length === 0 && !segmentGroup.children[outlet];\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} segmentGroup\r\n     * @param {?} routes\r\n     * @param {?} route\r\n     * @param {?} paths\r\n     * @param {?} outlet\r\n     * @param {?} allowRedirects\r\n     * @return {?}\r\n     */\r\n    expandSegmentAgainstRoute(ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {\r\n        if (getOutlet(route) !== outlet) {\r\n            return noMatch(segmentGroup);\r\n        }\r\n        if (route.redirectTo === undefined) {\r\n            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\r\n        }\r\n        if (allowRedirects && this.allowRedirects) {\r\n            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);\r\n        }\r\n        return noMatch(segmentGroup);\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} segmentGroup\r\n     * @param {?} routes\r\n     * @param {?} route\r\n     * @param {?} segments\r\n     * @param {?} outlet\r\n     * @return {?}\r\n     */\r\n    expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {\r\n        if (route.path === '**') {\r\n            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);\r\n        }\r\n        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} routes\r\n     * @param {?} route\r\n     * @param {?} outlet\r\n     * @return {?}\r\n     */\r\n    expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet) {\r\n        const /** @type {?} */ newTree = this.applyRedirectCommands([], /** @type {?} */ ((route.redirectTo)), {});\r\n        if (/** @type {?} */ ((route.redirectTo)).startsWith('/')) {\r\n            return absoluteRedirect(newTree);\r\n        }\r\n        return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments) => {\r\n            const /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});\r\n            return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} segmentGroup\r\n     * @param {?} routes\r\n     * @param {?} route\r\n     * @param {?} segments\r\n     * @param {?} outlet\r\n     * @return {?}\r\n     */\r\n    expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {\r\n        const { matched, consumedSegments, lastChild, positionalParamSegments } = match(segmentGroup, route, segments);\r\n        if (!matched)\r\n            return noMatch(segmentGroup);\r\n        const /** @type {?} */ newTree = this.applyRedirectCommands(consumedSegments, /** @type {?} */ ((route.redirectTo)), /** @type {?} */ (positionalParamSegments));\r\n        if (/** @type {?} */ ((route.redirectTo)).startsWith('/')) {\r\n            return absoluteRedirect(newTree);\r\n        }\r\n        return mergeMap.call(this.lineralizeSegments(route, newTree), (newSegments) => {\r\n            return this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} rawSegmentGroup\r\n     * @param {?} route\r\n     * @param {?} segments\r\n     * @return {?}\r\n     */\r\n    matchSegmentAgainstRoute(ngModule, rawSegmentGroup, route, segments) {\r\n        if (route.path === '**') {\r\n            if (route.loadChildren) {\r\n                return map.call(this.configLoader.load(ngModule.injector, route), (cfg) => {\r\n                    route._loadedConfig = cfg;\r\n                    return new UrlSegmentGroup(segments, {});\r\n                });\r\n            }\r\n            return of(new UrlSegmentGroup(segments, {}));\r\n        }\r\n        const { matched, consumedSegments, lastChild } = match(rawSegmentGroup, route, segments);\r\n        if (!matched)\r\n            return noMatch(rawSegmentGroup);\r\n        const /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);\r\n        const /** @type {?} */ childConfig$ = this.getChildConfig(ngModule, route);\r\n        return mergeMap.call(childConfig$, (routerConfig) => {\r\n            const /** @type {?} */ childModule = routerConfig.module;\r\n            const /** @type {?} */ childConfig = routerConfig.routes;\r\n            const { segmentGroup, slicedSegments } = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\r\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\r\n                const /** @type {?} */ expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\r\n                return map.call(expanded$, (children) => new UrlSegmentGroup(consumedSegments, children));\r\n            }\r\n            if (childConfig.length === 0 && slicedSegments.length === 0) {\r\n                return of(new UrlSegmentGroup(consumedSegments, {}));\r\n            }\r\n            const /** @type {?} */ expanded$ = this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\r\n            return map.call(expanded$, (cs) => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children));\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} route\r\n     * @return {?}\r\n     */\r\n    getChildConfig(ngModule, route) {\r\n        if (route.children) {\r\n            // The children belong to the same module\r\n            return of(new LoadedRouterConfig(route.children, ngModule));\r\n        }\r\n        if (route.loadChildren) {\r\n            // lazy children belong to the loaded module\r\n            if (route._loadedConfig !== undefined) {\r\n                return of(route._loadedConfig);\r\n            }\r\n            return mergeMap.call(runCanLoadGuard(ngModule.injector, route), (shouldLoad) => {\r\n                if (shouldLoad) {\r\n                    return map.call(this.configLoader.load(ngModule.injector, route), (cfg) => {\r\n                        route._loadedConfig = cfg;\r\n                        return cfg;\r\n                    });\r\n                }\r\n                return canLoadFails(route);\r\n            });\r\n        }\r\n        return of(new LoadedRouterConfig([], ngModule));\r\n    }\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} urlTree\r\n     * @return {?}\r\n     */\r\n    lineralizeSegments(route, urlTree) {\r\n        let /** @type {?} */ res = [];\r\n        let /** @type {?} */ c = urlTree.root;\r\n        while (true) {\r\n            res = res.concat(c.segments);\r\n            if (c.numberOfChildren === 0) {\r\n                return of(res);\r\n            }\r\n            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\r\n                return namedOutletsRedirect(/** @type {?} */ ((route.redirectTo)));\r\n            }\r\n            c = c.children[PRIMARY_OUTLET];\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} segments\r\n     * @param {?} redirectTo\r\n     * @param {?} posParams\r\n     * @return {?}\r\n     */\r\n    applyRedirectCommands(segments, redirectTo, posParams) {\r\n        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\r\n    }\r\n    /**\r\n     * @param {?} redirectTo\r\n     * @param {?} urlTree\r\n     * @param {?} segments\r\n     * @param {?} posParams\r\n     * @return {?}\r\n     */\r\n    applyRedirectCreatreUrlTree(redirectTo, urlTree, segments, posParams) {\r\n        const /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\r\n        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\r\n    }\r\n    /**\r\n     * @param {?} redirectToParams\r\n     * @param {?} actualParams\r\n     * @return {?}\r\n     */\r\n    createQueryParams(redirectToParams, actualParams) {\r\n        const /** @type {?} */ res = {};\r\n        forEach(redirectToParams, (v, k) => {\r\n            const /** @type {?} */ copySourceValue = typeof v === 'string' && v.startsWith(':');\r\n            if (copySourceValue) {\r\n                const /** @type {?} */ sourceName = v.substring(1);\r\n                res[k] = actualParams[sourceName];\r\n            }\r\n            else {\r\n                res[k] = v;\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n    /**\r\n     * @param {?} redirectTo\r\n     * @param {?} group\r\n     * @param {?} segments\r\n     * @param {?} posParams\r\n     * @return {?}\r\n     */\r\n    createSegmentGroup(redirectTo, group, segments, posParams) {\r\n        const /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\r\n        let /** @type {?} */ children = {};\r\n        forEach(group.children, (child, name) => {\r\n            children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\r\n        });\r\n        return new UrlSegmentGroup(updatedSegments, children);\r\n    }\r\n    /**\r\n     * @param {?} redirectTo\r\n     * @param {?} redirectToSegments\r\n     * @param {?} actualSegments\r\n     * @param {?} posParams\r\n     * @return {?}\r\n     */\r\n    createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {\r\n        return redirectToSegments.map(s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\r\n            this.findOrReturn(s, actualSegments));\r\n    }\r\n    /**\r\n     * @param {?} redirectTo\r\n     * @param {?} redirectToUrlSegment\r\n     * @param {?} posParams\r\n     * @return {?}\r\n     */\r\n    findPosParam(redirectTo, redirectToUrlSegment, posParams) {\r\n        const /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];\r\n        if (!pos)\r\n            throw new Error(`Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\r\n        return pos;\r\n    }\r\n    /**\r\n     * @param {?} redirectToUrlSegment\r\n     * @param {?} actualSegments\r\n     * @return {?}\r\n     */\r\n    findOrReturn(redirectToUrlSegment, actualSegments) {\r\n        let /** @type {?} */ idx = 0;\r\n        for (const /** @type {?} */ s of actualSegments) {\r\n            if (s.path === redirectToUrlSegment.path) {\r\n                actualSegments.splice(idx);\r\n                return s;\r\n            }\r\n            idx++;\r\n        }\r\n        return redirectToUrlSegment;\r\n    }\r\n}\r\n/**\r\n * @param {?} moduleInjector\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction runCanLoadGuard(moduleInjector, route) {\r\n    const /** @type {?} */ canLoad = route.canLoad;\r\n    if (!canLoad || canLoad.length === 0)\r\n        return of(true);\r\n    const /** @type {?} */ obs = map.call(from(canLoad), (injectionToken) => {\r\n        const /** @type {?} */ guard = moduleInjector.get(injectionToken);\r\n        return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));\r\n    });\r\n    return andObservables(obs);\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} route\r\n * @param {?} segments\r\n * @return {?}\r\n */\r\nfunction match(segmentGroup, route, segments) {\r\n    if (route.path === '') {\r\n        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\r\n            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\r\n        }\r\n        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\r\n    }\r\n    const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\r\n    const /** @type {?} */ res = matcher(segments, segmentGroup, route);\r\n    if (!res) {\r\n        return {\r\n            matched: false,\r\n            consumedSegments: /** @type {?} */ ([]),\r\n            lastChild: 0,\r\n            positionalParamSegments: {},\r\n        };\r\n    }\r\n    return {\r\n        matched: true,\r\n        consumedSegments: /** @type {?} */ ((res.consumed)),\r\n        lastChild: /** @type {?} */ ((res.consumed.length)),\r\n        positionalParamSegments: /** @type {?} */ ((res.posParams)),\r\n    };\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} consumedSegments\r\n * @param {?} slicedSegments\r\n * @param {?} config\r\n * @return {?}\r\n */\r\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\r\n    if (slicedSegments.length > 0 &&\r\n        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\r\n        const /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\r\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\r\n    }\r\n    if (slicedSegments.length === 0 &&\r\n        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\r\n        const /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\r\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments };\r\n    }\r\n    return { segmentGroup, slicedSegments };\r\n}\r\n/**\r\n * @param {?} s\r\n * @return {?}\r\n */\r\nfunction mergeTrivialChildren(s) {\r\n    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\r\n        const /** @type {?} */ c = s.children[PRIMARY_OUTLET];\r\n        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\r\n    }\r\n    return s;\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} slicedSegments\r\n * @param {?} routes\r\n * @param {?} children\r\n * @return {?}\r\n */\r\nfunction addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\r\n    const /** @type {?} */ res = {};\r\n    for (const /** @type {?} */ r of routes) {\r\n        if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\r\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\r\n        }\r\n    }\r\n    return Object.assign({}, children, res);\r\n}\r\n/**\r\n * @param {?} routes\r\n * @param {?} primarySegmentGroup\r\n * @return {?}\r\n */\r\nfunction createChildrenForEmptySegments(routes, primarySegmentGroup) {\r\n    const /** @type {?} */ res = {};\r\n    res[PRIMARY_OUTLET] = primarySegmentGroup;\r\n    for (const /** @type {?} */ r of routes) {\r\n        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\r\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} segments\r\n * @param {?} routes\r\n * @return {?}\r\n */\r\nfunction containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {\r\n    return routes.some(r => isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET);\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} segments\r\n * @param {?} routes\r\n * @return {?}\r\n */\r\nfunction containsEmptyPathRedirects(segmentGroup, segments, routes) {\r\n    return routes.some(r => isEmptyPathRedirect(segmentGroup, segments, r));\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} segments\r\n * @param {?} r\r\n * @return {?}\r\n */\r\nfunction isEmptyPathRedirect(segmentGroup, segments, r) {\r\n    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\r\n        return false;\r\n    }\r\n    return r.path === '' && r.redirectTo !== undefined;\r\n}\r\n/**\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction getOutlet(route) {\r\n    return route.outlet || PRIMARY_OUTLET;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param {?} root\r\n     */\r\n    constructor(root) { this._root = root; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get root() { return this._root.value; }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} t\r\n     * @return {?}\r\n     */\r\n    parent(t) {\r\n        const /** @type {?} */ p = this.pathFromRoot(t);\r\n        return p.length > 1 ? p[p.length - 2] : null;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} t\r\n     * @return {?}\r\n     */\r\n    children(t) {\r\n        const /** @type {?} */ n = findNode(t, this._root);\r\n        return n ? n.children.map(t => t.value) : [];\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} t\r\n     * @return {?}\r\n     */\r\n    firstChild(t) {\r\n        const /** @type {?} */ n = findNode(t, this._root);\r\n        return n && n.children.length > 0 ? n.children[0].value : null;\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} t\r\n     * @return {?}\r\n     */\r\n    siblings(t) {\r\n        const /** @type {?} */ p = findPath(t, this._root);\r\n        if (p.length < 2)\r\n            return [];\r\n        const /** @type {?} */ c = p[p.length - 2].children.map(c => c.value);\r\n        return c.filter(cc => cc !== t);\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} t\r\n     * @return {?}\r\n     */\r\n    pathFromRoot(t) { return findPath(t, this._root).map(s => s.value); }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction findNode(value, node) {\r\n    if (value === node.value)\r\n        return node;\r\n    for (const /** @type {?} */ child of node.children) {\r\n        const /** @type {?} */ node = findNode(value, child);\r\n        if (node)\r\n            return node;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @template T\r\n * @param {?} value\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction findPath(value, node) {\r\n    if (value === node.value)\r\n        return [node];\r\n    for (const /** @type {?} */ child of node.children) {\r\n        const /** @type {?} */ path = findPath(value, child);\r\n        if (path.length) {\r\n            path.unshift(node);\r\n            return path;\r\n        }\r\n    }\r\n    return [];\r\n}\r\nclass TreeNode {\r\n    /**\r\n     * @param {?} value\r\n     * @param {?} children\r\n     */\r\n    constructor(value, children) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return `TreeNode(${this.value})`; }\r\n}\r\n/**\r\n * @template T\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction nodeChildrenAsMap(node) {\r\n    const /** @type {?} */ map$$1 = {};\r\n    if (node) {\r\n        node.children.forEach(child => map$$1[child.value.outlet] = child);\r\n    }\r\n    return map$$1;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Represents the state of the router.\r\n *\r\n * \\@howToUse\r\n *\r\n * ```\r\n * \\@Component({templateUrl:'template.html'})\r\n * class MyComponent {\r\n *   constructor(router: Router) {\r\n *     const state: RouterState = router.routerState;\r\n *     const root: ActivatedRoute = state.root;\r\n *     const child = root.firstChild;\r\n *     const id: Observable<string> = child.params.map(p => p.id);\r\n *     //...\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@description\r\n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\r\n * segments, the extracted parameters, and the resolved data.\r\n *\r\n * See {\\@link ActivatedRoute} for more information.\r\n *\r\n * \\@stable\r\n */\r\nclass RouterState extends Tree {\r\n    /**\r\n     * \\@internal\r\n     * @param {?} root\r\n     * @param {?} snapshot\r\n     */\r\n    constructor(root, snapshot) {\r\n        super(root);\r\n        this.snapshot = snapshot;\r\n        setRouterState(/** @type {?} */ (this), root);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return this.snapshot.toString(); }\r\n}\r\n/**\r\n * @param {?} urlTree\r\n * @param {?} rootComponent\r\n * @return {?}\r\n */\r\nfunction createEmptyState(urlTree, rootComponent) {\r\n    const /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\r\n    const /** @type {?} */ emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\r\n    const /** @type {?} */ emptyParams = new BehaviorSubject({});\r\n    const /** @type {?} */ emptyData = new BehaviorSubject({});\r\n    const /** @type {?} */ emptyQueryParams = new BehaviorSubject({});\r\n    const /** @type {?} */ fragment = new BehaviorSubject('');\r\n    const /** @type {?} */ activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\r\n    activated.snapshot = snapshot.root;\r\n    return new RouterState(new TreeNode(activated, []), snapshot);\r\n}\r\n/**\r\n * @param {?} urlTree\r\n * @param {?} rootComponent\r\n * @return {?}\r\n */\r\nfunction createEmptyStateSnapshot(urlTree, rootComponent) {\r\n    const /** @type {?} */ emptyParams = {};\r\n    const /** @type {?} */ emptyData = {};\r\n    const /** @type {?} */ emptyQueryParams = {};\r\n    const /** @type {?} */ fragment = '';\r\n    const /** @type {?} */ activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\r\n    return new RouterStateSnapshot('', new TreeNode(activated, []));\r\n}\r\n/**\r\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\r\n * outlet.\r\n * An `ActivatedRoute` can also be used to traverse the router state tree.\r\n *\r\n * \\@howToUse\r\n *\r\n * ```\r\n * \\@Component({...})\r\n * class MyComponent {\r\n *   constructor(route: ActivatedRoute) {\r\n *     const id: Observable<string> = route.params.map(p => p.id);\r\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\r\n *     // route.data includes both `data` and `resolve`\r\n *     const user = route.data.map(d => d.user);\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@stable\r\n */\r\nclass ActivatedRoute {\r\n    /**\r\n     * \\@internal\r\n     * @param {?} url\r\n     * @param {?} params\r\n     * @param {?} queryParams\r\n     * @param {?} fragment\r\n     * @param {?} data\r\n     * @param {?} outlet\r\n     * @param {?} component\r\n     * @param {?} futureSnapshot\r\n     */\r\n    constructor(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {\r\n        this.url = url;\r\n        this.params = params;\r\n        this.queryParams = queryParams;\r\n        this.fragment = fragment;\r\n        this.data = data;\r\n        this.outlet = outlet;\r\n        this.component = component;\r\n        this._futureSnapshot = futureSnapshot;\r\n    }\r\n    /**\r\n     * The configuration used to match this route\r\n     * @return {?}\r\n     */\r\n    get routeConfig() { return this._futureSnapshot.routeConfig; }\r\n    /**\r\n     * The root of the router state\r\n     * @return {?}\r\n     */\r\n    get root() { return this._routerState.root; }\r\n    /**\r\n     * The parent of this route in the router state tree\r\n     * @return {?}\r\n     */\r\n    get parent() { return this._routerState.parent(this); }\r\n    /**\r\n     * The first child of this route in the router state tree\r\n     * @return {?}\r\n     */\r\n    get firstChild() { return this._routerState.firstChild(this); }\r\n    /**\r\n     * The children of this route in the router state tree\r\n     * @return {?}\r\n     */\r\n    get children() { return this._routerState.children(this); }\r\n    /**\r\n     * The path from the root of the router state tree to this route\r\n     * @return {?}\r\n     */\r\n    get pathFromRoot() { return this._routerState.pathFromRoot(this); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get paramMap() {\r\n        if (!this._paramMap) {\r\n            this._paramMap = map.call(this.params, (p) => convertToParamMap(p));\r\n        }\r\n        return this._paramMap;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get queryParamMap() {\r\n        if (!this._queryParamMap) {\r\n            this._queryParamMap =\r\n                map.call(this.queryParams, (p) => convertToParamMap(p));\r\n        }\r\n        return this._queryParamMap;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\r\n    }\r\n}\r\n/**\r\n * \\@internal\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction inheritedParamsDataResolve(route) {\r\n    const /** @type {?} */ pathToRoot = route.pathFromRoot;\r\n    let /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\r\n    while (inhertingStartingFrom >= 1) {\r\n        const /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\r\n        const /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];\r\n        // current route is an empty path => inherits its parent's params and data\r\n        if (current.routeConfig && current.routeConfig.path === '') {\r\n            inhertingStartingFrom--;\r\n            // parent is componentless => current route should inherit its params and data\r\n        }\r\n        else if (!parent.component) {\r\n            inhertingStartingFrom--;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return pathToRoot.slice(inhertingStartingFrom).reduce((res, curr) => {\r\n        const /** @type {?} */ params = Object.assign({}, res.params, curr.params);\r\n        const /** @type {?} */ data = Object.assign({}, res.data, curr.data);\r\n        const /** @type {?} */ resolve = Object.assign({}, res.resolve, curr._resolvedData);\r\n        return { params, data, resolve };\r\n    }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));\r\n}\r\n/**\r\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\r\n * outlet\r\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\r\n * state tree.\r\n *\r\n * \\@howToUse\r\n *\r\n * ```\r\n * \\@Component({templateUrl:'./my-component.html'})\r\n * class MyComponent {\r\n *   constructor(route: ActivatedRoute) {\r\n *     const id: string = route.snapshot.params.id;\r\n *     const url: string = route.snapshot.url.join('');\r\n *     const user = route.snapshot.data.user;\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@stable\r\n */\r\nclass ActivatedRouteSnapshot {\r\n    /**\r\n     * \\@internal\r\n     * @param {?} url\r\n     * @param {?} params\r\n     * @param {?} queryParams\r\n     * @param {?} fragment\r\n     * @param {?} data\r\n     * @param {?} outlet\r\n     * @param {?} component\r\n     * @param {?} routeConfig\r\n     * @param {?} urlSegment\r\n     * @param {?} lastPathIndex\r\n     * @param {?} resolve\r\n     */\r\n    constructor(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {\r\n        this.url = url;\r\n        this.params = params;\r\n        this.queryParams = queryParams;\r\n        this.fragment = fragment;\r\n        this.data = data;\r\n        this.outlet = outlet;\r\n        this.component = component;\r\n        this.routeConfig = routeConfig;\r\n        this._urlSegment = urlSegment;\r\n        this._lastPathIndex = lastPathIndex;\r\n        this._resolve = resolve;\r\n    }\r\n    /**\r\n     * The root of the router state\r\n     * @return {?}\r\n     */\r\n    get root() { return this._routerState.root; }\r\n    /**\r\n     * The parent of this route in the router state tree\r\n     * @return {?}\r\n     */\r\n    get parent() { return this._routerState.parent(this); }\r\n    /**\r\n     * The first child of this route in the router state tree\r\n     * @return {?}\r\n     */\r\n    get firstChild() { return this._routerState.firstChild(this); }\r\n    /**\r\n     * The children of this route in the router state tree\r\n     * @return {?}\r\n     */\r\n    get children() { return this._routerState.children(this); }\r\n    /**\r\n     * The path from the root of the router state tree to this route\r\n     * @return {?}\r\n     */\r\n    get pathFromRoot() { return this._routerState.pathFromRoot(this); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get paramMap() {\r\n        if (!this._paramMap) {\r\n            this._paramMap = convertToParamMap(this.params);\r\n        }\r\n        return this._paramMap;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get queryParamMap() {\r\n        if (!this._queryParamMap) {\r\n            this._queryParamMap = convertToParamMap(this.queryParams);\r\n        }\r\n        return this._queryParamMap;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() {\r\n        const /** @type {?} */ url = this.url.map(segment => segment.toString()).join('/');\r\n        const /** @type {?} */ matched = this.routeConfig ? this.routeConfig.path : '';\r\n        return `Route(url:'${url}', path:'${matched}')`;\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Represents the state of the router at a moment in time.\r\n *\r\n * \\@howToUse\r\n *\r\n * ```\r\n * \\@Component({templateUrl:'template.html'})\r\n * class MyComponent {\r\n *   constructor(router: Router) {\r\n *     const state: RouterState = router.routerState;\r\n *     const snapshot: RouterStateSnapshot = state.snapshot;\r\n *     const root: ActivatedRouteSnapshot = snapshot.root;\r\n *     const child = root.firstChild;\r\n *     const id: Observable<string> = child.params.map(p => p.id);\r\n *     //...\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * \\@description\r\n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\r\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\r\n *\r\n * \\@stable\r\n */\r\nclass RouterStateSnapshot extends Tree {\r\n    /**\r\n     * \\@internal\r\n     * @param {?} url\r\n     * @param {?} root\r\n     */\r\n    constructor(url, root) {\r\n        super(root);\r\n        this.url = url;\r\n        setRouterState(/** @type {?} */ (this), root);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toString() { return serializeNode(this._root); }\r\n}\r\n/**\r\n * @template U, T\r\n * @param {?} state\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction setRouterState(state, node) {\r\n    node.value._routerState = state;\r\n    node.children.forEach(c => setRouterState(state, c));\r\n}\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction serializeNode(node) {\r\n    const /** @type {?} */ c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(\", \")} } ` : '';\r\n    return `${node.value}${c}`;\r\n}\r\n/**\r\n * The expectation is that the activate route is created with the right set of parameters.\r\n * So we push new values into the observables only when they are not the initial values.\r\n * And we detect that by checking if the snapshot field is set.\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction advanceActivatedRoute(route) {\r\n    if (route.snapshot) {\r\n        const /** @type {?} */ currentSnapshot = route.snapshot;\r\n        const /** @type {?} */ nextSnapshot = route._futureSnapshot;\r\n        route.snapshot = nextSnapshot;\r\n        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\r\n            (/** @type {?} */ (route.queryParams)).next(nextSnapshot.queryParams);\r\n        }\r\n        if (currentSnapshot.fragment !== nextSnapshot.fragment) {\r\n            (/** @type {?} */ (route.fragment)).next(nextSnapshot.fragment);\r\n        }\r\n        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\r\n            (/** @type {?} */ (route.params)).next(nextSnapshot.params);\r\n        }\r\n        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\r\n            (/** @type {?} */ (route.url)).next(nextSnapshot.url);\r\n        }\r\n        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\r\n            (/** @type {?} */ (route.data)).next(nextSnapshot.data);\r\n        }\r\n    }\r\n    else {\r\n        route.snapshot = route._futureSnapshot;\r\n        // this is for resolved data\r\n        (/** @type {?} */ (route.data)).next(route._futureSnapshot.data);\r\n    }\r\n}\r\n/**\r\n * @param {?} a\r\n * @param {?} b\r\n * @return {?}\r\n */\r\nfunction equalParamsAndUrlSegments(a, b) {\r\n    const /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\r\n    const /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;\r\n    return equalUrlParams && !parentsMismatch &&\r\n        (!a.parent || equalParamsAndUrlSegments(a.parent, /** @type {?} */ ((b.parent))));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} routeReuseStrategy\r\n * @param {?} curr\r\n * @param {?} prevState\r\n * @return {?}\r\n */\r\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\r\n    const /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\r\n    return new RouterState(root, curr);\r\n}\r\n/**\r\n * @param {?} routeReuseStrategy\r\n * @param {?} curr\r\n * @param {?=} prevState\r\n * @return {?}\r\n */\r\nfunction createNode(routeReuseStrategy, curr, prevState) {\r\n    // reuse an activated route that is currently displayed on the screen\r\n    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\r\n        const /** @type {?} */ value = prevState.value;\r\n        value._futureSnapshot = curr.value;\r\n        const /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\r\n        return new TreeNode(value, children);\r\n        // retrieve an activated route that is used to be displayed, but is not currently displayed\r\n    }\r\n    else if (routeReuseStrategy.retrieve(curr.value)) {\r\n        const /** @type {?} */ tree = (/** @type {?} */ (routeReuseStrategy.retrieve(curr.value))).route;\r\n        setFutureSnapshotsOfActivatedRoutes(curr, tree);\r\n        return tree;\r\n    }\r\n    else {\r\n        const /** @type {?} */ value = createActivatedRoute(curr.value);\r\n        const /** @type {?} */ children = curr.children.map(c => createNode(routeReuseStrategy, c));\r\n        return new TreeNode(value, children);\r\n    }\r\n}\r\n/**\r\n * @param {?} curr\r\n * @param {?} result\r\n * @return {?}\r\n */\r\nfunction setFutureSnapshotsOfActivatedRoutes(curr, result) {\r\n    if (curr.value.routeConfig !== result.value.routeConfig) {\r\n        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\r\n    }\r\n    if (curr.children.length !== result.children.length) {\r\n        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\r\n    }\r\n    result.value._futureSnapshot = curr.value;\r\n    for (let /** @type {?} */ i = 0; i < curr.children.length; ++i) {\r\n        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\r\n    }\r\n}\r\n/**\r\n * @param {?} routeReuseStrategy\r\n * @param {?} curr\r\n * @param {?} prevState\r\n * @return {?}\r\n */\r\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\r\n    return curr.children.map(child => {\r\n        for (const /** @type {?} */ p of prevState.children) {\r\n            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\r\n                return createNode(routeReuseStrategy, child, p);\r\n            }\r\n        }\r\n        return createNode(routeReuseStrategy, child);\r\n    });\r\n}\r\n/**\r\n * @param {?} c\r\n * @return {?}\r\n */\r\nfunction createActivatedRoute(c) {\r\n    return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @param {?} route\r\n * @param {?} urlTree\r\n * @param {?} commands\r\n * @param {?} queryParams\r\n * @param {?} fragment\r\n * @return {?}\r\n */\r\nfunction createUrlTree(route, urlTree, commands, queryParams, fragment) {\r\n    if (commands.length === 0) {\r\n        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\r\n    }\r\n    const /** @type {?} */ nav = computeNavigation(commands);\r\n    if (nav.toRoot()) {\r\n        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\r\n    }\r\n    const /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);\r\n    const /** @type {?} */ segmentGroup = startingPosition.processChildren ?\r\n        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\r\n        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\r\n    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\r\n}\r\n/**\r\n * @param {?} command\r\n * @return {?}\r\n */\r\nfunction isMatrixParams(command) {\r\n    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\r\n}\r\n/**\r\n * @param {?} oldSegmentGroup\r\n * @param {?} newSegmentGroup\r\n * @param {?} urlTree\r\n * @param {?} queryParams\r\n * @param {?} fragment\r\n * @return {?}\r\n */\r\nfunction tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\r\n    let /** @type {?} */ qp = {};\r\n    if (queryParams) {\r\n        forEach(queryParams, (value, name) => {\r\n            qp[name] = Array.isArray(value) ? value.map((v) => `${v}`) : `${value}`;\r\n        });\r\n    }\r\n    if (urlTree.root === oldSegmentGroup) {\r\n        return new UrlTree(newSegmentGroup, qp, fragment);\r\n    }\r\n    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\r\n}\r\n/**\r\n * @param {?} current\r\n * @param {?} oldSegment\r\n * @param {?} newSegment\r\n * @return {?}\r\n */\r\nfunction replaceSegment(current, oldSegment, newSegment) {\r\n    const /** @type {?} */ children = {};\r\n    forEach(current.children, (c, outletName) => {\r\n        if (c === oldSegment) {\r\n            children[outletName] = newSegment;\r\n        }\r\n        else {\r\n            children[outletName] = replaceSegment(c, oldSegment, newSegment);\r\n        }\r\n    });\r\n    return new UrlSegmentGroup(current.segments, children);\r\n}\r\nclass Navigation {\r\n    /**\r\n     * @param {?} isAbsolute\r\n     * @param {?} numberOfDoubleDots\r\n     * @param {?} commands\r\n     */\r\n    constructor(isAbsolute, numberOfDoubleDots, commands) {\r\n        this.isAbsolute = isAbsolute;\r\n        this.numberOfDoubleDots = numberOfDoubleDots;\r\n        this.commands = commands;\r\n        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\r\n            throw new Error('Root segment cannot have matrix parameters');\r\n        }\r\n        const /** @type {?} */ cmdWithOutlet = commands.find(c => typeof c === 'object' && c != null && c.outlets);\r\n        if (cmdWithOutlet && cmdWithOutlet !== last$1(commands)) {\r\n            throw new Error('{outlets:{}} has to be the last command');\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toRoot() {\r\n        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\r\n    }\r\n}\r\n/**\r\n * Transforms commands to a normalized `Navigation`\r\n * @param {?} commands\r\n * @return {?}\r\n */\r\nfunction computeNavigation(commands) {\r\n    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\r\n        return new Navigation(true, 0, commands);\r\n    }\r\n    let /** @type {?} */ numberOfDoubleDots = 0;\r\n    let /** @type {?} */ isAbsolute = false;\r\n    const /** @type {?} */ res = commands.reduce((res, cmd, cmdIdx) => {\r\n        if (typeof cmd === 'object' && cmd != null) {\r\n            if (cmd.outlets) {\r\n                const /** @type {?} */ outlets = {};\r\n                forEach(cmd.outlets, (commands, name) => {\r\n                    outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\r\n                });\r\n                return [...res, { outlets }];\r\n            }\r\n            if (cmd.segmentPath) {\r\n                return [...res, cmd.segmentPath];\r\n            }\r\n        }\r\n        if (!(typeof cmd === 'string')) {\r\n            return [...res, cmd];\r\n        }\r\n        if (cmdIdx === 0) {\r\n            cmd.split('/').forEach((urlPart, partIndex) => {\r\n                if (partIndex == 0 && urlPart === '.') {\r\n                    // skip './a'\r\n                }\r\n                else if (partIndex == 0 && urlPart === '') {\r\n                    //  '/a'\r\n                    isAbsolute = true;\r\n                }\r\n                else if (urlPart === '..') {\r\n                    //  '../a'\r\n                    numberOfDoubleDots++;\r\n                }\r\n                else if (urlPart != '') {\r\n                    res.push(urlPart);\r\n                }\r\n            });\r\n            return res;\r\n        }\r\n        return [...res, cmd];\r\n    }, []);\r\n    return new Navigation(isAbsolute, numberOfDoubleDots, res);\r\n}\r\nclass Position {\r\n    /**\r\n     * @param {?} segmentGroup\r\n     * @param {?} processChildren\r\n     * @param {?} index\r\n     */\r\n    constructor(segmentGroup, processChildren, index) {\r\n        this.segmentGroup = segmentGroup;\r\n        this.processChildren = processChildren;\r\n        this.index = index;\r\n    }\r\n}\r\n/**\r\n * @param {?} nav\r\n * @param {?} tree\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction findStartingPosition(nav, tree, route) {\r\n    if (nav.isAbsolute) {\r\n        return new Position(tree.root, true, 0);\r\n    }\r\n    if (route.snapshot._lastPathIndex === -1) {\r\n        return new Position(route.snapshot._urlSegment, true, 0);\r\n    }\r\n    const /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\r\n    const /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;\r\n    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\r\n}\r\n/**\r\n * @param {?} group\r\n * @param {?} index\r\n * @param {?} numberOfDoubleDots\r\n * @return {?}\r\n */\r\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\r\n    let /** @type {?} */ g = group;\r\n    let /** @type {?} */ ci = index;\r\n    let /** @type {?} */ dd = numberOfDoubleDots;\r\n    while (dd > ci) {\r\n        dd -= ci;\r\n        g = /** @type {?} */ ((g.parent));\r\n        if (!g) {\r\n            throw new Error('Invalid number of \\'../\\'');\r\n        }\r\n        ci = g.segments.length;\r\n    }\r\n    return new Position(g, false, ci - dd);\r\n}\r\n/**\r\n * @param {?} command\r\n * @return {?}\r\n */\r\nfunction getPath(command) {\r\n    if (typeof command === 'object' && command != null && command.outlets) {\r\n        return command.outlets[PRIMARY_OUTLET];\r\n    }\r\n    return `${command}`;\r\n}\r\n/**\r\n * @param {?} commands\r\n * @return {?}\r\n */\r\nfunction getOutlets(commands) {\r\n    if (!(typeof commands[0] === 'object'))\r\n        return { [PRIMARY_OUTLET]: commands };\r\n    if (commands[0].outlets === undefined)\r\n        return { [PRIMARY_OUTLET]: commands };\r\n    return commands[0].outlets;\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} startIndex\r\n * @param {?} commands\r\n * @return {?}\r\n */\r\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\r\n    if (!segmentGroup) {\r\n        segmentGroup = new UrlSegmentGroup([], {});\r\n    }\r\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\r\n        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\r\n    }\r\n    const /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);\r\n    const /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);\r\n    if (m.match && m.pathIndex < segmentGroup.segments.length) {\r\n        const /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\r\n        g.children[PRIMARY_OUTLET] =\r\n            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\r\n        return updateSegmentGroupChildren(g, 0, slicedCommands);\r\n    }\r\n    else if (m.match && slicedCommands.length === 0) {\r\n        return new UrlSegmentGroup(segmentGroup.segments, {});\r\n    }\r\n    else if (m.match && !segmentGroup.hasChildren()) {\r\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\r\n    }\r\n    else if (m.match) {\r\n        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\r\n    }\r\n    else {\r\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\r\n    }\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} startIndex\r\n * @param {?} commands\r\n * @return {?}\r\n */\r\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\r\n    if (commands.length === 0) {\r\n        return new UrlSegmentGroup(segmentGroup.segments, {});\r\n    }\r\n    else {\r\n        const /** @type {?} */ outlets = getOutlets(commands);\r\n        const /** @type {?} */ children = {};\r\n        forEach(outlets, (commands, outlet) => {\r\n            if (commands !== null) {\r\n                children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\r\n            }\r\n        });\r\n        forEach(segmentGroup.children, (child, childOutlet) => {\r\n            if (outlets[childOutlet] === undefined) {\r\n                children[childOutlet] = child;\r\n            }\r\n        });\r\n        return new UrlSegmentGroup(segmentGroup.segments, children);\r\n    }\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} startIndex\r\n * @param {?} commands\r\n * @return {?}\r\n */\r\nfunction prefixedWith(segmentGroup, startIndex, commands) {\r\n    let /** @type {?} */ currentCommandIndex = 0;\r\n    let /** @type {?} */ currentPathIndex = startIndex;\r\n    const /** @type {?} */ noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\r\n    while (currentPathIndex < segmentGroup.segments.length) {\r\n        if (currentCommandIndex >= commands.length)\r\n            return noMatch;\r\n        const /** @type {?} */ path = segmentGroup.segments[currentPathIndex];\r\n        const /** @type {?} */ curr = getPath(commands[currentCommandIndex]);\r\n        const /** @type {?} */ next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\r\n        if (currentPathIndex > 0 && curr === undefined)\r\n            break;\r\n        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\r\n            if (!compare(curr, next, path))\r\n                return noMatch;\r\n            currentCommandIndex += 2;\r\n        }\r\n        else {\r\n            if (!compare(curr, {}, path))\r\n                return noMatch;\r\n            currentCommandIndex++;\r\n        }\r\n        currentPathIndex++;\r\n    }\r\n    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} startIndex\r\n * @param {?} commands\r\n * @return {?}\r\n */\r\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\r\n    const /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);\r\n    let /** @type {?} */ i = 0;\r\n    while (i < commands.length) {\r\n        if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\r\n            const /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);\r\n            return new UrlSegmentGroup(paths, children);\r\n        }\r\n        // if we start with an object literal, we need to reuse the path part from the segment\r\n        if (i === 0 && isMatrixParams(commands[0])) {\r\n            const /** @type {?} */ p = segmentGroup.segments[startIndex];\r\n            paths.push(new UrlSegment(p.path, commands[0]));\r\n            i++;\r\n            continue;\r\n        }\r\n        const /** @type {?} */ curr = getPath(commands[i]);\r\n        const /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;\r\n        if (curr && next && isMatrixParams(next)) {\r\n            paths.push(new UrlSegment(curr, stringify(next)));\r\n            i += 2;\r\n        }\r\n        else {\r\n            paths.push(new UrlSegment(curr, {}));\r\n            i++;\r\n        }\r\n    }\r\n    return new UrlSegmentGroup(paths, {});\r\n}\r\n/**\r\n * @param {?} outlets\r\n * @return {?}\r\n */\r\nfunction createNewSegmentChildren(outlets) {\r\n    const /** @type {?} */ children = {};\r\n    forEach(outlets, (commands, outlet) => {\r\n        if (commands !== null) {\r\n            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\r\n        }\r\n    });\r\n    return children;\r\n}\r\n/**\r\n * @param {?} params\r\n * @return {?}\r\n */\r\nfunction stringify(params) {\r\n    const /** @type {?} */ res = {};\r\n    forEach(params, (v, k) => res[k] = `${v}`);\r\n    return res;\r\n}\r\n/**\r\n * @param {?} path\r\n * @param {?} params\r\n * @param {?} segment\r\n * @return {?}\r\n */\r\nfunction compare(path, params, segment) {\r\n    return path == segment.path && shallowEqual(params, segment.parameters);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass CanActivate {\r\n    /**\r\n     * @param {?} path\r\n     */\r\n    constructor(path) {\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get route() { return this.path[this.path.length - 1]; }\r\n}\r\nclass CanDeactivate {\r\n    /**\r\n     * @param {?} component\r\n     * @param {?} route\r\n     */\r\n    constructor(component, route) {\r\n        this.component = component;\r\n        this.route = route;\r\n    }\r\n}\r\n/**\r\n * This class bundles the actions involved in preactivation of a route.\r\n */\r\nclass PreActivation {\r\n    /**\r\n     * @param {?} future\r\n     * @param {?} curr\r\n     * @param {?} moduleInjector\r\n     * @param {?=} forwardEvent\r\n     */\r\n    constructor(future, curr, moduleInjector, forwardEvent) {\r\n        this.future = future;\r\n        this.curr = curr;\r\n        this.moduleInjector = moduleInjector;\r\n        this.forwardEvent = forwardEvent;\r\n        this.canActivateChecks = [];\r\n        this.canDeactivateChecks = [];\r\n    }\r\n    /**\r\n     * @param {?} parentContexts\r\n     * @return {?}\r\n     */\r\n    initialize(parentContexts) {\r\n        const /** @type {?} */ futureRoot = this.future._root;\r\n        const /** @type {?} */ currRoot = this.curr ? this.curr._root : null;\r\n        this.setupChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    checkGuards() {\r\n        if (!this.isDeactivating() && !this.isActivating()) {\r\n            return of(true);\r\n        }\r\n        const /** @type {?} */ canDeactivate$ = this.runCanDeactivateChecks();\r\n        return mergeMap.call(canDeactivate$, (canDeactivate) => canDeactivate ? this.runCanActivateChecks() : of(false));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    resolveData() {\r\n        if (!this.isActivating())\r\n            return of(null);\r\n        const /** @type {?} */ checks$ = from(this.canActivateChecks);\r\n        const /** @type {?} */ runningChecks$ = concatMap.call(checks$, (check) => this.runResolve(check.route));\r\n        return reduce.call(runningChecks$, (_, __) => _);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isDeactivating() { return this.canDeactivateChecks.length !== 0; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    isActivating() { return this.canActivateChecks.length !== 0; }\r\n    /**\r\n     * Iterates over child routes and calls recursive `setupRouteGuards` to get `this` instance in\r\n     * proper state to run `checkGuards()` method.\r\n     * @param {?} futureNode\r\n     * @param {?} currNode\r\n     * @param {?} contexts\r\n     * @param {?} futurePath\r\n     * @return {?}\r\n     */\r\n    setupChildRouteGuards(futureNode, currNode, contexts, futurePath) {\r\n        const /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);\r\n        // Process the children of the future route\r\n        futureNode.children.forEach(c => {\r\n            this.setupRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]));\r\n            delete prevChildren[c.value.outlet];\r\n        });\r\n        // Process any children left from the current route (not active for the future route)\r\n        forEach(prevChildren, (v, k) => this.deactivateRouteAndItsChildren(v, /** @type {?} */ ((contexts)).getContext(k)));\r\n    }\r\n    /**\r\n     * Iterates over child routes and calls recursive `setupRouteGuards` to get `this` instance in\r\n     * proper state to run `checkGuards()` method.\r\n     * @param {?} futureNode\r\n     * @param {?} currNode\r\n     * @param {?} parentContexts\r\n     * @param {?} futurePath\r\n     * @return {?}\r\n     */\r\n    setupRouteGuards(futureNode, currNode, parentContexts, futurePath) {\r\n        const /** @type {?} */ future = futureNode.value;\r\n        const /** @type {?} */ curr = currNode ? currNode.value : null;\r\n        const /** @type {?} */ context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\r\n        // reusing the node\r\n        if (curr && future.routeConfig === curr.routeConfig) {\r\n            const /** @type {?} */ shouldRunGuardsAndResolvers = this.shouldRunGuardsAndResolvers(curr, future, /** @type {?} */ ((future.routeConfig)).runGuardsAndResolvers);\r\n            if (shouldRunGuardsAndResolvers) {\r\n                this.canActivateChecks.push(new CanActivate(futurePath));\r\n            }\r\n            else {\r\n                // we need to set the data\r\n                future.data = curr.data;\r\n                future._resolvedData = curr._resolvedData;\r\n            }\r\n            // If we have a component, we need to go through an outlet.\r\n            if (future.component) {\r\n                this.setupChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath);\r\n                // if we have a componentless route, we recurse but keep the same outlet map.\r\n            }\r\n            else {\r\n                this.setupChildRouteGuards(futureNode, currNode, parentContexts, futurePath);\r\n            }\r\n            if (shouldRunGuardsAndResolvers) {\r\n                const /** @type {?} */ outlet = /** @type {?} */ ((/** @type {?} */ ((context)).outlet));\r\n                this.canDeactivateChecks.push(new CanDeactivate(outlet.component, curr));\r\n            }\r\n        }\r\n        else {\r\n            if (curr) {\r\n                this.deactivateRouteAndItsChildren(currNode, context);\r\n            }\r\n            this.canActivateChecks.push(new CanActivate(futurePath));\r\n            // If we have a component, we need to go through an outlet.\r\n            if (future.component) {\r\n                this.setupChildRouteGuards(futureNode, null, context ? context.children : null, futurePath);\r\n                // if we have a componentless route, we recurse but keep the same outlet map.\r\n            }\r\n            else {\r\n                this.setupChildRouteGuards(futureNode, null, parentContexts, futurePath);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} curr\r\n     * @param {?} future\r\n     * @param {?} mode\r\n     * @return {?}\r\n     */\r\n    shouldRunGuardsAndResolvers(curr, future, mode) {\r\n        switch (mode) {\r\n            case 'always':\r\n                return true;\r\n            case 'paramsOrQueryParamsChange':\r\n                return !equalParamsAndUrlSegments(curr, future) ||\r\n                    !shallowEqual(curr.queryParams, future.queryParams);\r\n            case 'paramsChange':\r\n            default:\r\n                return !equalParamsAndUrlSegments(curr, future);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} context\r\n     * @return {?}\r\n     */\r\n    deactivateRouteAndItsChildren(route, context) {\r\n        const /** @type {?} */ children = nodeChildrenAsMap(route);\r\n        const /** @type {?} */ r = route.value;\r\n        forEach(children, (node, childName) => {\r\n            if (!r.component) {\r\n                this.deactivateRouteAndItsChildren(node, context);\r\n            }\r\n            else if (context) {\r\n                this.deactivateRouteAndItsChildren(node, context.children.getContext(childName));\r\n            }\r\n            else {\r\n                this.deactivateRouteAndItsChildren(node, null);\r\n            }\r\n        });\r\n        if (!r.component) {\r\n            this.canDeactivateChecks.push(new CanDeactivate(null, r));\r\n        }\r\n        else if (context && context.outlet && context.outlet.isActivated) {\r\n            this.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\r\n        }\r\n        else {\r\n            this.canDeactivateChecks.push(new CanDeactivate(null, r));\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    runCanDeactivateChecks() {\r\n        const /** @type {?} */ checks$ = from(this.canDeactivateChecks);\r\n        const /** @type {?} */ runningChecks$ = mergeMap.call(checks$, (check) => this.runCanDeactivate(check.component, check.route));\r\n        return every.call(runningChecks$, (result) => result === true);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    runCanActivateChecks() {\r\n        const /** @type {?} */ checks$ = from(this.canActivateChecks);\r\n        const /** @type {?} */ runningChecks$ = concatMap.call(checks$, (check) => andObservables(from([\r\n            this.fireChildActivationStart(check.route.parent), this.fireActivationStart(check.route),\r\n            this.runCanActivateChild(check.path), this.runCanActivate(check.route)\r\n        ])));\r\n        return every.call(runningChecks$, (result) => result === true);\r\n        // this.fireChildActivationStart(check.path),\r\n    }\r\n    /**\r\n     * This should fire off `ActivationStart` events for each route being activated at this\r\n     * level.\r\n     * In other words, if you're activating `a` and `b` below, `path` will contain the\r\n     * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\r\n     * return\r\n     * `true` so checks continue to run.\r\n     * @param {?} snapshot\r\n     * @return {?}\r\n     */\r\n    fireActivationStart(snapshot) {\r\n        if (snapshot !== null && this.forwardEvent) {\r\n            this.forwardEvent(new ActivationStart(snapshot));\r\n        }\r\n        return of(true);\r\n    }\r\n    /**\r\n     * This should fire off `ChildActivationStart` events for each route being activated at this\r\n     * level.\r\n     * In other words, if you're activating `a` and `b` below, `path` will contain the\r\n     * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\r\n     * return\r\n     * `true` so checks continue to run.\r\n     * @param {?} snapshot\r\n     * @return {?}\r\n     */\r\n    fireChildActivationStart(snapshot) {\r\n        if (snapshot !== null && this.forwardEvent) {\r\n            this.forwardEvent(new ChildActivationStart(snapshot));\r\n        }\r\n        return of(true);\r\n    }\r\n    /**\r\n     * @param {?} future\r\n     * @return {?}\r\n     */\r\n    runCanActivate(future) {\r\n        const /** @type {?} */ canActivate = future.routeConfig ? future.routeConfig.canActivate : null;\r\n        if (!canActivate || canActivate.length === 0)\r\n            return of(true);\r\n        const /** @type {?} */ obs = map.call(from(canActivate), (c) => {\r\n            const /** @type {?} */ guard = this.getToken(c, future);\r\n            let /** @type {?} */ observable;\r\n            if (guard.canActivate) {\r\n                observable = wrapIntoObservable(guard.canActivate(future, this.future));\r\n            }\r\n            else {\r\n                observable = wrapIntoObservable(guard(future, this.future));\r\n            }\r\n            return first.call(observable);\r\n        });\r\n        return andObservables(obs);\r\n    }\r\n    /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    runCanActivateChild(path) {\r\n        const /** @type {?} */ future = path[path.length - 1];\r\n        const /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)\r\n            .reverse()\r\n            .map(p => this.extractCanActivateChild(p))\r\n            .filter(_ => _ !== null);\r\n        return andObservables(map.call(from(canActivateChildGuards), (d) => {\r\n            const /** @type {?} */ obs = map.call(from(d.guards), (c) => {\r\n                const /** @type {?} */ guard = this.getToken(c, d.node);\r\n                let /** @type {?} */ observable;\r\n                if (guard.canActivateChild) {\r\n                    observable = wrapIntoObservable(guard.canActivateChild(future, this.future));\r\n                }\r\n                else {\r\n                    observable = wrapIntoObservable(guard(future, this.future));\r\n                }\r\n                return first.call(observable);\r\n            });\r\n            return andObservables(obs);\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} p\r\n     * @return {?}\r\n     */\r\n    extractCanActivateChild(p) {\r\n        const /** @type {?} */ canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\r\n        if (!canActivateChild || canActivateChild.length === 0)\r\n            return null;\r\n        return { node: p, guards: canActivateChild };\r\n    }\r\n    /**\r\n     * @param {?} component\r\n     * @param {?} curr\r\n     * @return {?}\r\n     */\r\n    runCanDeactivate(component, curr) {\r\n        const /** @type {?} */ canDeactivate = curr && curr.routeConfig ? curr.routeConfig.canDeactivate : null;\r\n        if (!canDeactivate || canDeactivate.length === 0)\r\n            return of(true);\r\n        const /** @type {?} */ canDeactivate$ = mergeMap.call(from(canDeactivate), (c) => {\r\n            const /** @type {?} */ guard = this.getToken(c, curr);\r\n            let /** @type {?} */ observable;\r\n            if (guard.canDeactivate) {\r\n                observable =\r\n                    wrapIntoObservable(guard.canDeactivate(component, curr, this.curr, this.future));\r\n            }\r\n            else {\r\n                observable = wrapIntoObservable(guard(component, curr, this.curr, this.future));\r\n            }\r\n            return first.call(observable);\r\n        });\r\n        return every.call(canDeactivate$, (result) => result === true);\r\n    }\r\n    /**\r\n     * @param {?} future\r\n     * @return {?}\r\n     */\r\n    runResolve(future) {\r\n        const /** @type {?} */ resolve = future._resolve;\r\n        return map.call(this.resolveNode(resolve, future), (resolvedData) => {\r\n            future._resolvedData = resolvedData;\r\n            future.data = Object.assign({}, future.data, inheritedParamsDataResolve(future).resolve);\r\n            return null;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} resolve\r\n     * @param {?} future\r\n     * @return {?}\r\n     */\r\n    resolveNode(resolve, future) {\r\n        const /** @type {?} */ keys = Object.keys(resolve);\r\n        if (keys.length === 0) {\r\n            return of({});\r\n        }\r\n        if (keys.length === 1) {\r\n            const /** @type {?} */ key = keys[0];\r\n            return map.call(this.getResolver(resolve[key], future), (value) => { return { [key]: value }; });\r\n        }\r\n        const /** @type {?} */ data = {};\r\n        const /** @type {?} */ runningResolvers$ = mergeMap.call(from(keys), (key) => {\r\n            return map.call(this.getResolver(resolve[key], future), (value) => {\r\n                data[key] = value;\r\n                return value;\r\n            });\r\n        });\r\n        return map.call(last.call(runningResolvers$), () => data);\r\n    }\r\n    /**\r\n     * @param {?} injectionToken\r\n     * @param {?} future\r\n     * @return {?}\r\n     */\r\n    getResolver(injectionToken, future) {\r\n        const /** @type {?} */ resolver = this.getToken(injectionToken, future);\r\n        return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :\r\n            wrapIntoObservable(resolver(future, this.future));\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?} snapshot\r\n     * @return {?}\r\n     */\r\n    getToken(token, snapshot) {\r\n        const /** @type {?} */ config = closestLoadedConfig(snapshot);\r\n        const /** @type {?} */ injector = config ? config.module.injector : this.moduleInjector;\r\n        return injector.get(token);\r\n    }\r\n}\r\n/**\r\n * @param {?} snapshot\r\n * @return {?}\r\n */\r\nfunction closestLoadedConfig(snapshot) {\r\n    if (!snapshot)\r\n        return null;\r\n    for (let /** @type {?} */ s = snapshot.parent; s; s = s.parent) {\r\n        const /** @type {?} */ route = s.routeConfig;\r\n        if (route && route._loadedConfig)\r\n            return route._loadedConfig;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass NoMatch$1 {\r\n}\r\n/**\r\n * @param {?} rootComponentType\r\n * @param {?} config\r\n * @param {?} urlTree\r\n * @param {?} url\r\n * @return {?}\r\n */\r\nfunction recognize(rootComponentType, config, urlTree, url) {\r\n    return new Recognizer(rootComponentType, config, urlTree, url).recognize();\r\n}\r\nclass Recognizer {\r\n    /**\r\n     * @param {?} rootComponentType\r\n     * @param {?} config\r\n     * @param {?} urlTree\r\n     * @param {?} url\r\n     */\r\n    constructor(rootComponentType, config, urlTree, url) {\r\n        this.rootComponentType = rootComponentType;\r\n        this.config = config;\r\n        this.urlTree = urlTree;\r\n        this.url = url;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    recognize() {\r\n        try {\r\n            const /** @type {?} */ rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;\r\n            const /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\r\n            const /** @type {?} */ root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\r\n            const /** @type {?} */ rootNode = new TreeNode(root, children);\r\n            const /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);\r\n            this.inheritParamsAndData(routeState._root);\r\n            return of(routeState);\r\n        }\r\n        catch (/** @type {?} */ e) {\r\n            return new Observable((obs) => obs.error(e));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} routeNode\r\n     * @return {?}\r\n     */\r\n    inheritParamsAndData(routeNode) {\r\n        const /** @type {?} */ route = routeNode.value;\r\n        const /** @type {?} */ i = inheritedParamsDataResolve(route);\r\n        route.params = Object.freeze(i.params);\r\n        route.data = Object.freeze(i.data);\r\n        routeNode.children.forEach(n => this.inheritParamsAndData(n));\r\n    }\r\n    /**\r\n     * @param {?} config\r\n     * @param {?} segmentGroup\r\n     * @param {?} outlet\r\n     * @return {?}\r\n     */\r\n    processSegmentGroup(config, segmentGroup, outlet) {\r\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\r\n            return this.processChildren(config, segmentGroup);\r\n        }\r\n        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\r\n    }\r\n    /**\r\n     * @param {?} config\r\n     * @param {?} segmentGroup\r\n     * @return {?}\r\n     */\r\n    processChildren(config, segmentGroup) {\r\n        const /** @type {?} */ children = mapChildrenIntoArray(segmentGroup, (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\r\n        checkOutletNameUniqueness(children);\r\n        sortActivatedRouteSnapshots(children);\r\n        return children;\r\n    }\r\n    /**\r\n     * @param {?} config\r\n     * @param {?} segmentGroup\r\n     * @param {?} segments\r\n     * @param {?} outlet\r\n     * @return {?}\r\n     */\r\n    processSegment(config, segmentGroup, segments, outlet) {\r\n        for (const /** @type {?} */ r of config) {\r\n            try {\r\n                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\r\n            }\r\n            catch (/** @type {?} */ e) {\r\n                if (!(e instanceof NoMatch$1))\r\n                    throw e;\r\n            }\r\n        }\r\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\r\n            return [];\r\n        }\r\n        throw new NoMatch$1();\r\n    }\r\n    /**\r\n     * @param {?} segmentGroup\r\n     * @param {?} segments\r\n     * @param {?} outlet\r\n     * @return {?}\r\n     */\r\n    noLeftoversInUrl(segmentGroup, segments, outlet) {\r\n        return segments.length === 0 && !segmentGroup.children[outlet];\r\n    }\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} rawSegment\r\n     * @param {?} segments\r\n     * @param {?} outlet\r\n     * @return {?}\r\n     */\r\n    processSegmentAgainstRoute(route, rawSegment, segments, outlet) {\r\n        if (route.redirectTo)\r\n            throw new NoMatch$1();\r\n        if ((route.outlet || PRIMARY_OUTLET) !== outlet)\r\n            throw new NoMatch$1();\r\n        let /** @type {?} */ snapshot;\r\n        let /** @type {?} */ consumedSegments = [];\r\n        let /** @type {?} */ rawSlicedSegments = [];\r\n        if (route.path === '**') {\r\n            const /** @type {?} */ params = segments.length > 0 ? /** @type {?} */ ((last$1(segments))).parameters : {};\r\n            snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\r\n        }\r\n        else {\r\n            const /** @type {?} */ result = match$1(rawSegment, route, segments);\r\n            consumedSegments = result.consumedSegments;\r\n            rawSlicedSegments = segments.slice(result.lastChild);\r\n            snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\r\n        }\r\n        const /** @type {?} */ childConfig = getChildConfig(route);\r\n        const { segmentGroup, slicedSegments } = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig);\r\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\r\n            const /** @type {?} */ children = this.processChildren(childConfig, segmentGroup);\r\n            return [new TreeNode(snapshot, children)];\r\n        }\r\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\r\n            return [new TreeNode(snapshot, [])];\r\n        }\r\n        const /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\r\n        return [new TreeNode(snapshot, children)];\r\n    }\r\n}\r\n/**\r\n * @param {?} nodes\r\n * @return {?}\r\n */\r\nfunction sortActivatedRouteSnapshots(nodes) {\r\n    nodes.sort((a, b) => {\r\n        if (a.value.outlet === PRIMARY_OUTLET)\r\n            return -1;\r\n        if (b.value.outlet === PRIMARY_OUTLET)\r\n            return 1;\r\n        return a.value.outlet.localeCompare(b.value.outlet);\r\n    });\r\n}\r\n/**\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction getChildConfig(route) {\r\n    if (route.children) {\r\n        return route.children;\r\n    }\r\n    if (route.loadChildren) {\r\n        return /** @type {?} */ ((route._loadedConfig)).routes;\r\n    }\r\n    return [];\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} route\r\n * @param {?} segments\r\n * @return {?}\r\n */\r\nfunction match$1(segmentGroup, route, segments) {\r\n    if (route.path === '') {\r\n        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\r\n            throw new NoMatch$1();\r\n        }\r\n        return { consumedSegments: [], lastChild: 0, parameters: {} };\r\n    }\r\n    const /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;\r\n    const /** @type {?} */ res = matcher(segments, segmentGroup, route);\r\n    if (!res)\r\n        throw new NoMatch$1();\r\n    const /** @type {?} */ posParams = {};\r\n    forEach(/** @type {?} */ ((res.posParams)), (v, k) => { posParams[k] = v.path; });\r\n    const /** @type {?} */ parameters = res.consumed.length > 0 ? Object.assign({}, posParams, res.consumed[res.consumed.length - 1].parameters) :\r\n        posParams;\r\n    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters };\r\n}\r\n/**\r\n * @param {?} nodes\r\n * @return {?}\r\n */\r\nfunction checkOutletNameUniqueness(nodes) {\r\n    const /** @type {?} */ names = {};\r\n    nodes.forEach(n => {\r\n        const /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];\r\n        if (routeWithSameOutletName) {\r\n            const /** @type {?} */ p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\r\n            const /** @type {?} */ c = n.value.url.map(s => s.toString()).join('/');\r\n            throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\r\n        }\r\n        names[n.value.outlet] = n.value;\r\n    });\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @return {?}\r\n */\r\nfunction getSourceSegmentGroup(segmentGroup) {\r\n    let /** @type {?} */ s = segmentGroup;\r\n    while (s._sourceSegment) {\r\n        s = s._sourceSegment;\r\n    }\r\n    return s;\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @return {?}\r\n */\r\nfunction getPathIndexShift(segmentGroup) {\r\n    let /** @type {?} */ s = segmentGroup;\r\n    let /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\r\n    while (s._sourceSegment) {\r\n        s = s._sourceSegment;\r\n        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\r\n    }\r\n    return res - 1;\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} consumedSegments\r\n * @param {?} slicedSegments\r\n * @param {?} config\r\n * @return {?}\r\n */\r\nfunction split$1(segmentGroup, consumedSegments, slicedSegments, config) {\r\n    if (slicedSegments.length > 0 &&\r\n        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\r\n        const /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\r\n        s._sourceSegment = segmentGroup;\r\n        s._segmentIndexShift = consumedSegments.length;\r\n        return { segmentGroup: s, slicedSegments: [] };\r\n    }\r\n    if (slicedSegments.length === 0 &&\r\n        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\r\n        const /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\r\n        s._sourceSegment = segmentGroup;\r\n        s._segmentIndexShift = consumedSegments.length;\r\n        return { segmentGroup: s, slicedSegments };\r\n    }\r\n    const /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\r\n    s._sourceSegment = segmentGroup;\r\n    s._segmentIndexShift = consumedSegments.length;\r\n    return { segmentGroup: s, slicedSegments };\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} slicedSegments\r\n * @param {?} routes\r\n * @param {?} children\r\n * @return {?}\r\n */\r\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\r\n    const /** @type {?} */ res = {};\r\n    for (const /** @type {?} */ r of routes) {\r\n        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {\r\n            const /** @type {?} */ s = new UrlSegmentGroup([], {});\r\n            s._sourceSegment = segmentGroup;\r\n            s._segmentIndexShift = segmentGroup.segments.length;\r\n            res[getOutlet$1(r)] = s;\r\n        }\r\n    }\r\n    return Object.assign({}, children, res);\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} consumedSegments\r\n * @param {?} routes\r\n * @param {?} primarySegment\r\n * @return {?}\r\n */\r\nfunction createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\r\n    const /** @type {?} */ res = {};\r\n    res[PRIMARY_OUTLET] = primarySegment;\r\n    primarySegment._sourceSegment = segmentGroup;\r\n    primarySegment._segmentIndexShift = consumedSegments.length;\r\n    for (const /** @type {?} */ r of routes) {\r\n        if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {\r\n            const /** @type {?} */ s = new UrlSegmentGroup([], {});\r\n            s._sourceSegment = segmentGroup;\r\n            s._segmentIndexShift = consumedSegments.length;\r\n            res[getOutlet$1(r)] = s;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} slicedSegments\r\n * @param {?} routes\r\n * @return {?}\r\n */\r\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\r\n    return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET);\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} slicedSegments\r\n * @param {?} routes\r\n * @return {?}\r\n */\r\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\r\n    return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\r\n}\r\n/**\r\n * @param {?} segmentGroup\r\n * @param {?} slicedSegments\r\n * @param {?} r\r\n * @return {?}\r\n */\r\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\r\n    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\r\n        return false;\r\n    }\r\n    return r.path === '' && r.redirectTo === undefined;\r\n}\r\n/**\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction getOutlet$1(route) {\r\n    return route.outlet || PRIMARY_OUTLET;\r\n}\r\n/**\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction getData(route) {\r\n    return route.data || {};\r\n}\r\n/**\r\n * @param {?} route\r\n * @return {?}\r\n */\r\nfunction getResolve(route) {\r\n    return route.resolve || {};\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Provides a way to customize when activated routes get reused.\r\n *\r\n * \\@experimental\r\n * @abstract\r\n */\r\nclass RouteReuseStrategy {\r\n}\r\n/**\r\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\r\n */\r\nclass DefaultRouteReuseStrategy {\r\n    /**\r\n     * @param {?} route\r\n     * @return {?}\r\n     */\r\n    shouldDetach(route) { return false; }\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} detachedTree\r\n     * @return {?}\r\n     */\r\n    store(route, detachedTree) { }\r\n    /**\r\n     * @param {?} route\r\n     * @return {?}\r\n     */\r\n    shouldAttach(route) { return false; }\r\n    /**\r\n     * @param {?} route\r\n     * @return {?}\r\n     */\r\n    retrieve(route) { return null; }\r\n    /**\r\n     * @param {?} future\r\n     * @param {?} curr\r\n     * @return {?}\r\n     */\r\n    shouldReuseRoute(future, curr) {\r\n        return future.routeConfig === curr.routeConfig;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@docsNotRequired\r\n * \\@experimental\r\n */\r\nconst ROUTES = new InjectionToken('ROUTES');\r\nclass RouterConfigLoader {\r\n    /**\r\n     * @param {?} loader\r\n     * @param {?} compiler\r\n     * @param {?=} onLoadStartListener\r\n     * @param {?=} onLoadEndListener\r\n     */\r\n    constructor(loader, compiler, onLoadStartListener, onLoadEndListener) {\r\n        this.loader = loader;\r\n        this.compiler = compiler;\r\n        this.onLoadStartListener = onLoadStartListener;\r\n        this.onLoadEndListener = onLoadEndListener;\r\n    }\r\n    /**\r\n     * @param {?} parentInjector\r\n     * @param {?} route\r\n     * @return {?}\r\n     */\r\n    load(parentInjector, route) {\r\n        if (this.onLoadStartListener) {\r\n            this.onLoadStartListener(route);\r\n        }\r\n        const /** @type {?} */ moduleFactory$ = this.loadModuleFactory(/** @type {?} */ ((route.loadChildren)));\r\n        return map.call(moduleFactory$, (factory) => {\r\n            if (this.onLoadEndListener) {\r\n                this.onLoadEndListener(route);\r\n            }\r\n            const /** @type {?} */ module = factory.create(parentInjector);\r\n            return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)), module);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} loadChildren\r\n     * @return {?}\r\n     */\r\n    loadModuleFactory(loadChildren) {\r\n        if (typeof loadChildren === 'string') {\r\n            return fromPromise(this.loader.load(loadChildren));\r\n        }\r\n        else {\r\n            return mergeMap.call(wrapIntoObservable(loadChildren()), (t) => {\r\n                if (t instanceof NgModuleFactory) {\r\n                    return of(t);\r\n                }\r\n                else {\r\n                    return fromPromise(this.compiler.compileModuleAsync(t));\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Provides a way to migrate AngularJS applications to Angular.\r\n *\r\n * \\@experimental\r\n * @abstract\r\n */\r\nclass UrlHandlingStrategy {\r\n}\r\n/**\r\n * \\@experimental\r\n */\r\nclass DefaultUrlHandlingStrategy {\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    shouldProcessUrl(url) { return true; }\r\n    /**\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    extract(url) { return url; }\r\n    /**\r\n     * @param {?} newUrlPart\r\n     * @param {?} wholeUrl\r\n     * @return {?}\r\n     */\r\n    merge(newUrlPart, wholeUrl) { return newUrlPart; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Represents the extra options used during navigation.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} error\r\n * @return {?}\r\n */\r\nfunction defaultErrorHandler(error) {\r\n    throw error;\r\n}\r\n/**\r\n * \\@internal\r\n * @param {?} snapshot\r\n * @return {?}\r\n */\r\nfunction defaultRouterHook(snapshot) {\r\n    return /** @type {?} */ (of(null));\r\n}\r\n/**\r\n * \\@whatItDoes Provides the navigation and url manipulation capabilities.\r\n *\r\n * See {\\@link Routes} for more details and examples.\r\n *\r\n * \\@ngModule RouterModule\r\n *\r\n * \\@stable\r\n */\r\nclass Router {\r\n    /**\r\n     * Creates the router service.\r\n     * @param {?} rootComponentType\r\n     * @param {?} urlSerializer\r\n     * @param {?} rootContexts\r\n     * @param {?} location\r\n     * @param {?} injector\r\n     * @param {?} loader\r\n     * @param {?} compiler\r\n     * @param {?} config\r\n     */\r\n    constructor(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {\r\n        this.rootComponentType = rootComponentType;\r\n        this.urlSerializer = urlSerializer;\r\n        this.rootContexts = rootContexts;\r\n        this.location = location;\r\n        this.config = config;\r\n        this.navigations = new BehaviorSubject(/** @type {?} */ ((null)));\r\n        this.navigationId = 0;\r\n        this.events = new Subject();\r\n        /**\r\n         * Error handler that is invoked when a navigation errors.\r\n         *\r\n         * See {\\@link ErrorHandler} for more information.\r\n         */\r\n        this.errorHandler = defaultErrorHandler;\r\n        /**\r\n         * Indicates if at least one navigation happened.\r\n         */\r\n        this.navigated = false;\r\n        /**\r\n         * Used by RouterModule. This allows us to\r\n         * pause the navigation either before preactivation or after it.\r\n         * \\@internal\r\n         */\r\n        this.hooks = {\r\n            beforePreactivation: defaultRouterHook,\r\n            afterPreactivation: defaultRouterHook\r\n        };\r\n        /**\r\n         * Extracts and merges URLs. Used for AngularJS to Angular migrations.\r\n         */\r\n        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\r\n        this.routeReuseStrategy = new DefaultRouteReuseStrategy();\r\n        /**\r\n         * Define what the router should do if it receives a navigation request to the current URL.\r\n         * By default, the router will ignore this navigation. However, this prevents features such\r\n         * as a \"refresh\" button. Use this option to configure the behavior when navigating to the\r\n         * current URL. Default is 'ignore'.\r\n         */\r\n        this.onSameUrlNavigation = 'ignore';\r\n        const /** @type {?} */ onLoadStart = (r) => this.triggerEvent(new RouteConfigLoadStart(r));\r\n        const /** @type {?} */ onLoadEnd = (r) => this.triggerEvent(new RouteConfigLoadEnd(r));\r\n        this.ngModule = injector.get(NgModuleRef);\r\n        this.resetConfig(config);\r\n        this.currentUrlTree = createEmptyUrlTree();\r\n        this.rawUrlTree = this.currentUrlTree;\r\n        this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\r\n        this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\r\n        this.processNavigations();\r\n    }\r\n    /**\r\n     * \\@internal\r\n     * TODO: this should be removed once the constructor of the router made internal\r\n     * @param {?} rootComponentType\r\n     * @return {?}\r\n     */\r\n    resetRootComponentType(rootComponentType) {\r\n        this.rootComponentType = rootComponentType;\r\n        // TODO: vsavkin router 4.0 should make the root component set to null\r\n        // this will simplify the lifecycle of the router.\r\n        this.routerState.root.component = this.rootComponentType;\r\n    }\r\n    /**\r\n     * Sets up the location change listener and performs the initial navigation.\r\n     * @return {?}\r\n     */\r\n    initialNavigation() {\r\n        this.setUpLocationChangeListener();\r\n        if (this.navigationId === 0) {\r\n            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\r\n        }\r\n    }\r\n    /**\r\n     * Sets up the location change listener.\r\n     * @return {?}\r\n     */\r\n    setUpLocationChangeListener() {\r\n        // Zone.current.wrap is needed because of the issue with RxJS scheduler,\r\n        // which does not work properly with zone.js in IE and Safari\r\n        if (!this.locationSubscription) {\r\n            this.locationSubscription = /** @type {?} */ (this.location.subscribe(Zone.current.wrap((change) => {\r\n                const /** @type {?} */ rawUrlTree = this.urlSerializer.parse(change['url']);\r\n                const /** @type {?} */ source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\r\n                setTimeout(() => { this.scheduleNavigation(rawUrlTree, source, { replaceUrl: true }); }, 0);\r\n            })));\r\n        }\r\n    }\r\n    /**\r\n     * The current url\r\n     * @return {?}\r\n     */\r\n    get url() { return this.serializeUrl(this.currentUrlTree); }\r\n    /**\r\n     * \\@internal\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    triggerEvent(e) { (/** @type {?} */ (this.events)).next(e); }\r\n    /**\r\n     * Resets the configuration used for navigation and generating links.\r\n     *\r\n     * ### Usage\r\n     *\r\n     * ```\r\n     * router.resetConfig([\r\n     *  { path: 'team/:id', component: TeamCmp, children: [\r\n     *    { path: 'simple', component: SimpleCmp },\r\n     *    { path: 'user/:name', component: UserCmp }\r\n     *  ]}\r\n     * ]);\r\n     * ```\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    resetConfig(config) {\r\n        validateConfig(config);\r\n        this.config = config;\r\n        this.navigated = false;\r\n    }\r\n    /**\r\n     * \\@docsNotRequired\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this.dispose(); }\r\n    /**\r\n     * Disposes of the router\r\n     * @return {?}\r\n     */\r\n    dispose() {\r\n        if (this.locationSubscription) {\r\n            this.locationSubscription.unsubscribe();\r\n            this.locationSubscription = /** @type {?} */ ((null));\r\n        }\r\n    }\r\n    /**\r\n     * Applies an array of commands to the current url tree and creates a new url tree.\r\n     *\r\n     * When given an activate route, applies the given commands starting from the route.\r\n     * When not given a route, applies the given command starting from the root.\r\n     *\r\n     * ### Usage\r\n     *\r\n     * ```\r\n     * // create /team/33/user/11\r\n     * router.createUrlTree(['/team', 33, 'user', 11]);\r\n     *\r\n     * // create /team/33;expand=true/user/11\r\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\r\n     *\r\n     * // you can collapse static segments like this (this works only with the first passed-in value):\r\n     * router.createUrlTree(['/team/33/user', userId]);\r\n     *\r\n     * // If the first segment can contain slashes, and you do not want the router to split it, you\r\n     * // can do the following:\r\n     *\r\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\r\n     *\r\n     * // create /team/33/(user/11//right:chat)\r\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\r\n     *\r\n     * // remove the right secondary node\r\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\r\n     *\r\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\r\n     *\r\n     * // navigate to /team/33/user/11/details\r\n     * router.createUrlTree(['details'], {relativeTo: route});\r\n     *\r\n     * // navigate to /team/33/user/22\r\n     * router.createUrlTree(['../22'], {relativeTo: route});\r\n     *\r\n     * // navigate to /team/44/user/22\r\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\r\n     * ```\r\n     * @param {?} commands\r\n     * @param {?=} navigationExtras\r\n     * @return {?}\r\n     */\r\n    createUrlTree(commands, navigationExtras = {}) {\r\n        const { relativeTo, queryParams, fragment, preserveQueryParams, queryParamsHandling, preserveFragment } = navigationExtras;\r\n        if (isDevMode() && preserveQueryParams && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\r\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\r\n        }\r\n        const /** @type {?} */ a = relativeTo || this.routerState.root;\r\n        const /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;\r\n        let /** @type {?} */ q = null;\r\n        if (queryParamsHandling) {\r\n            switch (queryParamsHandling) {\r\n                case 'merge':\r\n                    q = Object.assign({}, this.currentUrlTree.queryParams, queryParams);\r\n                    break;\r\n                case 'preserve':\r\n                    q = this.currentUrlTree.queryParams;\r\n                    break;\r\n                default:\r\n                    q = queryParams || null;\r\n            }\r\n        }\r\n        else {\r\n            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\r\n        }\r\n        if (q !== null) {\r\n            q = this.removeEmptyProps(q);\r\n        }\r\n        return createUrlTree(a, this.currentUrlTree, commands, /** @type {?} */ ((q)), /** @type {?} */ ((f)));\r\n    }\r\n    /**\r\n     * Navigate based on the provided url. This navigation is always absolute.\r\n     *\r\n     * Returns a promise that:\r\n     * - resolves to 'true' when navigation succeeds,\r\n     * - resolves to 'false' when navigation fails,\r\n     * - is rejected when an error happens.\r\n     *\r\n     * ### Usage\r\n     *\r\n     * ```\r\n     * router.navigateByUrl(\"/team/33/user/11\");\r\n     *\r\n     * // Navigate without updating the URL\r\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\r\n     * ```\r\n     *\r\n     * In opposite to `navigate`, `navigateByUrl` takes a whole URL\r\n     * and does not apply any delta to the current one.\r\n     * @param {?} url\r\n     * @param {?=} extras\r\n     * @return {?}\r\n     */\r\n    navigateByUrl(url, extras = { skipLocationChange: false }) {\r\n        const /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);\r\n        const /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\r\n        return this.scheduleNavigation(mergedTree, 'imperative', extras);\r\n    }\r\n    /**\r\n     * Navigate based on the provided array of commands and a starting point.\r\n     * If no starting route is provided, the navigation is absolute.\r\n     *\r\n     * Returns a promise that:\r\n     * - resolves to 'true' when navigation succeeds,\r\n     * - resolves to 'false' when navigation fails,\r\n     * - is rejected when an error happens.\r\n     *\r\n     * ### Usage\r\n     *\r\n     * ```\r\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\r\n     *\r\n     * // Navigate without updating the URL\r\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\r\n     * ```\r\n     *\r\n     * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current\r\n     * URL.\r\n     * @param {?} commands\r\n     * @param {?=} extras\r\n     * @return {?}\r\n     */\r\n    navigate(commands, extras = { skipLocationChange: false }) {\r\n        validateCommands(commands);\r\n        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\r\n    }\r\n    /**\r\n     * Serializes a {\\@link UrlTree} into a string\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    serializeUrl(url) { return this.urlSerializer.serialize(url); }\r\n    /**\r\n     * Parses a string into a {\\@link UrlTree}\r\n     * @param {?} url\r\n     * @return {?}\r\n     */\r\n    parseUrl(url) { return this.urlSerializer.parse(url); }\r\n    /**\r\n     * Returns whether the url is activated\r\n     * @param {?} url\r\n     * @param {?} exact\r\n     * @return {?}\r\n     */\r\n    isActive(url, exact) {\r\n        if (url instanceof UrlTree) {\r\n            return containsTree(this.currentUrlTree, url, exact);\r\n        }\r\n        const /** @type {?} */ urlTree = this.urlSerializer.parse(url);\r\n        return containsTree(this.currentUrlTree, urlTree, exact);\r\n    }\r\n    /**\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    removeEmptyProps(params) {\r\n        return Object.keys(params).reduce((result, key) => {\r\n            const /** @type {?} */ value = params[key];\r\n            if (value !== null && value !== undefined) {\r\n                result[key] = value;\r\n            }\r\n            return result;\r\n        }, {});\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    processNavigations() {\r\n        concatMap\r\n            .call(this.navigations, (nav) => {\r\n            if (nav) {\r\n                this.executeScheduledNavigation(nav);\r\n                // a failed navigation should not stop the router from processing\r\n                // further navigations => the catch\r\n                return nav.promise.catch(() => { });\r\n            }\r\n            else {\r\n                return /** @type {?} */ (of(null));\r\n            }\r\n        })\r\n            .subscribe(() => { });\r\n    }\r\n    /**\r\n     * @param {?} rawUrl\r\n     * @param {?} source\r\n     * @param {?} extras\r\n     * @return {?}\r\n     */\r\n    scheduleNavigation(rawUrl, source, extras) {\r\n        const /** @type {?} */ lastNavigation = this.navigations.value;\r\n        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\r\n        // and that navigation results in 'replaceState' that leads to the same URL,\r\n        // we should skip those.\r\n        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\r\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\r\n            return Promise.resolve(true); // return value is not used\r\n        }\r\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\r\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\r\n        // flicker. Handles the case when a popstate was emitted first.\r\n        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\r\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\r\n            return Promise.resolve(true); // return value is not used\r\n        }\r\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\r\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\r\n        // flicker. Handles the case when a hashchange was emitted first.\r\n        if (lastNavigation && source == 'popstate' && lastNavigation.source === 'hashchange' &&\r\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\r\n            return Promise.resolve(true); // return value is not used\r\n        }\r\n        let /** @type {?} */ resolve = null;\r\n        let /** @type {?} */ reject = null;\r\n        const /** @type {?} */ promise = new Promise((res, rej) => {\r\n            resolve = res;\r\n            reject = rej;\r\n        });\r\n        const /** @type {?} */ id = ++this.navigationId;\r\n        this.navigations.next({ id, source, rawUrl, extras, resolve, reject, promise });\r\n        // Make sure that the error is propagated even though `processNavigations` catch\r\n        // handler does not rethrow\r\n        return promise.catch((e) => Promise.reject(e));\r\n    }\r\n    /**\r\n     * @param {?} __0\r\n     * @return {?}\r\n     */\r\n    executeScheduledNavigation({ id, rawUrl, extras, resolve, reject }) {\r\n        const /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);\r\n        const /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();\r\n        if ((this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&\r\n            this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {\r\n            (/** @type {?} */ (this.events)).next(new NavigationStart(id, this.serializeUrl(url)));\r\n            Promise.resolve()\r\n                .then((_) => this.runNavigate(url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null))\r\n                .then(resolve, reject);\r\n            // we cannot process the current URL, but we could process the previous one =>\r\n            // we need to do some cleanup\r\n        }\r\n        else if (urlTransition && this.rawUrlTree &&\r\n            this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {\r\n            (/** @type {?} */ (this.events)).next(new NavigationStart(id, this.serializeUrl(url)));\r\n            Promise.resolve()\r\n                .then((_) => this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, this.rootComponentType).snapshot))\r\n                .then(resolve, reject);\r\n        }\r\n        else {\r\n            this.rawUrlTree = rawUrl;\r\n            resolve(null);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} url\r\n     * @param {?} rawUrl\r\n     * @param {?} skipLocationChange\r\n     * @param {?} replaceUrl\r\n     * @param {?} id\r\n     * @param {?} precreatedState\r\n     * @return {?}\r\n     */\r\n    runNavigate(url, rawUrl, skipLocationChange, replaceUrl, id, precreatedState) {\r\n        if (id !== this.navigationId) {\r\n            (/** @type {?} */ (this.events))\r\n                .next(new NavigationCancel(id, this.serializeUrl(url), `Navigation ID ${id} is not equal to the current navigation id ${this.navigationId}`));\r\n            return Promise.resolve(false);\r\n        }\r\n        return new Promise((resolvePromise, rejectPromise) => {\r\n            // create an observable of the url and route state snapshot\r\n            // this operation do not result in any side effects\r\n            let /** @type {?} */ urlAndSnapshot$;\r\n            if (!precreatedState) {\r\n                const /** @type {?} */ moduleInjector = this.ngModule.injector;\r\n                const /** @type {?} */ redirectsApplied$ = applyRedirects(moduleInjector, this.configLoader, this.urlSerializer, url, this.config);\r\n                urlAndSnapshot$ = mergeMap.call(redirectsApplied$, (appliedUrl) => {\r\n                    return map.call(recognize(this.rootComponentType, this.config, appliedUrl, this.serializeUrl(appliedUrl)), (snapshot) => {\r\n                        (/** @type {?} */ (this.events))\r\n                            .next(new RoutesRecognized(id, this.serializeUrl(url), this.serializeUrl(appliedUrl), snapshot));\r\n                        return { appliedUrl, snapshot };\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                urlAndSnapshot$ = of({ appliedUrl: url, snapshot: precreatedState });\r\n            }\r\n            const /** @type {?} */ beforePreactivationDone$ = mergeMap.call(urlAndSnapshot$, (p) => {\r\n                return map.call(this.hooks.beforePreactivation(p.snapshot), () => p);\r\n            });\r\n            // run preactivation: guards and data resolvers\r\n            let /** @type {?} */ preActivation;\r\n            const /** @type {?} */ preactivationSetup$ = map.call(beforePreactivationDone$, ({ appliedUrl, snapshot }) => {\r\n                const /** @type {?} */ moduleInjector = this.ngModule.injector;\r\n                preActivation = new PreActivation(snapshot, this.routerState.snapshot, moduleInjector, (evt) => this.triggerEvent(evt));\r\n                preActivation.initialize(this.rootContexts);\r\n                return { appliedUrl, snapshot };\r\n            });\r\n            const /** @type {?} */ preactivationCheckGuards$ = mergeMap.call(preactivationSetup$, ({ appliedUrl, snapshot }) => {\r\n                if (this.navigationId !== id)\r\n                    return of(false);\r\n                this.triggerEvent(new GuardsCheckStart(id, this.serializeUrl(url), appliedUrl, snapshot));\r\n                return map.call(preActivation.checkGuards(), (shouldActivate) => {\r\n                    this.triggerEvent(new GuardsCheckEnd(id, this.serializeUrl(url), appliedUrl, snapshot, shouldActivate));\r\n                    return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };\r\n                });\r\n            });\r\n            const /** @type {?} */ preactivationResolveData$ = mergeMap.call(preactivationCheckGuards$, (p) => {\r\n                if (this.navigationId !== id)\r\n                    return of(false);\r\n                if (p.shouldActivate && preActivation.isActivating()) {\r\n                    this.triggerEvent(new ResolveStart(id, this.serializeUrl(url), p.appliedUrl, p.snapshot));\r\n                    return map.call(preActivation.resolveData(), () => {\r\n                        this.triggerEvent(new ResolveEnd(id, this.serializeUrl(url), p.appliedUrl, p.snapshot));\r\n                        return p;\r\n                    });\r\n                }\r\n                else {\r\n                    return of(p);\r\n                }\r\n            });\r\n            const /** @type {?} */ preactivationDone$ = mergeMap.call(preactivationResolveData$, (p) => {\r\n                return map.call(this.hooks.afterPreactivation(p.snapshot), () => p);\r\n            });\r\n            // create router state\r\n            // this operation has side effects => route state is being affected\r\n            const /** @type {?} */ routerState$ = map.call(preactivationDone$, ({ appliedUrl, snapshot, shouldActivate }) => {\r\n                if (shouldActivate) {\r\n                    const /** @type {?} */ state = createRouterState(this.routeReuseStrategy, snapshot, this.routerState);\r\n                    return { appliedUrl, state, shouldActivate };\r\n                }\r\n                else {\r\n                    return { appliedUrl, state: null, shouldActivate };\r\n                }\r\n            });\r\n            // applied the new router state\r\n            // this operation has side effects\r\n            let /** @type {?} */ navigationIsSuccessful;\r\n            const /** @type {?} */ storedState = this.routerState;\r\n            const /** @type {?} */ storedUrl = this.currentUrlTree;\r\n            routerState$\r\n                .forEach(({ appliedUrl, state, shouldActivate }) => {\r\n                if (!shouldActivate || id !== this.navigationId) {\r\n                    navigationIsSuccessful = false;\r\n                    return;\r\n                }\r\n                this.currentUrlTree = appliedUrl;\r\n                this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\r\n                (/** @type {?} */ (this)).routerState = state;\r\n                if (!skipLocationChange) {\r\n                    const /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);\r\n                    if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {\r\n                        this.location.replaceState(path);\r\n                    }\r\n                    else {\r\n                        this.location.go(path);\r\n                    }\r\n                }\r\n                new ActivateRoutes(this.routeReuseStrategy, state, storedState, (evt) => this.triggerEvent(evt))\r\n                    .activate(this.rootContexts);\r\n                navigationIsSuccessful = true;\r\n            })\r\n                .then(() => {\r\n                if (navigationIsSuccessful) {\r\n                    this.navigated = true;\r\n                    (/** @type {?} */ (this.events))\r\n                        .next(new NavigationEnd(id, this.serializeUrl(url), this.serializeUrl(this.currentUrlTree)));\r\n                    resolvePromise(true);\r\n                }\r\n                else {\r\n                    this.resetUrlToCurrentUrlTree();\r\n                    (/** @type {?} */ (this.events))\r\n                        .next(new NavigationCancel(id, this.serializeUrl(url), ''));\r\n                    resolvePromise(false);\r\n                }\r\n            }, (e) => {\r\n                if (isNavigationCancelingError(e)) {\r\n                    this.navigated = true;\r\n                    this.resetStateAndUrl(storedState, storedUrl, rawUrl);\r\n                    (/** @type {?} */ (this.events))\r\n                        .next(new NavigationCancel(id, this.serializeUrl(url), e.message));\r\n                    resolvePromise(false);\r\n                }\r\n                else {\r\n                    this.resetStateAndUrl(storedState, storedUrl, rawUrl);\r\n                    (/** @type {?} */ (this.events))\r\n                        .next(new NavigationError(id, this.serializeUrl(url), e));\r\n                    try {\r\n                        resolvePromise(this.errorHandler(e));\r\n                    }\r\n                    catch (/** @type {?} */ ee) {\r\n                        rejectPromise(ee);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} storedState\r\n     * @param {?} storedUrl\r\n     * @param {?} rawUrl\r\n     * @return {?}\r\n     */\r\n    resetStateAndUrl(storedState, storedUrl, rawUrl) {\r\n        (/** @type {?} */ (this)).routerState = storedState;\r\n        this.currentUrlTree = storedUrl;\r\n        this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\r\n        this.resetUrlToCurrentUrlTree();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    resetUrlToCurrentUrlTree() {\r\n        this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree));\r\n    }\r\n}\r\nclass ActivateRoutes {\r\n    /**\r\n     * @param {?} routeReuseStrategy\r\n     * @param {?} futureState\r\n     * @param {?} currState\r\n     * @param {?} forwardEvent\r\n     */\r\n    constructor(routeReuseStrategy, futureState, currState, forwardEvent) {\r\n        this.routeReuseStrategy = routeReuseStrategy;\r\n        this.futureState = futureState;\r\n        this.currState = currState;\r\n        this.forwardEvent = forwardEvent;\r\n    }\r\n    /**\r\n     * @param {?} parentContexts\r\n     * @return {?}\r\n     */\r\n    activate(parentContexts) {\r\n        const /** @type {?} */ futureRoot = this.futureState._root;\r\n        const /** @type {?} */ currRoot = this.currState ? this.currState._root : null;\r\n        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\r\n        advanceActivatedRoute(this.futureState.root);\r\n        this.activateChildRoutes(futureRoot, currRoot, parentContexts);\r\n    }\r\n    /**\r\n     * @param {?} futureNode\r\n     * @param {?} currNode\r\n     * @param {?} contexts\r\n     * @return {?}\r\n     */\r\n    deactivateChildRoutes(futureNode, currNode, contexts) {\r\n        const /** @type {?} */ children = nodeChildrenAsMap(currNode);\r\n        // Recurse on the routes active in the future state to de-activate deeper children\r\n        futureNode.children.forEach(futureChild => {\r\n            const /** @type {?} */ childOutletName = futureChild.value.outlet;\r\n            this.deactivateRoutes(futureChild, children[childOutletName], contexts);\r\n            delete children[childOutletName];\r\n        });\r\n        // De-activate the routes that will not be re-used\r\n        forEach(children, (v, childName) => {\r\n            this.deactivateRouteAndItsChildren(v, contexts);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} futureNode\r\n     * @param {?} currNode\r\n     * @param {?} parentContext\r\n     * @return {?}\r\n     */\r\n    deactivateRoutes(futureNode, currNode, parentContext) {\r\n        const /** @type {?} */ future = futureNode.value;\r\n        const /** @type {?} */ curr = currNode ? currNode.value : null;\r\n        if (future === curr) {\r\n            // Reusing the node, check to see if the children need to be de-activated\r\n            if (future.component) {\r\n                // If we have a normal route, we need to go through an outlet.\r\n                const /** @type {?} */ context = parentContext.getContext(future.outlet);\r\n                if (context) {\r\n                    this.deactivateChildRoutes(futureNode, currNode, context.children);\r\n                }\r\n            }\r\n            else {\r\n                // if we have a componentless route, we recurse but keep the same outlet map.\r\n                this.deactivateChildRoutes(futureNode, currNode, parentContext);\r\n            }\r\n        }\r\n        else {\r\n            if (curr) {\r\n                // Deactivate the current route which will not be re-used\r\n                this.deactivateRouteAndItsChildren(currNode, parentContext);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} parentContexts\r\n     * @return {?}\r\n     */\r\n    deactivateRouteAndItsChildren(route, parentContexts) {\r\n        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\r\n            this.detachAndStoreRouteSubtree(route, parentContexts);\r\n        }\r\n        else {\r\n            this.deactivateRouteAndOutlet(route, parentContexts);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} parentContexts\r\n     * @return {?}\r\n     */\r\n    detachAndStoreRouteSubtree(route, parentContexts) {\r\n        const /** @type {?} */ context = parentContexts.getContext(route.value.outlet);\r\n        if (context && context.outlet) {\r\n            const /** @type {?} */ componentRef = context.outlet.detach();\r\n            const /** @type {?} */ contexts = context.children.onOutletDeactivated();\r\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef, route, contexts });\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} parentContexts\r\n     * @return {?}\r\n     */\r\n    deactivateRouteAndOutlet(route, parentContexts) {\r\n        const /** @type {?} */ context = parentContexts.getContext(route.value.outlet);\r\n        if (context) {\r\n            const /** @type {?} */ children = nodeChildrenAsMap(route);\r\n            const /** @type {?} */ contexts = route.value.component ? context.children : parentContexts;\r\n            forEach(children, (v, k) => this.deactivateRouteAndItsChildren(v, contexts));\r\n            if (context.outlet) {\r\n                // Destroy the component\r\n                context.outlet.deactivate();\r\n                // Destroy the contexts for all the outlets that were in the component\r\n                context.children.onOutletDeactivated();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} futureNode\r\n     * @param {?} currNode\r\n     * @param {?} contexts\r\n     * @return {?}\r\n     */\r\n    activateChildRoutes(futureNode, currNode, contexts) {\r\n        const /** @type {?} */ children = nodeChildrenAsMap(currNode);\r\n        futureNode.children.forEach(c => {\r\n            this.activateRoutes(c, children[c.value.outlet], contexts);\r\n            this.forwardEvent(new ActivationEnd(c.value.snapshot));\r\n        });\r\n        if (futureNode.children.length) {\r\n            this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} futureNode\r\n     * @param {?} currNode\r\n     * @param {?} parentContexts\r\n     * @return {?}\r\n     */\r\n    activateRoutes(futureNode, currNode, parentContexts) {\r\n        const /** @type {?} */ future = futureNode.value;\r\n        const /** @type {?} */ curr = currNode ? currNode.value : null;\r\n        advanceActivatedRoute(future);\r\n        // reusing the node\r\n        if (future === curr) {\r\n            if (future.component) {\r\n                // If we have a normal route, we need to go through an outlet.\r\n                const /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);\r\n                this.activateChildRoutes(futureNode, currNode, context.children);\r\n            }\r\n            else {\r\n                // if we have a componentless route, we recurse but keep the same outlet map.\r\n                this.activateChildRoutes(futureNode, currNode, parentContexts);\r\n            }\r\n        }\r\n        else {\r\n            if (future.component) {\r\n                // if we have a normal route, we need to place the component into the outlet and recurse.\r\n                const /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);\r\n                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\r\n                    const /** @type {?} */ stored = (/** @type {?} */ (this.routeReuseStrategy.retrieve(future.snapshot)));\r\n                    this.routeReuseStrategy.store(future.snapshot, null);\r\n                    context.children.onOutletReAttached(stored.contexts);\r\n                    context.attachRef = stored.componentRef;\r\n                    context.route = stored.route.value;\r\n                    if (context.outlet) {\r\n                        // Attach right away when the outlet has already been instantiated\r\n                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\r\n                        context.outlet.attach(stored.componentRef, stored.route.value);\r\n                    }\r\n                    advanceActivatedRouteNodeAndItsChildren(stored.route);\r\n                }\r\n                else {\r\n                    const /** @type {?} */ config = parentLoadedConfig(future.snapshot);\r\n                    const /** @type {?} */ cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\r\n                    context.route = future;\r\n                    context.resolver = cmpFactoryResolver;\r\n                    if (context.outlet) {\r\n                        // Activate the outlet when it has already been instantiated\r\n                        // Otherwise it will get activated from its `ngOnInit` when instantiated\r\n                        context.outlet.activateWith(future, cmpFactoryResolver);\r\n                    }\r\n                    this.activateChildRoutes(futureNode, null, context.children);\r\n                }\r\n            }\r\n            else {\r\n                // if we have a componentless route, we recurse but keep the same outlet map.\r\n                this.activateChildRoutes(futureNode, null, parentContexts);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param {?} node\r\n * @return {?}\r\n */\r\nfunction advanceActivatedRouteNodeAndItsChildren(node) {\r\n    advanceActivatedRoute(node.value);\r\n    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\r\n}\r\n/**\r\n * @param {?} snapshot\r\n * @return {?}\r\n */\r\nfunction parentLoadedConfig(snapshot) {\r\n    for (let /** @type {?} */ s = snapshot.parent; s; s = s.parent) {\r\n        const /** @type {?} */ route = s.routeConfig;\r\n        if (route && route._loadedConfig)\r\n            return route._loadedConfig;\r\n        if (route && route.component)\r\n            return null;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param {?} commands\r\n * @return {?}\r\n */\r\nfunction validateCommands(commands) {\r\n    for (let /** @type {?} */ i = 0; i < commands.length; i++) {\r\n        const /** @type {?} */ cmd = commands[i];\r\n        if (cmd == null) {\r\n            throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Lets you link to specific parts of your app.\r\n *\r\n * \\@howToUse\r\n *\r\n * Consider the following route configuration:\r\n * `[{ path: 'user/:name', component: UserCmp }]`\r\n *\r\n * When linking to this `user/:name` route, you can write:\r\n * `<a routerLink='/user/bob'>link to user component</a>`\r\n *\r\n * \\@description\r\n *\r\n * The RouterLink directives let you link to specific parts of your app.\r\n *\r\n * When the link is static, you can use the directive as follows:\r\n * `<a routerLink=\"/user/bob\">link to user component</a>`\r\n *\r\n * If you use dynamic values to generate the link, you can pass an array of path\r\n * segments, followed by the params for each segment.\r\n *\r\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\r\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\r\n *\r\n * Multiple static segments can be merged into one\r\n * (e.g., `['/team/11/user', userName, {details: true}]`).\r\n *\r\n * The first segment name can be prepended with `/`, `./`, or `../`:\r\n * * If the first segment begins with `/`, the router will look up the route from the root of the\r\n *   app.\r\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\r\n *   instead look in the children of the current activated route.\r\n * * And if the first segment begins with `../`, the router will go up one level.\r\n *\r\n * You can set query params and fragment as follows:\r\n *\r\n * ```\r\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\r\n *   link to user component\r\n * </a>\r\n * ```\r\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\r\n *\r\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\r\n * directive to preserve the current query params and fragment:\r\n *\r\n * ```\r\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\r\n *   link to user component\r\n * </a>\r\n * ```\r\n *\r\n * You can tell the directive to how to handle queryParams, available options are:\r\n *  - `'merge'`: merge the queryParams into the current queryParams\r\n *  - `'preserve'`: preserve the current queryParams\r\n *  - default/`''`: use the queryParams only\r\n *\r\n * Same options for {\\@link NavigationExtras#queryParamsHandling\r\n * NavigationExtras#queryParamsHandling}.\r\n *\r\n * ```\r\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\r\n *   link to user component\r\n * </a>\r\n * ```\r\n *\r\n * The router link directive always treats the provided input as a delta to the current url.\r\n *\r\n * For instance, if the current url is `/user/(box//aux:team)`.\r\n *\r\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\r\n * `/user/(jim//aux:team)`.\r\n *\r\n * See {\\@link Router#createUrlTree createUrlTree} for more information.\r\n *\r\n * \\@ngModule RouterModule\r\n *\r\n * \\@stable\r\n */\r\nclass RouterLink {\r\n    /**\r\n     * @param {?} router\r\n     * @param {?} route\r\n     * @param {?} tabIndex\r\n     * @param {?} renderer\r\n     * @param {?} el\r\n     */\r\n    constructor(router, route, tabIndex, renderer, el) {\r\n        this.router = router;\r\n        this.route = route;\r\n        this.commands = [];\r\n        if (tabIndex == null) {\r\n            renderer.setAttribute(el.nativeElement, 'tabindex', '0');\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} commands\r\n     * @return {?}\r\n     */\r\n    set routerLink(commands) {\r\n        if (commands != null) {\r\n            this.commands = Array.isArray(commands) ? commands : [commands];\r\n        }\r\n        else {\r\n            this.commands = [];\r\n        }\r\n    }\r\n    /**\r\n     * @deprecated 4.0.0 use `queryParamsHandling` instead.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set preserveQueryParams(value) {\r\n        if (isDevMode() && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\r\n            console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\r\n        }\r\n        this.preserve = value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    onClick() {\r\n        const /** @type {?} */ extras = {\r\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\r\n            replaceUrl: attrBoolValue(this.replaceUrl),\r\n        };\r\n        this.router.navigateByUrl(this.urlTree, extras);\r\n        return true;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get urlTree() {\r\n        return this.router.createUrlTree(this.commands, {\r\n            relativeTo: this.route,\r\n            queryParams: this.queryParams,\r\n            fragment: this.fragment,\r\n            preserveQueryParams: attrBoolValue(this.preserve),\r\n            queryParamsHandling: this.queryParamsHandling,\r\n            preserveFragment: attrBoolValue(this.preserveFragment),\r\n        });\r\n    }\r\n}\r\nRouterLink.decorators = [\r\n    { type: Directive, args: [{ selector: ':not(a)[routerLink]' },] },\r\n];\r\n/** @nocollapse */\r\nRouterLink.ctorParameters = () => [\r\n    { type: Router, },\r\n    { type: ActivatedRoute, },\r\n    { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },\r\n    { type: Renderer2, },\r\n    { type: ElementRef, },\r\n];\r\nRouterLink.propDecorators = {\r\n    \"queryParams\": [{ type: Input },],\r\n    \"fragment\": [{ type: Input },],\r\n    \"queryParamsHandling\": [{ type: Input },],\r\n    \"preserveFragment\": [{ type: Input },],\r\n    \"skipLocationChange\": [{ type: Input },],\r\n    \"replaceUrl\": [{ type: Input },],\r\n    \"routerLink\": [{ type: Input },],\r\n    \"preserveQueryParams\": [{ type: Input },],\r\n    \"onClick\": [{ type: HostListener, args: ['click',] },],\r\n};\r\n/**\r\n * \\@whatItDoes Lets you link to specific parts of your app.\r\n *\r\n * See {\\@link RouterLink} for more information.\r\n *\r\n * \\@ngModule RouterModule\r\n *\r\n * \\@stable\r\n */\r\nclass RouterLinkWithHref {\r\n    /**\r\n     * @param {?} router\r\n     * @param {?} route\r\n     * @param {?} locationStrategy\r\n     */\r\n    constructor(router, route, locationStrategy) {\r\n        this.router = router;\r\n        this.route = route;\r\n        this.locationStrategy = locationStrategy;\r\n        this.commands = [];\r\n        this.subscription = router.events.subscribe(s => {\r\n            if (s instanceof NavigationEnd) {\r\n                this.updateTargetUrlAndHref();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} commands\r\n     * @return {?}\r\n     */\r\n    set routerLink(commands) {\r\n        if (commands != null) {\r\n            this.commands = Array.isArray(commands) ? commands : [commands];\r\n        }\r\n        else {\r\n            this.commands = [];\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set preserveQueryParams(value) {\r\n        if (isDevMode() && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\r\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\r\n        }\r\n        this.preserve = value;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) { this.updateTargetUrlAndHref(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this.subscription.unsubscribe(); }\r\n    /**\r\n     * @param {?} button\r\n     * @param {?} ctrlKey\r\n     * @param {?} metaKey\r\n     * @param {?} shiftKey\r\n     * @return {?}\r\n     */\r\n    onClick(button, ctrlKey, metaKey, shiftKey) {\r\n        if (button !== 0 || ctrlKey || metaKey || shiftKey) {\r\n            return true;\r\n        }\r\n        if (typeof this.target === 'string' && this.target != '_self') {\r\n            return true;\r\n        }\r\n        const /** @type {?} */ extras = {\r\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\r\n            replaceUrl: attrBoolValue(this.replaceUrl),\r\n        };\r\n        this.router.navigateByUrl(this.urlTree, extras);\r\n        return false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    updateTargetUrlAndHref() {\r\n        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get urlTree() {\r\n        return this.router.createUrlTree(this.commands, {\r\n            relativeTo: this.route,\r\n            queryParams: this.queryParams,\r\n            fragment: this.fragment,\r\n            preserveQueryParams: attrBoolValue(this.preserve),\r\n            queryParamsHandling: this.queryParamsHandling,\r\n            preserveFragment: attrBoolValue(this.preserveFragment),\r\n        });\r\n    }\r\n}\r\nRouterLinkWithHref.decorators = [\r\n    { type: Directive, args: [{ selector: 'a[routerLink]' },] },\r\n];\r\n/** @nocollapse */\r\nRouterLinkWithHref.ctorParameters = () => [\r\n    { type: Router, },\r\n    { type: ActivatedRoute, },\r\n    { type: LocationStrategy, },\r\n];\r\nRouterLinkWithHref.propDecorators = {\r\n    \"target\": [{ type: HostBinding, args: ['attr.target',] }, { type: Input },],\r\n    \"queryParams\": [{ type: Input },],\r\n    \"fragment\": [{ type: Input },],\r\n    \"queryParamsHandling\": [{ type: Input },],\r\n    \"preserveFragment\": [{ type: Input },],\r\n    \"skipLocationChange\": [{ type: Input },],\r\n    \"replaceUrl\": [{ type: Input },],\r\n    \"href\": [{ type: HostBinding },],\r\n    \"routerLink\": [{ type: Input },],\r\n    \"preserveQueryParams\": [{ type: Input },],\r\n    \"onClick\": [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] },],\r\n};\r\n/**\r\n * @param {?} s\r\n * @return {?}\r\n */\r\nfunction attrBoolValue(s) {\r\n    return s === '' || !!s;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.\r\n *\r\n * \\@howToUse\r\n *\r\n * ```\r\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\r\n * ```\r\n *\r\n * \\@description\r\n *\r\n * The RouterLinkActive directive lets you add a CSS class to an element when the link's route\r\n * becomes active.\r\n *\r\n * Consider the following example:\r\n *\r\n * ```\r\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\r\n * ```\r\n *\r\n * When the url is either '/user' or '/user/bob', the active-link class will\r\n * be added to the `a` tag. If the url changes, the class will be removed.\r\n *\r\n * You can set more than one class, as follows:\r\n *\r\n * ```\r\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\r\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\r\n * ```\r\n *\r\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\r\n * only when the url matches the link exactly.\r\n *\r\n * ```\r\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\r\n * true}\">Bob</a>\r\n * ```\r\n *\r\n * You can assign the RouterLinkActive instance to a template variable and directly check\r\n * the `isActive` status.\r\n * ```\r\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\r\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\r\n * </a>\r\n * ```\r\n *\r\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\r\n *\r\n * ```\r\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\r\n *   <a routerLink=\"/user/jim\">Jim</a>\r\n *   <a routerLink=\"/user/bob\">Bob</a>\r\n * </div>\r\n * ```\r\n *\r\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\r\n * '/user/bob'.\r\n *\r\n * \\@ngModule RouterModule\r\n *\r\n * \\@stable\r\n */\r\nclass RouterLinkActive {\r\n    /**\r\n     * @param {?} router\r\n     * @param {?} element\r\n     * @param {?} renderer\r\n     * @param {?} cdr\r\n     */\r\n    constructor(router, element, renderer, cdr) {\r\n        this.router = router;\r\n        this.element = element;\r\n        this.renderer = renderer;\r\n        this.cdr = cdr;\r\n        this.classes = [];\r\n        this.isActive = false;\r\n        this.routerLinkActiveOptions = { exact: false };\r\n        this.subscription = router.events.subscribe(s => {\r\n            if (s instanceof NavigationEnd) {\r\n                this.update();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        this.links.changes.subscribe(_ => this.update());\r\n        this.linksWithHrefs.changes.subscribe(_ => this.update());\r\n        this.update();\r\n    }\r\n    /**\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    set routerLinkActive(data) {\r\n        const /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');\r\n        this.classes = classes.filter(c => !!c);\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) { this.update(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this.subscription.unsubscribe(); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    update() {\r\n        if (!this.links || !this.linksWithHrefs || !this.router.navigated)\r\n            return;\r\n        Promise.resolve().then(() => {\r\n            const /** @type {?} */ hasActiveLinks = this.hasActiveLinks();\r\n            if (this.isActive !== hasActiveLinks) {\r\n                (/** @type {?} */ (this)).isActive = hasActiveLinks;\r\n                this.classes.forEach((c) => {\r\n                    if (hasActiveLinks) {\r\n                        this.renderer.addClass(this.element.nativeElement, c);\r\n                    }\r\n                    else {\r\n                        this.renderer.removeClass(this.element.nativeElement, c);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} router\r\n     * @return {?}\r\n     */\r\n    isLinkActive(router) {\r\n        return (link) => router.isActive(link.urlTree, this.routerLinkActiveOptions.exact);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hasActiveLinks() {\r\n        return this.links.some(this.isLinkActive(this.router)) ||\r\n            this.linksWithHrefs.some(this.isLinkActive(this.router));\r\n    }\r\n}\r\nRouterLinkActive.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[routerLinkActive]',\r\n                exportAs: 'routerLinkActive',\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nRouterLinkActive.ctorParameters = () => [\r\n    { type: Router, },\r\n    { type: ElementRef, },\r\n    { type: Renderer2, },\r\n    { type: ChangeDetectorRef, },\r\n];\r\nRouterLinkActive.propDecorators = {\r\n    \"links\": [{ type: ContentChildren, args: [RouterLink, { descendants: true },] },],\r\n    \"linksWithHrefs\": [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] },],\r\n    \"routerLinkActiveOptions\": [{ type: Input },],\r\n    \"routerLinkActive\": [{ type: Input },],\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Store contextual information about a {\\@link RouterOutlet}\r\n *\r\n * \\@stable\r\n */\r\nclass OutletContext {\r\n    constructor() {\r\n        this.outlet = null;\r\n        this.route = null;\r\n        this.resolver = null;\r\n        this.children = new ChildrenOutletContexts();\r\n        this.attachRef = null;\r\n    }\r\n}\r\n/**\r\n * Store contextual information about the children (= nested) {\\@link RouterOutlet}\r\n *\r\n * \\@stable\r\n */\r\nclass ChildrenOutletContexts {\r\n    constructor() {\r\n        this.contexts = new Map();\r\n    }\r\n    /**\r\n     * Called when a `RouterOutlet` directive is instantiated\r\n     * @param {?} childName\r\n     * @param {?} outlet\r\n     * @return {?}\r\n     */\r\n    onChildOutletCreated(childName, outlet) {\r\n        const /** @type {?} */ context = this.getOrCreateContext(childName);\r\n        context.outlet = outlet;\r\n        this.contexts.set(childName, context);\r\n    }\r\n    /**\r\n     * Called when a `RouterOutlet` directive is destroyed.\r\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\r\n     * re-created later.\r\n     * @param {?} childName\r\n     * @return {?}\r\n     */\r\n    onChildOutletDestroyed(childName) {\r\n        const /** @type {?} */ context = this.getContext(childName);\r\n        if (context) {\r\n            context.outlet = null;\r\n        }\r\n    }\r\n    /**\r\n     * Called when the corresponding route is deactivated during navigation.\r\n     * Because the component get destroyed, all children outlet are destroyed.\r\n     * @return {?}\r\n     */\r\n    onOutletDeactivated() {\r\n        const /** @type {?} */ contexts = this.contexts;\r\n        this.contexts = new Map();\r\n        return contexts;\r\n    }\r\n    /**\r\n     * @param {?} contexts\r\n     * @return {?}\r\n     */\r\n    onOutletReAttached(contexts) { this.contexts = contexts; }\r\n    /**\r\n     * @param {?} childName\r\n     * @return {?}\r\n     */\r\n    getOrCreateContext(childName) {\r\n        let /** @type {?} */ context = this.getContext(childName);\r\n        if (!context) {\r\n            context = new OutletContext();\r\n            this.contexts.set(childName, context);\r\n        }\r\n        return context;\r\n    }\r\n    /**\r\n     * @param {?} childName\r\n     * @return {?}\r\n     */\r\n    getContext(childName) { return this.contexts.get(childName) || null; }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router\r\n * state.\r\n *\r\n * \\@howToUse\r\n *\r\n * ```\r\n * <router-outlet></router-outlet>\r\n * <router-outlet name='left'></router-outlet>\r\n * <router-outlet name='right'></router-outlet>\r\n * ```\r\n *\r\n * A router outlet will emit an activate event any time a new component is being instantiated,\r\n * and a deactivate event when it is being destroyed.\r\n *\r\n * ```\r\n * <router-outlet\r\n *   (activate)='onActivate($event)'\r\n *   (deactivate)='onDeactivate($event)'></router-outlet>\r\n * ```\r\n * \\@ngModule RouterModule\r\n *\r\n * \\@stable\r\n */\r\nclass RouterOutlet {\r\n    /**\r\n     * @param {?} parentContexts\r\n     * @param {?} location\r\n     * @param {?} resolver\r\n     * @param {?} name\r\n     * @param {?} changeDetector\r\n     */\r\n    constructor(parentContexts, location, resolver, name, changeDetector) {\r\n        this.parentContexts = parentContexts;\r\n        this.location = location;\r\n        this.resolver = resolver;\r\n        this.changeDetector = changeDetector;\r\n        this.activated = null;\r\n        this._activatedRoute = null;\r\n        this.activateEvents = new EventEmitter();\r\n        this.deactivateEvents = new EventEmitter();\r\n        this.name = name || PRIMARY_OUTLET;\r\n        parentContexts.onChildOutletCreated(this.name, this);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this.parentContexts.onChildOutletDestroyed(this.name); }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        if (!this.activated) {\r\n            // If the outlet was not instantiated at the time the route got activated we need to populate\r\n            // the outlet when it is initialized (ie inside a NgIf)\r\n            const /** @type {?} */ context = this.parentContexts.getContext(this.name);\r\n            if (context && context.route) {\r\n                if (context.attachRef) {\r\n                    // `attachRef` is populated when there is an existing component to mount\r\n                    this.attach(context.attachRef, context.route);\r\n                }\r\n                else {\r\n                    // otherwise the component defined in the configuration is created\r\n                    this.activateWith(context.route, context.resolver || null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get isActivated() { return !!this.activated; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get component() {\r\n        if (!this.activated)\r\n            throw new Error('Outlet is not activated');\r\n        return this.activated.instance;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get activatedRoute() {\r\n        if (!this.activated)\r\n            throw new Error('Outlet is not activated');\r\n        return /** @type {?} */ (this._activatedRoute);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get activatedRouteData() {\r\n        if (this._activatedRoute) {\r\n            return this._activatedRoute.snapshot.data;\r\n        }\r\n        return {};\r\n    }\r\n    /**\r\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\r\n     * @return {?}\r\n     */\r\n    detach() {\r\n        if (!this.activated)\r\n            throw new Error('Outlet is not activated');\r\n        this.location.detach();\r\n        const /** @type {?} */ cmp = this.activated;\r\n        this.activated = null;\r\n        this._activatedRoute = null;\r\n        return cmp;\r\n    }\r\n    /**\r\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\r\n     * @param {?} ref\r\n     * @param {?} activatedRoute\r\n     * @return {?}\r\n     */\r\n    attach(ref, activatedRoute) {\r\n        this.activated = ref;\r\n        this._activatedRoute = activatedRoute;\r\n        this.location.insert(ref.hostView);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    deactivate() {\r\n        if (this.activated) {\r\n            const /** @type {?} */ c = this.component;\r\n            this.activated.destroy();\r\n            this.activated = null;\r\n            this._activatedRoute = null;\r\n            this.deactivateEvents.emit(c);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} activatedRoute\r\n     * @param {?} resolver\r\n     * @return {?}\r\n     */\r\n    activateWith(activatedRoute, resolver) {\r\n        if (this.isActivated) {\r\n            throw new Error('Cannot activate an already activated outlet');\r\n        }\r\n        this._activatedRoute = activatedRoute;\r\n        const /** @type {?} */ snapshot = activatedRoute._futureSnapshot;\r\n        const /** @type {?} */ component = /** @type {?} */ (/** @type {?} */ ((snapshot.routeConfig)).component);\r\n        resolver = resolver || this.resolver;\r\n        const /** @type {?} */ factory = resolver.resolveComponentFactory(component);\r\n        const /** @type {?} */ childContexts = this.parentContexts.getOrCreateContext(this.name).children;\r\n        const /** @type {?} */ injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\r\n        this.activated = this.location.createComponent(factory, this.location.length, injector);\r\n        // Calling `markForCheck` to make sure we will run the change detection when the\r\n        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\r\n        this.changeDetector.markForCheck();\r\n        this.activateEvents.emit(this.activated.instance);\r\n    }\r\n}\r\nRouterOutlet.decorators = [\r\n    { type: Directive, args: [{ selector: 'router-outlet', exportAs: 'outlet' },] },\r\n];\r\n/** @nocollapse */\r\nRouterOutlet.ctorParameters = () => [\r\n    { type: ChildrenOutletContexts, },\r\n    { type: ViewContainerRef, },\r\n    { type: ComponentFactoryResolver, },\r\n    { type: undefined, decorators: [{ type: Attribute, args: ['name',] },] },\r\n    { type: ChangeDetectorRef, },\r\n];\r\nRouterOutlet.propDecorators = {\r\n    \"activateEvents\": [{ type: Output, args: ['activate',] },],\r\n    \"deactivateEvents\": [{ type: Output, args: ['deactivate',] },],\r\n};\r\nclass OutletInjector {\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} childContexts\r\n     * @param {?} parent\r\n     */\r\n    constructor(route, childContexts, parent) {\r\n        this.route = route;\r\n        this.childContexts = childContexts;\r\n        this.parent = parent;\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    get(token, notFoundValue) {\r\n        if (token === ActivatedRoute) {\r\n            return this.route;\r\n        }\r\n        if (token === ChildrenOutletContexts) {\r\n            return this.childContexts;\r\n        }\r\n        return this.parent.get(token, notFoundValue);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n*@license\r\n*Copyright Google Inc. All Rights Reserved.\r\n*\r\n*Use of this source code is governed by an MIT-style license that can be\r\n*found in the LICENSE file at https://angular.io/license\r\n*/\r\n/**\r\n * \\@whatItDoes Provides a preloading strategy.\r\n *\r\n * \\@experimental\r\n * @abstract\r\n */\r\nclass PreloadingStrategy {\r\n}\r\n/**\r\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quickly as possible.\r\n *\r\n * \\@howToUse\r\n *\r\n * ```\r\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\r\n * ```\r\n *\r\n * \\@experimental\r\n */\r\nclass PreloadAllModules {\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    preload(route, fn) {\r\n        return _catch.call(fn(), () => of(null));\r\n    }\r\n}\r\n/**\r\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\r\n *\r\n * \\@description\r\n *\r\n * This strategy is enabled by default.\r\n *\r\n * \\@experimental\r\n */\r\nclass NoPreloading {\r\n    /**\r\n     * @param {?} route\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    preload(route, fn) { return of(null); }\r\n}\r\n/**\r\n * The preloader optimistically loads all router configurations to\r\n * make navigations into lazily-loaded sections of the application faster.\r\n *\r\n * The preloader runs in the background. When the router bootstraps, the preloader\r\n * starts listening to all navigation events. After every such event, the preloader\r\n * will check if any configurations can be loaded lazily.\r\n *\r\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\r\n *\r\n * \\@stable\r\n */\r\nclass RouterPreloader {\r\n    /**\r\n     * @param {?} router\r\n     * @param {?} moduleLoader\r\n     * @param {?} compiler\r\n     * @param {?} injector\r\n     * @param {?} preloadingStrategy\r\n     */\r\n    constructor(router, moduleLoader, compiler, injector, preloadingStrategy) {\r\n        this.router = router;\r\n        this.injector = injector;\r\n        this.preloadingStrategy = preloadingStrategy;\r\n        const /** @type {?} */ onStartLoad = (r) => router.triggerEvent(new RouteConfigLoadStart(r));\r\n        const /** @type {?} */ onEndLoad = (r) => router.triggerEvent(new RouteConfigLoadEnd(r));\r\n        this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    setUpPreloading() {\r\n        const /** @type {?} */ navigations$ = filter.call(this.router.events, (e) => e instanceof NavigationEnd);\r\n        this.subscription = concatMap.call(navigations$, () => this.preload()).subscribe(() => { });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    preload() {\r\n        const /** @type {?} */ ngModule = this.injector.get(NgModuleRef);\r\n        return this.processRoutes(ngModule, this.router.config);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() { this.subscription.unsubscribe(); }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} routes\r\n     * @return {?}\r\n     */\r\n    processRoutes(ngModule, routes) {\r\n        const /** @type {?} */ res = [];\r\n        for (const /** @type {?} */ route of routes) {\r\n            // we already have the config loaded, just recurse\r\n            if (route.loadChildren && !route.canLoad && route._loadedConfig) {\r\n                const /** @type {?} */ childConfig = route._loadedConfig;\r\n                res.push(this.processRoutes(childConfig.module, childConfig.routes));\r\n                // no config loaded, fetch the config\r\n            }\r\n            else if (route.loadChildren && !route.canLoad) {\r\n                res.push(this.preloadConfig(ngModule, route));\r\n                // recurse into children\r\n            }\r\n            else if (route.children) {\r\n                res.push(this.processRoutes(ngModule, route.children));\r\n            }\r\n        }\r\n        return mergeAll.call(from(res));\r\n    }\r\n    /**\r\n     * @param {?} ngModule\r\n     * @param {?} route\r\n     * @return {?}\r\n     */\r\n    preloadConfig(ngModule, route) {\r\n        return this.preloadingStrategy.preload(route, () => {\r\n            const /** @type {?} */ loaded$ = this.loader.load(ngModule.injector, route);\r\n            return mergeMap.call(loaded$, (config) => {\r\n                route._loadedConfig = config;\r\n                return this.processRoutes(config.module, config.routes);\r\n            });\r\n        });\r\n    }\r\n}\r\nRouterPreloader.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nRouterPreloader.ctorParameters = () => [\r\n    { type: Router, },\r\n    { type: NgModuleFactoryLoader, },\r\n    { type: Compiler, },\r\n    { type: Injector, },\r\n    { type: PreloadingStrategy, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * \\@whatItDoes Contains a list of directives\r\n * \\@stable\r\n */\r\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];\r\n/**\r\n * \\@whatItDoes Is used in DI to configure the router.\r\n * \\@stable\r\n */\r\nconst ROUTER_CONFIGURATION = new InjectionToken('ROUTER_CONFIGURATION');\r\n/**\r\n * \\@docsNotRequired\r\n */\r\nconst ROUTER_FORROOT_GUARD = new InjectionToken('ROUTER_FORROOT_GUARD');\r\nconst ROUTER_PROVIDERS = [\r\n    Location,\r\n    { provide: UrlSerializer, useClass: DefaultUrlSerializer },\r\n    {\r\n        provide: Router,\r\n        useFactory: setupRouter,\r\n        deps: [\r\n            ApplicationRef, UrlSerializer, ChildrenOutletContexts, Location, Injector,\r\n            NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION,\r\n            [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]\r\n        ]\r\n    },\r\n    ChildrenOutletContexts,\r\n    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\r\n    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },\r\n    RouterPreloader,\r\n    NoPreloading,\r\n    PreloadAllModules,\r\n    { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },\r\n];\r\n/**\r\n * @return {?}\r\n */\r\nfunction routerNgProbeToken() {\r\n    return new NgProbeToken('Router', Router);\r\n}\r\n/**\r\n * \\@whatItDoes Adds router directives and providers.\r\n *\r\n * \\@howToUse\r\n *\r\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\r\n * Since the router deals with a global shared resource--location, we cannot have\r\n * more than one router service active.\r\n *\r\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\r\n * `RouterModule.forChild`.\r\n *\r\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\r\n *   service itself.\r\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\r\n *   include the router service.\r\n *\r\n * When registered at the root, the module should be used as follows\r\n *\r\n * ```\r\n * \\@NgModule({\r\n *   imports: [RouterModule.forRoot(ROUTES)]\r\n * })\r\n * class MyNgModule {}\r\n * ```\r\n *\r\n * For submodules and lazy loaded submodules the module should be used as follows:\r\n *\r\n * ```\r\n * \\@NgModule({\r\n *   imports: [RouterModule.forChild(ROUTES)]\r\n * })\r\n * class MyNgModule {}\r\n * ```\r\n *\r\n * \\@description\r\n *\r\n * Managing state transitions is one of the hardest parts of building applications. This is\r\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\r\n * In addition, we often want to split applications into multiple bundles and load them on demand.\r\n * Doing this transparently is not trivial.\r\n *\r\n * The Angular router solves these problems. Using the router, you can declaratively specify\r\n * application states, manage state transitions while taking care of the URL, and load bundles on\r\n * demand.\r\n *\r\n * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an\r\n * overview of how the router should be used.\r\n *\r\n * \\@stable\r\n */\r\nclass RouterModule {\r\n    /**\r\n     * @param {?} guard\r\n     * @param {?} router\r\n     */\r\n    constructor(guard, router) { }\r\n    /**\r\n     * Creates a module with all the router providers and directives. It also optionally sets up an\r\n     * application listener to perform an initial navigation.\r\n     *\r\n     * Options (see {\\@link ExtraOptions}):\r\n     * * `enableTracing` makes the router log all its internal events to the console.\r\n     * * `useHash` enables the location strategy that uses the URL fragment instead of the history\r\n     * API.\r\n     * * `initialNavigation` disables the initial navigation.\r\n     * * `errorHandler` provides a custom error handler.\r\n     * * `preloadingStrategy` configures a preloading strategy (see {\\@link PreloadAllModules}).\r\n     * * `onSameUrlNavigation` configures how the router handles navigation to the current URL. See\r\n     * {\\@link ExtraOptions} for more details.\r\n     * @param {?} routes\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    static forRoot(routes, config) {\r\n        return {\r\n            ngModule: RouterModule,\r\n            providers: [\r\n                ROUTER_PROVIDERS,\r\n                provideRoutes(routes),\r\n                {\r\n                    provide: ROUTER_FORROOT_GUARD,\r\n                    useFactory: provideForRootGuard,\r\n                    deps: [[Router, new Optional(), new SkipSelf()]]\r\n                },\r\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\r\n                {\r\n                    provide: LocationStrategy,\r\n                    useFactory: provideLocationStrategy,\r\n                    deps: [\r\n                        PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\r\n                    ]\r\n                },\r\n                {\r\n                    provide: PreloadingStrategy,\r\n                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\r\n                        NoPreloading\r\n                },\r\n                { provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken },\r\n                provideRouterInitializer(),\r\n            ],\r\n        };\r\n    }\r\n    /**\r\n     * Creates a module with all the router directives and a provider registering routes.\r\n     * @param {?} routes\r\n     * @return {?}\r\n     */\r\n    static forChild(routes) {\r\n        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };\r\n    }\r\n}\r\nRouterModule.decorators = [\r\n    { type: NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },\r\n];\r\n/** @nocollapse */\r\nRouterModule.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD,] },] },\r\n    { type: Router, decorators: [{ type: Optional },] },\r\n];\r\n/**\r\n * @param {?} platformLocationStrategy\r\n * @param {?} baseHref\r\n * @param {?=} options\r\n * @return {?}\r\n */\r\nfunction provideLocationStrategy(platformLocationStrategy, baseHref, options = {}) {\r\n    return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\r\n        new PathLocationStrategy(platformLocationStrategy, baseHref);\r\n}\r\n/**\r\n * @param {?} router\r\n * @return {?}\r\n */\r\nfunction provideForRootGuard(router) {\r\n    if (router) {\r\n        throw new Error(`RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\r\n    }\r\n    return 'guarded';\r\n}\r\n/**\r\n * \\@whatItDoes Registers routes.\r\n *\r\n * \\@howToUse\r\n *\r\n * ```\r\n * \\@NgModule({\r\n *   imports: [RouterModule.forChild(ROUTES)],\r\n *   providers: [provideRoutes(EXTRA_ROUTES)]\r\n * })\r\n * class MyNgModule {}\r\n * ```\r\n *\r\n * \\@stable\r\n * @param {?} routes\r\n * @return {?}\r\n */\r\nfunction provideRoutes(routes) {\r\n    return [\r\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },\r\n        { provide: ROUTES, multi: true, useValue: routes },\r\n    ];\r\n}\r\n/**\r\n * \\@whatItDoes Represents options to configure the router.\r\n *\r\n * \\@stable\r\n * @record\r\n */\r\n\r\n/**\r\n * @param {?} ref\r\n * @param {?} urlSerializer\r\n * @param {?} contexts\r\n * @param {?} location\r\n * @param {?} injector\r\n * @param {?} loader\r\n * @param {?} compiler\r\n * @param {?} config\r\n * @param {?=} opts\r\n * @param {?=} urlHandlingStrategy\r\n * @param {?=} routeReuseStrategy\r\n * @return {?}\r\n */\r\nfunction setupRouter(ref, urlSerializer, contexts, location, injector, loader, compiler, config, opts = {}, urlHandlingStrategy, routeReuseStrategy) {\r\n    const /** @type {?} */ router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\r\n    if (urlHandlingStrategy) {\r\n        router.urlHandlingStrategy = urlHandlingStrategy;\r\n    }\r\n    if (routeReuseStrategy) {\r\n        router.routeReuseStrategy = routeReuseStrategy;\r\n    }\r\n    if (opts.errorHandler) {\r\n        router.errorHandler = opts.errorHandler;\r\n    }\r\n    if (opts.enableTracing) {\r\n        const /** @type {?} */ dom = ɵgetDOM();\r\n        router.events.subscribe(e => {\r\n            dom.logGroup(`Router Event: ${((/** @type {?} */ (e.constructor))).name}`);\r\n            dom.log(e.toString());\r\n            dom.log(e);\r\n            dom.logGroupEnd();\r\n        });\r\n    }\r\n    if (opts.onSameUrlNavigation) {\r\n        router.onSameUrlNavigation = opts.onSameUrlNavigation;\r\n    }\r\n    return router;\r\n}\r\n/**\r\n * @param {?} router\r\n * @return {?}\r\n */\r\nfunction rootRoute(router) {\r\n    return router.routerState.root;\r\n}\r\n/**\r\n * To initialize the router properly we need to do in two steps:\r\n *\r\n * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if\r\n * a resolver or a guards executes asynchronously. Second, we need to actually run\r\n * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation\r\n * hook provided by the router to do that.\r\n *\r\n * The router navigation starts, reaches the point when preactivation is done, and then\r\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\r\n */\r\nclass RouterInitializer {\r\n    /**\r\n     * @param {?} injector\r\n     */\r\n    constructor(injector) {\r\n        this.injector = injector;\r\n        this.initNavigation = false;\r\n        this.resultOfPreactivationDone = new Subject();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    appInitializer() {\r\n        const /** @type {?} */ p = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\r\n        return p.then(() => {\r\n            let /** @type {?} */ resolve = /** @type {?} */ ((null));\r\n            const /** @type {?} */ res = new Promise(r => resolve = r);\r\n            const /** @type {?} */ router = this.injector.get(Router);\r\n            const /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);\r\n            if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {\r\n                resolve(true);\r\n            }\r\n            else if (opts.initialNavigation === 'disabled') {\r\n                router.setUpLocationChangeListener();\r\n                resolve(true);\r\n            }\r\n            else if (opts.initialNavigation === 'enabled') {\r\n                router.hooks.afterPreactivation = () => {\r\n                    // only the initial navigation should be delayed\r\n                    if (!this.initNavigation) {\r\n                        this.initNavigation = true;\r\n                        resolve(true);\r\n                        return this.resultOfPreactivationDone;\r\n                        // subsequent navigations should not be delayed\r\n                    }\r\n                    else {\r\n                        return /** @type {?} */ (of(null));\r\n                    }\r\n                };\r\n                router.initialNavigation();\r\n            }\r\n            else {\r\n                throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);\r\n            }\r\n            return res;\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} bootstrappedComponentRef\r\n     * @return {?}\r\n     */\r\n    bootstrapListener(bootstrappedComponentRef) {\r\n        const /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);\r\n        const /** @type {?} */ preloader = this.injector.get(RouterPreloader);\r\n        const /** @type {?} */ router = this.injector.get(Router);\r\n        const /** @type {?} */ ref = this.injector.get(ApplicationRef);\r\n        if (bootstrappedComponentRef !== ref.components[0]) {\r\n            return;\r\n        }\r\n        if (this.isLegacyEnabled(opts)) {\r\n            router.initialNavigation();\r\n        }\r\n        else if (this.isLegacyDisabled(opts)) {\r\n            router.setUpLocationChangeListener();\r\n        }\r\n        preloader.setUpPreloading();\r\n        router.resetRootComponentType(ref.componentTypes[0]);\r\n        this.resultOfPreactivationDone.next(/** @type {?} */ ((null)));\r\n        this.resultOfPreactivationDone.complete();\r\n    }\r\n    /**\r\n     * @param {?} opts\r\n     * @return {?}\r\n     */\r\n    isLegacyEnabled(opts) {\r\n        return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\r\n            opts.initialNavigation === undefined;\r\n    }\r\n    /**\r\n     * @param {?} opts\r\n     * @return {?}\r\n     */\r\n    isLegacyDisabled(opts) {\r\n        return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\r\n    }\r\n}\r\nRouterInitializer.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nRouterInitializer.ctorParameters = () => [\r\n    { type: Injector, },\r\n];\r\n/**\r\n * @param {?} r\r\n * @return {?}\r\n */\r\nfunction getAppInitializer(r) {\r\n    return r.appInitializer.bind(r);\r\n}\r\n/**\r\n * @param {?} r\r\n * @return {?}\r\n */\r\nfunction getBootstrapListener(r) {\r\n    return r.bootstrapListener.bind(r);\r\n}\r\n/**\r\n * A token for the router initializer that will be called after the app is bootstrapped.\r\n *\r\n * \\@experimental\r\n */\r\nconst ROUTER_INITIALIZER = new InjectionToken('Router Initializer');\r\n/**\r\n * @return {?}\r\n */\r\nfunction provideRouterInitializer() {\r\n    return [\r\n        RouterInitializer,\r\n        {\r\n            provide: APP_INITIALIZER,\r\n            multi: true,\r\n            useFactory: getAppInitializer,\r\n            deps: [RouterInitializer]\r\n        },\r\n        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },\r\n        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\r\n    ];\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of the common package.\r\n */\r\n/**\r\n * \\@stable\r\n */\r\nconst VERSION = new Version('5.1.3');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * @module\r\n * @description\r\n * Entry point for all public APIs of this package.\r\n */\r\n\r\n// This file only reexports content of the `src` folder. Keep it that way.\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { RouterLink, RouterLinkWithHref, RouterLinkActive, RouterOutlet, ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouterEvent, RoutesRecognized, RouteReuseStrategy, Router, ROUTES, ROUTER_CONFIGURATION, ROUTER_INITIALIZER, RouterModule, provideRoutes, ChildrenOutletContexts, OutletContext, NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader, ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot, PRIMARY_OUTLET, convertToParamMap, UrlHandlingStrategy, DefaultUrlSerializer, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, VERSION, ROUTER_PROVIDERS as ɵROUTER_PROVIDERS, flatten as ɵflatten, ROUTER_FORROOT_GUARD as ɵa, RouterInitializer as ɵg, getAppInitializer as ɵh, getBootstrapListener as ɵi, provideForRootGuard as ɵd, provideLocationStrategy as ɵc, provideRouterInitializer as ɵj, rootRoute as ɵf, routerNgProbeToken as ɵb, setupRouter as ɵe, Tree as ɵk, TreeNode as ɵl };\r\n//# sourceMappingURL=router.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/Cody/Documents/Code/angular-boilerplate/Angular5-WebCore2-Boilerplate/GlobalBlueprint/src/node_modules/@angular/router/esm2015/router.js\n// module id = ../../../router/esm2015/router.js\n// module chunks = vendor"],"sourceRoot":"webpack:///"}